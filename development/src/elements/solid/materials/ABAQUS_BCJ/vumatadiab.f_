c23456789012345678901234567890123456789012345678901234567890123456789012 
c revision a  2000/12/6  correct problems 
c              jlathrop 
c 
c Revision 4.0 1995/03/10 in progress kistler 
c modified to interface with abaqus explicit v. 5.4 
c 
c Revision 3.0 1995/03/09 jlathrop 
c modified code to interface with jas3d or pronto3d 
c 
c $Id: vumatadiab.f_,v 1.1 2003/09/06 07:09:42 paklein Exp $ 
c $Log: vumatadiab.f_,v $
c Revision 1.1  2003/09/06 07:09:42  paklein
c moved ABAQUS BCJ materials to the development module
c
c Revision 1.1  2001/07/18 21:29:45  paklein
c initial check in of ABAQUS/Explicit VUMAT interface
c 
c 
c Revision 2.5  1993/05/07  17:06:57  fjmello 
c corrected typo in variable types Scalar 
c 
c Revision 2.4  1992/10/15  18:39:46  mwheins 
c fixed status error in mat19 
c 
c Revision 2.3  1992/08/19  22:32:26  swattaw 
c fixed problem with status 
c 
c Revision 2.2  1992/07/31  15:15:56  swattaw 
c added status to sandia damage model 
c 
c Revision 2.1  1992/07/28  17:03:55  swattaw 
c added comments to sandia damage model 
c 
c Revision 2.0  1992/05/01  19:18:59  swattaw 
c added self-contact 
c 
c Revision 1.2  1992/02/19  15:28:39  swattaw 
c new version from snll 
c 
c Revision 1.1  1991/12/23  19:56:36  swattaw 
c Initial revision 
c 
      SUBROUTINE VUMAT(  
c read only abaqus variables 
     1 NBLOCK, NDIR, NSHR, NSTATEV, nfieldv, NPROPS, lanneal, 
     2 steptime, totaltime, DT, CMNAME, coordMp, charLength, 
     3 PROPS, DENSITY, StrainInc, relSpinInc, 
     4 TEMPOLD, stretchOld, defgradOld, fieldOld, 
     5 SIGOLD, SVOLD, enerInternOLD, enerInelasOld, 
c write only (modifiable) variables 
     6 TEMPNEW, stretchNew, defgradNew, fieldNew, 
     7 SIG, SV, enerInternNew, enerInelasNew) 
C 
C----------------------------------------------------------------------- 
C            january 1995 version 
C     DESCRIPTION: SANDIA DAMAGE MODEL 
C                  (Bammann - Chiesa  Model) 
C 
C     FORMAL PARAMETERS:  
C       NBLOCK   INTEGER   Number of elements in this block 
C       NSTATEV  INTEGER   Number of internal state variables 
C       DT       REAL      Time step 
C       PROPS    REAL      Material properties 
C                          (1) = Youngs modulus 
C                          (2) = Poissons ratio 
C                          (3) = Initial temperature 
C			   (4) = Thermal expansion coeff 
C			   (5) = Heat coeff ( 1/ rho*Cv ) 
C			   (6) = c1 - V const 
C                          (7) = c2 - V temp 
C			   (8) = c3 - Y const 
C			   (9) = c4 - Y temp 
C			   (10) = c5 - f const 
C			   (11) = c6 - f temp 
C			   (12) = c7 - rd const 
C			   (13) = c8 - rd temp 
C			   (14) = c9 - h constant 
C			   (15) = c10 - h temp 
C			   (16) = c11 - rs constant 
C			   (17) = c12 - rs temp 
C			   (18) = c13 - Rd constant 
C			   (19) = c14 - Rd temp 
C			   (20) = c15 - H constant 
C	 		   (21) = c16 - H temp 
C			   (22) = c17 - Rs constant 
C			   (23) = c18 - Rs temp 
C                          (24) = c19 -   adjustment to Y 
C                          (25) = c20 -   adjustment to Y 
C                          (26) = c21 -   adjustment to Y 
C                          (27) = casb - for adiabatic temp evolution  
C			   (28) = damage constant n 
C                          (29) = initial damage value 
C       SIGOLD REAL        OLD Stresses 
C       SIG    REAL        NEW Stresses 
C       D      REAL        Strain (increment tensor at ea point) --div. by DT 
c						to get strain rate D 
C       SVOLD  REAL        Internal state variables:  (SV is NEW VALUES) 
C                          (*,1) = backstress tensor, Axx 
C                          (*,2) = backstress tensor, Ayy 
C                          (*,3) = backstress tensor, Azz 
C                          (*,4) = backstress tensor, Axy 
C                          (*,5) = backstress tensor, Ayz 
C                          (*,6) = backstress tensor, Axz 
C                          (*,7) = hardening scalar 
C                          (*,8) = temperature 
C                          (*,9) = equivalent plastic strain rate 
C                          (*,10) = damage term 
C                          (*,11) = rate of change of damage term 
C                          (*,12) = equivalent plastic strain 
C                          (*,13) = Total damage (to retain consistency with the shell version) 
C                        The following are used by JAS only 
C                          (*,14) = Youngs Modulus at start of step (jas only ) 
C                          (*,15) = Youngs Modulus at end of step        " 
C                          (*,16) = Poisson's Ratio at start of step     " 
C                          (*,17) = Poisson's Ratio at end of step       " 
C			 The following is used by ABAQUS EXPLICIT 
C			   (*,18) = failure flag (0=failed, 1=not) 
C 
C 
C----------------------------------------------------------------------- 
C 
c ******************************************************************* 
c 
      include 'vaba_param.inc' 
c 
      parameter (pzero=0.,pone=1.,ptwo=2.) 
      parameter (phalf=0.5) 
      parameter (third=1./3.) 
      parameter (twothrd=2./3.) 
      parameter (root23=.8164965809) 
      parameter (root2=1.414213562) 
      parameter (rooto2=.7071067812) 
      parameter (NBLOCK2=256) 
c - for TAHOE only do one integration point at a time
c - so replace NBLOCK with NBLOCK1
      parameter (NBLOCK1=1) 
c 
      DIMENSION PROPS(NPROPS),DENSITY(*),COORDMP(*), 
     * CHARLENGTH(*),D(NBLOCK1,6), 
     * RELSPININC(*),TEMPOLD(NBLOCK), 
     * STRETCHOLD(*),DEFGRADOLD(*), 
     * FIELDOLD(*),SIGOLD(NBLOCK,6), 
     * SVOLD(NBLOCK,NSTATEV),ENERINTERNOLD(*), 
     * ENERINELASOLD(*),TEMPNEW(NBLOCK), 
     * STRETCHNEW(*),DEFGRADNEW(*), 
     * FIELDNEW(*), 
     * SIG(NBLOCK,NDIR+NSHR),SV(NBLOCK,NSTATEV), 
     * ENERINTERNNEW(*),ENERINELASNEW(*) 
C 
      DIMENSION YTHETA(NBLOCK2),VTHETA(NBLOCK2),FTHETA(NBLOCK2), 
     *          RD1(NBLOCK2),RD2(NBLOCK2),H1(NBLOCK2),H2(NBLOCK2), 
     *          RS1(NBLOCK2),RS2(NBLOCK2) 
     *		,StrainInc(NBLOCK,6) 
c 
      CHARACTER*8 CMNAME 
c 
        ARCSINH(X) = LOG( X + SQRT(X*X+1.0) ) 
	ndirnshr=ndir+nshr 
          PROPS28=2*(2*PROPS(28)-1)/(2*PROPS(28)+1) 
c 
c initialize sv 
c 
c	write(*,987) 
c987	format('before start') 
	do 1 ie=1,nblock 
	do 2 isv=1,nstatev 
		sv(ie,isv)=svold(ie,isv) 
 2	continue 
	if(totaltime.le.dt.and.steptime.le.dt) then 
		sv(ie,18)=1.0 
		sv(ie,8)=props(3) 
		sv(ie,10)=props(29) 
		sv(ie,14)=props(1) 
		sv(ie,15)=props(1) 
		sv(ie,16)=props(2) 
		sv(ie,17)=props(2) 
		if(sv(ie,1).ne.0.0) stop 
		if(sv(ie,2).ne.0.0) stop 
		if(sv(ie,3).ne.0.0) stop 
		if(sv(ie,4).ne.0.0) stop 
		if(sv(ie,5).ne.0.0) stop 
		if(sv(ie,6).ne.0.0) stop 
	do 3 isv=1,ndirnshr 
		if(sigold(ie,isv).ne.0.0) stop 
 3	continue 
	endif 
	do 333 isv=1,ndirnshr 
		D(ie,isv)=StrainInc(ie,isv)/DT 
 333	continue 
 1	continue 
C	 
C***pppp   the  following 7 lines for nontemp. dep. young's & poisson's 
c	write(*,991) 
c991	format('before ym definition') 
        IQCM = 0 
 	YM     = PROPS(1) 
	PR     = PROPS(2) 
	SHEAR   = YM / (1.+PR) 
	BULK   =  YM / (3.*(1.-2.*PR)) 
        SRATIO = 1.0 
        BRATIO = 1.0 
C***jjjj  the following 14 lines for jas3d modified for abaexp 
c	write(*,982) 
c982	format('before precalculated') 
      IF (PROPS(3).EQ. 0.0) THEN  
C    PRECALCULATED MATERIAL PARAMETERS 
         DO 5 IE=1,NBLOCK 
            VTHETA(IE) = PROPS(6) 
            YTHETA(IE) = PROPS(8) 
            FTHETA(IE) = PROPS(10) 
            RD1(IE)    = PROPS(12) 
            H1(IE)     = PROPS(14) 
            RS1(IE)    = PROPS(16) 
            RD2(IE)    = PROPS(18) 
            H2(IE)     = PROPS(20) 
            RS2(IE)    = PROPS(22) 
 5       CONTINUE 
      ELSE 
c	write(*,983) 
c983	format('afterprecalculated') 
c 
c	write(*,994) 
c994	format('before do 10 definition') 
       DO 10 IE= 1, NBLOCK 
	if (sv(ie,18).lt.0.01) goto 10 
C***  TEMPERATURE 
         THETA = SV(IE,8) 
	IF(THETA.EQ.0.0) stop 
c 
C***  temperatured dependent parameters 
C***       yield 
          VTHETA(IE) = PROPS(6) * EXP(-PROPS(7)/THETA) 
C          YTHETA(IE) = PROPS(8) * EXP( PROPS(9)/THETA) 
          YTHETA(IE) = PROPS(8) / ( EXP(-PROPS(9)/THETA) + PROPS(26) ) 
          FTHETA(IE) = PROPS(10)* EXP(-PROPS(11)/THETA) 
C****       kinematic hardening 
          RD1(IE)    = PROPS(12)* EXP(-PROPS(13)/THETA) 
          H1(IE)     = PROPS(14) - THETA * PROPS(15) 
          RS1 (IE)   = PROPS(16)* EXP(-PROPS(17)/THETA) 
C****       isotropic hardening 
          RD2(IE)    = PROPS(18)* EXP(-PROPS(19)/THETA) 
          H2(IE)     = PROPS(20) - THETA * PROPS(21) 
          RS2(IE)    = PROPS(22)* EXP(-PROPS(23)/THETA) 
C****       adjustment to y (if used) 
          ADJ=1.0 
          IF (PROPS(24) .GT. 0.0) ADJ =.5*(1.+ TANH(PROPS(24)* 
     *                       MAX(0.,PROPS(25) - THETA))) 
          YTHETA(IE) = ADJ * YTHETA(IE) 
C****       adjustment to y (if used) 
c         ADJ=1.0 
c         IF (PROPS(24) .GT. 0.0) ADJ =0.5*(1.+ TANH(PROPS(24)* 
c    *                       MAX(0.,PROPS(25) - THETA))) 
c         YTHETA(IE) = ADJ * YTHETA(IE) 
 10    CONTINUE 
C***jjjj  this line for jas3d 
      ENDIF 
c 
       DO 20 IE=1,NBLOCK 
	if (sv(ie,18).lt.0.01) goto 20 
c 
C***jjjj   the following 8 lines for temperature dep. poisson & young's 
c        YM = SV(IE,15) 
c        PR = SV(IE,17) 
c        SHEAR = YM / ( 1. + PR) 
c        BULK = YM / (3. * (1. -2.*PR)) 
c        SHEAR0 = SV(IE,14)/ (1. + SV(IE,16)) 
c        SRATIO = SHEAR/SHEAR0 
c        BULK0 = SV(IE,14)/(3. *(1. - 2.*SV(IE,16))) 
c        BRATIO = BULK/BULK0 
C volumetric strain 
	  DAVG = THIRD * (  D(IE,1) +   D(IE,2) +   D(IE,3)) 
c 
C strain rate mag 
        DDD =  SV(IE,9) 
c	DDD = ROOT23 * SQRT((D(IE,1)-DAVG)**2 + 
c     *                      (D(IE,2)-DAVG)**2 + 
c     *                      (D(IE,3)-DAVG)**2 +  
c     1         .5 * (D(IE,4)**2 + D(IE,5)**2 + D(IE,6)**2) ) 
cc     2		/DT 
c 
C back stress mag 
        ALPMAG = ROOT23 * SQRT(  
     *               SV(IE,1)**2 + SV(IE,2)**2 + SV(IE,3)**2 + 
     1         2. * (SV(IE,4)**2 + SV(IE,5)**2 + SV(IE,6)**2) ) 
c 
C  recovery terms 
 	  STO  = DT * (RD1(IE) * DDD + RS1(IE)) * ALPMAG 
          STO = MIN(1.0,STO) 
C	  STO2 = DT * (RD2(IE) * DDD + RS2(IE)) * ABS(SV(IE,7)) 
	  STO2 = DT * (RD2(IE) * DDD + RS2(IE) * ABS(SV(IE,7)) ) 
          STO2 = MIN(1.0,STO2) 
C backstress 
	  SV(IE,1) = SV(IE,1) - STO * SV(IE,1) 
	  SV(IE,2) = SV(IE,2) - STO * SV(IE,2) 
	  SV(IE,3) = SV(IE,3) - STO * SV(IE,3) 
	  SV(IE,4) = SV(IE,4) - STO * SV(IE,4) 
	  SV(IE,5) = SV(IE,5) - STO * SV(IE,5) 
	  SV(IE,6) = SV(IE,6) - STO * SV(IE,6) 
c 
C scalar hardening 
          SKAPPAN = SV(IE,7) 
	  SV(IE,7) = SV(IE,7) - STO2 * SV(IE,7) 
C damage	   
	  PHI1 = 1.0 - SV(IE,10) 
          PHI2 = 1.0 - MIN( 1.0, DT*SV(IE,11)/PHI1 ) 
c 
C yield strength 
	  IF(FTHETA(IE).EQ.0.0) FTHETA(IE) = 1.D-5 
    	  AK = PHI1 * ( VTHETA(IE) * ARCSINH(DDD/FTHETA(IE)) + 
     1         YTHETA(IE) + SV(IE,7) ) 
c   	  AK = PHI1 * ( VTHETA(IE) *   
c    1            alog((ddd+sqrt(ddd**2.+ftheta**2.))/ftheta) + 
c	write(*,984)ddd,ytheta(ie),sv(ie,7) 
c984	format('VARIABLES...',4E15.5) 
c 
C old pressure 
	  POLD = THIRD * (SIGOLD(IE,1) + SIGOLD(IE,2) + SIGOLD(IE,3)) 
c 
C  new pressure 
c	  PRESS = BRATIO*POLD * PHI2 + PHI1 * BULK * 3. * DAVG 
	  PRESS = BRATIO*POLD * PHI2 + DT*PHI1 * BULK * 3. * DAVG 
c 
C predicted deviatoric part of the stress  (eq 11) 
	  SIG(IE,1) = SRATIO*PHI2*(SIGOLD(IE,1)-POLD) + 
     *                PHI1*DT*SHEAR*(D(IE,1)-DAVG) 
c    *                PHI1*SHEAR*(D(IE,1)-DAVG) 
	  SIG(IE,2) = SRATIO*PHI2*(SIGOLD(IE,2)-POLD) + 
     *                PHI1*DT*SHEAR*(D(IE,2)-DAVG) 
c    *                PHI1*SHEAR*(D(IE,2)-DAVG) 
	  SIG(IE,3) = SRATIO*PHI2*(SIGOLD(IE,3)-POLD) + 
     *                PHI1*DT*SHEAR*(D(IE,3)-DAVG) 
c    *                PHI1*SHEAR*(D(IE,3)-DAVG) 
	  SIG(IE,4) = SRATIO*PHI2*SIGOLD(IE,4) + PHI1*DT*SHEAR* D(IE,4) 
     *                                           /2. 
   	  SIG(IE,5) = SRATIO*PHI2*SIGOLD(IE,5) + PHI1*DT*SHEAR* D(IE,5) 
     *                                           /2. 
	  SIG(IE,6) = SRATIO*PHI2*SIGOLD(IE,6) + PHI1*DT*SHEAR* D(IE,6) 
     *                                           /2. 
c	  SIG(IE,4) = SRATIO*PHI2*SIGOLD(IE,4) + PHI1*SHEAR* D(IE,4) 
c   	  SIG(IE,5) = SRATIO*PHI2*SIGOLD(IE,5) + PHI1*SHEAR* D(IE,5) 
c	  SIG(IE,6) = SRATIO*PHI2*SIGOLD(IE,6) + PHI1*SHEAR* D(IE,6) 
c 
C equivalent stress (eq 12)  (sig-2/3 alpha) 
	  XI11 = SIG(IE,1) - TWOTHRD * SV(IE,1) 
	  XI22 = SIG(IE,2) - TWOTHRD * SV(IE,2) 
	  XI33 = SIG(IE,3) - TWOTHRD * SV(IE,3) 
	  XI12 = SIG(IE,4) - TWOTHRD * SV(IE,4) 
	  XI23 = SIG(IE,5) - TWOTHRD * SV(IE,5) 
	  XI31 = SIG(IE,6) - TWOTHRD * SV(IE,6) 
c 
C equivalent stress magnitude 
	  XIMAG2 =     XI11**2 + XI22**2 + XI33**2  
     *           + 2.*(XI12**2 + XI23**2 + XI31**2) 
c 
C check elastic assumption 
	  AK2 = XIMAG2 - TWOTHRD * AK*AK 
c	 
C  scle = 0 for elastic,  1 for plastic  
	  SCLE = .5 + SIGN(.5D0,AK2) 
C  adjust so we dont divide by zero if there is no stress 
	  XIMAG = SQRT(XIMAG2) + 1. - SCLE 
          DDD =   DDD + 1. -SCLE 
c  if plastic, calculate correction to the Integral of Plastic strain 
c 
	  GAMMA = SCLE *(XIMAG-ROOT23*AK)/ (PHI1*SHEAR+TWOTHRD* 
     *            (H1(IE)+H2(IE)*PHI1)) 
c	write(*,993)PHI1,ROOT,SCLE,GAMMA 
c993	format('after PRESS def',4e15.5) 
	  DGAM2 = GAMMA/XIMAG 
	  DSIG = PHI1 * SHEAR * GAMMA / XIMAG 
C correction to stress (eq 16) 
	  SIG(IE,1) = SIG(IE,1) - DSIG*XI11 + PRESS 
	  SIG(IE,2) = SIG(IE,2) - DSIG*XI22 + PRESS 
	  SIG(IE,3) = SIG(IE,3) - DSIG*XI33 + PRESS 
	  SIG(IE,4) = SIG(IE,4) - DSIG*XI12 
	  SIG(IE,5) = SIG(IE,5) - DSIG*XI23 
	  SIG(IE,6) = SIG(IE,6) - DSIG*XI31 
C update scalar hardening and backstress	  
	  SV(IE,7) = SV(IE,7) + GAMMA * ROOT23 * H2(IE) 
c 
	  DALPH = H1(IE)*DGAM2 
	  SV(IE,1) = SV(IE,1) + DALPH * XI11 
	  SV(IE,2) = SV(IE,2) + DALPH * XI22 
	  SV(IE,3) = SV(IE,3) + DALPH * XI33 
	  SV(IE,4) = SV(IE,4) + DALPH * XI12 
	  SV(IE,5) = SV(IE,5) + DALPH * XI23 
	  SV(IE,6) = SV(IE,6) + DALPH * XI31 
c 
C   plastic strain rate 
	  EPSDOT = GAMMA * ROOT23/DT 
          SV(IE,9) = EPSDOT 
c   and save equivalent plastic strain 
          SV(IE,12)=SV(IE,12) + GAMMA * ROOT23 
C vonmises stress 
	  SIGE = MAX( 1.E-15, SQRT( THIRD * ( 
     *           (SIG(IE,1)-SIG(IE,2))**2 + 
     *           (SIG(IE,2)-SIG(IE,3))**2 + 
     *           (SIG(IE,3)-SIG(IE,1))**2)+ 
     *            2.*(SIG(IE,4)**2+ 
     *                SIG(IE,5)**2+ 
     *                SIG(IE,6)**2))) 
c	write(*,992) 
c992	format('before damage definition') 
C damage calculation 
c  bounds of 0. and 15. below are unitless and merely 
c  avoid potential numerical problems when there should not 
c  be any damage 
c	  ARG = MIN( 15., PRESS*PROPS28/SIGE) 
c JFL use yield strength if press/sige ratio too big 
          if(press/sige .lt. 3.0)then 
             arg=min(15., press*props28/sige) 
          else  
             arg=min(15., press*props28/ytheta(ie)) 
          endif 
	  BETA = SINH( MAX(0., ARG) ) 
C  
	  C90 = 1. + PROPS(28) 
	  PSI = MIN(15., BETA*DT*EPSDOT*C90 ) 
	  TMP = MAX( 0., (1.0+(PHI1**C90-1.0)*EXP(PSI)) ) 
C damage (eq 18) bounded away from 1 - could use .9999 if desired 
c                however this is adequate since damage greater than 
c                .6 usually goes to 1 (or .99) in one step 
 	  SV(IE,10) = MIN( (1.0-TMP**(1./C90)), .99) 
c    and also store in total damage 
          SV(IE,13)= SV(IE,10) 
c 
cabaqus - failure state variable- 1==not failed, 0==failed 
C         where 0.01 below relates to 0.99 above to equal 1.0 
c 
          SV(IE,18)=FLOAT(1-INT(SV(IE,10)+0.0101)) 
C rate of damage (eq 7) 
	  SV(IE,11) = BETA*EPSDOT *  
     *      ( 1. / (1.-SV(IE,10))**PROPS(28)-(1.-SV(IE,10) ) ) 
c 
C update the temp based on plastic work	   
c	  SV(IE,8) = SV(IE,8) +  
c     *    PROPS(5) * DGAM2 * 
c     *   (SIG(IE,1)*XI11 + SIG(IE,2)*XI22 + SIG(IE,3)*XI33 +  
c     * 2.*(SIG(IE,4)*XI12 + SIG(IE,5)*XI23 + SIG(IE,6)*XI31) ) 
c 
C         CONSTNU=(PONE+PR)/8.0D0 
         IF (PROPS(27).LT.1.0D-8) THEN 
          PROPS(5)=PZERO 
          CONSTNU=PONE 
         ELSE 
          CONSTNU=PROPS(27) 
         ENDIF 
          SV(IE,8) = SV(IE,8) +  
     *            PROPS(5) * ( DGAM2 * 
     *           (SIG(IE,1)*XI11 + SIG(IE,2)*XI22 + SIG(IE,3)*XI33 +  
     *        PTWO*(SIG(IE,4)*XI12 + SIG(IE,5)*XI23 + SIG(IE,6)*XI31) ) 
     *       - (PONE/(SHEAR*CONSTNU))*PHALF*(SV(IE,7)**2 - SKAPPAN**2) ) 
c 
   20	CONTINUE 
c	 
      RETURN   
      END   
c 
