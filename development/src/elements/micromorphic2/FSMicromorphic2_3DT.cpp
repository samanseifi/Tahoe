#include "FSMicromorphic2_3DT.h"

#include "OutputSetT.h"
#include "ParameterContainerT.h"
#include "CommunicatorT.h"
#include <cmath>

using namespace Tahoe;

/* constructor */

FSMicromorphic2_3DT::FSMicromorphic2_3DT(const ElementSupportT& support):
    ElementBaseT(support), //pass the solid displacement field to the base class
    u(LocalArrayT::kDisp),
    u_dot(LocalArrayT::kVel),
    u_dot_n(LocalArrayT::kLastVel),
    u_dotdot(LocalArrayT::kAcc),
    u_dotdot_n(LocalArrayT::kLastAcc),
    u_n(LocalArrayT::kLastDisp),
    Phi(LocalArrayT::kDisp),
    Phi_dot(LocalArrayT::kVel),
    Phi_dot_n(LocalArrayT::kLastVel),
    Phi_dotdot(LocalArrayT::kAcc),
    Phi_dotdot_n(LocalArrayT::kLastAcc),
    Phi_n(LocalArrayT::kLastDisp),
    fInitCoords_displ(LocalArrayT::kInitCoords),
    fCurrCoords_displ(LocalArrayT::kCurrCoords),
    fInitCoords_micro(LocalArrayT::kInitCoords),
    fCurrCoords_micro(LocalArrayT::kCurrCoords),
    fTractionBCSet(0),
    fDispl(NULL),
    fMicro(NULL),
    fShapes_displ(NULL),
    fShapes_micro(NULL),
    fKdd(ElementMatrixT::kNonSymmetric),
    fKdphi(ElementMatrixT::kNonSymmetric),
    fKphid(ElementMatrixT::kNonSymmetric),
    fKphiphi(ElementMatrixT::kNonSymmetric),
    bStep_Complete(0)
{
    SetName("micromorphic2_FS_3D");
}

/* destructor */
FSMicromorphic2_3DT::~FSMicromorphic2_3DT(void)
{
    delete fShapes_displ;
    delete fShapes_micro;
}


void FSMicromorphic2_3DT::Echo_Input_Data(void)
{
    cout << "#######################################################" << endl;
    cout << "############### ECHO FSMicromorphic3D DATA #########################" << endl;
    cout << "#######################################################" << endl;

    //################## material parameters ##################
    cout << "iConstitutiveModelType "               << iConstitutiveModelType         << endl;
    //--Plasticity parameters
    cout << "fMaterial_Params[kc0] "               << fMaterial_Params[kc0]          << endl;
    cout << "fMaterial_Params[kHc] "               << fMaterial_Params[kHc]          << endl;
    cout << "fMaterial_Params[kc0_chi] "               << fMaterial_Params[kc0_chi]          << endl;
    cout << "fMaterial_Params[kHc_chi] "               << fMaterial_Params[kHc_chi]          << endl;
    cout << "fMaterial_Params[kc0_nablachi] "               << fMaterial_Params[kc0_nablachi]          << endl;
    cout << "fMaterial_Params[kc1_nablachi] "               << fMaterial_Params[kc1_nablachi]          << endl;
    cout << "fMaterial_Params[kc2_nablachi] "               << fMaterial_Params[kc2_nablachi]          << endl;
    cout << "fMaterial_Params[kHc_nablachi] "               << fMaterial_Params[kHc_nablachi]          << endl;
//    cout << "fMaterial_Params[kGc0_chi1] "               << fMaterial_Params[kGc0_chi1]          << endl;
//    cout << "fMaterial_Params[kHGc_chi] "               << fMaterial_Params[kHGc_chi]          << endl;
//    cout << "fMaterial_Params[kGc0_chi2] "               << fMaterial_Params[kGc0_chi2]          << endl;
//    cout << "fMaterial_Params[kGc0_chi3] "               << fMaterial_Params[kGc0_chi3]          << endl;
    //cout << "fMaterial_Params[kZ0c] "              << fMaterial_Params[kZ0c]       << endl;
    cout << "fMaterial_Params[kFphi] "             << fMaterial_Params[kFphi]        << endl;
    cout << "fMaterial_Params[kDpsi] "             << fMaterial_Params[kDpsi]        << endl;
    cout << "fMaterial_Params[kFphi_chi] "             << fMaterial_Params[kFphi_chi]        << endl;
    cout << "fMaterial_Params[kDpsi_chi] "             << fMaterial_Params[kDpsi_chi]        << endl;
    cout << "fMaterial_Params[kFphi_nablachi] "             << fMaterial_Params[kFphi_nablachi]        << endl;
    cout << "fMaterial_Params[kDpsi_nablachi] "             << fMaterial_Params[kDpsi_nablachi]        << endl;
//    cout << "fMaterial_Params[kFGphi_chi] "             << fMaterial_Params[kFphi_chi]        << endl;
//    cout << "fMaterial_Params[kDGpsi_chi] "             << fMaterial_Params[kDpsi_chi]        << endl;
    //-- Elasticity parameters for solid
    cout << "fMaterial_Params[kMu] "                << fMaterial_Params[kMu]          << endl;
    cout << "fMaterial_Params[kLambda] "            << fMaterial_Params[kLambda] << endl;
    cout << "fMaterial_Params[kNu] "                << fMaterial_Params[kNu]          << endl;
    cout << "fMaterial_Params[kSigma_const] "       << fMaterial_Params[kSigma_const]  << endl;
    cout << "fMaterial_Params[kTau] "               << fMaterial_Params[kTau]          << endl;
    cout << "fMaterial_Params[kEta] "               << fMaterial_Params[kEta]           << endl;
    cout << "fMaterial_Params[kKappa] "             << fMaterial_Params[kKappa]  << endl;
    cout << "fMaterial_Params[kTau1] "              << fMaterial_Params[kTau1]          << endl;
    cout << "fMaterial_Params[kTau2] "                  << fMaterial_Params[kTau2]          << endl;
    cout << "fMaterial_Params[kTau3] "                  << fMaterial_Params[kTau3]          << endl;
    cout << "fMaterial_Params[kTau4] "                  << fMaterial_Params[kTau4]          << endl;
    cout << "fMaterial_Params[kTau5] "                  << fMaterial_Params[kTau5]          << endl;
    cout << "fMaterial_Params[kTau6] "                  << fMaterial_Params[kTau6]          << endl;
    cout << "fMaterial_Params[kTau7] "                  << fMaterial_Params[kTau7]          << endl;
    cout << "fMaterial_Params[kTau8] "                  << fMaterial_Params[kTau8]          << endl;
    cout << "fMaterial_Params[kTau9] "                  << fMaterial_Params[kTau9]          << endl;
    cout << "fMaterial_Params[kTau10] "                 << fMaterial_Params[kTau10]          << endl;
    cout << "fMaterial_Params[kTau11] "                 << fMaterial_Params[kTau11]          << endl;
    cout << "fMaterial_Params[kKappa0] "               		<< fMaterial_Params[kKappa0]          << endl;
    cout << "fMaterial_Params[kKappa0_chi] "                << fMaterial_Params[kKappa0_chi]          << endl;
    cout << "fMaterial_Params[kKappa0_nablachi] "           << fMaterial_Params[kKappa0_nablachi]          << endl;
    cout << "fMaterial_Params[kKappa1_nablachi] "           << fMaterial_Params[kKappa1_nablachi]          << endl;
    cout << "fMaterial_Params[kKappa2_nablachi] "           << fMaterial_Params[kKappa2_nablachi]          << endl;
    cout << "fMaterial_Params[kHKappa] "               		<< fMaterial_Params[kHkappa]          << endl;
    cout << "fMaterial_Params[kHKappa_chi] "                << fMaterial_Params[kHKappa_chi]          << endl;
    cout << "fMaterial_Params[kHKappa_nablachi] "           << fMaterial_Params[kHKappa_nablachi]          << endl;
    cout << "fMaterial_Params[kR] "               		    << fMaterial_Params[kR]          << endl;
    cout << "fMaterial_Params[kR_chi] "                     << fMaterial_Params[kR_chi]      << endl;
    cout << "fMaterial_Params[kR_nablachi] "                << fMaterial_Params[kR_nablachi] << endl;
    cout << "fMaterial_Params[kAlpha] "               		<< fMaterial_Params[kAlpha]          << endl;
    cout << "fMaterial_Params[kAlpha_chi] "                 << fMaterial_Params[kAlpha_chi]      << endl;
    cout << "fMaterial_Params[kAlpha_nablachi] "            << fMaterial_Params[kAlpha_nablachi] << endl;
    cout << "fMaterial_Params[kCapped_Model_Flag] "         << fMaterial_Params[kCapped_Model_Flag] << endl;
}


//---------------------------------------------------------------------

void FSMicromorphic2_3DT::RHSDriver(void)
{
    int curr_group = ElementSupport().CurrentGroup();

    /* traction boundary conditions acting on displacement equations */
    if (curr_group == fDispl->Group())
    ApplyTractionBC();

    /* choose solution method */
    if (fDispl->Group() == fMicro->Group())
        RHSDriver_monolithic();
    else
        RHSDriver_staggered();

}
//---------------------------------------------------------------------

void FSMicromorphic2_3DT::Equations(AutoArrayT<const iArray2DT*>& eq_d,
                 AutoArrayT<const RaggedArray2DT<int>*>& eq_phi)
{

    /* doing monolithic solution */
    if (fDispl->Group() == fMicro->Group())
    {
        int ndof_micro = fMicro->NumDOF();
        int ndof_displ = fDispl->NumDOF();

        /* loop over connectivity blocks */
        fEqnos_displ.Dimension(fEqnos.Length());
        fEqnos_micro.Dimension(fEqnos.Length());
        for (int i = 0; i < fEqnos.Length(); i++)
        {
            /* connectivities */
            const iArray2DT& connects_displ = *(fConnectivities_displ[i]);
            const iArray2DT& connects_micro = *(fConnectivities_micro[i]);
            int nel = connects_displ.MajorDim();

            /* dimension */
            fEqnos[i].Dimension(nel, n_en_displ*ndof_displ + n_en_micro*ndof_micro);
            iArray2DT& displ_eq = fEqnos_displ[i];
            iArray2DT& micro_eq = fEqnos_micro[i];
            displ_eq.Dimension(nel, n_en_displ*ndof_displ);
            micro_eq.Dimension(nel, n_en_micro*ndof_micro);

            /* get equation numbers */
            fDispl->SetLocalEqnos(connects_displ, displ_eq);
            fMicro->SetLocalEqnos(connects_micro, micro_eq);

            /* write into one array */
            fEqnos[i].BlockColumnCopyAt(displ_eq, 0);
            fEqnos[i].BlockColumnCopyAt(micro_eq, displ_eq.MinorDim());

            /* add to list of equation numbers */
            eq_d.Append(&fEqnos[i]);
        }

        /* reset pointers to element cards */
        SetElementCards(fBlockData, fConnectivities_displ, fEqnos_displ, fElementCards_displ);
        SetElementCards(fBlockData, fConnectivities_micro, fEqnos_micro, fElementCards_micro);
    }
    else
    /* doing staggered */
    {
#pragma message("initialization for staggered solution needs to be corrected")

        /* ElementBaseT handles equation array for displacements */
        if (ElementSupport().CurrentGroup() == fDispl->Group())
            ElementBaseT::Equations(eq_d, eq_phi);

        /* micro-displacement-gradient equation */
        if (ElementSupport().CurrentGroup() == fMicro->Group())
        {
            /* collect local equation numbers */
            //fPress.SetLocalEqnos(fConnectivities_micro, fEqnos_micro);

            //eq_d.Append(&fEqnos_micro);
        }
    }

    /* get the equation number for the nodes on the faces */
    /*
    for (int i = 0; i < fMicroFaceEqnos.Length(); i++)
    {
        iArray2DT& faces = fMicroFaces[i];
        iArray2DT& eqnos = fMicroFaceEqnos[i];
        eqnos.Dimension(faces.MajorDim(), faces.MajorDim()*fDispl->NumDOF());

        fDispl->SetLocalEqnos(faces, eqnos);
    }
    */

}


//---------------------------------------------------------------------

void FSMicromorphic2_3DT::LHSDriver(GlobalT::SystemTypeT)
{
/** Everything done in RHSDriver for efficiency */
//cout << "############### In LHS Driver ############### \n";
}

//---------------------------------------------------------------------


void FSMicromorphic2_3DT::Select_Equations (const int &iBalLinChoice, const int &iBalFirstMomMomChoice )
{
    /** Choices for Linear Momentum Balance Equation */

    switch ( iBalLinChoice )    {

    default :
    cout << "FSMicromorphic2_3DT::Select_Equations() .. currently only one linear momentum balance for micromorphic continuum \n";
    break;
    }

    /** Choices for First Moment of Momentum Balance Equation */

    switch ( iBalFirstMomMomChoice )    {

    default :
    cout << "FSMicromorphic2_3DT::Select_Equations() .. currently only one first moment of momentum balance equation for micromorphic continuum \n";
    break;
    }

}

//---------------------------------------------------------------------

/* return true if the element contributes to the solution of the
 * given group. */
bool FSMicromorphic2_3DT::InGroup(int group) const
{

    return group == fDispl->Group() || group == fMicro->Group();
}

//---------------------------------------------------------------------


/* initialize/finalize step */
void FSMicromorphic2_3DT::InitStep(void)
{

    /* inherited */
    ElementBaseT::InitStep();
}


/* close current time increment */
void FSMicromorphic2_3DT::CloseStep(void)
{

    /* inherited */
    ElementBaseT::CloseStep();


    //-- Store/Register initial values in classic tahoe manner
    if ( ElementSupport().Time()==0 )
    {
    bStep_Complete=1;
    RHSDriver();
    bStep_Complete=0;

    /* my output set */
    const OutputSetT& output_set = ElementSupport().OutputSet(fOutputID);

    /* my nodes used */
    const iArrayT& nodes_used = output_set.NodesUsed();

    /* smooth stresses to nodes */
   // ElementSupport().ResetAverage(knumstrain+knumstress+knum_d_state+knumdispl);
    ElementSupport().ResetAverage(knumstrain+knumstress+knum_d_state);
    dArray2DT out_variable_all;
    dArrayT out_variable;
    dArray2DT nd_var(NumElementNodes(), knumstrain+knumstress+knum_d_state);
    Top();
    while (NextElement())
    {
        /* extrapolate */
        nd_var = 0.0;
        out_variable_all.Alias(fNumIP_displ, knumstrain+knumstress+knum_d_state, fIPVariable(CurrElementNumber()));
        fShapes_displ->TopIP();
        while (fShapes_displ->NextIP())
        {
        out_variable.Alias(knumstrain+knumstress+knum_d_state, out_variable_all(fShapes_displ->CurrIP()));
        fShapes_displ->Extrapolate(out_variable, nd_var);
        }

        /* accumulate - extrapolation done from ip's to corners => X nodes  */
        ElementSupport().AssembleAverage(CurrentElement().NodesX(), nd_var);
    }

    /* get nodally averaged values */
    dArray2DT extrap_values;
    ElementSupport().OutputUsedAverage(extrap_values);

    /* temp space for group displacements */
    int num_node_output = fDispl->NumDOF() + fMicro->NumDOF() + knumstrain + knumstress + knum_d_state ;
    dArray2DT n_values(nodes_used.Length(), num_node_output);

    /* collect nodal values */
    const dArray2DT& fPhi = (*fMicro)[0];
    const dArray2DT& fU = (*fDispl)[0];
    for (int i = 0; i < nodes_used.Length(); i++)
    {
        int node = nodes_used[i];
        double* row = n_values(i);
        for (int j = 0; j < fPhi.MinorDim(); j++)
        *row++ = fPhi(node,j);

        for (int j = 0; j < fU.MinorDim(); j++)
        *row++ = fU(node,j);

        double* p_stress = extrap_values(i);
        for (int j = 0; j < (knumstrain+knumstress+knum_d_state); j++)
        *row++ = p_stress[j];
    }

    /* send */
    ElementSupport().WriteOutput(fOutputID, n_values, fIPVariable);

    }

    //will not need this for quasi-static micromorphic
    /* zero first derivative of fields which are created at time=0 during calculating geostatic equilibrium (Trapezoidal rule) */
    /*
    if ( ElementSupport().Time()==0 &&  kInitialConditionType==1 && kAnalysisType==1)
    {
        FieldT* fmicro = const_cast <FieldT*> (fMicro);
        FieldT* fdispl = const_cast <FieldT*> (fDispl);

        (*fdispl)[1] = 0;
        (*fmicro)[1] = 0;
    }
    */

    //will not need this for quasi-static micromorphic
    /* zero second derivative of fields which are created at time=0 during calculating geostatic equilibrium(Newmark method) */
    /*
    if ( ElementSupport().Time()==0 &&  kInitialConditionType==1 && kAnalysisType==2)
    {
        FieldT* fmicro = const_cast <FieldT*> (fMicro);
        FieldT* fdispl = const_cast <FieldT*> (fDispl);

        (*fdispl)[2] = 0;
        (*fmicro)[2] = 0;
    }
    */

    /* reassign initial 2nd time derivative of micro-displacement-gradient to 1st derivative */
    /*
    if ( ElementSupport().Time()==0 &&  kInitialConditionType==2)
    {
        FieldT* fmicro = const_cast <FieldT*> (fMicro);
        (*fmicro)[1] = (*fmicro)[2];
        (*fmicro)[2] = 0;
    }
    */

    /* store more recently updated values */
    fdState = fdState_new;
    fiState = fiState_new;

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////this part keeps track of the parameters from the previous iteration "n" to be used in "n+1"/////////////////////////

  //if(iConstitutiveModelType==2)
  //{
    SigN_IPs_el_n      = SigN_IPs_el;
    GammaN_IPs_el_n    = GammaN_IPs_el;
    mn_IPs_el_n        = mn_IPs_el;
    sn_sigman_IPs_el_n = sn_sigman_IPs_el;

    Fn_ar_IPs_el=F_ar_IPs_el;
    FnInv_ar_IPs_el=FInv_ar_IPs_el;
    ChiN_ar_IPs_el_n=Chi_ar_IPs_el;
    GRAD_ChiN_ar_IPs_el_n=GRAD_Chi_ar_IPs_el;
   // }
  if(iConstitutiveModelType==3 || iConstitutiveModelType==4)
  {
     /* assign values at t_{n+1} to t_n for storage */
    fState_variables_n_Elements_IPs = fState_variables_Elements_IPs;
    fFp_n_Elements_IPs = fFp_Elements_IPs;
    fChip_n_Elements_IPs = fChip_Elements_IPs;
    fCe_n_Elements_IPs = fCe_Elements_IPs;
    fdGdS_n_Elements_IPs = fdGdS_Elements_IPs;
    fdGdCauchy_Stress_n_Elements_IPs = fdGdCauchy_Stress_Elements_IPs;
    fdFYdS_n_Elements_IPs = fdFYdS_Elements_IPs;
    fCauchy_stress_Elements_n_IPs = fCauchy_stress_Elements_IPs;
    fDeformation_Gradient_n_Elements_IPs = fDeformation_Gradient_Elements_IPs;


    fChip_n_Elements_IPs=fChip_Elements_IPs;
    fCchie_n_Elements_IPs=fCchie_Elements_IPs;
    PSIe_n_Elements_IPs=PSIe_Elements_IPs;
    fdGchidSIGMA_n_Elements_IPs=fdGchidSIGMA_Elements_IPs;
    fdFYchidSIGMA_n_Elements_IPs=fdFYchidSIGMA_Elements_IPs;
    GXp_n_Elements_IPs=GXp_Elements_IPs;
    dGnablachidMKLM_Element_n_IPs=dGnablachidMKLM_Element_IPs;
    GAMMAe_n_Elements_IPs=GAMMAe_Elements_IPs;

    fMeKLM_n_Elements_IPs=fMeKLM_Elements_IPs;
    SPK_n_Elements_IPs=SPK_Elements_IPs;
    SIGMA_S_n_Elements_IPs=SIGMA_S_Elements_IPs;
    SIGMA_n_Elements_IPs=SIGMA_Elements_IPs;

    Elastic_LagrangianStn_n_Elements_IPs=Elastic_LagrangianStn_Elements_IPs;
    Elastic_MicroStnTensor_n_Elements_IPs=Elastic_MicroStnTensor_Elements_IPs;


  }

    //Counter_IPs_el_n=Counter_IPs_el;
  //Here is the close step function


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



//    fs_micromorph3D_out   << endl
//      << setw(outputFileWidth) << "time_step"
//      << endl;
    step_number = ElementSupport().StepNumber();
//    fs_micromorph3D_out   << setw(outputFileWidth) << step_number
//      << endl;
//    fs_micromorph3D_out   << endl << "**********************************************************************************************";
//    fs_micromorph3D_out   << endl << "**********************************************************************************************" << endl;

    fs_micromorph3D_out << "xxxxxxxxxxxxxx " << endl;
    fs_micromorph3D_out << "step number" << ":" << step_number << endl;
    fs_micromorph3D_out << "xxxxxxxxxxxxxx " << endl;

}








/* resets to the last converged solution */
/*
GlobalT::RelaxCodeT FSMicromorphic2_3DT::ResetStep(void)
{
    const char caller[] = "FSMicromorphic2_3DT::ResetStep";

    // inherited
    GlobalT::RelaxCodeT relax = ElementBaseT::ResetStep();

    // update material internal variables
    //needs to be implemented
#pragma message("reseting internal variables not implemented")
    //ExceptionT::GeneralFail(caller, "reseting internal variables not implemented");

    return relax;
}
*/

/* element level reconfiguration for the current time increment */
/*
GlobalT::RelaxCodeT FSMicromorphic2_3DT::RelaxSystem(void)
{
    const char caller[] = "FSMicromorphic2_3DT::RelaxSystem";

    // inherited
    GlobalT::RelaxCodeT relax = ElementBaseT::RelaxSystem();

    // loop over materials
    //needs to be implemented
#pragma message("relax step for materials not implemented")
    //ExceptionT::GeneralFail(caller, "relax step for materials not implemented");

    return relax;
}
*/


void FSMicromorphic2_3DT::SendOutput(int kincode)
{
#pragma unused(kincode)
//not implemented
}


/* return geometry and number of nodes on each facet */
void FSMicromorphic2_3DT::FacetGeometry(ArrayT<GeometryT::CodeT>& facet_geometry,
    iArrayT& num_facet_nodes) const
{
    /* from integration domain */
    ShapeFunctionDispl().FacetGeometry(facet_geometry, num_facet_nodes);
}


/* form of tangent matrix */
GlobalT::SystemTypeT FSMicromorphic2_3DT::TangentType(void) const
{
    return GlobalT::kNonSymmetric;
}

/*
void FSMicromorphic2_3DT::SetStatus(const ArrayT<ElementCardT::StatusT>& status)
{
    // loop over elements and initial state variables
    int elem_num = 0;
    Top();
    while (NextElement())
    {
        // current element
        ElementCardT::StatusT& flag = CurrentElement().Flag();
        flag = status[elem_num++];

        if (flag == ElementCardT::kMarkON)
            flag = ElementCardT::kON;
        else if (flag == ElementCardT::kMarkOFF)
            flag = ElementCardT::kOFF;
    }
}
*/

/* initial condition/restart functions (per time sequence) */
void FSMicromorphic2_3DT::InitialCondition(void)
{
    //           cout<<"CHECK POINT-12"<<endl;
    /* inherited */
    ElementBaseT::InitialCondition();
}



//#############################################################################
//#############################################################################
//#############################################################################
//#############################################################################
//############################### NODAL FORCE  ################################
//#############################################################################
//#############################################################################
//#############################################################################
//#############################################################################

/* accumulate the residual force on the specified node */
void FSMicromorphic2_3DT::AddNodalForce(const FieldT& field, int node, dArrayT& force)
{
    const char caller[] = "FSMicromorphic2_3DT::AddNodalForce";
    /* displ, micro, or neither */
    bool is_displ = false;
    dArrayT* element_force = NULL;
    int num_force = 0;
    if (field.FieldName() == fDispl->FieldName())
    {
        is_displ = true;
        element_force = &fFd_int;
        num_force = fDispl->NumDOF();
    }
    else if (field.FieldName() == fMicro->FieldName())
    {
        is_displ = false;
        element_force = &fFphi_int;
        num_force = fMicro->NumDOF();
    }
    else
    return;

    /* time Step Increment */
    double delta_t = ElementSupport().TimeStep();
    time = ElementSupport().Time();
    step_number = ElementSupport().StepNumber();
    global_iteration = IterationNumber();

    /* temp for nodal force */
    dArrayT nodalforce;

    dArray2DT fdstatenew_all, fdstate_all;

    /* loop over elements */
    int e;
    Top();
    while (NextElement())
    {
        int nodeposition;
        const iArrayT& nodes_u = CurrentElement().NodesU();
        if (nodes_u.HasValue(node, nodeposition))
        {
            e = CurrElementNumber();
            const iArrayT& nodes_displ = fElementCards_displ[e].NodesU();
            const iArrayT& nodes_micro = fElementCards_micro[e].NodesU();

            u.SetLocal(nodes_displ);
            u_n.SetLocal(nodes_displ);
            Phi.SetLocal(nodes_micro);
            Phi_n.SetLocal(nodes_micro);

            del_u.DiffOf (u, u_n);
            del_Phi.DiffOf (Phi, Phi_n);

            // calculate derivatives based on reference coordinates
            fInitCoords_displ.SetLocal(fElementCards_displ[e].NodesX());
            //fCurrCoords_displ.SetToCombination (1.0, fInitCoords_displ, 1.0, u);
            fCurrCoords_displ=fInitCoords_displ;
           // fShapes_displ->SetDerivatives_DN_DDN(); commented out for Q8P8
            fShapes_displ->SetDerivatives();


            //
            fInitCoords_micro.SetLocal(fElementCards_micro[e].NodesX());
            fCurrCoords_micro=fInitCoords_micro;
            //fCurrCoords_micro.SetToCombination (1.0, fInitCoords_micro, 1.0, u);
            fShapes_micro->SetDerivatives();

            //update state variables
            fdstatenew_all.Alias(fNumIP_displ, knum_d_state, fdState_new(CurrElementNumber()));
            fdstate_all.Alias(fNumIP_displ, knum_d_state, fdState(CurrElementNumber()));

            const double* Det    = fShapes_displ->IPDets();
            const double* Weight = fShapes_displ->IPWeights();
            /* calculate displacement nodal force */
            if (is_displ)
            {
                 fShapes_displ->TopIP();
                // residual for displacement field
                //generate this vector fFd_int
                //fFd_int=0.0;
                //Vint_1_temp=0.0;
                //Vint_1=0.0;

                while (fShapes_displ->NextIP())
                {
                    fFd_int=0.0;
                  /*  double scale;
                    double scale_const = (*Weight++)*(*Det++);
                    //nothing right now
                    //fFd_int=0.0;
                       Form_Second_Piola_Kirchhoff_SPK(LagrangianStn,MicroStnTensor);
                   // KirchhoffST.MultABCT(fDeformation_Gradient,SPK,fDeformation_Gradient);
                    Form_fV1();
                   // fIota_temp_matrix.Multx(fV1,Vint_1_temp);
                    fShapeDisplGrad.MultTx(fV1,Vint_1_temp);
                  // fIota_w_temp_matrix.Multx(fV1,Vint_1_temp);
                    scale=scale_const;
                    Vint_1_temp*=scale;
                    Vint_1 +=Vint_1_temp;*/
                }
               // fFd_int  = Vint_1;
               // fFd_int *= -1;
            }
            else /* pressure nodal force */
            {
                /* residual for micro-displacement-gradient field */
                // generate this vector fFphi_int
                fShapes_displ->TopIP();
             //   fFphi_int=0.0;
              //  Vint_2_temp=0.0;
               // Vint_2=0.0;
               // Vint_3_temp=0.0;
               // Vint_3=0.0;
                while (fShapes_displ->NextIP())
                {
                    //nothing right now
                    fFphi_int =0.0;
                /*  double scale;
                    double scale_const = (*Weight++)*(*Det++);
                    Form_SIGMA_S();//in current configuration SIGMA_S=s_sigma, but what we use sigma_s, so it needs to be multiplied by "-1"
                    Form_fV2();//gives F.SIGMA_S.F^T = s_sigma
                    NCHI.MultTx(fV2,Vint_2_temp);
                    scale=scale_const;
                    Vint_2_temp*=scale;
                    Vint_2 +=Vint_2_temp;

                    Form_GAMMA();
                    Form_fMKLM();
                    Form_fV3();
                //fIota_eta_temp_matrix.Multx(fV3,Vint_3_temp);
                GRAD_NCHI.MultTx(fV3,Vint_3_temp);
                    scale=scale_const;
                Vint_3_temp*=scale;
                Vint_3+=Vint_3_temp;*/

                }
               //  fFphi_int  = Vint_2;
               // fFphi_int +=Vint_3;
               // fFphi_int *=-1;

            }

            /* loop over nodes (double-noding OK) */
            int dex = 0;
            if (is_displ)
            {
                for (int i = 0; i < nodes_displ.Length(); i++)
                {
                    if (nodes_displ[i] == node)
                    {
                        /* components for node */
                        nodalforce.Set(num_force, element_force->Pointer(dex));

                        /* accumulate */
                        force += nodalforce;
                    }
                    dex += fDispl->NumDOF();
                }
            }
            else /* micro-displacement-gradient nodal dof */
            {
                for (int i = 0; i < nodes_micro.Length(); i++)
                {
                    if (nodes_micro[i] == node)
                    {
                        /* components for node */
                        nodalforce.Set(num_force, element_force->Pointer(dex));

                        /* accumulate */
                        force += nodalforce;
                    }
                    dex += fMicro->NumDOF();
                }
            }
        }
    }
//  cout << "F_int = \n" << fFd_int << endl;
}

//---------------------------------------------------------------------

double FSMicromorphic2_3DT::InternalEnergy ( void )
{
//not implemented

    return 0.0;
}

//---------------------------------------------------------------------

/* write restart data to the output stream */
void FSMicromorphic2_3DT::WriteRestart(ostream& out) const
{

    /* inherited */
    ElementBaseT::WriteRestart(out);

    /* write state variable data */
    out << fdState;
}

//---------------------------------------------------------------------

/* read restart data to the output stream */
void FSMicromorphic2_3DT::ReadRestart(istream& in)
{

    /* inherited */
    ElementBaseT::ReadRestart(in);

    /* write state variable data */
    in >> fdState;
}

//---------------------------------------------------------------------

void FSMicromorphic2_3DT::RegisterOutput(void)
{

    /* collect block ID's */
    ArrayT<StringT> block_ID(fBlockData.Length());
    for (int i = 0; i < block_ID.Length(); i++)
    block_ID[i] = fBlockData[i].ID();

    /* output per element - strain, stress, and ISVs at the integration points */
    ArrayT<StringT> e_labels(fNumIP_displ*(knumstrain+knumstress+knum_d_state));

    /* over integration points */
    // enter what values you need at integration points
    // stress and strain
  //  const char* slabels3D[] = {"s11", "s22", "s33","s23","s13","s12","e11","e22","e33","e23","e13","e12"};
    const char* slabels3D[] = {"Sigma11","Sigma12","Sigma13","Sigma21","Sigma22","Sigma23","Sigma31","Sigma32","Sigma33","e11","e12","e13","e21","e22","e23","e31","e32","e33"
      	  ,"SPK11","SPK12","SPK13","SPK21","SPK22","SPK23","SPK31","SPK32","SPK33","E11","E12","E13","E21","E22","E23","E31","E32","E33",
      	  "Sigma-S11","Sigma-S12","Sigma-S13","Sigma-S21","Sigma-S22","Sigma-S23","Sigma-S31","Sigma-S32","Sigma-S33",
      	  "MicroE11","MicroE12","MicroE13","MicroE21","MicroE22","MicroE23","MicroE31","MicroE32","MicroE33",
      	  "M111","M112","M113","M121","M122","M123","M131","M132","M133",
      	  "M211","M212","M213","M221","M222","M223","M231","M232","M233",
      	  "M311","M312","M313","M321","M322","M323","M331","M332","M333"};


  //  if(iConstitutiveModelType==3)
   //  {
    const char* svlabels3D[] = {"kc","khc","Kappa","khKappa","kc_chi","khc_chi","Kappa_chi","khKappa_chi","kc_nablachi0","kc_nablachi1","kc_nablachi2",
    		"khc_nablachi","Kappa_nablachi0","Kappa_nablachi1","Kappa_nablachi2","khKappa_nablachi","kDelgamma","kDelgammachi","kDelgammanablachi",
    		"trSigma","||dev(Sigma)||","trRel","||dev(Rel)||","||trm||","||dev(m)||","trSPK","||dev(SPK)||","trSIGMA","||dev(SIGMA)||","||trM||"
    		,"||dev(M)||","||PHI||","||GPHI||","treps","deveps","invtrgammastn","invdevgammastn"};
//          ,"kF11","kF12","kF13","kF21","kF22","kF23","kF31","kF32","kF33","kFe11","kFe12","kFe13","kFe21","kFe22","kFe23","kFe31","kFe32","kFe33",
//          "kX11","kX12","kX13","kX21","kX22","kX23","kX31","kX32","kX33","kXe11","kXe12","kXe13","kXe21","kXe22","kXe23","kXe31","kXe32","kXe33"};
  //  }
  // else
   // {

    // state variables; ?
 //   const char* svlabels3D[] = {"||devs||","||devrel||","||devmklm||","tr(sigma)","tr(s_sigma)","trmklm","E11","E22","E33","E12","E13","E21","E23","E31","E32","VE11","VE22","VE33","VE12","VE13","VE21","VE23","VE31","VE32"
 //   ,"F11","F22","F33","F12","F13","F21","F23","F31","F32","GAMMA(1,1,1)","GAMMA(2,1,2)","GAMMA(3,1,3)","GAMMA(1,2,1)","GAMMA(2,2,2)","GAMMA(3,2,3)",
  //  "GAMMA(1,3,1)","GAMMA(2,3,2)","GAMMA(3,3,3)"};
    //}
    int count = 0;
    for (int j = 0; j < fNumIP_micro; j++)
    {
        StringT ip_label;
        ip_label.Append("ip", j+1);

        /* over strain and stress components */
        for (int i = 0; i < knumstrain+knumstress; i++)
        {
            e_labels[count].Clear();
            e_labels[count].Append(ip_label, ".", slabels3D[i]);
            count++;
        }

        /* over state variables */
        for (int i = 0; i < knum_d_state; i++)
        {
            e_labels[count].Clear();
            e_labels[count].Append(ip_label, ".", svlabels3D[i]);
            count++;
        }
    }

    /* output per node */
    int num_node_output = fDispl->NumDOF() + fMicro->NumDOF() + knumstrain + knumstress + knum_d_state;
    ArrayT<StringT> n_labels(num_node_output);
    count = 0;

    /* labels from micro-displacement-gradient */
    const ArrayT<StringT>& micro_labels = fMicro->Labels();
    for (int i = 0; i < micro_labels.Length(); i++)
    n_labels[count++] = micro_labels[i];

    /* labels from displacement */
    const ArrayT<StringT>& displ_labels = fDispl->Labels();
    for (int i = 0; i < displ_labels.Length(); i++)
    n_labels[count++] = displ_labels[i];

    /* labels from strains and stresses at the nodes */
    for (int i = 0; i < knumstrain+knumstress; i++)
    n_labels[count++] = slabels3D[i];

    /* labels from state variables at the nodes */
    for (int i = 0; i < knum_d_state; i++)
    n_labels[count++] = svlabels3D[i];

    /* set output specifier */
#pragma message("FSMicromorphic2_3DT::RegisterOutput: is this right? ")
    OutputSetT output_set(fGeometryCode_displ, block_ID, fConnectivities, n_labels, e_labels, false);

    /* register and get output ID */
    fOutputID = ElementSupport().RegisterOutput(output_set);
}

//#############################################################################
//#############################################################################
//#############################################################################
//#############################################################################
//############################### WRITE OUTPUT ################################
//#############################################################################
//#############################################################################
//#############################################################################
//#############################################################################

void FSMicromorphic2_3DT::WriteOutput(void)
{

    bStep_Complete=1;
    RHSDriver();
    bStep_Complete=0;

    /* my output set */
    const OutputSetT& output_set = ElementSupport().OutputSet(fOutputID);

    /* my nodes used */
    const iArrayT& nodes_used = output_set.NodesUsed();

    /* smooth stresses to nodes */
    ElementSupport().ResetAverage(knumstrain+knumstress+knum_d_state);
    dArray2DT out_variable_all;
    dArrayT out_variable;
    dArray2DT nd_var(NumElementNodes(), knumstrain+knumstress+knum_d_state);
    Top();
    while (NextElement())
    {
        /* extrapolate */
        nd_var = 0.0;
        out_variable_all.Alias(fNumIP_displ, knumstrain+knumstress+knum_d_state, fIPVariable(CurrElementNumber()));
        fShapes_displ->TopIP();
        while (fShapes_displ->NextIP())
        {
            out_variable.Alias(knumstrain+knumstress+knum_d_state, out_variable_all(fShapes_displ->CurrIP()));
            fShapes_displ->Extrapolate(out_variable, nd_var);
        }

        /* accumulate - extrapolation done from ip's to corners => X nodes  */
        ElementSupport().AssembleAverage(CurrentElement().NodesX(), nd_var);
    }

    /* get nodally averaged values */
    dArray2DT extrap_values;
    ElementSupport().OutputUsedAverage(extrap_values);

    /* temp space for group displacements */
    int num_node_output = fDispl->NumDOF() + fMicro->NumDOF() + knumstrain + knumstress + knum_d_state;
    dArray2DT n_values(nodes_used.Length(), num_node_output);

    /* collect nodal values */
    const dArray2DT& fPhi = (*fMicro)[0];
    const dArray2DT& fU = (*fDispl)[0];
    for (int i = 0; i < nodes_used.Length(); i++)
    {
        int node = nodes_used[i];
        double* row = n_values(i);
        for (int j = 0; j < fPhi.MinorDim(); j++)
            *row++ = fPhi(node,j);

        for (int j = 0; j < fU.MinorDim(); j++)
            *row++ = fU(node,j);

        double* p_stress = extrap_values(i);
        for (int j = 0; j < (knumstrain+knumstress+knum_d_state); j++)
            *row++ = p_stress[j];
    }

    /* send */
    ElementSupport().WriteOutput(fOutputID, n_values, fIPVariable);
}


//#############################################################################
//#############################################################################
//#############################################################################
//#############################################################################
//###################### Actual Solver Routines Below  ########################
//#############################################################################
//#############################################################################
//#############################################################################
//#############################################################################

/*************************************************************************
 * Private
 *************************************************************************/

/* form group contribution to the stiffness matrix and RHS */
void FSMicromorphic2_3DT::RHSDriver_staggered(void)
{

    const char caller[] = "FSMicromorphic2_3DT::RHSDriver_staggered";
#pragma message("staggered solution not implemented")
}

//---------------------------------------------------------------------
/* form group contribution to the stiffness matrix and RHS */
void FSMicromorphic2_3DT::RHSDriver_monolithic(void)
{

    const char caller[] = "FSMicromorphic2_3DT::RHSDriver_monolithic";
    if (fDispl->Group() != fMicro->Group())
    ExceptionT::GeneralFail(caller, "displacement and micro-displacement-gradient groups must be the same: %d != %d",
                fDispl->Group(), fMicro->Group());

    int curr_group = ElementSupport().CurrentGroup();

    /* stress output work space */
    dArray2DT   out_variable_all, fdstatenew_all, fdstate_all;
    dArrayT     out_variable;

    /* time Step Increment */
    double delta_t = ElementSupport().TimeStep();
    time = ElementSupport().Time();
    step_number = ElementSupport().StepNumber();
    global_iteration = IterationNumber();

    /* print time */
//    fs_micromorph3D_out   <<"delta_t "<<delta_t << endl ;
//    fs_micromorph3D_out   <<"time "<<time << endl ;

    /* loop over elements */
    int e,l;
    Top();

//   fs_micromorph3D_out    <<"kInitialConditionType "<<kInitialConditionType << endl ;
//   fs_micromorph3D_out    <<"kAnalysisType "<<kAnalysisType << endl ;

    //don't need now for micromorphic
    /* at time=0 when geostatic initial condition is calculated,
       trapezoidal integrator will calculate first time derivative of fields
       which by setting alpha_delta_t = 1 will be changed to
       displacement and pressure which should be assigned to them,
       note that at time=0, delta_t=0 and Trapezoidal scheme
       which is embeded in the integrator will do nothing by itself
       (in changing previous iteration values)*/
    /*
    if ( ElementSupport().Time()==0 &&  kInitialConditionType==1 && kAnalysisType==1)
    {
        FieldT* fmicro = const_cast <FieldT*> (fMicro);
        FieldT* fdispl = const_cast <FieldT*> (fDispl);
        (*fmicro)[0] = (*fmicro)[1];
        (*fdispl)[0] = (*fdispl)[1];
    }
    */

    /* at time=0 when geostatic initial condition is calculated,
       dynamic Newmark integrator will calculate second time derivative
       of fields which by setting beta_delta_t2 = 1 will be changed to
       displacement and pressure which should be assigned to them,
       note that at time=0, delta_t=0 and Newmark scheme which is embeded in
       dynamic integrator will do nothing by itself(in changing previous iteration value)*/
    /*
    if ( ElementSupport().Time()==0 &&  kInitialConditionType==1 && kAnalysisType==2)
    {
        FieldT* fmicro = const_cast <FieldT*> (fMicro);
        FieldT* fdispl = const_cast <FieldT*> (fDispl);
        (*fmicro)[0] = (*fmicro)[2];
        (*fdispl)[0] = (*fdispl)[2];
    }
    */


    while (NextElement())
    {

        I2p_trial_1 = 0.0;
        I2p_trial_2 = 0.0;
        I2p_trial_3 = 0.0;
        I2p_trial_4 = 0.0;
        I2p_trial_5 = 0.0;

        I3p_trial_1 = 0.0;
        I3p_trial_2 = 0.0;
        I3p_trial_3 = 0.0;
        I3p_trial_4 = 0.0;
        I3p_trial_5 = 0.0;

        I4p_trial_1 = 0.0;
        I4p_trial_2 = 0.0;
        I4p_trial_3 = 0.0;
        I4p_trial_4 = 0.0;
        I4p_trial_5 = 0.0;
        I4p_trial_6 = 0.0;
        I4p_trial_7 = 0.0;
        I4p_trial_8 = 0.0;
        I4p_trial_9 = 0.0;
        I4p_trial_10 = 0.0;
        I4p_trial_11 = 0.0;
        I4p_trial_12 = 0.0;
        I4p_trial_13 = 0.0;
        I4p_trial_14 = 0.0;
        I4p_trial_15 = 0.0;

        I5p_trial_1 = 0.0;
        I5p_trial_2 = 0.0;
        I5p_trial_3 = 0.0;
        I5p_trial_4 = 0.0;
        I5p_trial_5 = 0.0;

        I6p_trial_1 = 0.0;
        I6p_trial_2 = 0.0;
        I7p_trial_1 = 0.0;
        I7p_trial_2 = 0.0;
        I8p_trial_1 = 0.0;
        I8p_trial_2 = 0.0;
        I9p_trial_1 = 0.0;
        I9p_trial_2 = 0.0;
        I10p_trial_1 = 0.0;
        I10p_trial_2 = 0.0;
        I11p_trial_1 = 0.0;
        I11p_trial_2 = 0.0;

        I12p_trial_1 = 0.0;
        I12p_trial_2 = 0.0;
        I12p_trial_3 = 0.0;
        I12p_trial_4 = 0.0;
        I12p_trial_5 = 0.0;
        I12p_trial_6 = 0.0;
        I12p_trial_7 = 0.0;
        I12p_trial_8 = 0.0;
        I12p_trial_9 = 0.0;
        I12p_trial_10 = 0.0;


        I13p_trial_1 = 0.0;
        I13p_trial_2 = 0.0;
        I13p_trial_3 = 0.0;
        I13p_trial_4 = 0.0;
        I13p_trial_5 = 0.0;
        I13p_trial_6 = 0.0;
        I13p_trial_7 = 0.0;
        I13p_trial_8 = 0.0;
        I13p_trial_9 = 0.0;
        I13p_trial_10 = 0.0;


        I14p_trial_1 = 0.0;
        I14p_trial_2 = 0.0;
        I14p_trial_3 = 0.0;
        I14p_trial_4 = 0.0;
        I14p_trial_5 = 0.0;
        I14p_trial_6 = 0.0;
        I14p_trial_7 = 0.0;
        I14p_trial_8 = 0.0;
        I14p_trial_9 = 0.0;
        I14p_trial_10 = 0.0;


        I15p_trial_1 = 0.0;
        I15p_trial_2 = 0.0;
        I15p_trial_3 = 0.0;
        I15p_trial_4 = 0.0;
        I15p_trial_5 = 0.0;
        I15p_trial_6 = 0.0;
        I15p_trial_7 = 0.0;
        I15p_trial_8 = 0.0;
        I15p_trial_9 = 0.0;
        I15p_trial_10 = 0.0;


        I16p_trial_1 = 0.0;
        I16p_trial_2 = 0.0;
        I16p_trial_3 = 0.0;
        I16p_trial_4 = 0.0;
        I16p_trial_5 = 0.0;
        I16p_trial_6 = 0.0;
        I16p_trial_7 = 0.0;
        I16p_trial_8 = 0.0;
        I16p_trial_9 = 0.0;
        I16p_trial_10 = 0.0;


        I17p_trial_1 = 0.0;
        I17p_trial_2 = 0.0;
        I17p_trial_3 = 0.0;
        I17p_trial_4 = 0.0;
        I17p_trial_5 = 0.0;
        I17p_trial_6 = 0.0;
        I17p_trial_7 = 0.0;
        I17p_trial_8 = 0.0;
        I17p_trial_9 = 0.0;
        I17p_trial_10 = 0.0;

        I_temp_DelGamma_dGdStrial_1 = 0.0;
        I_temp_DelGamma_dGdStrial_2 = 0.0;

        fKu_I2p_trial_1 = 0.0;
        fKu_I2p_trial_2 = 0.0;
        fKu_I2p_trial_3 = 0.0;
        fKu_I2p_trial_4 = 0.0;
        fKu_I2p_trial_5 = 0.0;

        fKu_I3p_trial_1 = 0.0;
        fKu_I3p_trial_2 = 0.0;
        fKu_I3p_trial_3 = 0.0;
        fKu_I3p_trial_4 = 0.0;
        fKu_I3p_trial_5 = 0.0;

        fKu_I4p_trial_1 = 0.0;
        fKu_I4p_trial_2 = 0.0;
        fKu_I4p_trial_3 = 0.0;
        fKu_I4p_trial_4 = 0.0;
        fKu_I4p_trial_5 = 0.0;
        fKu_I4p_trial_6 = 0.0;
        fKu_I4p_trial_7 = 0.0;
        fKu_I4p_trial_8 = 0.0;
        fKu_I4p_trial_9 = 0.0;
        fKu_I4p_trial_10 = 0.0;
        fKu_I4p_trial_11 = 0.0;
        fKu_I4p_trial_12 = 0.0;
        fKu_I4p_trial_13 = 0.0;
        fKu_I4p_trial_14 = 0.0;
        fKu_I4p_trial_15 = 0.0;

        fKu_I5p_trial_1 = 0.0;
        fKu_I5p_trial_2 = 0.0;
        fKu_I5p_trial_3 = 0.0;
        fKu_I5p_trial_4 = 0.0;
        fKu_I5p_trial_5 = 0.0;

        fKu_I6p_trial_1 = 0.0;
        fKu_I6p_trial_2 = 0.0;
        fKu_I7p_trial_1 = 0.0;
        fKu_I7p_trial_2 = 0.0;
        fKu_I8p_trial_1 = 0.0;
        fKu_I8p_trial_2 = 0.0;
        fKu_I9p_trial_1 = 0.0;
        fKu_I9p_trial_2 = 0.0;
        fKu_I10p_trial_1 = 0.0;
        fKu_I10p_trial_2 = 0.0;
        fKu_I11p_trial_1 = 0.0;
        fKu_I11p_trial_2 = 0.0;
        fdGdS_tr = 0.0;

        fKu_I12p_trial_1 = 0.0;
        fKuphi_I12p_trial_2 = 0.0;
        fKu_I12p_trial_3 = 0.0;
        fKuphi_I12p_trial_4 = 0.0;
        fKu_I12p_trial_5 = 0.0;
        fKuphi_I12p_trial_6 = 0.0;
        fKu_I12p_trial_7 = 0.0;
        fKuphi_I12p_trial_8 = 0.0;
        fKu_I12p_trial_9 = 0.0;
        fKuphi_I12p_trial_10 = 0.0;


        fKu_I13p_trial_1 = 0.0;
        fKuphi_I13p_trial_2 = 0.0;
        fKu_I13p_trial_3 = 0.0;
        fKuphi_I13p_trial_4 = 0.0;
        fKu_I13p_trial_5 = 0.0;
        fKuphi_I13p_trial_6 = 0.0;
        fKu_I13p_trial_7 = 0.0;
        fKuphi_I13p_trial_8 = 0.0;
        fKu_I13p_trial_9 = 0.0;
        fKuphi_I13p_trial_10 = 0.0;


        fKu_I14p_trial_1 = 0.0;
        fKuphi_I14p_trial_2 = 0.0;
        fKu_I14p_trial_3 = 0.0;
        fKuphi_I14p_trial_4 = 0.0;
        fKu_I14p_trial_5 = 0.0;
        fKuphi_I14p_trial_6 = 0.0;
        fKu_I14p_trial_7 = 0.0;
        fKuphi_I14p_trial_8 = 0.0;
        fKu_I14p_trial_9 = 0.0;
        fKuphi_I14p_trial_10 = 0.0;


        fKu_I15p_trial_1 = 0.0;
        fKuphi_I15p_trial_2 = 0.0;
        fKu_I15p_trial_3 = 0.0;
        fKuphi_I15p_trial_4 = 0.0;
        fKu_I15p_trial_5 = 0.0;
        fKuphi_I15p_trial_6 = 0.0;
        fKu_I15p_trial_7 = 0.0;
        fKuphi_I15p_trial_8 = 0.0;
        fKu_I15p_trial_9 = 0.0;
        fKuphi_I15p_trial_10 = 0.0;


        fKu_I16p_trial_1 = 0.0;
        fKuphi_I16p_trial_2 = 0.0;
        fKu_I16p_trial_3 = 0.0;
        fKuphi_I16p_trial_4 = 0.0;
        fKu_I16p_trial_5 = 0.0;
        fKuphi_I16p_trial_6 = 0.0;
        fKu_I16p_trial_7 = 0.0;
        fKuphi_I16p_trial_8 = 0.0;
        fKu_I16p_trial_9 = 0.0;
        fKuphi_I16p_trial_10 = 0.0;


        fKu_I17p_trial_1 = 0.0;
        fKuphi_I17p_trial_2 = 0.0;
        fKu_I17p_trial_3 = 0.0;
        fKuphi_I17p_trial_4 = 0.0;
        fKu_I17p_trial_5 = 0.0;
        fKuphi_I17p_trial_6 = 0.0;
        fKu_I17p_trial_7 = 0.0;
        fKuphi_I17p_trial_8 = 0.0;
        fKu_I17p_trial_9 = 0.0;
        fKuphi_I17p_trial_10 = 0.0;

        fdGdS_tr = 0.0;
        fdGchidSIGMA_tr= 0.0;
        fdGchidSIGMA_tr_transpose = 0.0;
        Micro_Plasticity_Occurrence = 0.0;
        Macro_Plasticity_Occurrence = 0.0;
        fMicroYield_function_check = 0.0;
        fYield_function_check = 0.0;



    Sigma=0.0;
    Uint_1=0.0;
    Uint_1_temp=0.0;
    fFd_int=0.0;
    fG1_1=0.0;
    fG1_2=0.0;
    fG1_3=0.0;
    fG1_4=0.0;
    fG1_5=0.0;
    fG1_6=0.0;
    fG1_7=0.0;
    fG1_8=0.0;
    fG1_9=0.0;
    fG1_10=0.0;
    fG1_11=0.0;
    fG1_12=0.0;
    fG1_13=0.0;
    fG1_14=0.0;

    Pint_1=0.0;
    Pint_2=0.0;
    Pint_3=0.0;
    Pint_1_temp=0.0;
    Pint_2_temp=0.0;
    Pint_3_temp=0.0;
    fFphi_int=0.0;
    fH1_Etagrad=0.0;
    fH1_1=0.0;
    fH1_2=0.0;
    fH1_3=0.0;
    fH1_4=0.0;
    fH1_5=0.0;
    fH1_6=0.0;
   // fH1_7=0.0;
    fH1_71=0.0;
    fH1_72=0.0;
    fH1_73=0.0;
    fH1_74=0.0;
    fH1_75=0.0;
    fH1_76=0.0;
    fH1_77=0.0;
    fH1_78=0.0;
/*    fH1_8=0.0;
    fH1_9=0.0;
    fH1_10=0.0;*/
    fH1_11=0.0;
    fH1_12=0.0;
    fH1_13=0.0;
    fH1_14=0.0;

    fH2_1=0.0;
    fH2_2=0.0;
    fH2_3=0.0;
    fH2_4=0.0;
    fH2_5=0.0;
    fH2_6=0.0;
    fH2_7=0.0;
    fH2_8=0.0;
    fH2_9=0.0;
    fH2_10=0.0;
    fH2_11=0.0;
    fH2_12=0.0;
    fH2_13=0.0;

    fH3_1=0.0;

    fKdd=0.0;
    fKdphi=0.0;
    fKphid=0.0;
    fKphiphi=0.0;


    fIota_w_temp_matrix=0.0;
    fIota_eta_temp_matrix=0.0;
    NCHI=0.0;
    fTemp_matrix_nudof_x_nchidof=0.0;
    fTemp_matrix_nchidof_x_nchidof=0.0;
    fTemp_matrix_nchidof_x_nudof=0.0;


    ////////////////////////////////////////////////////////////////
    //////////////FINITE STRAIN MATRICES INITIALIZE/////////////////
    ////////////////////////////////////////////////////////////////
    //FSF=0;
     SPK=0.0;
     KirchhoffST=0.0;// The second Piola-Kirchhoff Matrix
     Temp_SPK=0.0;//temporary Matrix used in calculation of SPK
  //  dMatrixT FSF;
  //  dMatrixT LST;//Lagrangian strain tensor used in some functions to get rid of long name
     LagrangianStn=0.0;
     Elastic_LagrangianStn=0.0;

     MicroStnTensor=0.0;//Micro-strain tensor
     PSI=0.0;//deformation measure PSI=Transpose(F).chi
     ChiM=0.0; //Micro-deformation tensor Chi ( used a different tensor this time )
     I1_1=0.0;
     I1_2=0.0;
     I1_3=0.0;
     I1_4=0.0;
     I1_5=0.0;
     I1_6=0.0;
     I1_7=0.0;
     I2_1=0.0;
     I1_8=0.0;
     I2_2=0.0;
     I1_9=0.0;
     I2_3=0.0;
     fFJ=0.0;
     fJF=0.0;
     fJ1_1=0.0;
     fJ1_2=0.0;
     fJ1_3=0.0;
     fJ1_4=0.0;
     fJ2_1=0.0;
     fJ1_5=0.0;
     fJ2_2=0.0;
     fJ1_6=0.0;
     fJ2_3=0.0;
     Vint_1=0.0;
     Vint_1_temp=0.0;
     Vint_2=0.0;
     Vint_2_temp=0.0;
     Vint_3=0.0;
     Vint_3_temp=0.0;

     fMKLM=0.0;
     fMKLM_tr=0.0;
     GAMMA=0.0;
     GRAD_CHIM=0.0;
     fV1=0.0;
     fV2=0.0;
     fV3=0.0;
     fKu_1=0.0;
     fKu_2=0.0;
     fKu_3=0.0;
     fKu_4=0.0;
     fKu_5=0.0;
     fKu_6=0.0;
     fKu_7=0.0;
     fKFJu=0.0;
     fKJFu=0.0;



     fKuphi_1=0.0;
     fKu_8=0.0;
     fKuphi_2=0.0;
     fKu_9=0.0;
     fKuphi_3=0.0;
     fKphiu_1=0.0;
     fKphiu_2=0.0;
     fKphiu_3=0.0;
     fKphiu_4=0.0;
     fKphiu_5=0.0;
     fKphiphi_1=0.0;
     fKphiphi_2=0.0;
     fKphiu_6=0.0;
     fKphiphi_3=0.0;

     fFM=0.0;
     fMF=0.0;
     fEtaM=0.0;
     fMpu_1_1=0.0;
     fMpu_1_2=0.0;
     fMpp_1_1=0.0;
     fMpp_1_2=0.0;
     fMpu_2_1=0.0;
     fMpu_2_2=0.0;
     fMpp_2_1=0.0;
     fMpp_2_2=0.0;
     fMpu_3=0.0;
     fMpp_3=0.0;
     fMpu_4=0.0;
     fMpp_4=0.0;
     fMpu_5_1=0.0;
     fMpu_5_2=0.0;
     fMpp_5_1=0.0;
     fMpp_5_2=0.0;
     fMpu_6=0.0;
     fMpp_6=0.0;
     fMpu_7=0.0;
     fMpp_7=0.0;
     fMpu_8_1=0.0;
     fMpu_8_2=0.0;
     fMpp_8_1=0.0;
     fMpp_8_2=0.0;
     fMpu_9=0.0;
     fMpp_9=0.0;
     fMpu_10=0.0;
     fMpp_10=0.0;
     fMpu_11=0.0;
     fMpp_11=0.0;

     fKMFphiu=0.0;
     fKMchiphiphi=0.0;
     fKMphiu_1_1=0.0;
     fKMphiphi_1_1=0.0;
     fKMphiu_1_2=0.0;
     fKMphiphi_1_2=0.0;
     fKMphiu_2_1=0.0;
     fKMphiphi_2_1=0.0;
     fKMphiu_2_2=0.0;
     fKMphiphi_2_2=0.0;
     fKMphiu_3=0.0;
     fKMphiphi_3=0.0;
     fKMphiu_4=0.0;
     fKMphiphi_4=0.0;
     fKMphiu_5_1=0.0;
     fKMphiphi_5_1=0.0;
     fKMphiu_5_2=0.0;
     fKMphiphi_5_2=0.0;
     fKMphiu_6=0.0;
     fKMphiphi_6=0.0;
     fKMphiu_7=0.0;
     fKMphiphi_7=0.0;
     fKMphiu_8_1=0.0;
     fKMphiphi_8_1=0.0;
     fKMphiu_8_2=0.0;
     fKMphiphi_8_2=0.0;
     fKMphiu_9=0.0;
     fKMphiphi_9=0.0;
     fKMphiu_10=0.0;
     fKMphiphi_10=0.0;
     fKMphiu_11=0.0;
     fKMphiphi_11=0.0;


     Jmat=0.0;
     KJmat=0.0;

    ////////////////////////////////////////////////////////////////
    //////////////FINITE STRAIN MATRICES INITIALIZE/////////////////
    ////////////////////////////////////////////////////////////////

     SPK=0.0;
     KirchhoffST=0.0;// The first Piola-Kirchhoff Matrix
     Temp_SPK=0.0;//temporary Matrix used in calculation of SPK
     LagrangianStn=0.0;
     Elastic_LagrangianStn_tr=0.0;

     MicroStnTensor=0.0;//Micro-strain tensor
     PSI=0.0;//deformation measure PSI=Transpose(F).chi
     ChiM=0.0; //Micro-deformation tensor Chi ( used a different tensor this time )


     fRight_Elastic_Cauchy_Green_tensor_tr=0.0;
     fSPK_tr=0.0;
     fdevSPK_tr=0.0;

     Jmat=0.0;
     KJmat=0.0;

     /* Initializing Plasticity Matrices */
     /* All the matrices used in summation have to be initialized to 0.0; */

     Vintp_1=0.0;
     Vintp_1_temp=0.0;
     Vintp_2=0.0;
     Vintp_2_temp=0.0;
     Vintp_3=0.0;
     Vintp_3_temp=0.0;


     fKu_IJp_1=0.0;
     fKu_IJp_2=0.0;
     fKu_IJp_3=0.0;
     fKu_IJp_4=0.0;
     fKu_IJp_5=0.0;
     fKu_IJp_6=0.0;
     fKuphi_IJp_7=0.0;
     fKuphi_IJp_8=0.0;
     fKuphi_IJp_9=0.0;
     /* Matrices from coupling*/
     fKu_IJp_10=0.0;
     fKu_IJp_11=0.0;
     fKu_IJp_12=0.0;
     fKuphi_IJp_13=0.0;
     fKu_IJp_14=0.0;
     fKuphi_IJp_15=0.0;
     fKu_IJp_16=0.0;
     fKuphi_IJp_17=0.0;

     fKu_I1e_1=0.0;

     fKu_I2e_1=0.0;
     fKu_I2p_2=0.0;
     fKu_I2p_3=0.0;
     fKu_I2p_4=0.0;
     fKu_I2p_5=0.0;
     fKu_I2p_6=0.0;
     fKu_I2p_7=0.0;
     fKuphi_I2p_8=0.0;
     fKuphi_I2p_9=0.0;
     fKuphi_I2p_10=0.0;
     /* Matrices from coupling*/
     fKu_I2p_11=0.0;
     fKu_I2p_12=0.0;
     fKu_I2p_13=0.0;
     fKuphi_I2p_14=0.0;
     fKu_I2p_15=0.0;
     fKuphi_I2p_16=0.0;
     fKu_I2p_17=0.0;
     fKuphi_I2p_18=0.0;




     fKu_I3e_1=0.0;
     fKu_I3e_2=0.0;
     fKu_I3e_3=0.0;
     fKu_I3p_4=0.0;
     fKu_I3p_5=0.0;
     fKu_I3p_6=0.0;
     fKu_I3p_7=0.0;
     fKu_I3p_8=0.0;
     fKu_I3p_9=0.0;
     fKu_I3p_10=0.0;
     fKu_I3p_11=0.0;
     fKu_I3p_12=0.0;
     fKu_I3e_13=0.0;
     fKu_I3e_14=0.0;
     fKu_I3e_15=0.0;
     fKu_I3p_16=0.0;
     fKu_I3p_17=0.0;
     fKu_I3p_18=0.0;
     fKu_I3p_19=0.0;
     fKu_I3p_20=0.0;
     fKu_I3p_21=0.0;
     fKu_I3p_22=0.0;
     fKu_I3p_23=0.0;
     fKu_I3p_24=0.0;
     fKu_I3p_25=0.0;
     fKu_I3p_26=0.0;
     fKu_I3p_27=0.0;
     fKu_I3p_28=0.0;
     fKu_I3p_29=0.0;
     fKu_I3p_30=0.0;
     fKu_I3p_31=0.0;
     fKu_I3p_32=0.0;
     fKu_I3p_33=0.0;
     fKu_I3p_34=0.0;
     fKu_I3p_35=0.0;
     fKu_I3p_36=0.0;
     fKuphi_I3e_37=0.0;
     fKuphi_I3e_38=0.0;
     fKuphi_I3e_39=0.0;
     fKuphi_I3p_40=0.0;
     fKuphi_I3p_41=0.0;
     fKuphi_I3p_42=0.0;
     fKuphi_I3p_43=0.0;
     fKuphi_I3p_44=0.0;
     fKuphi_I3p_45=0.0;
     fKuphi_I3p_46=0.0;
     fKuphi_I3p_47=0.0;
     fKuphi_I3p_48=0.0;
     fKuphi_I3p_49=0.0;
     fKuphi_I3p_50=0.0;
     fKuphi_I3p_51=0.0;
     fKuphi_I3p_52=0.0;
     fKuphi_I3p_53=0.0;
     fKuphi_I3p_54=0.0;
     /* Matrices for Del(delgammachi) */
     fKu_I3p_55=0.0;
     fKu_I3p_56=0.0;
     fKu_I3p_57=0.0;
     fKuphi_I3p_58=0.0;
     fKu_I3p_59=0.0;
     fKuphi_I3p_60=0.0;
     fKu_I3p_61=0.0;
     fKuphi_I3p_62=0.0;
     fKu_I3p_63=0.0;
     fKu_I3p_64=0.0;
     fKu_I3p_65=0.0;
     fKuphi_I3p_66=0.0;
     fKu_I3p_67=0.0;
     fKuphi_I3p_68=0.0;
     fKu_I3p_69=0.0;
     fKuphi_I3p_70=0.0;
     fKu_I3p_71=0.0;
     fKu_I3p_72=0.0;
     fKu_I3p_73=0.0;
     fKuphi_I3p_74=0.0;
     fKu_I3p_75=0.0;
     fKuphi_I3p_76=0.0;
     fKu_I3p_77=0.0;
     fKuphi_I3p_78=0.0;
     /* Matrices coming from coupling */
     fKu_I3p_79=0.0;
     fKu_I3p_80=0.0;
     fKu_I3p_81=0.0;
     fKuphi_I3p_82=0.0;
     fKu_I3p_83=0.0;
     fKuphi_I3p_84=0.0;
     fKu_I3p_85=0.0;
     fKuphi_I3p_86=0.0;
     fKu_I3p_87=0.0;
     fKu_I3p_88=0.0;
     fKu_I3p_89=0.0;
     fKuphi_I3p_90=0.0;
     fKu_I3p_91=0.0;
     fKuphi_I3p_92=0.0;
     fKu_I3p_93=0.0;
     fKuphi_I3p_94=0.0;
     fKu_I3p_95=0.0;
     fKu_I3p_96=0.0;
     fKu_I3p_97=0.0;
     fKuphi_I3p_98=0.0;
     fKu_I3p_99=0.0;
     fKuphi_I3p_100=0.0;
     fKu_I3p_101=0.0;
     fKuphi_I3p_102=0.0;
     fKu_I3p_103=0.0;
     fKu_I3p_104=0.0;
     fKu_I3p_105=0.0;
     fKuphi_I3p_106=0.0;
     fKu_I3p_107=0.0;
     fKuphi_I3p_108=0.0;
     fKu_I3p_109=0.0;
     fKuphi_I3p_110=0.0;
     fKu_I3p_111=0.0;
     fKu_I3p_112=0.0;
     fKu_I3p_113=0.0;
     fKuphi_I3p_114=0.0;
     fKu_I3p_115=0.0;
     fKuphi_I3p_116=0.0;
     fKu_I3p_117=0.0;
     fKuphi_I3p_118=0.0;
     fKu_I3p_119=0.0;
     fKu_I3p_120=0.0;
     fKu_I3p_121=0.0;
     fKuphi_I3p_122=0.0;
     fKu_I3p_123=0.0;
     fKuphi_I3p_124=0.0;
     fKu_I3p_125=0.0;
     fKuphi_I3p_126=0.0;
     fKu_I3p_127=0.0;
     fKu_I3p_128=0.0;
     fKu_I3p_129=0.0;
     fKuphi_I3p_130=0.0;
     fKu_I3p_131=0.0;
     fKuphi_I3p_132=0.0;
     fKu_I3p_133=0.0;
     fKuphi_I3p_134=0.0;
     fKu_I3p_135=0.0;
     fKu_I3p_136=0.0;
     fKu_I3p_137=0.0;
     fKuphi_I3p_138=0.0;
     fKu_I3p_139=0.0;
     fKuphi_I3p_140=0.0;
     fKu_I3p_141=0.0;
     fKuphi_I3p_142=0.0;



     fKu_I4e_1=0.0;
     fKu_I4p_2=0.0;
     fKu_I4p_3=0.0;
     fKu_I4p_4=0.0;
     fKu_I4p_5=0.0;
     fKu_I4p_6=0.0;
     fKu_I4p_7=0.0;
     fKuphi_I4p_8=0.0;
     fKuphi_I4p_9=0.0;
     fKuphi_I4p_10=0.0;
     fKu_I4p_11=0.0;
     fKu_I4p_12=0.0;
     fKu_I4p_13=0.0;
     fKuphi_I4p_14=0.0;
     fKu_I4p_15=0.0;
     fKuphi_I4p_16=0.0;
     fKu_I4p_17=0.0;
     fKuphi_I4p_18=0.0;

     fKphiu_IIJp_1=0.0;
     fKphiu_IIJp_2=0.0;
     fKphiu_IIJp_3=0.0;
     fKphiu_IIJp_4=0.0;
     fKphiu_IIJp_5=0.0;
     fKphiphi_IIJp_6=0.0;
     fKphiphi_IIJp_7=0.0;
     fKphiphi_IIJp_8=0.0;
     fKphiu_IIJp_9=0.0;
     fKphiu_IIJp_10=0.0;
     fKphiu_IIJp_11=0.0;
     fKphiphi_IIJp_12=0.0;
     fKphiu_IIJp_13=0.0;
     fKphiphi_IIJp_14=0.0;
     fKphiu_IIJp_15=0.0;
     fKphiphi_IIJp_16=0.0;

     fKphiu_II2e_1=0.0;
     fKphiu_II2p_2=0.0;
     fKphiu_II2p_3=0.0;
     fKphiu_II2p_4=0.0;
     fKphiu_II2p_5=0.0;
     fKphiu_II2p_6=0.0;
     fKphiphi_II2p_7=0.0;
     fKphiphi_II2p_8=0.0;
     fKphiphi_II2p_9=0.0;
     /* Matrices from coupling*/
     fKphiu_II2p_10=0.0;
     fKphiu_II2p_11=0.0;
     fKphiu_II2p_12=0.0;
     fKphiphi_II2p_13=0.0;
     fKphiu_II2p_14=0.0;
     fKphiphi_II2p_15=0.0;
     fKphiu_II2p_16=0.0;
     fKphiphi_II2p_17=0.0;




     fKphiu_II3e_1=0.0;
     fKphiu_II3e_2=0.0;
     fKphiu_II3e_3=0.0;
     fKphiu_II3e_4=0.0;
     fKphiu_II3e_5=0.0;
     fKphiu_II3p_6=0.0;
     fKphiu_II3p_7=0.0;
     fKphiu_II3p_8=0.0;
     fKphiu_II3p_9=0.0;
     fKphiu_II3p_10=0.0;
     fKphiu_II3p_11=0.0;
     fKphiu_II3p_12=0.0;
     fKphiu_II3p_13=0.0;
     fKphiu_II3p_14=0.0;
     fKphiu_II3p_15=0.0;
     fKphiu_II3p_16=0.0;
     fKphiu_II3p_17=0.0;
     fKphiu_II3p_18=0.0;
     fKphiu_II3p_19=0.0;
     fKphiu_II3p_20=0.0;
     fKphiu_II3p_21=0.0;
     fKphiu_II3p_22=0.0;
     fKphiu_II3p_23=0.0;
     fKphiu_II3p_24=0.0;
     fKphiu_II3p_25=0.0;
     fKphiu_II3p_26=0.0;
     fKphiu_II3p_27=0.0;
     fKphiu_II3p_28=0.0;
     fKphiu_II3p_29=0.0;
     fKphiu_II3p_30=0.0;
     fKphiphi_II3e_31=0.0;
     fKphiphi_II3e_32=0.0;
     fKphiphi_II3e_33=0.0;
     fKphiphi_II3p_34=0.0;
     fKphiphi_II3p_35=0.0;
     fKphiphi_II3p_36=0.0;
     fKphiphi_II3p_37=0.0;
     fKphiphi_II3p_38=0.0;
     fKphiphi_II3p_39=0.0;
     fKphiphi_II3p_40=0.0;
     fKphiphi_II3p_41=0.0;
     fKphiphi_II3p_42=0.0;
     fKphiphi_II3p_43=0.0;
     fKphiphi_II3p_44=0.0;
     fKphiphi_II3p_45=0.0;
     fKphiphi_II3p_46=0.0;
     fKphiphi_II3p_47=0.0;
     fKphiphi_II3p_48=0.0;
     /* Matrices from Del(delgammachi) */
     fKphiu_II3p_49=0.0;
     fKphiu_II3p_50=0.0;
     fKphiu_II3p_51=0.0;
     fKphiphi_II3p_52=0.0;
     fKphiu_II3p_53=0.0;
     fKphiphi_II3p_54=0.0;
     fKphiu_II3p_55=0.0;
     fKphiphi_II3p_56=0.0;
     fKphiu_II3p_57=0.0;
     fKphiu_II3p_58=0.0;
     fKphiu_II3p_59=0.0;
     fKphiphi_II3p_60=0.0;
     fKphiu_II3p_61=0.0;
     fKphiphi_II3p_62=0.0;
     fKphiu_II3p_63=0.0;
     fKphiphi_II3p_64=0.0;
     fKphiu_II3p_65=0.0;
     fKphiu_II3p_66=0.0;
     fKphiu_II3p_67=0.0;
     fKphiphi_II3p_68=0.0;
     fKphiu_II3p_69=0.0;
     fKphiphi_II3p_70=0.0;
     fKphiu_II3p_71=0.0;
     fKphiphi_II3p_72=0.0;
     /* Matrices from coupling*/
     fKphiu_II3p_73=0.0;
     fKphiu_II3p_74=0.0;
     fKphiu_II3p_75=0.0;
     fKphiphi_II3p_76=0.0;
     fKphiu_II3p_77=0.0;
     fKphiphi_II3p_78=0.0;
     fKphiu_II3p_79=0.0;
     fKphiphi_II3p_80=0.0;
     fKphiu_II3p_81=0.0;
     fKphiu_II3p_82=0.0;
     fKphiu_II3p_83=0.0;
     fKphiphi_II3p_84=0.0;
     fKphiu_II3p_85=0.0;
     fKphiphi_II3p_86=0.0;
     fKphiu_II3p_87=0.0;
     fKphiphi_II3p_88=0.0;
     fKphiu_II3p_89=0.0;
     fKphiu_II3p_90=0.0;
     fKphiu_II3p_91=0.0;
     fKphiphi_II3p_92=0.0;
     fKphiu_II3p_93=0.0;
     fKphiphi_II3p_94=0.0;
     fKphiu_II3p_95=0.0;
     fKphiphi_II3p_96=0.0;
     fKphiu_II3p_97=0.0;
     fKphiu_II3p_98=0.0;
     fKphiu_II3p_99=0.0;
     fKphiphi_II3p_100=0.0;
     fKphiu_II3p_101=0.0;
     fKphiphi_II3p_102=0.0;
     fKphiu_II3p_103=0.0;
     fKphiphi_II3p_104=0.0;
     fKphiu_II3p_105=0.0;
     fKphiu_II3p_106=0.0;
     fKphiu_II3p_107=0.0;
     fKphiphi_II3p_108=0.0;
     fKphiu_II3p_109=0.0;
     fKphiphi_II3p_110=0.0;
     fKphiu_II3p_111=0.0;
     fKphiphi_II3p_112=0.0;
     /* From delGammachi */
     fKphiu_II3p_113=0.0;
     fKphiu_II3p_114=0.0;
     fKphiu_II3p_115=0.0;
     fKphiphi_II3p_116=0.0;
     fKphiu_II3p_117=0.0;
     fKphiphi_II3p_118=0.0;
     fKphiu_II3p_119=0.0;
     fKphiphi_II3p_120=0.0;
     fKphiu_II3p_121=0.0;
     fKphiu_II3p_122=0.0;
     fKphiu_II3p_123=0.0;
     fKphiphi_II3p_124=0.0;
     fKphiu_II3p_125=0.0;
     fKphiphi_II3p_126=0.0;
     fKphiu_II3p_127=0.0;
     fKphiphi_II3p_128=0.0;
     fKphiu_II3p_129=0.0;
     fKphiu_II3p_130=0.0;
     fKphiu_II3p_131=0.0;
     fKphiphi_II3p_132=0.0;
     fKphiu_II3p_133=0.0;
     fKphiphi_II3p_134=0.0;
     fKphiu_II3p_135=0.0;
     fKphiphi_II3p_136=0.0;



     fKphiu_II4e_1=0.0;
     fKphiu_II4p_2=0.0;
     fKphiu_II4p_3=0.0;
     fKphiu_II4p_4=0.0;
     fKphiu_II4p_5=0.0;
     fKphiu_II4p_6=0.0;
     fKphiphi_II4p_7=0.0;
     fKphiphi_II4p_8=0.0;
     fKphiphi_II4p_9=0.0;
     /* Matrices from coupling*/
     fKphiu_II4p_10=0.0;
     fKphiu_II4p_11=0.0;
     fKphiu_II4p_12=0.0;
     fKphiphi_II4p_13=0.0;
     fKphiu_II4p_14=0.0;
     fKphiphi_II4p_15=0.0;
     fKphiu_II4p_16=0.0;
     fKphiphi_II4p_17=0.0;


     /* Matrices from higher order couple stress tensor related terms*/
     fKMphiu_II5Jp_1 = 0.0;
     fKMphiu_II5Jp_2 = 0.0;
     fKMphiu_II5Jp_3 = 0.0;
     fKMphiu_II5Jp_4 = 0.0;
     fKMphiu_II5Jp_5 = 0.0;
     fKMphiphi_II5Jp_6 = 0.0;
     fKMphiphi_II5Jp_7 = 0.0;
     fKMphiphi_II5Jp_8 = 0.0;
     fKMphiu_II5Jp_9 = 0.0;
     fKMphiu_II5Jp_10 = 0.0;
     fKMphiu_II5Jp_11 = 0.0;
     fKMphiphi_II5Jp_12 = 0.0;
     fKMphiu_II5Jp_13 = 0.0;
     fKMphiphi_II5Jp_14 = 0.0;
     fKMphiu_II5Jp_15 = 0.0;
     fKMphiphi_II5Jp_16 = 0.0;

     fKMphiu_II6e_1 = 0.0;
     fKMphiu_II7e_1 = 0.0;

     fKMphiu_II7p_1 = 0.0;
     fKMphiu_II7p_2 = 0.0;
     fKMphiu_II7p_3 = 0.0;
     fKMphiu_II7p_4 = 0.0;
     fKMphiu_II7p_5 = 0.0;
     fKMphiphi_II7p_6 = 0.0;
     fKMphiphi_II7p_7 = 0.0;
     fKMphiphi_II7p_8 = 0.0;
     fKMphiu_II7p_9 = 0.0;
     fKMphiu_II7p_10 = 0.0;
     fKMphiu_II7p_11 = 0.0;
     fKMphiphi_II7p_12 = 0.0;
     fKMphiu_II7p_13 = 0.0;
     fKMphiphi_II7p_14 = 0.0;
     fKMphiu_II7p_15 = 0.0;
     fKMphiphi_II7p_16 = 0.0;

     fKMphiu_II8e_1 = 0.0;

     fKMphiu_II8p_1 = 0.0;
     fKMphiu_II8p_2 = 0.0;
     fKMphiu_II8p_3 = 0.0;
     fKMphiu_II8p_4 = 0.0;
     fKMphiu_II8p_5 = 0.0;
     fKMphiphi_II8p_6 = 0.0;
     fKMphiphi_II8p_7 = 0.0;
     fKMphiphi_II8p_8 = 0.0;
     fKMphiu_II8p_9 = 0.0;
     fKMphiu_II8p_10 = 0.0;
     fKMphiu_II8p_11 = 0.0;
     fKMphiphi_II8p_12 = 0.0;
     fKMphiu_II8p_13 = 0.0;
     fKMphiphi_II8p_14 = 0.0;
     fKMphiu_II8p_15 = 0.0;
     fKMphiphi_II8p_16 = 0.0;

     fKMphiu_II9e_1 = 0.0;

     fKMphiu_II9p_1 = 0.0;
     fKMphiu_II9p_2 = 0.0;
     fKMphiu_II9p_3 = 0.0;
     fKMphiu_II9p_4 = 0.0;
     fKMphiu_II9p_5 = 0.0;
     fKMphiphi_II9p_6 = 0.0;
     fKMphiphi_II9p_7 = 0.0;
     fKMphiphi_II9p_8 = 0.0;
     fKMphiu_II9p_9 = 0.0;
     fKMphiu_II9p_10 = 0.0;
     fKMphiu_II9p_11 = 0.0;
     fKMphiphi_II9p_12 = 0.0;
     fKMphiu_II9p_13 = 0.0;
     fKMphiphi_II9p_14 = 0.0;
     fKMphiu_II9p_15 = 0.0;
     fKMphiphi_II9p_16 = 0.0;


     fKMphiphi_II10e_1=0.0;

     fKMphiu_II10p_1 = 0.0;
     fKMphiu_II10p_2 = 0.0;
     fKMphiu_II10p_3 = 0.0;
     fKMphiu_II10p_4 = 0.0;
     fKMphiu_II10p_5 = 0.0;
     fKMphiphi_II10p_6 = 0.0;
     fKMphiphi_II10p_7 = 0.0;
     fKMphiphi_II10p_8 = 0.0;
     fKMphiu_II10p_9 = 0.0;
     fKMphiu_II10p_10 = 0.0;
     fKMphiu_II10p_11 = 0.0;
     fKMphiphi_II10p_12 = 0.0;
     fKMphiu_II10p_13 = 0.0;
     fKMphiphi_II10p_14 = 0.0;
     fKMphiu_II10p_15 = 0.0;
     fKMphiphi_II10p_16 = 0.0;

     fKMphiu_II11p_1 = 0.0;
     fKMphiu_II11p_2 = 0.0;
     fKMphiu_II11p_3 = 0.0;
     fKMphiu_II11p_4 = 0.0;
     fKMphiu_II11p_5 = 0.0;
     fKMphiphi_II11p_6 = 0.0;
     fKMphiphi_II11p_7 = 0.0;
     fKMphiphi_II11p_8 = 0.0;
     fKMphiu_II11p_9 = 0.0;
     fKMphiu_II11p_10 = 0.0;
     fKMphiu_II11p_11 = 0.0;
     fKMphiphi_II11p_12 = 0.0;
     fKMphiu_II11p_13 = 0.0;
     fKMphiphi_II11p_14 = 0.0;
     fKMphiu_II11p_15 = 0.0;
     fKMphiphi_II11p_16 = 0.0;

     fKMphiphi_II12e_1=0.0;

     fKMphiu_II12p_1 = 0.0;
     fKMphiu_II12p_2 = 0.0;
     fKMphiu_II12p_3 = 0.0;
     fKMphiu_II12p_4 = 0.0;
     fKMphiu_II12p_5 = 0.0;
     fKMphiphi_II12p_6 = 0.0;
     fKMphiphi_II12p_7 = 0.0;
     fKMphiphi_II12p_8 = 0.0;
     fKMphiu_II12p_9 = 0.0;
     fKMphiu_II12p_10 = 0.0;
     fKMphiu_II12p_11 = 0.0;
     fKMphiphi_II12p_12 = 0.0;
     fKMphiu_II12p_13 = 0.0;
     fKMphiphi_II12p_14 = 0.0;
     fKMphiu_II12p_15 = 0.0;
     fKMphiphi_II12p_16 = 0.0;


     trfA1 = 0.0;
     fdFYdS_fA1 = 0.0;
     fdFYdS_fA1T = 0.0;
     dFYdScol1 = 0.0;
     trfN1 = 0.0;
     fdFYdS_fN1 = 0.0;
     fdFYdS_fN1T = 0.0;
     trfD1 = 0.0;
     fdFYchidSIGMA_fD1 = 0.0;
     fdFYchidSIGMA_fD1T = 0.0;
     dFYchidSIGMA_Scol1 = 0.0;
     fdFYdS_fD1 = 0.0;
     fdFYdS_fD1T = 0.0;
     fdFYchidSIGMA_fA1 = 0.0;
     fdFYchidSIGMA_fA1T = 0.0;
     fdFYchidSIGMA_fN1 = 0.0;
     fdFYchidSIGMA_fN1T = 0.0;

     ///////////////// Micro Gradient Plasticity initialization /////////////////
     fNormdevMKLM_tr = 0.0;
     fNormdevMeKLM = 0.0;
     fMicro_gradient_Yield_function_tr = 0.0;
     fMicro_gradient_Yield_function = 0.0;
     Micro_gradient_Plasticity_Occurrence = 0.0;
     Micro_Plasticity_Occurrence = 0.0;
     Macro_Plasticity_Occurrence = 0.0;
     dNormdevfMKLMdDelgammanablachi = 0.0;
     Norm_Mean_fMKLM_tr = 0.0;
     Norm_Mean_fMeKLM = 0.0;
     Norm_kc_nablachi_n = 0.0;
     dNorm_meanfMKLMdDelgammanablachi = 0.0;
     dNorm_kc_nablachidDelgammanablachi = 0.0;
     dfNorm_devMKLMdDelgammanablachi = 0.0;
     dFyield_nablachidDelgammanablachi = 0.0;
     fdelDelgammanablachi = 0.0;
     fDelgammanablachi = 0.0;
     Norm_cohesion_nablachi = 0.0;
     Coeff_delDelgamma_nablachi = 0.0;
     fdFYdS_trace = 0.0;
     fdFYchidSIGMA_S_trace = 0.0;
     GXp = 0.0;

     fKMphiu_II13e_1 = 0.0;


     fKMphiu_II14p_1 = 0.0;
     fKMphiu_II14p_2 = 0.0;
     fKMphiu_II14p_3 = 0.0;
     fKMphiu_II14p_4 = 0.0;
     fKMphiu_II14p_5 = 0.0;
     fKMphiphi_II14p_6 = 0.0;
     fKMphiphi_II14p_7 = 0.0;
     fKMphiphi_II14p_8 = 0.0;
     fKMphiu_II14p_9 = 0.0;
     fKMphiu_II14p_10 = 0.0;
     fKMphiu_II14p_11 = 0.0;
     fKMphiu_II14p_12 = 0.0;
     fKMphiu_II14p_13 = 0.0;
     fKMphiphi_II14p_14 = 0.0;
     fKMphiphi_II14p_15 = 0.0;
     fKMphiphi_II14p_16 = 0.0;

     fKMphiphi_II15e_1 = 0.0;

     fKMphiu_II16p_1 = 0.0;
     fKMphiu_II16p_2 = 0.0;
     fKMphiu_II16p_3 = 0.0;
     fKMphiu_II16p_4 = 0.0;
     fKMphiu_II16p_5 = 0.0;
     fKMphiphi_II16p_6 = 0.0;
     fKMphiphi_II16p_7 = 0.0;
     fKMphiphi_II16p_8 = 0.0;
     fKMphiu_II16p_9 = 0.0;
     fKMphiu_II16p_10 = 0.0;
     fKMphiu_II16p_11 = 0.0;
     fKMphiu_II16p_12 = 0.0;
     fKMphiu_II16p_13 = 0.0;
     fKMphiphi_II16p_14 = 0.0;
     fKMphiphi_II16p_15 = 0.0;
     fKMphiphi_II16p_16 = 0.0;


     fKMphiu_II17p_1 = 0.0;
     fKMphiu_II17p_2 = 0.0;
     fKMphiu_II17p_3 = 0.0;
     fKMphiu_II17p_4 = 0.0;
     fKMphiu_II17p_5 = 0.0;
     fKMphiphi_II17p_6 = 0.0;
     fKMphiphi_II17p_7 = 0.0;
     fKMphiphi_II17p_8 = 0.0;
     fKMphiu_II17p_9 = 0.0;
     fKMphiu_II17p_10 = 0.0;
     fKMphiu_II17p_11 = 0.0;
     fKMphiu_II17p_12 = 0.0;
     fKMphiu_II17p_13 = 0.0;
     fKMphiphi_II17p_14 = 0.0;
     fKMphiphi_II17p_15 = 0.0;
     fKMphiphi_II17p_16 = 0.0;


     fKMphiu_II18p_1 = 0.0;
     fKMphiu_II18p_2 = 0.0;
     fKMphiu_II18p_3 = 0.0;
     fKMphiu_II18p_4 = 0.0;
     fKMphiu_II18p_5 = 0.0;
     fKMphiphi_II18p_6 = 0.0;
     fKMphiphi_II18p_7 = 0.0;
     fKMphiphi_II18p_8 = 0.0;
     fKMphiu_II18p_9 = 0.0;
     fKMphiu_II18p_10 = 0.0;
     fKMphiu_II18p_11 = 0.0;
     fKMphiu_II18p_12 = 0.0;
     fKMphiu_II18p_13 = 0.0;
     fKMphiphi_II18p_14 = 0.0;
     fKMphiphi_II18p_15 = 0.0;
     fKMphiphi_II18p_16 = 0.0;


     fKMphiu_II19p_1 = 0.0;
     fKMphiu_II19p_2 = 0.0;
     fKMphiu_II19p_3 = 0.0;
     fKMphiu_II19p_4 = 0.0;
     fKMphiu_II19p_5 = 0.0;
     fKMphiphi_II19p_6 = 0.0;
     fKMphiphi_II19p_7 = 0.0;
     fKMphiphi_II19p_8 = 0.0;
     fKMphiu_II19p_9 = 0.0;
     fKMphiu_II19p_10 = 0.0;
     fKMphiu_II19p_11 = 0.0;
     fKMphiu_II19p_12 = 0.0;
     fKMphiu_II19p_13 = 0.0;
     fKMphiphi_II19p_14 = 0.0;
     fKMphiphi_II19p_15 = 0.0;
     fKMphiphi_II19p_16 = 0.0;



     fKMphiu_II20p_1 = 0.0;
     fKMphiu_II20p_2 = 0.0;
     fKMphiu_II20p_3 = 0.0;
     fKMphiu_II20p_4 = 0.0;
     fKMphiu_II20p_5 = 0.0;
     fKMphiphi_II20p_6 = 0.0;
     fKMphiphi_II20p_7 = 0.0;
     fKMphiphi_II20p_8 = 0.0;
     fKMphiu_II20p_9 = 0.0;
     fKMphiu_II20p_10 = 0.0;
     fKMphiu_II20p_11 = 0.0;
     fKMphiu_II20p_12 = 0.0;
     fKMphiu_II20p_13 = 0.0;
     fKMphiphi_II20p_14 = 0.0;
     fKMphiphi_II20p_15 = 0.0;
     fKMphiphi_II20p_16 = 0.0;



     fKMphiu_II21e_1 = 0.0;
     fKMphiu_II21p_1 = 0.0;
     fKMphiu_II21p_2 = 0.0;
     fKMphiu_II21p_3 = 0.0;
     fKMphiu_II21p_4 = 0.0;
     fKMphiu_II21p_5 = 0.0;
     fKMphiphi_II21p_6 = 0.0;
     fKMphiphi_II21p_7 = 0.0;
     fKMphiphi_II21p_8 = 0.0;
     fKMphiu_II21p_1a = 0.0;
     fKMphiu_II21p_2a = 0.0;
     fKMphiu_II21p_3a = 0.0;
     fKMphiu_II21p_4a = 0.0;
     fKMphiu_II21p_5a = 0.0;
     fKMphiphi_II21p_6a = 0.0;
     fKMphiphi_II21p_7a = 0.0;
     fKMphiphi_II21p_8a = 0.0;
     fKMphiphi_II21p_9 = 0.0;

     fKMphiu_II21p_10 = 0.0;
     fKMphiu_II21p_11 = 0.0;
     fKMphiu_II21p_12 = 0.0;
     fKMphiu_II21p_13 = 0.0;
     fKMphiu_II21p_14 = 0.0;
     fKMphiphi_II21p_15 = 0.0;
     fKMphiphi_II21p_16 = 0.0;
     fKMphiphi_II21p_17 = 0.0;
     fKMphiu_II21p_10a = 0.0;
     fKMphiu_II21p_11a = 0.0;
     fKMphiu_II21p_12a = 0.0;
     fKMphiu_II21p_13a = 0.0;
     fKMphiu_II21p_14a = 0.0;
     fKMphiphi_II21p_15a = 0.0;
     fKMphiphi_II21p_16a = 0.0;
     fKMphiphi_II21p_17a = 0.0;



     fKMphiu_II21p_18 = 0.0;
     fKMphiu_II21p_19 = 0.0;
     fKMphiu_II21p_20 = 0.0;
     fKMphiu_II21p_21 = 0.0;
     fKMphiu_II21p_22 = 0.0;
     fKMphiphi_II21p_23 = 0.0;
     fKMphiphi_II21p_24 = 0.0;
     fKMphiphi_II21p_25 = 0.0;
     fKMphiu_II21p_18a = 0.0;
     fKMphiu_II21p_19a = 0.0;
     fKMphiu_II21p_20a = 0.0;
     fKMphiu_II21p_21a = 0.0;
     fKMphiu_II21p_22a = 0.0;
     fKMphiphi_II21p_23a = 0.0;
     fKMphiphi_II21p_24a = 0.0;
     fKMphiphi_II21p_25a = 0.0;

     fKMphiu_II21p_26 = 0.0;

     fKMphiu_II21p_27 = 0.0;
     fKMphiu_II21p_28 = 0.0;
     fKMphiu_II21p_29 = 0.0;
     fKMphiu_II21p_30 = 0.0;
     fKMphiu_II21p_31 = 0.0;
     fKMphiphi_II21p_32 = 0.0;
     fKMphiphi_II21p_33 = 0.0;
     fKMphiphi_II21p_34 = 0.0;
     fKMphiu_II21p_27a = 0.0;
     fKMphiu_II21p_28a = 0.0;
     fKMphiu_II21p_29a = 0.0;
     fKMphiu_II21p_30a = 0.0;
     fKMphiu_II21p_31a = 0.0;
     fKMphiphi_II21p_32a = 0.0;
     fKMphiphi_II21p_33a = 0.0;
     fKMphiphi_II21p_34a = 0.0;

     fKMphiphi_II21p_35 = 0.0;


     fKMphiu_II21p_36 = 0.0;
     fKMphiu_II21p_37 = 0.0;
     fKMphiu_II21p_38 = 0.0;
     fKMphiu_II21p_39 = 0.0;
     fKMphiu_II21p_40 = 0.0;
     fKMphiphi_II21p_41 = 0.0;
     fKMphiphi_II21p_42 = 0.0;
     fKMphiphi_II21p_43 = 0.0;
     fKMphiu_II21p_36a = 0.0;
     fKMphiu_II21p_37a = 0.0;
     fKMphiu_II21p_38a = 0.0;
     fKMphiu_II21p_39a = 0.0;
     fKMphiu_II21p_40a = 0.0;
     fKMphiphi_II21p_41a = 0.0;
     fKMphiphi_II21p_42a = 0.0;
     fKMphiphi_II21p_43a = 0.0;




     fKMphiu_II21p_44 = 0.0;
     fKMphiu_II21p_45 = 0.0;
     fKMphiu_II21p_46 = 0.0;
     fKMphiu_II21p_47 = 0.0;
     fKMphiu_II21p_48 = 0.0;
     fKMphiphi_II21p_49 = 0.0;
     fKMphiphi_II21p_50 = 0.0;
     fKMphiphi_II21p_51 = 0.0;
     fKMphiu_II21p_44a = 0.0;
     fKMphiu_II21p_45a = 0.0;
     fKMphiu_II21p_46a = 0.0;
     fKMphiu_II21p_47a = 0.0;
     fKMphiu_II21p_48a = 0.0;
     fKMphiphi_II21p_49a = 0.0;
     fKMphiphi_II21p_50a = 0.0;
     fKMphiphi_II21p_51a = 0.0;



     fKMphiu_II21p_52 = 0.0;
     fKMphiu_II21p_53 = 0.0;
     fKMphiu_II21p_54 = 0.0;
     fKMphiu_II21p_55 = 0.0;
     fKMphiu_II21p_56 = 0.0;
     fKMphiphi_II21p_57 = 0.0;
     fKMphiphi_II21p_58 = 0.0;
     fKMphiphi_II21p_59 = 0.0;
     fKMphiu_II21p_52a = 0.0;
     fKMphiu_II21p_53a = 0.0;
     fKMphiu_II21p_54a = 0.0;
     fKMphiu_II21p_55a = 0.0;
     fKMphiu_II21p_56a = 0.0;
     fKMphiphi_II21p_57a = 0.0;
     fKMphiphi_II21p_58a = 0.0;
     fKMphiphi_II21p_59a = 0.0;



     fKMphiu_II21p_60 = 0.0;
     fKMphiu_II21p_61 = 0.0;
     fKMphiu_II21p_62 = 0.0;
     fKMphiu_II21p_63 = 0.0;
     fKMphiu_II21p_64 = 0.0;
     fKMphiphi_II21p_65 = 0.0;
     fKMphiphi_II21p_66 = 0.0;
     fKMphiphi_II21p_67 = 0.0;
     fKMphiu_II21p_60a = 0.0;
     fKMphiu_II21p_61a = 0.0;
     fKMphiu_II21p_62a = 0.0;
     fKMphiu_II21p_63a = 0.0;
     fKMphiu_II21p_64a = 0.0;
     fKMphiphi_II21p_65a = 0.0;
     fKMphiphi_II21p_66a = 0.0;
     fKMphiphi_II21p_67a = 0.0;



     fKMphiu_II21p_68 = 0.0;
     fKMphiu_II21p_69 = 0.0;
     fKMphiu_II21p_70 = 0.0;
     fKMphiu_II21p_71 = 0.0;
     fKMphiu_II21p_72 = 0.0;
     fKMphiphi_II21p_73 = 0.0;
     fKMphiphi_II21p_74 = 0.0;
     fKMphiphi_II21p_75 = 0.0;
     fKMphiu_II21p_68a = 0.0;
     fKMphiu_II21p_69a = 0.0;
     fKMphiu_II21p_70a = 0.0;
     fKMphiu_II21p_71a = 0.0;
     fKMphiu_II21p_72a = 0.0;
     fKMphiphi_II21p_73a = 0.0;
     fKMphiphi_II21p_74a = 0.0;
     fKMphiphi_II21p_75a = 0.0;
/////////////////////////////////////////////////////////////////////
     //// Capped model parameters initilization////////
      fMacfunc_nablachi_tr = 0.0;
      fMacfunc_nablachi = 0.0;
      fMacfunc_tr = 0.0;
      fPhiCap_tr = 0.0;
      fMacfunc_chi_tr = 0.0;
      fMacfunc_chi = 0.0;
      fPhiCap_chi_tr = 0.0;
      fPhiCap_chi = 0.0;
      fPhiCap_nablachi_tr = 0.0;
      Cpsi_tr = 0.0;
      Cpsi_chi_tr = 0.0;
      Cpsi_nablachi_tr = 0.0;
      Cpsi = 0.0;
      Cpsi_chi = 0.0;
      Cpsi_nablachi = 0.0;
      Cphi = 0.0;
      Cphi_chi = 0.0;
      Cphi_nablachi = 0.0;
      Cphi_tr = 0.0;
      Cphi_chi_tr = 0.0;
      Cphi_nablachi_tr = 0.0;
      Xphi = 0.0;
      Xphi_m = 0.0;
      Xphi_chi = 0.0;
      Xphi_chi_m = 0.0;
      fMacfunc = 0.0;
      fPhiCap = 0.0;
      dKappadDelgamma = 0.0;
      dXphi_m_dDelgamma = 0.0;
      dFphicapdDelgamma = 0.0;
      dKappachidDelgammachi = 0.0;
      dXphi_chi_m_dDelgammachi = 0.0;
      dFphichicapdDelgammachi = 0.0;
      dFphicapdDelgammachi = 0.0;
      dFphichicapdDelgamma = 0.0;
      dfKappa_nablachidDelgammanablachi = 0.0;
      dNorm_Kappa_nablachidDelgammanablachi = 0.0;
      Kappa_nablachi = 0.0;
      Norm_Kappa_nablachi = 0.0;
      devMKLMddevMKLMdDelgammanablachi = 0.0;
      fDelKappa_nablachi = 0.0;
      dXphi_nablachi_mdDelgammanablachi = 0.0;
      dFphi_nabalchidDelgammanablachi = 0.0;
      Xphi_nablachi = 0.0;
      Xphi_nablachi_m = 0.0;
      fPhiCap_nablachi = 0.0;
      signMacfunc = 0.0;
      signfMacfunc_chi = 0.0;
      signfMacfunc_nablachi = 0.0;
      dFphidKappa = 0.0;
      dFYdKappa = 0.0;
      dFphichidKappachi = 0.0;
      dFYchidKappachi = 0.0;
      dFphinablachidKappanablachi = 0.0;
      dFYnablachidKappanablachi = 0.0;
      fPsiCap_tr = 0.0;
      fPsiCap_chi_tr = 0.0;
      fPsiCap_nablachi_tr = 0.0;
      Xpsi_m = 0.0;
      fPsiCap = 0.0;
      Xpsi_chi_m = 0.0;
      fPsiCap_chi = 0.0;
      Xpsi_nablachi_m = 0.0;
      fPsiCap_nablachi = 0.0;

 //////////////////////////////////////////////////////////////////////
      fdGdc;
      fdGYchidcchi;
      dFpsidKappa;
      dGdKappa;
      dFpsichidKappachi;
      dGchidKappachi;
      dFpsinablachidKappanablachi;
      dGnablachidKappanablachi;
      dGnablachidcohesion_nablachi;

////////////////////////////////////////////////////////////////////////////////////////



    ////////////////////////////////////////////////////////////////
    //////////////FINITE STRAIN MATRICES INITIALIZE/////////////////
    ////////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////////
    //////////////FINITE STRAIN MATRICES INITIALIZE/////////////////
    ////////////////////////////////////////////////////////////////

    e = CurrElementNumber();
    const iArrayT& nodes_displ = fElementCards_displ[e].NodesU();
    const iArrayT& nodes_micro = fElementCards_micro[e].NodesU();

    u.SetLocal(nodes_displ);
    u_n.SetLocal(nodes_displ);
    if (u_dot.IsRegistered()) u_dot.SetLocal(nodes_displ);
    if (u_dot_n.IsRegistered()) u_dot_n.SetLocal(nodes_displ);
    if (u_dotdot.IsRegistered()) u_dotdot.SetLocal(nodes_displ);
    if (u_dotdot_n.IsRegistered())u_dotdot_n.SetLocal(nodes_displ);

    Phi.SetLocal(nodes_micro);
    Phi_n.SetLocal(nodes_micro);
    if (Phi_dot.IsRegistered()) Phi_dot.SetLocal(nodes_micro);
    if (Phi_dot_n.IsRegistered()) Phi_dot_n.SetLocal(nodes_micro);
    if (Phi_dotdot.IsRegistered()) Phi_dotdot.SetLocal(nodes_micro);
    if (Phi_dotdot_n.IsRegistered()) Phi_dotdot_n.SetLocal(nodes_micro);

/*
 // print solid displacement at current step (u)
/*  fs_micromorph3D_out        <<"nodal solid displacement at current step(u)"<< endl ;
    for (int i=0; i<n_en_displ; i++)
    {
        fs_micromorph3D_out        << "node number " << i+1 <<" :  " ;
        for (int j=0; j<n_sd; j++)
        fs_micromorph3D_out << u(i,j) << "\t";
        fs_micromorph3D_out        << endl ;
    }*/



    /* print micro-displacement-gradient at current step (micro)*/
/*  fs_micromorph3D_out        <<"nodal micro-displacement-gradient at current step(micro)"<< endl ;
    for (int i=0; i<n_en_micro; i++)
    {
        fs_micromorph3D_out        << "node number " << i+1 <<" :  " ;
        fs_micromorph3D_out        << Phi(i,0) << endl;
    }
*/

/*    for (int i=0; i<3; i++)
    {
       for(int j=0;j<3;j++)
       {
           for(int k=0;k<3;k++)
           {
                    fs_micromorph3D_out        << "fMKLM(i,j,k) " << i<<j<<k <<" :  " ;
                fs_micromorph3D_out        << fMKLM(i,j,k) << endl;
           }
       }

    }
*/
    /* populate solid displacement,solid velocity and
       solid accelration in vector form*/

    int index_u = 0;
    for (int i=0; i<n_en_displ; i++)
    {
        for (int j=0; j<n_sd; j++)
        {
            u_vec[index_u] = u(i,j);
            u_dot_vec[index_u] = u_dot(i,j);
            u_dotdot_vec[index_u] = u_dotdot(i,j);
            index_u += 1;
        }
    }

    /* [u_dot_column_matrix] will be formed */
    for (int i=0; i<n_en_displ_x_n_sd; i++)
        u_dot_column_matrix(i,0) = u_dot_vec[i];

    /* [u_dot_column_matrix_Transpose] will be formed */
    u_dot_column_matrix_Transpose.Transpose(u_dot_column_matrix);

    /* [u_dotdot_column_matrix] will be formed */
    for (int i=0; i<n_en_displ_x_n_sd; i++)
        u_dotdot_column_matrix(i,0) = u_dotdot_vec[i];

    /* populate micro-displacement-gradient, first and second time derivatives of
       micro-displacement-gradient in vector form*/
    int index_Phi = 0;
    for (int i=0; i<n_en_micro; i++)
    {
        for (int j=0; j<ndof_per_nd_micro; j++)
        {
            Phi_vec[index_Phi] = Phi(i,j);
            Phi_dot_vec[index_Phi] = Phi_dot(i,j);
            Phi_dotdot_vec[index_Phi] = Phi_dotdot(i,j);
            index_Phi += 1;
        }
    }


    del_u.DiffOf (u, u_n);
    del_Phi.DiffOf (Phi, Phi_n);

    // calculate derivatives based on reference coordinates
    fInitCoords_displ.SetLocal(fElementCards_displ[e].NodesX());
    fCurrCoords_displ=fInitCoords_displ;
    //fCurrCoords_displ.SetToCombination (1.0, fInitCoords_displ, 1.0, u);
    //fShapes_displ->SetDerivatives_DN_DDN(); Commented out for Q8P8
    fShapes_displ->SetDerivatives();

    //
    fInitCoords_micro.SetLocal(fElementCards_micro[e].NodesX());
    fCurrCoords_micro=fInitCoords_micro;
    //fCurrCoords_micro.SetToCombination (1.0, fInitCoords_micro, 1.0, u);
    fShapes_micro->SetDerivatives();

    //update state variables
    fdstatenew_all.Alias(fNumIP_displ, knum_d_state, fdState_new(CurrElementNumber()));
    fdstate_all.Alias(fNumIP_displ, knum_d_state, fdState(CurrElementNumber()));
    /*
    fdstatenew_all.Alias(fNumIP_micro, knum_d_state, fdState_new(CurrElementNumber()));
    fdstate_all.Alias(fNumIP_micro, knum_d_state, fdState(CurrElementNumber()));
    */

    if (bStep_Complete)
    {
        //-- Store/Register data in classic tahoe manner
        //out_variable_all.Alias(fNumIP_displ, knumstrain+knumstress+knum_d_state, fIPVariable(CurrElementNumber()));
        out_variable_all.Alias(fNumIP_micro, knumstrain+knumstress+knum_d_state, fIPVariable(CurrElementNumber()));
        for (l=0; l < fNumIP_displ; l++)
        //for (l=0; l < fNumIP_micro; l++)
        {
          out_variable.Alias(knumstrain+knumstress+knum_d_state, out_variable_all(l));

          Put_values_In_dArrayT_vector(fCauchy_stress_Elements_IPs, e,l,fTemp_nine_values);
//            Put_values_In_dArrayT_vector(fCauchy_stress_Elements_IPs, e,l,fTemp_six_values);

          out_variable.CopyIn(0,fTemp_nine_values);
//            out_variable.CopyIn(0,fTemp_six_values);

//        Put_values_In_dArrayT_vector(fEulerian_strain_Elements_IPs, e,l,fTemp_six_values);
          Put_values_In_dArrayT_vector(fEulerian_strain_Elements_IPs, e,l,fTemp_nine_values);

//        out_variable.CopyIn(6,fTemp_six_values);
          out_variable.CopyIn(9,fTemp_nine_values);//!!9->6?

          Put_values_In_dArrayT_vector(SPK_Elements_IPs, e,l,fTemp_nine_values);
          out_variable.CopyIn(18,fTemp_nine_values);

          Put_values_In_dArrayT_vector(Elastic_LagrangianStn_Elements_IPs, e,l,fTemp_nine_values);
          out_variable.CopyIn(27,fTemp_nine_values);

          Put_values_In_dArrayT_vector(SIGMA_Elements_IPs, e,l,fTemp_nine_values);
          out_variable.CopyIn(36,fTemp_nine_values);

          Put_values_In_dArrayT_vector(Elastic_MicroStnTensor_Elements_IPs, e,l,fTemp_nine_values);
          out_variable.CopyIn(45,fTemp_nine_values);

          out_variable[54]=fMeKLM_Elements_IPs(e,l*9+0);
          out_variable[55]=fMeKLM_Elements_IPs(e,l*9+1);
          out_variable[56]=fMeKLM_Elements_IPs(e,l*9+2);
          out_variable[57]=fMeKLM_Elements_IPs(e,l*9+3);
          out_variable[58]=fMeKLM_Elements_IPs(e,l*9+4);
          out_variable[59]=fMeKLM_Elements_IPs(e,l*9+5);
          out_variable[60]=fMeKLM_Elements_IPs(e,l*9+6);
          out_variable[61]=fMeKLM_Elements_IPs(e,l*9+7);
          out_variable[62]=fMeKLM_Elements_IPs(e,l*9+8);
          out_variable[63]=fMeKLM_Elements_IPs(e,l*9+9);
          out_variable[64]=fMeKLM_Elements_IPs(e,l*9+10);
          out_variable[65]=fMeKLM_Elements_IPs(e,l*9+11);
          out_variable[66]=fMeKLM_Elements_IPs(e,l*9+12);
          out_variable[67]=fMeKLM_Elements_IPs(e,l*9+13);
          out_variable[68]=fMeKLM_Elements_IPs(e,l*9+14);
          out_variable[69]=fMeKLM_Elements_IPs(e,l*9+15);
          out_variable[70]=fMeKLM_Elements_IPs(e,l*9+16);
          out_variable[71]=fMeKLM_Elements_IPs(e,l*9+17);
          out_variable[72]=fMeKLM_Elements_IPs(e,l*9+18);
          out_variable[73]=fMeKLM_Elements_IPs(e,l*9+19);
          out_variable[74]=fMeKLM_Elements_IPs(e,l*9+20);
          out_variable[75]=fMeKLM_Elements_IPs(e,l*9+21);
          out_variable[76]=fMeKLM_Elements_IPs(e,l*9+22);
          out_variable[77]=fMeKLM_Elements_IPs(e,l*9+23);
          out_variable[78]=fMeKLM_Elements_IPs(e,l*9+24);
          out_variable[79]=fMeKLM_Elements_IPs(e,l*9+25);
          out_variable[80]=fMeKLM_Elements_IPs(e,l*9+26);



          out_variable[81]=fState_variables_Elements_IPs(e,l*kNUM_FMATERIAL_STATE_TERMS+kc);
          out_variable[82]=fState_variables_Elements_IPs(e,l*kNUM_FMATERIAL_STATE_TERMS+khc);
          out_variable[83]=fState_variables_Elements_IPs(e,l*kNUM_FMATERIAL_STATE_TERMS+Kappa);
          out_variable[84]=fState_variables_Elements_IPs(e,l*kNUM_FMATERIAL_STATE_TERMS+khKappa);
          out_variable[85]=fState_variables_Elements_IPs(e,l*kNUM_FMATERIAL_STATE_TERMS+kc_chi);
          out_variable[86]=fState_variables_Elements_IPs(e,l*kNUM_FMATERIAL_STATE_TERMS+khc_chi);
          out_variable[87]=fState_variables_Elements_IPs(e,l*kNUM_FMATERIAL_STATE_TERMS+Kappa_chi);
          out_variable[88]=fState_variables_Elements_IPs(e,l*kNUM_FMATERIAL_STATE_TERMS+khKappa_chi);
          out_variable[89]=fState_variables_Elements_IPs(e,l*kNUM_FMATERIAL_STATE_TERMS+kc_nablachi0);
          out_variable[90]=fState_variables_Elements_IPs(e,l*kNUM_FMATERIAL_STATE_TERMS+kc_nablachi1);
          out_variable[91]=fState_variables_Elements_IPs(e,l*kNUM_FMATERIAL_STATE_TERMS+kc_nablachi2);
          out_variable[92]=fState_variables_Elements_IPs(e,l*kNUM_FMATERIAL_STATE_TERMS+khc_nablachi);
          out_variable[93]=fState_variables_Elements_IPs(e,l*kNUM_FMATERIAL_STATE_TERMS+Kappa_nablachi0);
          out_variable[94]=fState_variables_Elements_IPs(e,l*kNUM_FMATERIAL_STATE_TERMS+Kappa_nablachi1);
          out_variable[95]=fState_variables_Elements_IPs(e,l*kNUM_FMATERIAL_STATE_TERMS+Kappa_nablachi2);
          out_variable[96]=fState_variables_Elements_IPs(e,l*kNUM_FMATERIAL_STATE_TERMS+khKappa_nablachi);
          out_variable[97]=fState_variables_Elements_IPs(e,l*kNUM_FMATERIAL_STATE_TERMS+kDelgamma);
          out_variable[98]=fState_variables_Elements_IPs(e,l*kNUM_FMATERIAL_STATE_TERMS+kDelgammachi);
          out_variable[99]=fState_variables_Elements_IPs(e,l*kNUM_FMATERIAL_STATE_TERMS+kDelgammanablachi);
          out_variable[100]=fState_variables_Elements_IPs(e,l*kNUM_FMATERIAL_STATE_TERMS+ktrSigma);
          out_variable[101]=fState_variables_Elements_IPs(e,l*kNUM_FMATERIAL_STATE_TERMS+kSigma_inv);
          out_variable[102]=fState_variables_Elements_IPs(e,l*kNUM_FMATERIAL_STATE_TERMS+ktrRel);
          out_variable[103]=fState_variables_Elements_IPs(e,l*kNUM_FMATERIAL_STATE_TERMS+kRel_inv);
          out_variable[104]=fState_variables_Elements_IPs(e,l*kNUM_FMATERIAL_STATE_TERMS+ktrm);
          out_variable[105]=fState_variables_Elements_IPs(e,l*kNUM_FMATERIAL_STATE_TERMS+km_inv);
          out_variable[106]=fState_variables_Elements_IPs(e,l*kNUM_FMATERIAL_STATE_TERMS+ktrS);
          out_variable[107]=fState_variables_Elements_IPs(e,l*kNUM_FMATERIAL_STATE_TERMS+kinvdevS);
          out_variable[108]=fState_variables_Elements_IPs(e,l*kNUM_FMATERIAL_STATE_TERMS+ktrSIGMA);
          out_variable[109]=fState_variables_Elements_IPs(e,l*kNUM_FMATERIAL_STATE_TERMS+kinvdevSIGMA);
          out_variable[110]=fState_variables_Elements_IPs(e,l*kNUM_FMATERIAL_STATE_TERMS+kinvtrM);
          out_variable[111]=fState_variables_Elements_IPs(e,l*kNUM_FMATERIAL_STATE_TERMS+kinvdevM);
          out_variable[112]=fState_variables_Elements_IPs(e,l*kNUM_FMATERIAL_STATE_TERMS+kinvPhi);
          out_variable[113]=fState_variables_Elements_IPs(e,l*kNUM_FMATERIAL_STATE_TERMS+kinvGPhi);
          out_variable[114]=fState_variables_Elements_IPs(e,l*kNUM_FMATERIAL_STATE_TERMS+ktreps);
          out_variable[115]=fState_variables_Elements_IPs(e,l*kNUM_FMATERIAL_STATE_TERMS+kdeveps);
          out_variable[116]=fState_variables_Elements_IPs(e,l*kNUM_FMATERIAL_STATE_TERMS+kinvtrgammastn);
          out_variable[117]=fState_variables_Elements_IPs(e,l*kNUM_FMATERIAL_STATE_TERMS+kinvdevgammastn);
//          out_variable[38]=fState_variables_Elements_IPs(e,l*kNUM_FMATERIAL_STATE_TERMS+kGc_chi1);
//          out_variable[39]=fState_variables_Elements_IPs(e,l*kNUM_FMATERIAL_STATE_TERMS+kGc_chi2);
//          out_variable[40]=fState_variables_Elements_IPs(e,l*kNUM_FMATERIAL_STATE_TERMS+kGc_chi3);
//          out_variable[41]=fState_variables_Elements_IPs(e,l*kNUM_FMATERIAL_STATE_TERMS+kDelgammaGchi);
//          out_variable[42]=fState_variables_Elements_IPs(e,l*kNUM_FMATERIAL_STATE_TERMS+khGc_chi);


//          out_variable[37]=fState_variables_Elements_IPs(e,l*kNUM_FMATERIAL_STATE_TERMS+kinvGPhi);
//          out_variable[38]=fState_variables_Elements_IPs(e,l*kNUM_FMATERIAL_STATE_TERMS+kF11);
//          out_variable[39]=fState_variables_Elements_IPs(e,l*kNUM_FMATERIAL_STATE_TERMS+kF12);
//          out_variable[40]=fState_variables_Elements_IPs(e,l*kNUM_FMATERIAL_STATE_TERMS+kF13);
//          out_variable[41]=fState_variables_Elements_IPs(e,l*kNUM_FMATERIAL_STATE_TERMS+kF21);
//          out_variable[42]=fState_variables_Elements_IPs(e,l*kNUM_FMATERIAL_STATE_TERMS+kF22);
//          out_variable[43]=fState_variables_Elements_IPs(e,l*kNUM_FMATERIAL_STATE_TERMS+kF23);
//          out_variable[44]=fState_variables_Elements_IPs(e,l*kNUM_FMATERIAL_STATE_TERMS+kF31);
//          out_variable[45]=fState_variables_Elements_IPs(e,l*kNUM_FMATERIAL_STATE_TERMS+kF32);
//          out_variable[46]=fState_variables_Elements_IPs(e,l*kNUM_FMATERIAL_STATE_TERMS+kF33);
//          out_variable[47]=fState_variables_Elements_IPs(e,l*kNUM_FMATERIAL_STATE_TERMS+kFe11);
//          out_variable[48]=fState_variables_Elements_IPs(e,l*kNUM_FMATERIAL_STATE_TERMS+kFe12);
//          out_variable[49]=fState_variables_Elements_IPs(e,l*kNUM_FMATERIAL_STATE_TERMS+kFe13);
//          out_variable[50]=fState_variables_Elements_IPs(e,l*kNUM_FMATERIAL_STATE_TERMS+kFe21);
//          out_variable[51]=fState_variables_Elements_IPs(e,l*kNUM_FMATERIAL_STATE_TERMS+kFe22);
//          out_variable[52]=fState_variables_Elements_IPs(e,l*kNUM_FMATERIAL_STATE_TERMS+kFe23);
//          out_variable[53]=fState_variables_Elements_IPs(e,l*kNUM_FMATERIAL_STATE_TERMS+kFe31);
//          out_variable[54]=fState_variables_Elements_IPs(e,l*kNUM_FMATERIAL_STATE_TERMS+kFe32);
//          out_variable[55]=fState_variables_Elements_IPs(e,l*kNUM_FMATERIAL_STATE_TERMS+kFe33);
//          out_variable[56]=fState_variables_Elements_IPs(e,l*kNUM_FMATERIAL_STATE_TERMS+kX11);
//          out_variable[57]=fState_variables_Elements_IPs(e,l*kNUM_FMATERIAL_STATE_TERMS+kX12);
//          out_variable[58]=fState_variables_Elements_IPs(e,l*kNUM_FMATERIAL_STATE_TERMS+kX13);
//          out_variable[59]=fState_variables_Elements_IPs(e,l*kNUM_FMATERIAL_STATE_TERMS+kX21);
//          out_variable[60]=fState_variables_Elements_IPs(e,l*kNUM_FMATERIAL_STATE_TERMS+kX22);
//          out_variable[61]=fState_variables_Elements_IPs(e,l*kNUM_FMATERIAL_STATE_TERMS+kX23);
//          out_variable[62]=fState_variables_Elements_IPs(e,l*kNUM_FMATERIAL_STATE_TERMS+kX31);
//          out_variable[63]=fState_variables_Elements_IPs(e,l*kNUM_FMATERIAL_STATE_TERMS+kX32);
//          out_variable[64]=fState_variables_Elements_IPs(e,l*kNUM_FMATERIAL_STATE_TERMS+kX33);
//          out_variable[65]=fState_variables_Elements_IPs(e,l*kNUM_FMATERIAL_STATE_TERMS+kXe11);
//          out_variable[66]=fState_variables_Elements_IPs(e,l*kNUM_FMATERIAL_STATE_TERMS+kXe12);
//          out_variable[67]=fState_variables_Elements_IPs(e,l*kNUM_FMATERIAL_STATE_TERMS+kXe13);
//          out_variable[68]=fState_variables_Elements_IPs(e,l*kNUM_FMATERIAL_STATE_TERMS+kXe21);
//          out_variable[69]=fState_variables_Elements_IPs(e,l*kNUM_FMATERIAL_STATE_TERMS+kXe22);
//          out_variable[70]=fState_variables_Elements_IPs(e,l*kNUM_FMATERIAL_STATE_TERMS+kXe23);
//          out_variable[71]=fState_variables_Elements_IPs(e,l*kNUM_FMATERIAL_STATE_TERMS+kXe31);
//          out_variable[72]=fState_variables_Elements_IPs(e,l*kNUM_FMATERIAL_STATE_TERMS+kXe32);
//          out_variable[73]=fState_variables_Elements_IPs(e,l*kNUM_FMATERIAL_STATE_TERMS+kXe33);




          /* out_variable[18]=fState_variables_Elements_IPs(e,l*42+0);
          out_variable[19]=fState_variables_Elements_IPs(e,l*42+1);
          out_variable[20]=fState_variables_Elements_IPs(e,l*42+2);
          out_variable[21]=fState_variables_Elements_IPs(e,l*42+3);
          out_variable[22]=fState_variables_Elements_IPs(e,l*42+4);
          out_variable[23]=fState_variables_Elements_IPs(e,l*42+5);
          out_variable[24]=fState_variables_Elements_IPs(e,l*42+6);
          out_variable[25]=fState_variables_Elements_IPs(e,l*42+7);
          out_variable[26]=fState_variables_Elements_IPs(e,l*42+8);
          out_variable[27]=fState_variables_Elements_IPs(e,l*42+9);
          out_variable[28]=fState_variables_Elements_IPs(e,l*42+10);
          out_variable[29]=fState_variables_Elements_IPs(e,l*42+11);
          out_variable[30]=fState_variables_Elements_IPs(e,l*42+12);
          out_variable[31]=fState_variables_Elements_IPs(e,l*42+13);
          out_variable[32]=fState_variables_Elements_IPs(e,l*42+14);
          out_variable[33]=fState_variables_Elements_IPs(e,l*42+15);
          out_variable[34]=fState_variables_Elements_IPs(e,l*42+16);
          out_variable[35]=fState_variables_Elements_IPs(e,l*42+17);
          out_variable[36]=fState_variables_Elements_IPs(e,l*42+18);
          out_variable[37]=fState_variables_Elements_IPs(e,l*42+19);
          out_variable[38]=fState_variables_Elements_IPs(e,l*42+20);
          out_variable[39]=fState_variables_Elements_IPs(e,l*42+21);
          out_variable[40]=fState_variables_Elements_IPs(e,l*42+22);
          out_variable[41]=fState_variables_Elements_IPs(e,l*42+23);
          out_variable[42]=fState_variables_Elements_IPs(e,l*42+24);
          out_variable[43]=fState_variables_Elements_IPs(e,l*42+25);
          out_variable[44]=fState_variables_Elements_IPs(e,l*42+26);
          out_variable[45]=fState_variables_Elements_IPs(e,l*42+27);
          out_variable[46]=fState_variables_Elements_IPs(e,l*42+28);
          out_variable[47]=fState_variables_Elements_IPs(e,l*42+29);
          out_variable[48]=fState_variables_Elements_IPs(e,l*42+30);
          out_variable[49]=fState_variables_Elements_IPs(e,l*42+31);
          out_variable[50]=fState_variables_Elements_IPs(e,l*42+32);
          out_variable[51]=fState_variables_Elements_IPs(e,l*42+33);
          out_variable[52]=fState_variables_Elements_IPs(e,l*42+34);
          out_variable[53]=fState_variables_Elements_IPs(e,l*42+35);
          out_variable[54]=fState_variables_Elements_IPs(e,l*42+36);
          out_variable[55]=fState_variables_Elements_IPs(e,l*42+37);
          out_variable[56]=fState_variables_Elements_IPs(e,l*42+38);
          out_variable[57]=fState_variables_Elements_IPs(e,l*42+39);
          out_variable[58]=fState_variables_Elements_IPs(e,l*42+40);
          out_variable[59]=fState_variables_Elements_IPs(e,l*42+41); */

        }
    }
    else
    { //-- Still Iterating

        /* residual and tangent for displacements */
        const double* Det    = fShapes_displ->IPDets();
        const double* Weight = fShapes_displ->IPWeights();
        fShapes_displ->TopIP();
        fShapes_micro->TopIP();
        if(iConstitutiveModelType==2)
        {
			SigN_IPs_el_n.RowCopy(e,SigN_IPs_n);
            mn_IPs_el_n.RowCopy(e,mn_IPs_n);
            GammaN_IPs_el_n.RowCopy(e,GammaN_IPs_n);
            sn_sigman_IPs_el_n.RowCopy(e,sn_sigman_IPs_n);

            Fn_ar_IPs_el.RowCopy(e,Fn_ar_IPs);
            FnInv_ar_IPs_el.RowCopy(e,FnInv_ar_IPs);
            ChiN_ar_IPs_el_n.RowCopy(e,ChiN_ar_IPs_n);
            GRAD_ChiN_ar_IPs_el_n.RowCopy(e,GRAD_ChiN_ar_IPs);
        }
        if(iConstitutiveModelType==3 || iConstitutiveModelType==4)
        {
         /* retrieve Fp and Fp_n in element */
         fFp_n_Elements_IPs.RowCopy(e,fFp_n_IPs);
         fFp_Elements_IPs.RowCopy(e,fFp_IPs);

         /* retrieve Chip and chip_n in element */
         fChip_n_Elements_IPs.RowCopy(e,fChip_n_IPs);
         fChip_Elements_IPs.RowCopy(e,fChip_IPs);

         /* retrieve Ce_n in element */
         fCe_n_Elements_IPs.RowCopy(e,fCe_n_IPs);
         fCe_Elements_IPs.RowCopy(e,fCe_IPs);

         /* retrieve dGdS and dGdS_n in element */
         fdGdS_n_Elements_IPs.RowCopy(e,fdGdS_n_IPs);
         fdGdS_Elements_IPs.RowCopy(e,fdGdS_IPs);

         /* retrieve dGdCauchy_Stress and dGdCauchy_Stress_n in element */
         fdGdCauchy_Stress_n_Elements_IPs.RowCopy(e,fdGdCauchy_Stress_n_IPs);
         fdGdCauchy_Stress_Elements_IPs.RowCopy(e,fdGdCauchy_Stress_IPs);

         /* retrieve Cauchy_Stress and Cauchy_Stress_n in element */
         fCauchy_stress_Elements_n_IPs.RowCopy(e,fCauchy_stress_n_IPs);
         fCauchy_stress_Elements_IPs.RowCopy(e,fCauchy_stress_IPs);

         /* retrieve Deformation Gradient and Deformation Gradient_n in element */
         fDeformation_Gradient_n_Elements_IPs.RowCopy(e,fDeformation_Gradient_n_IPs);
         fDeformation_Gradient_Elements_IPs.RowCopy(e,fDeformation_Gradient_IPs);

         /* retrieve Cchie_n in element */
         fCchie_n_Elements_IPs.RowCopy(e,fCchie_n_IPs);
         fCchie_Elements_IPs.RowCopy(e,fCchie_IPs);

         /* retrieve PSIe_n in element */
         PSIe_n_Elements_IPs.RowCopy(e,PSIe_n_IPs);

         /* retrieve PSIe in element */
         PSIe_Elements_IPs.RowCopy(e,PSIe_IPs);

         /* retrieve dGchi/d(SIGMA-S) and dGchi/d(SIGMA-S)_n in element */
         fdGchidSIGMA_n_Elements_IPs.RowCopy(e,fdGchidSIGMA_n_IPs);
         fdGchidSIGMA_Elements_IPs.RowCopy(e,fdGchidSIGMA_IPs);

         /* retrieve dFdS and dFdS_n in element */
         fdFYdS_n_Elements_IPs.RowCopy(e,fdFYdS_n_IPs);
         fdFYdS_Elements_IPs.RowCopy(e,fdFYdS_IPs);


         /* retrieve dFYchi/d(SIGMA-S) and dFYchi/d(SIGMA-S)_n  in element */
         fdFYchidSIGMA_n_Elements_IPs.RowCopy(e,fdFYchidSIGMA_n_IPs);
         fdFYchidSIGMA_Elements_IPs.RowCopy(e,fdFYchidSIGMA_IPs);

         /* retrieve GXp and GXp_n in element */
         GXp_Elements_IPs.RowCopy(e,GXp_IPs);
         GXp_n_Elements_IPs.RowCopy(e,GXp_n_IPs);

         GAMMAe_Elements_IPs.RowCopy(e,GAMMAe_IPs);
         GAMMAe_n_Elements_IPs.RowCopy(e,GAMMAe_n_IPs);

         fMeKLM_Elements_IPs.RowCopy(e,fMeKLM_IPs);
         fMeKLM_n_Elements_IPs.RowCopy(e,fMeKLM_n_IPs);

         SPK_Elements_IPs.RowCopy(e,SPK_IPs);
         SPK_n_Elements_IPs.RowCopy(e,SPK_n_IPs);

         SIGMA_S_Elements_IPs.RowCopy(e,SIGMA_S_IPs);
         SIGMA_S_n_Elements_IPs.RowCopy(e,SIGMA_S_n_IPs);

         SIGMA_Elements_IPs.RowCopy(e,SIGMA_IPs);
         SIGMA_n_Elements_IPs.RowCopy(e,SIGMA_n_IPs);

         Elastic_LagrangianStn_Elements_IPs.RowCopy(e,Elastic_LagrangianStn_IPs);
         Elastic_LagrangianStn_n_Elements_IPs.RowCopy(e,Elastic_LagrangianStn_n_IPs);

         Elastic_MicroStnTensor_Elements_IPs.RowCopy(e,Elastic_MicroStnTensor_IPs);
         Elastic_MicroStnTensor_n_Elements_IPs.RowCopy(e,Elastic_MicroStnTensor_n_IPs);


         dGnablachidMKLM_Element_n_IPs.RowCopy(e,dGnablachidMKLM_n_IPs);
         dGnablachidMKLM_Element_IPs.RowCopy(e,dGnablachidMKLM_IPs);


         /* retrieve ISVs and ISVs_n in element */
         fState_variables_n_Elements_IPs.RowCopy(e,fState_variables_n_IPs);
         fState_variables_Elements_IPs.RowCopy(e,fState_variables_IPs);

        }

        while (fShapes_displ->NextIP() && fShapes_micro->NextIP())
        {
                double scale_const = (*Weight++)*(*Det++);

                const int IP = fShapes_displ->CurrIP();
                dArrayT DisplIPCoordinate(n_sd), MicroIPCoordinate(n_sd);
                fShapes_displ->IPCoords(DisplIPCoordinate);
                fShapes_micro->IPCoords(MicroIPCoordinate);

                const double* shapes_displ_X = fShapes_displ->IPShapeX();
                /* [fShapeDispl] will be formed */
                Form_solid_shape_functions(shapes_displ_X);//output:fShapeDispl

                //   fShapeDispl_Tr.Transpose(fShapeDispl);

                fShapes_displ->GradNa(fShapeDisplGrad_temp);
                /* [fShapeDisplGrad] will be formed *///in reference config
                Form_Gradient_of_solid_shape_functions(fShapeDisplGrad_temp);//output:fShapeDisplGrad in Reference config.
                Form_GRAD_Nuw_matrix(fShapeDisplGrad_temp) ;//output:GRAD_Nuw

                const double* shapes_micro_X = fShapes_micro->IPShapeX();
                //  {fShapeMicro} will be formed
                Form_micro_shape_functions(shapes_micro_X);//output:fShapeMicro

                //[fShapeMicro_row_matrix] will be formed
                //need?
                for (int i=0; i<n_en_micro ; i++)
                        fShapeMicro_row_matrix(0,i) = fShapeMicro[i];

                //  [fShapeMicroGrad] will be formed
                fShapes_micro->GradNa(fShapeMicroGrad_temp);

                //the correct name should be NPHI, NCHI is not a proper name!
                Form_NCHI_matrix(fShapeMicro_row_matrix); //output: NCHI matrix
                NCHI_Tr.Transpose(NCHI);
                Form_Gradient_of_micro_shape_eta_functions(fShapeMicroGrad_temp);//output: GRAD_NCHI

                /* [fIdentity_matrix] will be formed */
                fIdentity_matrix = 0.0;
                for (int i=0; i<n_sd ; i++)
                        fIdentity_matrix(i,i) =1.0;

                /* [fDeformation_Gradient] will be formed */
                Form_deformation_gradient_tensor();//output: F (deform. grad. tensor)
                if (fDeformation_Gradient.Det()==0)
                        fDeformation_Gradient = fIdentity_matrix;
                fDeformation_Gradient_Inverse.Inverse(fDeformation_Gradient);

                Form_micro_deformation_tensor_Chi();//output: Chi[i][j]
                ChiM_Inverse=0.0;
                ChiM_Inverse.Inverse(ChiM);
                //Form_ChiM();//It is also micro-deformation gradient tensor but defined as dMatrixT
                Form_Chi_inv_matrix();//output: ChiInv

                SigN_IPs_n.RowCopy(IP,SigN_ar);
                sn_sigman_IPs_n.RowCopy(IP,sn_sigman);
                GammaN_IPs_n.RowCopy(IP,GammaN_ar);
                mn_IPs_n.RowCopy(IP,mn_ar);
                Mapping_double_and_Array(-1);

                Fn_ar_IPs.RowCopy(IP,Fn_ar);
                FnInv_ar_IPs.RowCopy(IP,FnInv_ar);
                ChiN_ar_IPs_n.RowCopy(IP,ChiN_ar);
                GRAD_ChiN_ar_IPs.RowCopy(IP,GRAD_ChiN_ar);
                Form_deformation_tensors_arrays(-1);


                /* KroneckerDelta matrix is formed*/
                Form_KroneckerDelta_matrix();//output: KrDelta
                Form_CCof_tensor();//output: Coeff tensor


                Form_double_Finv_from_Deformation_tensor_inverse();// output: Finv
                Form_GRAD_Chi_matrix();////CHI=1+PHI ==> GRAD_CHI=GRAD_PHI output: GRAD_Chi[i][J][K] AND GRAD_CHIM which is the dTensor3DT form
                Form_Gamma_tensor3D();

                Form_Finv_w_matrix();//output: Finv_w
                Form_Finv_eta_matrix();//output: Finv_eta



                /* [fDefGradInv_Grad_grad] will be formed */
                Form_Grad_grad_transformation_matrix();//output:fDefGradInv_Grad_grad

                //fs_micromorph3D_out<<"fDeformation_Gradient= "<< fDeformation_Gradient<<endl;


                /* Calculating Jacobian */
                double J = fDeformation_Gradient.Det();
                double invJ=1/J;
                /* Jacobian for the current IP will be saved */


                /*  fRho */
                fRho_0 = fMaterial_Params[kRho_0];

                /* Calculating fRho */
                fRho = fRho_0/J;

                /* [fRight_Cauchy_Green_tensor] will be formed */
                fRight_Cauchy_Green_tensor.MultATB(fDeformation_Gradient, fDeformation_Gradient);
                /* [fRight_Cauchy_Green_tensor_Inverse] will be formed */
                if (fRight_Cauchy_Green_tensor.Det()==0)
                        fRight_Cauchy_Green_tensor = fIdentity_matrix;
                fRight_Cauchy_Green_tensor_Inverse.Inverse(fRight_Cauchy_Green_tensor);

                LagrangianStn=fIdentity_matrix;
                LagrangianStn*=-1;
                LagrangianStn+=fRight_Cauchy_Green_tensor;
                LagrangianStn*=0.5;

                // Micro-Strain tensor will be formed
                MicroStnTensor  = fIdentity_matrix;
                MicroStnTensor *= -1;
                PSI.MultATB(fDeformation_Gradient,ChiM);
                MicroStnTensor += PSI;


                /* [fIota_temp_matrix] will be formed */
                fIota_temp_matrix.MultATB(fShapeDisplGrad,fDefGradInv_Grad_grad);

                /* [fIota_w_temp_matrix] will be formed*/
                fIota_w_temp_matrix.MultATBT(GRAD_Nuw,Finv_w);
                /* [fIota_eta_temp_matrix] will be formed*/
                fIota_eta_temp_matrix.MultATBT(GRAD_NCHI,Finv_eta);



                double scale = scale_const;

                if(iConstitutiveModelType==1)
                {

                        /* [fLeft_Cauchy_Green_tensor] will be formed */
                        fLeft_Cauchy_Green_tensor.MultABT(fDeformation_Gradient, fDeformation_Gradient);
                        /* [fLeft_Cauchy_Green_tensor_Inverse] will be formed */
                        if (fLeft_Cauchy_Green_tensor.Det()==0)
                                fLeft_Cauchy_Green_tensor = fIdentity_matrix;
                        fLeft_Cauchy_Green_tensor_Inverse.Inverse(fLeft_Cauchy_Green_tensor);

                        /* [fEulerian_strain_tensor_current_IP] will be formed */
                        fEulerian_strain_tensor_current_IP = fLeft_Cauchy_Green_tensor_Inverse;
                        fEulerian_strain_tensor_current_IP *= -1;
                        fEulerian_strain_tensor_current_IP += fIdentity_matrix;
                        fEulerian_strain_tensor_current_IP *= 0.5;
                        //fEulerian_strain_tensor_current_IP = LagrangianStn;
                        Extract_six_values_from_symmetric_tensor(fEulerian_strain_tensor_current_IP,fTemp_nine_values);
                        //Extract_six_values_from_symmetric_tensor(fEulerian_strain_tensor_current_IP,fTemp_six_values);

                        /* Save Eulerian strain tensor of the current IP */
                        fEulerian_strain_IPs.SetRow(IP,fTemp_nine_values);
                        //fEulerian_strain_IPs.SetRow(IP,fTemp_six_values);


                        Form_Second_Piola_Kirchhoff_SPK(LagrangianStn,MicroStnTensor);
                        KirchhoffST.MultABCT(fDeformation_Gradient,SPK,fDeformation_Gradient);
                        Form_fV1();
                        // fIota_temp_matrix.Multx(fV1,Vint_1_temp);
                        fShapeDisplGrad.MultTx(fV1,Vint_1_temp);
                        // fIota_w_temp_matrix.Multx(fV1,Vint_1_temp);
                        scale=scale_const;
                        Vint_1_temp*=scale;
                        Vint_1 +=Vint_1_temp;

                        // -eta(ml)s_sigma(ml)-eta(ml,k)m(klm)
                        // eta(ml)s_sima(ml)+eta(ml,k)m(klm)
                        Form_SIGMA_S();//in current configuration SIGMA_S=s_sigma, but what we use sigma_s, so it needs to be multiplied by "-1"
                        Form_fV2();//gives F.SIGMA_S.F^T = s_sigma *J
                        NCHI.MultTx(fV2,Vint_2_temp);
                        scale=scale_const;
                        Vint_2_temp*=scale;
                        Vint_2 +=Vint_2_temp;
                        // Applying integration by parts to higher order stress tensor "m" produces a minus sign in front of it too, so if we multiply the BMM by "-1" the following
                        // matrices are found (see paper)

                        Form_GAMMA();
                        Form_fMKLM();
                        Form_fV3();
                        //fIota_eta_temp_matrix.Multx(fV3,Vint_3_temp);
                        GRAD_NCHI.MultTx(fV3,Vint_3_temp);
                        scale=scale_const;
                        Vint_3_temp*=scale;
                        Vint_3+=Vint_3_temp;


                        Sigma=KirchhoffST;
                        Sigma.SetToScaled(1/J,KirchhoffST);

                        s_sigma_temp.MultABCT(fDeformation_Gradient,SIGMA_S,fDeformation_Gradient);
                        //s_sigma_temp*=invJ;
                        s_sigma_temp*=1/J;


                        //  cout<< invJ<<endl;
                        fCauchy_stress_tensor_current_IP=Sigma;
                        Calculate_fmklm();
                        fmklm*=1/J;

                        //fCauchy_stress_tensor_current_IP=SPK;
                        //Extract_six_values_from_symmetric_tensor(fCauchy_stress_tensor_current_IP,fTemp_six_values);
                        Extract_six_values_from_symmetric_tensor(fCauchy_stress_tensor_current_IP,fTemp_nine_values);

                        // Save Cauchy effective stress tensor of the current IP
                        //fCauchy_stress_IPs.SetRow(IP,fTemp_six_values);

                        fCauchy_stress_IPs.SetRow(IP,fTemp_nine_values);


                        /*internal force is calculated from BLM */
                        /* Form_I1_1();
						Form_I1_2();*/
                        //Form_Jmat();

                        Form_I1_3();
                        Form_I1_4();
                        Form_I1_5();
                        Form_I1_6();
                        Form_I1_7();
                        Form_I2_1();
                        Form_I1_8();
                        Form_I2_2();
                        Form_I1_9();
                        Form_I2_3();
                        Form_fFJ();
                        Form_fJF();
                        Form_fJ1_1();
                        Form_fJ1_2();
                        Form_fJ1_3();
                        Form_fJ1_4();
                        Form_fJ2_1();
                        Form_fJ1_5();
                        Form_fJ2_2();
                        Form_fJ1_6();
                        Form_fJ2_3();

                        //Form_fFM();
                        Form_fMF();
                        Form_fMchi();
                     /*   Form_fMpu_1();
                        Form_fMpp_1();
                        Form_fMpu_2();
                        Form_fMpp_2(); */
                        Form_fMpu_3();
                        Form_fMpp_3();
                        Form_fMpu_4();
                        Form_fMpp_4();
                        Form_fMpu_6();
                        Form_fMpp_6();
                        Form_fMpu_7();
                        Form_fMpp_7();
                        Form_fMpu_9();
                        Form_fMpp_9();


                        /*
                fTemp_matrix_nudof_x_nudof.MultABCT(fIota_temp_matrix,I1_1,fIota_temp_matrix);
                scale =-scale_const;
                fTemp_matrix_nudof_x_nudof *= scale;
                // accumulate
                fKu_1 += fTemp_matrix_nudof_x_nudof;

                fTemp_matrix_nudof_x_nudof.MultABCT(fIota_temp_matrix,I1_2,fIota_temp_matrix);
                scale = scale_const;
                fTemp_matrix_nudof_x_nudof *= scale;
                //accumulate
                fKu_2 += fTemp_matrix_nudof_x_nudof;
                         */

                        /*
                        fTemp_matrix_nudof_x_nudof.MultABCT(fIota_temp_matrix,I1_3,fIota_temp_matrix);
                scale = scale_const;
                fTemp_matrix_nudof_x_nudof *= scale;
                // accumulate
                fKu_3 += fTemp_matrix_nudof_x_nudof;
                */
                        fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I1_3,fShapeDisplGrad);
                        scale = scale_const;
                        fTemp_matrix_nudof_x_nudof *= scale;
                        fKu_3 += fTemp_matrix_nudof_x_nudof;


                        //Matrices from variation of SPK
//                      fTemp_matrix_nudof_x_nudof.MultABCT(fIota_temp_matrix,I1_4,fIota_temp_matrix);                                        fs_micromorph3D_out<<" fFe det="<<fFe.Det() <<endl;
//              scale = scale_const*(fMaterial_Params[kLambda]+fMaterial_Params[kTau]);
//              fTemp_matrix_nudof_x_nudof *= scale;
//              // accumulate
//              fKu_4 += fTemp_matrix_nudof_x_nudof;

                        fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I1_4,fShapeDisplGrad);
                        scale = scale_const*(fMaterial_Params[kLambda]+fMaterial_Params[kTau]);
                        fTemp_matrix_nudof_x_nudof *= scale;
                        fKu_4 += fTemp_matrix_nudof_x_nudof;




//                      fTemp_matrix_nudof_x_nudof.MultABCT(fIota_temp_matrix,I1_5,fIota_temp_matrix);
//                      scale =scale_const*(fMaterial_Params[kMu]+fMaterial_Params[kSigma_const]);
//                      fTemp_matrix_nudof_x_nudof *= scale;
//                      // accumulate
//                      fKu_5 += fTemp_matrix_nudof_x_nudof;



                        fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I1_5,fShapeDisplGrad);
                        scale = scale_const*(fMaterial_Params[kMu]+fMaterial_Params[kSigma_const]);
                        fTemp_matrix_nudof_x_nudof *= scale;
                        fKu_5 += fTemp_matrix_nudof_x_nudof;




//                      fTemp_matrix_nudof_x_nudof.MultABCT(fIota_temp_matrix,I1_6,fIota_temp_matrix);
//                      scale = scale_const*(fMaterial_Params[kMu]+fMaterial_Params[kSigma_const]);
//                      fTemp_matrix_nudof_x_nudof *= scale;
//                      // accumulate
//                      fKu_6 += fTemp_matrix_nudof_x_nudof;



                        fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I1_6,fShapeDisplGrad);
                        scale = scale_const*(fMaterial_Params[kMu]+fMaterial_Params[kSigma_const]);
                        fTemp_matrix_nudof_x_nudof *= scale;
                        fKu_6 += fTemp_matrix_nudof_x_nudof;

                        fTemp_matrix_nudof_x_nudof.MultABCT(fIota_temp_matrix,I1_7,fIota_temp_matrix);
                        scale = scale_const*fMaterial_Params[kEta];
                        fTemp_matrix_nudof_x_nudof *= scale;
                        // accumulate
                        fKu_7 += fTemp_matrix_nudof_x_nudof;

                        fTemp_matrix_nudof_x_nchidof.MultABC(fIota_temp_matrix,I2_1,NCHI);//ABC not ABCT
                        scale = scale_const*fMaterial_Params[kEta];
                        fTemp_matrix_nudof_x_nchidof *= scale;
                        // accumulate
                        fKuphi_1 += fTemp_matrix_nudof_x_nchidof;

                        fTemp_matrix_nudof_x_nudof.MultABCT(fIota_temp_matrix,I1_8,fIota_temp_matrix);
                        scale = scale_const*fMaterial_Params[kKappa];
                        fTemp_matrix_nudof_x_nudof *= scale;
                        // accumulate
                        fKu_8 += fTemp_matrix_nudof_x_nudof;



                        fTemp_matrix_nudof_x_nchidof.MultABC(fIota_temp_matrix,I2_2,NCHI);//ABC not ABCT
                        scale = scale_const*fMaterial_Params[kKappa];
                        fTemp_matrix_nudof_x_nchidof *= scale;
                        // accumulate
                        fKuphi_2 += fTemp_matrix_nudof_x_nchidof;

                        //fTemp_matrix_nudof_x_nudof.MultABCT(fIota_temp_matrix,I1_9,fIota_temp_matrix);
                        fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I1_9,fShapeDisplGrad);
                        scale = scale_const*fMaterial_Params[kNu];
                        fTemp_matrix_nudof_x_nudof *= scale;
                        // accumulate
                        fKu_9 += fTemp_matrix_nudof_x_nudof;

                        //fTemp_matrix_nudof_x_nchidof.MultABC(fIota_temp_matrix,I2_3,NCHI);//ABC not ABCT
                        fTemp_matrix_nudof_x_nchidof.MultATBC(fShapeDisplGrad,I2_3,NCHI);//ABC not ABCT
                        scale = scale_const*fMaterial_Params[kNu];
                        fTemp_matrix_nudof_x_nchidof *= scale;
                        // accumulate
                        fKuphi_3 += fTemp_matrix_nudof_x_nchidof;

/*******************************************************************************************************/



                        //fTemp_matrix_nchidof_x_nudof.MultABCT(NCHI_Tr,fFJ,fIota_temp_matrix);
                        fTemp_matrix_nchidof_x_nudof.MultATBC(NCHI,fFJ,fShapeDisplGrad);
                        scale =scale_const;
                        fTemp_matrix_nchidof_x_nudof *= scale;
                        // accumulate
                        fKFJu += fTemp_matrix_nchidof_x_nudof;


                        // fTemp_matrix_nchidof_x_nudof.MultABCT(NCHI_Tr,fJF,fIota_temp_matrix);
                        fTemp_matrix_nchidof_x_nudof.MultATBC(NCHI,fJF,fShapeDisplGrad);
                        scale =scale_const;
                        fTemp_matrix_nchidof_x_nudof *= scale;
                        // accumulate
                        fKJFu += fTemp_matrix_nchidof_x_nudof;



                        // fTemp_matrix_nchidof_x_nudof.MultABCT(NCHI_Tr,fJ1_1 ,fIota_temp_matrix);
                        fTemp_matrix_nchidof_x_nudof.MultATBC(NCHI,fJ1_1,fShapeDisplGrad);
                        scale =scale_const*fMaterial_Params[kTau];
                fTemp_matrix_nchidof_x_nudof *= scale;
                // accumulate
                fKphiu_1 += fTemp_matrix_nchidof_x_nudof;

                fTemp_matrix_nchidof_x_nudof.MultABCT(NCHI_Tr,fJ1_2 ,fIota_temp_matrix);
                scale =scale_const*fMaterial_Params[kSigma_const];
                fTemp_matrix_nchidof_x_nudof *= scale;
                // accumulate
                fKphiu_2 += fTemp_matrix_nchidof_x_nudof;

                fTemp_matrix_nchidof_x_nudof.MultABCT(NCHI_Tr,fJ1_3 ,fIota_temp_matrix);
                scale =scale_const*fMaterial_Params[kSigma_const];
                fTemp_matrix_nchidof_x_nudof *= scale;
                // accumulate
                fKphiu_3 += fTemp_matrix_nchidof_x_nudof;

                // fTemp_matrix_nchidof_x_nudof.MultABCT(NCHI_Tr,fJ1_4,fIota_temp_matrix);
                fTemp_matrix_nchidof_x_nudof.MultATBC(NCHI,fJ1_4,fShapeDisplGrad);
                scale =scale_const*(fMaterial_Params[kEta]-fMaterial_Params[kTau]);
                fTemp_matrix_nchidof_x_nudof *= scale;
                // accumulate
                fKphiu_4 += fTemp_matrix_nchidof_x_nudof;


                fTemp_matrix_nchidof_x_nchidof.MultABC(NCHI_Tr,fJ2_1,NCHI);
                scale =scale_const*(fMaterial_Params[kEta]-fMaterial_Params[kTau]);
                fTemp_matrix_nchidof_x_nchidof *= scale;
                // accumulate
                fKphiphi_1 += fTemp_matrix_nchidof_x_nchidof;

                fTemp_matrix_nchidof_x_nudof.MultABCT(NCHI_Tr,fJ1_5,fIota_temp_matrix);
                scale =scale_const*(fMaterial_Params[kNu]-fMaterial_Params[kSigma_const]);
                fTemp_matrix_nchidof_x_nudof *= scale;
                // accumulate
                fKphiu_5 += fTemp_matrix_nchidof_x_nudof;

                fTemp_matrix_nchidof_x_nchidof.MultABC(NCHI_Tr,fJ2_2,NCHI);
                scale =scale_const*(fMaterial_Params[kNu]-fMaterial_Params[kSigma_const]);
                fTemp_matrix_nchidof_x_nchidof *= scale;
                // accumulate
                fKphiphi_2 += fTemp_matrix_nchidof_x_nchidof;

                fTemp_matrix_nchidof_x_nudof.MultABCT(NCHI_Tr,fJ1_6,fIota_temp_matrix);
                scale =scale_const*(fMaterial_Params[kKappa]-fMaterial_Params[kSigma_const]);
                fTemp_matrix_nchidof_x_nudof *= scale;
                // accumulate
                fKphiu_5 += fTemp_matrix_nchidof_x_nudof;

                fTemp_matrix_nchidof_x_nchidof.MultABC(NCHI_Tr,fJ2_3,NCHI);
                scale =scale_const*(fMaterial_Params[kKappa]-fMaterial_Params[kSigma_const]);
                fTemp_matrix_nchidof_x_nchidof *= scale;
                // accumulate
                fKphiphi_3 += fTemp_matrix_nchidof_x_nchidof;
/*************************************************************************************************************/

                // fTemp_matrix_nchidof_x_nudof.MultABCT(fIota_eta_temp_matrix,fMF,fIota_temp_matrix);
                fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,fMF,fShapeDisplGrad);
                scale =scale_const;
                fTemp_matrix_nchidof_x_nudof *= scale;
                // accumulate
                fKMFphiu += fTemp_matrix_nchidof_x_nudof;

                //fTemp_matrix_nchidof_x_nchidof.MultABC(fIota_eta_temp_matrix,fMchi,NCHI);
                fTemp_matrix_nchidof_x_nchidof.MultATBC(GRAD_NCHI,fMchi,NCHI);
                scale =scale_const;
                fTemp_matrix_nchidof_x_nchidof *= scale;
                // accumulate
                fKMchiphiphi += fTemp_matrix_nchidof_x_nchidof;

                fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,fMpu_3,fShapeDisplGrad);
                scale =scale_const*fMaterial_Params[kTau3];
                fTemp_matrix_nchidof_x_nudof *= scale;
                // accumulate
                fKMphiu_3 += fTemp_matrix_nchidof_x_nudof;


                fTemp_matrix_nchidof_x_nchidof.MultATBC(GRAD_NCHI,fMpp_3,GRAD_NCHI);
                scale =scale_const*fMaterial_Params[kTau3];
                fTemp_matrix_nchidof_x_nchidof *= scale;
                // accumulate
                fKMphiphi_3 += fTemp_matrix_nchidof_x_nchidof;

                fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,fMpu_4,fShapeDisplGrad);
                scale =scale_const*fMaterial_Params[kTau4];
                fTemp_matrix_nchidof_x_nudof *= scale;
                // accumulate
                fKMphiu_4 += fTemp_matrix_nchidof_x_nudof;


                fTemp_matrix_nchidof_x_nchidof.MultATBC(GRAD_NCHI,fMpp_4,GRAD_NCHI);
                scale =scale_const*fMaterial_Params[kTau4];
                fTemp_matrix_nchidof_x_nchidof *= scale;
                // accumulate
                fKMphiphi_4 += fTemp_matrix_nchidof_x_nchidof;

                fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,fMpu_6,fShapeDisplGrad);
                scale =scale_const*fMaterial_Params[kTau6];
                fTemp_matrix_nchidof_x_nudof *= scale;
                // accumulate
                fKMphiu_6 += fTemp_matrix_nchidof_x_nudof;

                fTemp_matrix_nchidof_x_nchidof.MultATBC(GRAD_NCHI,fMpp_6,GRAD_NCHI);
                scale =scale_const*fMaterial_Params[kTau6];
                fTemp_matrix_nchidof_x_nchidof *= scale;
                // accumulate
                fKMphiphi_6 += fTemp_matrix_nchidof_x_nchidof;



                // fTemp_matrix_nchidof_x_nudof.MultABCT(fIota_eta_temp_matrix,fMpu_1,fIota_temp_matrix);
                fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,fMpu_7,fShapeDisplGrad);
                scale =scale_const*fMaterial_Params[kTau7];
                fTemp_matrix_nchidof_x_nudof *= scale;
                // accumulate
                fKMphiu_7 += fTemp_matrix_nchidof_x_nudof;


                //fTemp_matrix_nchidof_x_nchidof.MultABC(fIota_eta_temp_matrix,fMpp_1,GRAD_NCHI);
                fTemp_matrix_nchidof_x_nchidof.MultATBC(GRAD_NCHI,fMpp_7,GRAD_NCHI);
                scale =scale_const*fMaterial_Params[kTau7];
                fTemp_matrix_nchidof_x_nchidof *= scale;
                // accumulate
                fKMphiphi_7 += fTemp_matrix_nchidof_x_nchidof;



                //fTemp_matrix_nchidof_x_nudof.MultABCT(fIota_eta_temp_matrix,fMpu_2,fIota_temp_matrix);
                fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,fMpu_9,fShapeDisplGrad);
                scale =scale_const*fMaterial_Params[kTau9];
                fTemp_matrix_nchidof_x_nudof *= scale;
                // accumulate
                fKMphiu_2 += fTemp_matrix_nchidof_x_nudof;
                //fKMphiu_2=0.0;


                //fTemp_matrix_nchidof_x_nchidof.MultABC(fIota_eta_temp_matrix,fMpp_2,GRAD_NCHI);
                fTemp_matrix_nchidof_x_nchidof.MultATBC(GRAD_NCHI,fMpp_9,GRAD_NCHI);
                scale =scale_const*fMaterial_Params[kTau9];
                fTemp_matrix_nchidof_x_nchidof *= scale;
                // accumulate
                fKMphiphi_2 += fTemp_matrix_nchidof_x_nchidof;
                //fKMphiphi_2=0.0;

                }
                if(iConstitutiveModelType==3 || iConstitutiveModelType==4)
                {


                        /* Retrieving the previous time step values for each IP */
                        fFp_n_IPs.RowCopy(IP,fFp_n);
                        fCe_n_IPs.RowCopy(IP,fCe_n);
                        fdGdS_n_IPs.RowCopy(IP,fdGdS_n);
                        fdGdCauchy_Stress_n_IPs.RowCopy(IP,fdGdCauchy_Stress_n);
                        fCauchy_stress_n_IPs.RowCopy(IP,fCauchy_stress_tensor_current_n_IP);
                        fDeformation_Gradient_n_IPs.RowCopy(IP,fDeformation_Gradient_n);
                        fdFYdS_n_IPs.RowCopy(IP,fdFYdS_n);

                        /* Micro scale parameters */
                        /* Retrieving the previous time step values of micro field for each IP */
                        fChip_n_IPs.RowCopy(IP,fChip_n);
                        fChip_IPs.RowCopy(IP,fChip);
                        fCchie_n_IPs.RowCopy(IP,fCchie_n);
                        fCchie_IPs.RowCopy(IP,fCchie);
                        PSIe_n_IPs.RowCopy(IP,PSIe_n);
                        PSIe_IPs.RowCopy(IP,PSIe);
                        fdGchidSIGMA_IPs.RowCopy(IP,fdGchidSIGMA);
                        fdGchidSIGMA_n_IPs.RowCopy(IP,fdGchidSIGMA_n);
                        fdFYchidSIGMA_IPs.RowCopy(IP,fdFYchidSIGMA);
                        GXp_IPs.RowCopy(IP,GXp);
                        GXp_n_IPs.RowCopy(IP,GXp_n);
                        GAMMAe_IPs.RowCopy(IP,GAMMAe);
                        GAMMAe_n_IPs.RowCopy(IP,GAMMAe_n);
                        dGnablachidMKLM_IPs.RowCopy(IP,fdGnablachidMKLM);
                        dGnablachidMKLM_n_IPs.RowCopy(IP,fdGnablachidMKLM_n);

                        fMeKLM_n_IPs.RowCopy(IP,fMeKLM_n);
                        fMeKLM_IPs.RowCopy(IP,fMeKLM);

                        SPK_n_IPs.RowCopy(IP,SPK_n);
                        SPK_IPs.RowCopy(IP,SPK);

                        SIGMA_S_n_IPs.RowCopy(IP,SIGMA_S_n);
                        SIGMA_S_IPs.RowCopy(IP,SIGMA_S);

                        SIGMA_n_IPs.RowCopy(IP,SIGMA_n);
                        SIGMA_IPs.RowCopy(IP,SIGMA);

                        Elastic_LagrangianStn_n_IPs.RowCopy(IP,Elastic_LagrangianStn_n);
                        Elastic_LagrangianStn_IPs.RowCopy(IP,Elastic_LagrangianStn);

                        Elastic_MicroStnTensor_n_IPs.RowCopy(IP,Elastic_MicroStnTensor_n);
                        Elastic_MicroStnTensor_IPs.RowCopy(IP,Elastic_MicroStnTensor);


                        /* Inverse of plastic deformation gradient tensor (Fp^-1)_n from previous time step is calculated*/
                        fFp_n_inverse.Inverse(fFp_n);
                        /* Trial Elastic deformation gradient tensor Fe will be formed */
                        fFe_tr.MultAB(fDeformation_Gradient,fFp_n_inverse);



                        /* Trial Elastic Right Cauchy Green tensor will be formed */
                        fRight_Elastic_Cauchy_Green_tensor_tr.MultATB(fFe_tr,fFe_tr);
                        if (fRight_Elastic_Cauchy_Green_tensor_tr.Det()==0)
                                fRight_Elastic_Cauchy_Green_tensor_tr = fIdentity_matrix;

                        /* Inverse of plastic micro deformation tensor of previous step */
                        fChip_n_inverse.Inverse(fChip_n);

                        /* Inverse of plastic micro deformation tensor of current step */
                        fChip_inverse.Inverse(fChip);

                        /* Trial Micro Elastic deformation gradient tensor Chie will be formed */
                        fChie_tr.MultAB(ChiM,fChip_n_inverse);
                        GXp = 0.0;
                        Micro_gradient_Plasticity_Occurrence = 0.0;
                        Micro_Plasticity_Occurrence = 0.0;
                        Macro_Plasticity_Occurrence = 0.0;
                        /* Micro Right_Elastic_Cauchy_Green_tensor trial*/
                        fMicroRight_Elastic_Cauchy_Green_tensor_tr.MultATB(fChie_tr,fChie_tr);
                        if (fMicroRight_Elastic_Cauchy_Green_tensor_tr.Det()==0)
                                fMicroRight_Elastic_Cauchy_Green_tensor_tr = fIdentity_matrix;

                        fCchie_tr=fMicroRight_Elastic_Cauchy_Green_tensor_tr;
                        fdGdS_n_transpose.Transpose(fdGdS_n);
                        fCe_n_inverse.Inverse(fCe_n);
                        PSIe_n_inverse.Inverse(PSIe_n);
                        fCchie_n_inverse.Inverse(fCchie_n);
                        fdGchidSIGMA_n_transpose.Transpose(fdGchidSIGMA_n);

                       // fs_micromorph3D_out<<"fCauchy_stress_tensor_current_n_IP= "<< fCauchy_stress_tensor_current_n_IP<<endl;
                       // fs_micromorph3D_out<<"fDeformation_Gradient= "<< fDeformation_Gradient<<endl;
                       // fs_micromorph3D_out<<"fDeformation_Gradient_n= "<< fDeformation_Gradient_n<<endl;
                       // fs_micromorph3D_out<<"global_iteration= "<< global_iteration<<endl;
                       // fs_micromorph3D_out<<"Element= "<< e <<endl;
                       // fs_micromorph3D_out<<"IP= "<< IP <<endl;

                       // fs_micromorph3D_out<<"fState_variables_n_IPs(IP,kEpsVolp)= "<< fState_variables_n_IPs(IP,kEpsVolp)<<endl;
                       // fs_micromorph3D_out<<"fState_variables_n_IPs(IP,khKappa)= "<< fState_variables_n_IPs(IP,khKappa) <<endl;
                       // fs_micromorph3D_out<<"fState_variables_n_IPs(IP,khc)= "<< fState_variables_n_IPs(IP,khc) <<endl;



                        /*Trial Elastic Lagrangian Strain Tensor will be formed in Bbar */
                        Elastic_LagrangianStn_tr=fIdentity_matrix;
                        Elastic_LagrangianStn_tr*=-1;
                        Elastic_LagrangianStn_tr+=fRight_Elastic_Cauchy_Green_tensor_tr;
                        Elastic_LagrangianStn_tr*=0.5;


                        /* Trial Elastic micro strain tensor will be formed in Bbar */
                        Elastic_MicroStnTensor_tr  = fIdentity_matrix;
                        Elastic_MicroStnTensor_tr*= -1;
                        /* Trial Elastic defomration measure Elastic_PSI_tr EPSI_tr(PSIe_tr) */
                        PSIe_tr.MultATB(fFe_tr,fChie_tr);
                        Elastic_MicroStnTensor_tr+= PSIe_tr;
                        Elastic_MicroStnTensor_tr_transpose.Transpose(Elastic_MicroStnTensor_tr);

                        Symm_Elastic_MicroStnTensor_tr = Elastic_MicroStnTensor_tr;
                        Symm_Elastic_MicroStnTensor_tr+= Elastic_MicroStnTensor_tr_transpose;
                        Symm_Elastic_MicroStnTensor_tr*= 0.5;

                        /* Calculation of the trial second Piola-Kirchhoff (fSPK_tr) stress tensor*/
                        fSPK_tr=0.0;
                        Temp_inv=0.0;
                        Temp_inv=Elastic_LagrangianStn_tr.Trace();//Calculating the tr(E) and keep in temp. var.
                        fSPK_tr.SetToScaled(Temp_inv*(fMaterial_Params[kLambda]+fMaterial_Params[kTau]),fIdentity_matrix);

                        fTemp_matrix_nsd_x_nsd.SetToScaled(2*(fMaterial_Params[kMu]+fMaterial_Params[kSigma_const]),Elastic_LagrangianStn_tr);
                        fSPK_tr+=fTemp_matrix_nsd_x_nsd;

                        Temp_inv=Elastic_MicroStnTensor_tr.Trace();
                        fTemp_matrix_nsd_x_nsd.SetToScaled(Temp_inv*fMaterial_Params[kEta],fIdentity_matrix);
                        fSPK_tr+=fTemp_matrix_nsd_x_nsd;

                        fTemp_matrix_nsd_x_nsd.SetToScaled(fMaterial_Params[kKappa],Elastic_MicroStnTensor_tr);
                        fSPK_tr+=fTemp_matrix_nsd_x_nsd;

                        fTemp_matrix_nsd_x_nsd2.Transpose(Elastic_MicroStnTensor_tr);
                        fTemp_matrix_nsd_x_nsd.SetToScaled(fMaterial_Params[kNu],fTemp_matrix_nsd_x_nsd2);
                        fSPK_tr+=fTemp_matrix_nsd_x_nsd;

                        //fs_micromorph3D_out<<"fSPK_tr= "<< fSPK_tr <<endl;

                        /* Calculation of the trial second Relative stress SIGMA_S_tr (fSPK_tr) stress tensor*/
                        SIGMA_S_tr=0.0;
                        Temp_inv=Elastic_LagrangianStn_tr.Trace();
                        SIGMA_S_tr.SetToScaled(Temp_inv*fMaterial_Params[kTau],fIdentity_matrix);
                        // 2sigmaE
                        fTemp_matrix_nsd_x_nsd.SetToScaled(2*fMaterial_Params[kSigma_const],Elastic_LagrangianStn_tr);
                        SIGMA_S_tr+=fTemp_matrix_nsd_x_nsd;
                        //(eta-Tau)trEpsilon.1
                        Temp_inv=Elastic_MicroStnTensor_tr.Trace();
                        fTemp_matrix_nsd_x_nsd.SetToScaled(Temp_inv*(fMaterial_Params[kEta]-fMaterial_Params[kTau]),fIdentity_matrix);
                        SIGMA_S_tr+=fTemp_matrix_nsd_x_nsd;
                        //(nu-sigma)*Epsilon
                        fTemp_matrix_nsd_x_nsd.SetToScaled(fMaterial_Params[kNu]-fMaterial_Params[kSigma_const],Elastic_MicroStnTensor_tr);
                        SIGMA_S_tr+=fTemp_matrix_nsd_x_nsd;
                        //(kappa-sigma)*Epsilon^T
                        fTemp_matrix_nsd_x_nsd2.Transpose(Elastic_MicroStnTensor_tr);
                        fTemp_matrix_nsd_x_nsd.SetToScaled(fMaterial_Params[kKappa]-fMaterial_Params[kSigma_const],fTemp_matrix_nsd_x_nsd2);
                        SIGMA_S_tr+=fTemp_matrix_nsd_x_nsd;

                        //fs_micromorph3D_out<<"SIGMA_S_tr= "<< SIGMA_S_tr <<endl;

                        SIGMA_tr=0.0;
                        Temp_inv=Elastic_LagrangianStn_tr.Trace();
                        SIGMA_tr.SetToScaled(Temp_inv*(fMaterial_Params[kLambda]+2*fMaterial_Params[kTau]),fIdentity_matrix);
                        // 2sigmaE
                        fTemp_matrix_nsd_x_nsd.SetToScaled(2*(fMaterial_Params[kMu]+2*fMaterial_Params[kSigma_const]),Elastic_LagrangianStn_tr);
                        SIGMA_tr+=fTemp_matrix_nsd_x_nsd;
                        //(eta-Tau)trEpsilon.1
                        Temp_inv=Elastic_MicroStnTensor_tr.Trace();
                        fTemp_matrix_nsd_x_nsd.SetToScaled(Temp_inv*(2*fMaterial_Params[kEta]-fMaterial_Params[kTau]),fIdentity_matrix);
                        SIGMA_tr+=fTemp_matrix_nsd_x_nsd;
                        //(nu-sigma)*Epsilon
                        fTemp_matrix_nsd_x_nsd.SetToScaled(2*(fMaterial_Params[kKappa]+fMaterial_Params[kNu]-fMaterial_Params[kSigma_const]),Symm_Elastic_MicroStnTensor_tr);
                        SIGMA_tr+=fTemp_matrix_nsd_x_nsd;



                        Form_GXe_tr();
                        Form_GAMMAe_tr();
                        Form_fMKLM_tr();
                        Form_Mean_fMKLM_tr();
                        Form_Norm_Mean_fMKLM_tr();
                        Form_fdevMKLM_tr();
                        Form_fNormdevMKLM_tr();
                        Form_kc_nablachi_n(IP);
                        Form_Norm_kc_nablachi_n();
/*
                        fs_micromorph3D_out<<"fMKLM_tr= "<< fMKLM_tr <<endl;
                        fs_micromorph3D_out<<"Mean_fMKLM_tr= "<< Mean_fMKLM_tr <<endl;
                        fs_micromorph3D_out<<"fdevMKLM_tr= "<< fdevMKLM_tr <<endl;
                        fs_micromorph3D_out<<"fNormdevMKLM_tr= "<< fNormdevMKLM_tr <<endl;
                        fs_micromorph3D_out<<"Norm_Mean_fMKLM_tr= "<< Norm_Mean_fMKLM_tr <<endl;
                        fs_micromorph3D_out<<"fMKLM_tr(0,0,2)= "<< fMKLM_tr(0,0,2) <<endl;
                        fs_micromorph3D_out<<"fMKLM_tr(1,1,2)= "<< fMKLM_tr(1,1,2) <<endl;
                        fs_micromorph3D_out<<"fMKLM_tr(2,2,2)= "<< fMKLM_tr(2,2,2) <<endl;
                        fs_micromorph3D_out<<"fMKLM_tr(0,0,0)= "<< fMKLM_tr(0,0,0) <<endl;
                        fs_micromorph3D_out<<"fMKLM_tr(1,1,1)= "<< fMKLM_tr(1,1,1) <<endl;
                        fs_micromorph3D_out<<"fFe_tr= "<< fFe_tr <<endl;
                        fs_micromorph3D_out<<"GRAD_CHIM= "<< GRAD_CHIM <<endl;
                        fs_micromorph3D_out<<"fFp_n_inverse= "<< fFp_n_inverse <<endl;
                        fs_micromorph3D_out<<"fChip_n_inverse= "<< fChip_n_inverse <<endl;
*/
                        /* Form terms related the cohesion and friction angle  in D-P yield function */
                        /* Initially Aphi is already assigined to fState_variables_n_IPs(IP,khc)=Apsi in TakeParameterList function*/
                        double Beta=-1.0;
                        double Aphi=2*sqrt(6)*cos(fMaterial_Params[kFphi])/(3+Beta*sin(fMaterial_Params[kFphi]));
                        double Bphi=2*sqrt(6)*sin(fMaterial_Params[kFphi])/(3+Beta*sin(fMaterial_Params[kFphi]));
                        // Form the cohesion and dilation angle related terms in Plastic potential function
                        double Apsi=2*sqrt(6)*cos(fMaterial_Params[kDpsi])/(3+Beta*sin(fMaterial_Params[kDpsi] ));
                        double Bpsi=2*sqrt(6)*sin(fMaterial_Params[kDpsi])/(3+Beta*sin(fMaterial_Params[kDpsi] ));


                        /* Form terms related the cohesion and friction angle  in Micro D-P yield function */
                        /* Initially Aphi_chi is already assigined to fState_variables_n_IPs(IP,khc_chi)=Apsi_chi in TakeParameterList function*/
                        //double Beta=-1.0;
                        double Aphi_chi=2*sqrt(6)*cos(fMaterial_Params[kFphi_chi])/(3+Beta*sin(fMaterial_Params[kFphi_chi]));
                        double Bphi_chi=2*sqrt(6)*sin(fMaterial_Params[kFphi_chi])/(3+Beta*sin(fMaterial_Params[kFphi_chi]));
                        // Form the cohesion and dilation angle related terms in Plastic potential function
                        double Apsi_chi=2*sqrt(6)*cos(fMaterial_Params[kDpsi_chi])/(3+Beta*sin(fMaterial_Params[kDpsi_chi] ));
                        double Bpsi_chi=2*sqrt(6)*sin(fMaterial_Params[kDpsi_chi])/(3+Beta*sin(fMaterial_Params[kDpsi_chi] ));


                        double Aphi_nablachi=2*sqrt(6)*cos(fMaterial_Params[kFphi_nablachi])/(3+Beta*sin(fMaterial_Params[kFphi_nablachi]));
                        double Bphi_nablachi=2*sqrt(6)*sin(fMaterial_Params[kFphi_nablachi])/(3+Beta*sin(fMaterial_Params[kFphi_nablachi]));
                        // Form the cohesion and dilation angle related terms in Plastic potential function
                        double Apsi_nablachi=2*sqrt(6)*cos(fMaterial_Params[kDpsi_nablachi])/(3+Beta*sin(fMaterial_Params[kDpsi_nablachi] ));
                        double Bpsi_nablachi=2*sqrt(6)*sin(fMaterial_Params[kDpsi_nablachi])/(3+Beta*sin(fMaterial_Params[kDpsi_nablachi] ));

                        /* Form the trial deviatoric SPK */
                        Pbar_tr=0.0;
                        Pbar_tr=fSPK_tr.Trace()/3;//Calculating the pressure term
                        fdevSPK_tr.SetToScaled(Pbar_tr,fIdentity_matrix);
                        fdevSPK_tr*=-1;
                        fdevSPK_tr+=fSPK_tr;
    					fTemp_matrix_one_x_one = fdevSPK_tr.ScalarProduct();
    					fNorm_devSPK_tr = sqrt(fTemp_matrix_one_x_one);
                        //cout<< "fdevSPK_tr"<<fdevSPK_tr<<endl;
                        /* Form the trial deviatoric SIGMA-S */
                        Pchibar_tr=0.0;
                        Pchibar_tr=SIGMA_S_tr.Trace()/3;//Calculating the pressure term
                        devSIGMA_S_tr.SetToScaled(Pchibar_tr,fIdentity_matrix);
                        devSIGMA_S_tr*=-1;
                        devSIGMA_S_tr+=SIGMA_S_tr;

                        //fs_micromorph3D_out<<"devSIGMA_S_tr= "<< devSIGMA_S_tr <<endl;

                        fMeanSIGMA_etr= SIGMA_tr.Trace()/3;
                        fdevSIGMA_tr.SetToScaled(fMeanSIGMA_etr,fIdentity_matrix);
                        fdevSIGMA_tr*=-1;
                        fdevSIGMA_tr+=SIGMA_tr;
                        Temp_inv= fdevSIGMA_tr.ScalarProduct();
                        fNormdevSIGMA_tr=sqrt(Temp_inv);

                        /* Calculate devS: devS  */
                        Temp_inv= fdevSPK_tr.ScalarProduct();
                        devfSPKinv_tr=sqrt(Temp_inv);
                        Temp_inv= devSIGMA_S_tr.ScalarProduct();
                        devSIGMA_S_inv_tr=sqrt(Temp_inv);

                        /* Calculate ||devS:devS+devR:devR||  */
                        Stress_Norm_tr=0.0;
                        Temp_inv= fdevSPK_tr.ScalarProduct();
                        Stress_Norm_tr=Temp_inv;
                        Temp_inv= devSIGMA_S_tr.ScalarProduct();
                        Stress_Norm_tr+=Temp_inv;
                        Temp_inv=Stress_Norm_tr;
                        Stress_Norm_tr=sqrt(Temp_inv);


                        if (fMaterial_Params[kCapped_Model_Flag] == 1)
                        {
							Xpsi_n = fState_variables_n_IPs(IP,Kappa)-fMaterial_Params[kR]*(Apsi*fState_variables_n_IPs(IP,kc)-Bpsi*fState_variables_n_IPs(IP,Kappa));
							Xpsi_m_n = -1*fMaterial_Params[kR]*(Apsi*fState_variables_n_IPs(IP,kc)-Bpsi*fState_variables_n_IPs(IP,Kappa));
							Xphi_n = fState_variables_n_IPs(IP,Kappa)-fMaterial_Params[kR]*(Aphi*fState_variables_n_IPs(IP,kc)-Bphi*fState_variables_n_IPs(IP,Kappa));
							Xphi_m_n = -1*fMaterial_Params[kR]*(Aphi*fState_variables_n_IPs(IP,kc)-Bphi*fState_variables_n_IPs(IP,Kappa));
							fMacfunc_tr = 0.5*(fabs(fState_variables_n_IPs(IP,Kappa)-3*Pbar_tr)+fState_variables_n_IPs(IP,Kappa)-3*Pbar_tr);
							fPhiCap_tr = 1-fMacfunc_tr*(fState_variables_n_IPs(IP,Kappa)-3*Pbar_tr)/(Xphi_m_n*Xphi_m_n);
							fPsiCap_tr = 1-fMacfunc_tr*(fState_variables_n_IPs(IP,Kappa)-3*Pbar_tr)/(Xpsi_m_n*Xpsi_m_n);



							Xpsi_chi_n = fState_variables_n_IPs(IP,Kappa_chi)-fMaterial_Params[kR_chi]*
							(Apsi_chi*fState_variables_n_IPs(IP,kc_chi)-Bpsi_chi*fState_variables_n_IPs(IP,Kappa_chi));
							Xpsi_chi_m_n = -1*fMaterial_Params[kR_chi]*(Apsi_chi*fState_variables_n_IPs(IP,kc_chi)-Bpsi_chi*fState_variables_n_IPs(IP,Kappa_chi));
							Xphi_chi_n = fState_variables_n_IPs(IP,Kappa_chi)-fMaterial_Params[kR_chi]*
							(Aphi_chi*fState_variables_n_IPs(IP,kc_chi)-Bphi_chi*fState_variables_n_IPs(IP,Kappa_chi));
							Xphi_chi_m_n = -1*fMaterial_Params[kR_chi]*(Aphi_chi*fState_variables_n_IPs(IP,kc_chi)-Bphi_chi*fState_variables_n_IPs(IP,Kappa_chi));
							fMacfunc_chi_tr = 0.5*(fabs(fState_variables_n_IPs(IP,Kappa_chi)-3*fMeanSIGMA_etr)+fState_variables_n_IPs(IP,Kappa_chi)-3*fMeanSIGMA_etr);
							fPhiCap_chi_tr = 1-fMacfunc_chi_tr*(fState_variables_n_IPs(IP,Kappa_chi)-3*fMeanSIGMA_etr)/(Xphi_chi_m_n*Xphi_chi_m_n);
							fPsiCap_chi_tr = 1-fMacfunc_chi_tr*(fState_variables_n_IPs(IP,Kappa_chi)-3*fMeanSIGMA_etr)/(Xpsi_chi_m_n*Xpsi_chi_m_n);

	                        Form_Kappa_nablachi_n(IP);
	                        Form_Norm_Kappa_nablachi_n();
							Xphi_nablachi_n = Norm_Kappa_nablachi_n-fMaterial_Params[kR_nablachi]*(Aphi_nablachi*Norm_kc_nablachi_n-Bphi_nablachi*Norm_Kappa_nablachi_n);
							Xphi_nablachi_m_n = -1*fMaterial_Params[kR_nablachi]*(Aphi_nablachi*Norm_kc_nablachi_n-Bphi_nablachi*Norm_Kappa_nablachi_n);
							Xpsi_nablachi_n = Norm_Kappa_nablachi_n-fMaterial_Params[kR_nablachi]*(Apsi_nablachi*Norm_kc_nablachi_n-Bpsi_nablachi*Norm_Kappa_nablachi_n);
							Xpsi_nablachi_m_n = -1*fMaterial_Params[kR_nablachi]*(Apsi_nablachi*Norm_kc_nablachi_n-Bpsi_nablachi*Norm_Kappa_nablachi_n);
	                        fMacfunc_nablachi_tr = 0.5*(fabs(Norm_Kappa_nablachi_n-3*Norm_Mean_fMKLM_tr)+(Norm_Kappa_nablachi_n-3*Norm_Mean_fMKLM_tr));
	                        fPhiCap_nablachi_tr = 1-fMacfunc_nablachi_tr*(Norm_Kappa_nablachi_n-3*Norm_Mean_fMKLM_tr)/(Xphi_nablachi_m_n*Xphi_nablachi_m_n);
	                        fPsiCap_nablachi_tr = 1-fMacfunc_nablachi_tr*(Norm_Kappa_nablachi_n-3*Norm_Mean_fMKLM_tr)/(Xpsi_nablachi_m_n*Xpsi_nablachi_m_n);

							if (fMacfunc_tr > 0.0) signMacfunc_tr = 1.0;
							else signMacfunc_tr = 0.0;

							if (fMacfunc_chi_tr > 0.0) signMacfunc_chi_tr = 1.0;
							else signMacfunc_chi_tr = 0.0;

							if (fMacfunc_nablachi_tr > 0.0) signMacfunc_nablachi_tr = 1.0;
							else signMacfunc_nablachi_tr = 0.0;

	                        Cpsi_tr = ((Bpsi*sqrt(fabs(fPsiCap_tr))/3.0)-(Apsi*fState_variables_n_IPs(IP,kc)-Bpsi*Pbar_tr)*
	                        		(signMacfunc_tr*(fState_variables_n_IPs(IP,Kappa)-3*Pbar_tr)/(Xpsi_m_n*Xpsi_m_n*sqrt(fabs(fPsiCap_tr)))));

	                        Cpsi_chi_tr = ((Bpsi_chi*sqrt(fabs(fPsiCap_chi_tr))/3.0)-(Apsi_chi*fState_variables_n_IPs(IP,kc_chi)-Bpsi_chi*fMeanSIGMA_etr)
	                        		*(signMacfunc_chi_tr*(fState_variables_n_IPs(IP,Kappa_chi)-3*fMeanSIGMA_etr)/(Xpsi_chi_m_n*Xpsi_chi_m_n*sqrt(fabs(fPsiCap_chi_tr)))));

	                        Cpsi_nablachi_tr = ((Bpsi_nablachi*sqrt(fabs(fPsiCap_nablachi_tr))/(3*Norm_Mean_fMKLM_tr))-(Apsi_nablachi*Norm_kc_nablachi_n-Bpsi_nablachi*Norm_Mean_fMKLM_tr)*
	                        		(signMacfunc_nablachi_tr*(Norm_Kappa_nablachi_n-3*Norm_Mean_fMKLM_tr)
	                        				/(Xpsi_nablachi_m_n*Xpsi_nablachi_m_n*Norm_Mean_fMKLM_tr*sqrt(fabs(fPsiCap_nablachi_tr)))));

	                        Cphi_tr = ((Bphi*sqrt(fabs(fPhiCap_tr))/3.0)-(Aphi*fState_variables_n_IPs(IP,kc)-Bphi*Pbar_tr)*
	                        		(signMacfunc_tr*(fState_variables_n_IPs(IP,Kappa)-3*Pbar_tr)/(Xphi_m_n*Xphi_m_n*sqrt(fabs(fPhiCap_tr)))));

	                        Cphi_chi_tr = ((Bphi_chi*sqrt(fabs(fPhiCap_chi_tr))/3.0)-(Aphi_chi*fState_variables_n_IPs(IP,kc_chi)-Bphi_chi*fMeanSIGMA_etr)
	                        		*(signMacfunc_chi_tr*(fState_variables_n_IPs(IP,Kappa_chi)-3*fMeanSIGMA_etr)/(Xphi_chi_m_n*Xphi_chi_m_n*sqrt(fabs(fPhiCap_chi_tr)))));

	                        Cphi_nablachi_tr = ((Bphi_nablachi*sqrt(fabs(fPhiCap_nablachi_tr))/(3*Norm_Mean_fMKLM_tr))-(Aphi_nablachi*Norm_kc_nablachi_n-Bphi_nablachi*Norm_Mean_fMKLM_tr)*
	                        		(signMacfunc_nablachi_tr*(Norm_Kappa_nablachi_n-3*Norm_Mean_fMKLM_tr)
	                        				/(Xphi_nablachi_m_n*Xphi_nablachi_m_n*Norm_Mean_fMKLM_tr*sqrt(fabs(fPhiCap_nablachi_tr)))));


	    					fdGdS_tr = 0.0;
	    					fdGdS_tr.SetToScaled(Cpsi_tr,fIdentity_matrix);
	    					fTemp_matrix_nsd_x_nsd.SetToScaled(1/devfSPKinv_tr,fdevSPK_tr);
	    					fdGdS_tr+=fTemp_matrix_nsd_x_nsd;
	    					fdGdS_tr_transpose.Transpose(fdGdS_tr);
	    					fdGdS_tr_trace = fdGdS_tr.Trace();

	    					fdGdS_tr = fdGdS_n;
	    					fdGdS_tr_transpose.Transpose(fdGdS_n);
	    					fdGdS_tr_trace = fdGdS_n.Trace();

	                        fdGchidSIGMA_tr= 0.0;
	                        fdGchidSIGMA_tr.SetToScaled(Cpsi_chi_tr,fIdentity_matrix);
	                        fTemp_matrix_nsd_x_nsd.SetToScaled(1/fNormdevSIGMA_tr,fdevSIGMA_tr);
	                        fdGchidSIGMA_tr+=fTemp_matrix_nsd_x_nsd;
	                        fdGchidSIGMA_tr_transpose.Transpose(fdGchidSIGMA_tr);
	                        fdGchidSIGMA_tr_trace = fdGchidSIGMA_tr.Trace();

	                        fdGchidSIGMA_tr = fdGchidSIGMA_n;
	                        fdGchidSIGMA_tr_transpose.Transpose(fdGchidSIGMA_n);
	                        fdGchidSIGMA_tr_trace = fdGchidSIGMA_n.Trace();

	                        fdGnablachidMKLM_tr = fdGnablachidMKLM_n;

	                        PlasticityCondition=0;

	                        if(iPlasticityCheck==1)
	                        {
	                        	/// Combined Plasticity need to be implemented
	                        }

	                        if(iPlasticityCheck==0)
	                        {
	                        	fYield_function_tr = 0.0;
	                        	fMicroYield_function_tr = 0.0;
	                        	fMicro_gradient_Yield_function_tr = 0.0;

	                        	if (devfSPKinv_tr<=1)
	                        	{
	                        		fYield_function_tr = (1.0/3.0)*Xphi_m_n-Pbar_tr;
	                        	}
	                        	else
	                        	{
	                        		fYield_function_tr = devfSPKinv_tr-sqrt(fabs(fPhiCap_tr))*(Aphi*fState_variables_n_IPs(IP,kc)-Bphi*Pbar_tr);
	                        	}

	                        	fMicroYield_function_tr = fNormdevSIGMA_tr-sqrt(fabs(fPhiCap_chi_tr))*(Aphi_chi*fState_variables_n_IPs(IP,kc_chi)-Bphi_chi*fMeanSIGMA_etr);
	                        	fMicro_gradient_Yield_function_tr = fNormdevMKLM_tr-sqrt(fabs(fPhiCap_nablachi_tr))*(Aphi_nablachi*Norm_kc_nablachi_n-Bphi_nablachi*Norm_Mean_fMKLM_tr);
	                        }

                        }

                        /* Check for yielding in Drucker Prager*/

                        if (fMaterial_Params[kCapped_Model_Flag] == 0)
                        {
							fdGdS_tr = 0.0;
							fdGdS_tr.SetToScaled(Bpsi*1.0/3.0,fIdentity_matrix);
							fTemp_matrix_nsd_x_nsd.SetToScaled(1/devfSPKinv_tr,fdevSPK_tr);
							fdGdS_tr+=fTemp_matrix_nsd_x_nsd;
							fdGdS_tr_transpose.Transpose(fdGdS_tr);
							fdGdS_tr_trace = fdGdS_tr.Trace();

							fdGdS_tr = fdGdS_n;
							fdGdS_tr_transpose.Transpose(fdGdS_n);
							fdGdS_tr_trace = fdGdS_n.Trace();

							fdGchidSIGMA_tr= 0.0;
							fdGchidSIGMA_tr.SetToScaled(Bpsi_chi*1.0/3.0,fIdentity_matrix);
							fTemp_matrix_nsd_x_nsd.SetToScaled(1/fNormdevSIGMA_tr,fdevSIGMA_tr);
							fdGchidSIGMA_tr+=fTemp_matrix_nsd_x_nsd;
							fdGchidSIGMA_tr_transpose.Transpose(fdGchidSIGMA_tr);
							fdGchidSIGMA_tr_trace = fdGchidSIGMA_tr.Trace();

							fdGchidSIGMA_tr = fdGchidSIGMA_n;
							fdGchidSIGMA_tr_transpose.Transpose(fdGchidSIGMA_n);
							fdGchidSIGMA_tr_trace = fdGchidSIGMA_n.Trace();

							fdGnablachidMKLM_tr = fdGnablachidMKLM_n;


	                        PlasticityCondition=0;

	                        if(iPlasticityCheck==1)
	                        {
	                           	//fCombinedYield_function_tr=0.0;
	                        	//Check for yielding
	                        	fCombinedYield_function_tr=0.0;
	                        	fCombinedYield_function_tr=Stress_Norm_tr-(Aphi*fState_variables_n_IPs(IP,kc)-Bphi*Pbar_tr+Aphi_chi*fState_variables_n_IPs(IP,kc_chi)-Bphi_chi*Pchibar_tr);

	                        	//fF_tr_fact = fCombinedYield_function_tr/(fMaterial_Params[kMu]);
	                        	//fF_tr_fact = fCombinedYield_function_tr;
	                        	fYield_function_tr=-1.0;
	                        	fMicroYield_function_tr=-1.0;
	                        	fMicro_gradient_Yield_function_tr=-1.0;
	                        }


	                        if(iPlasticityCheck==0)
	                        {
	                        	fYield_function_tr=0.0;
	                        	fMicroYield_function_tr=0.0;
	                            //Check for yielding
	                        	fYield_function_tr=devfSPKinv_tr-(Aphi*fState_variables_n_IPs(IP,kc)-Bphi*Pbar_tr);

	                        	//Check for micro-yielding
	                            fMicroYield_function_tr=fNormdevSIGMA_tr-(Aphi_chi*(fState_variables_n_IPs(IP,kc_chi))-Bphi_chi*fMeanSIGMA_etr);
	                            fCombinedYield_function_tr=-1.0;
	                            fMicro_gradient_Yield_function_tr = fNormdevMKLM_tr-(Aphi_nablachi*Norm_kc_nablachi_n-Bphi_nablachi*Norm_Mean_fMKLM_tr);
	                        }
                        }



                //fs_micromorph3D_out<<"fYield_function_tr= "<< fYield_function_tr <<endl;
               // fs_micromorph3D_out<<"fMicroYield_function_tr= "<< fMicroYield_function_tr <<endl;
                //fs_micromorph3D_out<<"fMicro_gradient_Yield_function_tr= "<< fMicro_gradient_Yield_function_tr <<endl;

    			//if (global_iteration < 0) fF_tr_fact = -1.0;
    			if (global_iteration < 0) fCombinedYield_function_tr = -1.0;
    			if (global_iteration < 0) fYield_function_tr = -1.0;
    			if (global_iteration < 0) fMicroYield_function_tr = -1.0;
    			if (global_iteration < 0) fMicro_gradient_Yield_function_tr = -1.0;

    			//fs_micromorph3D_out<<"kc_nablachi_n = "<< kc_nablachi_n << endl;
    			//fs_micromorph3D_out<<"fState_variables_n_IPs(a,kc_nablachi0) = "<< fState_variables_n_IPs(IP,kc_nablachi0) << endl;
    			//fs_micromorph3D_out<<"fState_variables_n_IPs(a,kc_nablachi1) = "<< fState_variables_n_IPs(IP,kc_nablachi1) << endl;
    			//fs_micromorph3D_out<<"fState_variables_n_IPs(a,kc_nablachi2) = "<< fState_variables_n_IPs(IP,kc_nablachi2) << endl;


    		if(iPlasticityCheck==1 && fCombinedYield_function_tr>dYieldTrialTol
    				|| iPlasticityCheck==0 && fYield_function_tr>dYieldTrialTol
    				|| iPlasticityCheck==0 && fMicroYield_function_tr>dYieldTrialTol
    				|| iPlasticityCheck==0 && fMicro_gradient_Yield_function_tr>dYieldTrialTol)
    			{

    			if (fMaterial_Params[kCapped_Model_Flag] == 0)
    			{

				if(iPlasticityCheck==0 && fYield_function_tr>dYieldTrialTol  && fMicroYield_function_tr<= dYieldTrialTol)
				{

					//fs_micromorph3D_out<<"MACRO-PLASTICITY with Trial Plastic Flow Direction"<<endl;
					PlasticityCondition=1;
                    Macro_Plasticity_Occurrence = 1;
					// initialize before iteration
					fYield_function=fYield_function_tr;
					fMicroYield_function=fMicroYield_function_tr;
					fFe=fFe_tr;
					fChie=fChie_tr;
					fCchie=fCchie_tr;
					//initial values for Fp is assumed the same with previous step
					fFp=fFp_n;


					SPK=fSPK_tr;
					devSPK=fdevSPK_tr;
					fTemp_matrix_one_x_one = fdevSPK_tr.ScalarProduct();
					devfSPKinv_tr = sqrt(fTemp_matrix_one_x_one);

/*					fdGdS_tr = 0.0;
					fdGdS_tr.SetToScaled(Bpsi*1.0/3.0,fIdentity_matrix);
					fTemp_matrix_nsd_x_nsd.SetToScaled(1/devfSPKinv_tr,fdevSPK_tr);
					fdGdS_tr+=fTemp_matrix_nsd_x_nsd;
					fdGdS_tr_transpose.Transpose(fdGdS_tr);
					fdGdS_tr_trace = fdGdS_tr.Trace();
*/

					devfSPKinv=devfSPKinv_tr;

					SIGMA_S=SIGMA_S_tr;
					devSIGMA_S_inv=devSIGMA_S_inv_tr;
					devSIGMA_S=devSIGMA_S_tr;

					SIGMA=SIGMA_tr;
					fNormdevSIGMA=fNormdevSIGMA_tr;
					fdevSIGMA=fdevSIGMA_tr;

					PSIe=PSIe_tr;
					fdelDelgamma = 0.0;
					fDelgamma = 0.0;
					fDelgammachi=0.0;
					fDelgammanablachi=0.0;
					// iterate using Newton-Raphson to solve for fDelgamma
					iter_count = 0;
					//fs_micromorph3D_out << "Gauss Point = " << IP << endl;
					//fs_micromorph3D_out << "Current Macro Yield function = " << fYield_function << endl;

					while (fabs(fYield_function) > dAbsTol && fabs(fYield_function/fYield_function_tr) > dRelTol
							&& iter_count < iIterationMax)
					{
						iter_count += 1;
						//Form  dFe/dDgamma
						fFp_inverse.Inverse(fFp);
						dFedDelgamma=0.0;
						fCe_n_inverse.Inverse(fCe_n);
						fTemp_matrix_nsd_x_nsd.MultATBC(fdGdS_tr,fFp_n,fFp_inverse);
						dFedDelgamma.MultABC(fFe,fCe_n_inverse,fTemp_matrix_nsd_x_nsd);
						dFedDelgamma*=-1;

						//Forming  dE^e/dDgamma  E^e: Elas. Lag. stn tensor
						dEedDelgamma.MultATB(dFedDelgamma,fFe);
						fTemp_matrix_nsd_x_nsd.MultATB(fFe,dFedDelgamma);
						dEedDelgamma+=fTemp_matrix_nsd_x_nsd;
						dEedDelgamma*=0.5;

						//Forming  dEpsilon^e/dDgamma  Epsilone^e: Elastic micro strain tensor
						dEpsilonedDelgamma.MultATB(dFedDelgamma,fChie);

						//Forming  dS/dDgamma  S= SPK tensor
						Temp_inv=dEedDelgamma.Trace();
						dSdDelgamma.SetToScaled((fMaterial_Params[kLambda]+fMaterial_Params[kTau])*Temp_inv,fIdentity_matrix);

						fTemp_matrix_nsd_x_nsd.SetToScaled(2*(fMaterial_Params[kMu]+fMaterial_Params[kSigma_const]),dEedDelgamma);
						dSdDelgamma+=fTemp_matrix_nsd_x_nsd;

						Temp_inv=dEpsilonedDelgamma.Trace();
						fTemp_matrix_nsd_x_nsd.SetToScaled(fMaterial_Params[kEta]*Temp_inv,fIdentity_matrix);
						dSdDelgamma+=fTemp_matrix_nsd_x_nsd;

						fTemp_matrix_nsd_x_nsd.SetToScaled(fMaterial_Params[kKappa],dEpsilonedDelgamma);
						dSdDelgamma+=fTemp_matrix_nsd_x_nsd;

						fTemp_matrix_nsd_x_nsd2.Transpose(dEpsilonedDelgamma);
						fTemp_matrix_nsd_x_nsd.SetToScaled(fMaterial_Params[kNu],fTemp_matrix_nsd_x_nsd2);
						dSdDelgamma+=fTemp_matrix_nsd_x_nsd;
						dPdDelgamma=dSdDelgamma.Trace()/3;

						//Forming  d(devS)/dDgamma  devS: dev. part of SPK tensor
						ddevSdDelgamma.SetToScaled(dPdDelgamma,fIdentity_matrix);
						ddevSdDelgamma*=-1;
						ddevSdDelgamma+=dSdDelgamma;

						//Forming  d(||devS||)/dDgamma  devS: dev. part of SPK tensor
						fTemp_matrix_nsd_x_nsd.SetToScaled(1/devfSPKinv,devSPK);
						InvddevSdDelgamma=dMatrixT::Dot(ddevSdDelgamma,fTemp_matrix_nsd_x_nsd);

						//Forming  dc/dDgamma  c: cohesion
						dcdDelgamma=fState_variables_n_IPs(IP,khc)*fMaterial_Params[kHc];

						// assemble the consistent tangent
						dFYdDelgamma=InvddevSdDelgamma-(Aphi*dcdDelgamma-Bphi*dPdDelgamma);

						//solve for fdelDelgamma
						if (fabs(dFYdDelgamma) >= 1e-12) fdelDelgamma = -fYield_function/dFYdDelgamma;
						else fdelDelgamma = 0.0;

							fDelgamma+= fdelDelgamma;

							cohesion=fState_variables_n_IPs(IP,kc)+fDelgamma*fState_variables_n_IPs(IP,khc)*fMaterial_Params[kHc];
							if (cohesion < 0.0)
							{
								cohesion = 0.0;
								fState_variables_IPs(IP,kc)= fState_variables_n_IPs(IP,kc);
							}



							//update fFp
							fCe_n_inverse.Inverse(fCe_n);
							fTemp_matrix_nsd_x_nsd.MultABT(fCe_n_inverse,fdGdS_tr);
							fTemp_matrix_nsd_x_nsd*=fDelgamma;
							fTemp_matrix_nsd_x_nsd += fIdentity_matrix;

							fFp.MultAB(fTemp_matrix_nsd_x_nsd,fFp_n);

							//calculate fFp_Inverse
							fFp_inverse.Inverse(fFp);

							//calculate Fe
							fFe.MultAB(fDeformation_Gradient,fFp_inverse);

							//[fElastic_Right_Cauchy_Green_tensor] will be formed
							fRight_Elastic_Cauchy_Green_tensor.MultATB(fFe,fFe);
							if (fRight_Elastic_Cauchy_Green_tensor.Det()==0)
								fRight_Elastic_Cauchy_Green_tensor = fIdentity_matrix;

							//[fMicroElastic_Right_Cauchy_Green_tensor] will be formed
							fMicroRight_Elastic_Cauchy_Green_tensor.MultATB(fChie,fChie);
							if (fMicroRight_Elastic_Cauchy_Green_tensor.Det()==0)
								fMicroRight_Elastic_Cauchy_Green_tensor = fIdentity_matrix;

							//Update Elastic Lagrangian strain tensor E
							Elastic_LagrangianStn=fIdentity_matrix;
							Elastic_LagrangianStn*=-1;
							Elastic_LagrangianStn+=fRight_Elastic_Cauchy_Green_tensor;
							Elastic_LagrangianStn*=0.5;
							Elastic_LagrangianStn_trace=Elastic_LagrangianStn.Trace();

							//Update Elastic micro strain tensor will be formed in Bbar
							Elastic_MicroStnTensor = fIdentity_matrix;
							Elastic_MicroStnTensor*= -1;
							//Micro Elastic deformation measure (PSIe)
							PSIe.MultATB(fFe,fChie);
							Elastic_MicroStnTensor += PSIe;
							Elastic_MicroStnTensor_transpose.Transpose(Elastic_MicroStnTensor);
							Elastic_MicroStnTensor_trace=Elastic_MicroStnTensor.Trace();

	                        Symm_Elastic_MicroStnTensor = Elastic_MicroStnTensor;
	                        Symm_Elastic_MicroStnTensor+= Elastic_MicroStnTensor_transpose;
	                        Symm_Elastic_MicroStnTensor*= 0.5;

							//update S stress

							fTemp_matrix_nsd_x_nsd.SetToScaled(Elastic_LagrangianStn_trace*(fMaterial_Params[kLambda]+fMaterial_Params[kTau]),fIdentity_matrix);

							SPK.SetToScaled(2*(fMaterial_Params[kMu]+fMaterial_Params[kSigma_const]),Elastic_LagrangianStn);
							SPK+=fTemp_matrix_nsd_x_nsd;

							fTemp_matrix_nsd_x_nsd.SetToScaled(Elastic_MicroStnTensor_trace*fMaterial_Params[kEta],fIdentity_matrix);
							SPK+=fTemp_matrix_nsd_x_nsd;

							fTemp_matrix_nsd_x_nsd.SetToScaled(fMaterial_Params[kKappa],Elastic_MicroStnTensor);
							SPK+=fTemp_matrix_nsd_x_nsd;

							fTemp_matrix_nsd_x_nsd.SetToScaled(fMaterial_Params[kNu],Elastic_MicroStnTensor_transpose);
							SPK+=fTemp_matrix_nsd_x_nsd;

							//fs_micromorph3D_out<< "Second Piola Kirchhoff="<< SPK<<endl;

							//calculate  devS stress
							Pbar = SPK.Trace()/3;//Calculating the pressure term
							devSPK.SetToScaled(Pbar,fIdentity_matrix);
							devSPK*=-1;
							devSPK+=SPK;
							Temp_inv= devSPK.ScalarProduct();
							devfSPKinv=sqrt(Temp_inv);

							//Update Relative stress SIGMA_S

							SIGMA_S.SetToScaled(Elastic_LagrangianStn_trace*fMaterial_Params[kTau],fIdentity_matrix);
							// 2sigmaE
							fTemp_matrix_nsd_x_nsd.SetToScaled(2*fMaterial_Params[kSigma_const],Elastic_LagrangianStn);
							SIGMA_S+=fTemp_matrix_nsd_x_nsd;
							//(eta-Tau)trEpsilon.1
							fTemp_matrix_nsd_x_nsd.SetToScaled(Elastic_MicroStnTensor_trace*(fMaterial_Params[kEta]-fMaterial_Params[kTau]),fIdentity_matrix);
							SIGMA_S+=fTemp_matrix_nsd_x_nsd;
							//(nu-sigma)*Epsilon
							fTemp_matrix_nsd_x_nsd.SetToScaled((fMaterial_Params[kNu]-fMaterial_Params[kSigma_const]),Elastic_MicroStnTensor);
							SIGMA_S+=fTemp_matrix_nsd_x_nsd;
							//(kappa-sigma)*Epsilon^T
							fTemp_matrix_nsd_x_nsd.SetToScaled((fMaterial_Params[kKappa]-fMaterial_Params[kSigma_const]),Elastic_MicroStnTensor_transpose);
							SIGMA_S+=fTemp_matrix_nsd_x_nsd;

							Pchibar=SIGMA_S.Trace()/3;//
                            devSIGMA_S.SetToScaled(Pchibar,fIdentity_matrix);
                            devSIGMA_S*=-1;
                            devSIGMA_S+=SIGMA_S;
                            //Calculate dev(SIGMA-S):dev(SIGMA-S)
                            Temp_inv= devSIGMA_S.ScalarProduct();
                            // Calculate ||dev(SIGMA-S)||
                            devSIGMA_S_inv=sqrt(Temp_inv);


                            SIGMA= SIGMA_S;
                            SIGMA+= SPK;
                            fMeanSIGMA_e= SIGMA.Trace()/3;
                            fdevSIGMA.SetToScaled(fMeanSIGMA_e,fIdentity_matrix);
                            fdevSIGMA*=-1;
                            fdevSIGMA+=SIGMA;
                            Temp_inv= fdevSIGMA.ScalarProduct();
                            fNormdevSIGMA=sqrt(Temp_inv);


                            fChip=fChip_n;
                            fChip_inverse.Inverse(fChip);

                            GXp = 0.0;

							// Calculate yield function with updated parameters
							fYield_function=devfSPKinv-(Aphi*cohesion-Bphi*Pbar);
							fYield_function_check = fYield_function;
							fMicroYield_function_check = fNormdevSIGMA-(Aphi_chi*fState_variables_n_IPs(IP,kc_chi)-Bphi_chi*fMeanSIGMA_e);
						}
						//fs_micromorph3D_out  << "Current relative residual = " << fabs(fYield_function/fYield_function_tr) << endl;
					    //fs_micromorph3D_out << "fFp = " << fFp << endl;
				if (abs(fYield_function) > 1e-1 || fDelgamma < 0.0)
				{
             		if (abs(fYield_function) > 1e-1)
             		{
             			fs_micromorph3D_out << "Local Delgamma Newton-Raphson algorithm did not approach to zero for MacroPlasticity" << endl;
             			ExceptionT::GeneralFail(caller,"Local Delgamma Newton-Raphson algorithm did not approach to zero for MacroPlasticity_yield %e.", fYield_function);
             		}
             		if (fDelgamma < 0.0)
             		{
             			fs_micromorph3D_out << "Local Delgamma Newton-Raphson algorithm did not find positive Delgamma for MacroPlasticity" << endl;
             			ExceptionT::GeneralFail(caller,"Local Delgamma Newton-Raphson algorithm did not find positive fDelgamma for MacroPlasticity %e.", fDelgamma);
             		}
				}
				else
				{
					fState_variables_IPs(IP,kDelgamma) = fDelgamma;
					fState_variables_IPs(IP,kc) = cohesion;
					fState_variables_IPs(IP,kc_chi) = fState_variables_n_IPs(IP,kc_chi);
					fState_variables_IPs(IP,kDelgammachi) = fDelgammachi;
					fState_variables_IPs(IP,kc_nablachi0) =  fState_variables_n_IPs(IP,kc_nablachi0);
					fState_variables_IPs(IP,kc_nablachi1) =  fState_variables_n_IPs(IP,kc_nablachi1);
					fState_variables_IPs(IP,kc_nablachi2) =  fState_variables_n_IPs(IP,kc_nablachi2);
					fState_variables_IPs(IP,kDelgammanablachi) = fDelgammanablachi;
					//fs_micromorph3D_out << "fDelgamma = " << fDelgamma << endl;
					//fs_micromorph3D_out << "fState_variables_IPs(IP,kc_chi) = " << fState_variables_IPs(IP,kc_chi) << endl;
					//fs_micromorph3D_out << "fState_variables_IPs(IP,kc) = " << fState_variables_IPs(IP,kc) << endl;
					//fs_micromorph3D_out << "fState_variables_IPs(IP,kDelgammachi) = " << fState_variables_IPs(IP,kDelgammachi) << endl;
					//fs_micromorph3D_out << "fState_variables_IPs(IP,kDelgamma) = " << fState_variables_IPs(IP,kDelgamma) << endl;
				}
				}
				//fs_micromorph3D_out  << "Current relative residual = " << fabs(fYield_function/fYield_function_tr) << endl;

				//}//end of the Macro-plasticity, micro-elasticity loop


				if(iPlasticityCheck==0 && fMicroYield_function_tr>dYieldTrialTol && fYield_function_tr<= dYieldTrialTol)//Macro-elastic, Micro-plastic
                         {
                             fs_micromorph3D_out<<"MICRO-PLASTICITY "<<endl;
                             PlasticityCondition=2;
                             Micro_Plasticity_Occurrence = 1;
                             //initialize before iteration
                             fYield_function=fYield_function_tr;
                             fMicroYield_function=fMicroYield_function_tr;

                             fFe=fFe_tr;
                             fChie=fChie_tr;
                             fCchie=fCchie_tr;
                             // initial values for Fp and Chip are assumed the same with previous step
                             fFp=fFp_n;
                             fChip=fChip_n;

                             SPK=fSPK_tr;
                             devSPK=fdevSPK_tr;
                             devfSPKinv=devfSPKinv_tr;

                             SIGMA=SIGMA_tr;
                             fdevSIGMA=fdevSIGMA_tr;
                             fNormdevSIGMA=fNormdevSIGMA_tr;
                             Elastic_LagrangianStn=Elastic_LagrangianStn_tr;

                             fdelDelgammachi = 0.0;
                             fDelgammachi=0.0;
                             fDelgamma=0.0;
                             fDelgammanablachi=0.0;
                             //iterate using Newton-Raphson to solve for fDelgamma
                             iter_count = 0;
                             //fs_micromorph3D_out<< "Gauss Point = "<< IP <<endl;
                            // fs_micromorph3D_out << "Current  Micro Yield function = " << fMicroYield_function << endl;
                             while (fabs(fMicroYield_function) > dAbsTol && fabs(fMicroYield_function/fMicroYield_function_tr) > dRelTol && iter_count < iIterationMax)                //while (iter_count <10)
                             {

                                 // Solvig loop for fDelgammachi
                                 iter_count += 1;
                                 //Form inverse of Chi^p
                                 fChip_inverse.Inverse(fChip);

                                 //dFe/dDgammachi =0 by definition

                                 //Form dChip/dDgammachi
                                 fTemp_matrix_nsd_x_nsd.MultATBC(PSIe_n_inverse,fCchie_n,fChip_n);
                                 dChipdDelgammachi.MultABC(PSIe_n_inverse,fdGchidSIGMA_tr_transpose,fTemp_matrix_nsd_x_nsd);

                                 fTemp_matrix_nsd_x_nsd.MultABC(fChip_inverse,dChipdDelgammachi,fChip_inverse);
                                 dDeltaLbarchiPdDelgammachi.MultAB(fChip_n,fTemp_matrix_nsd_x_nsd);

                                 fTemp_matrix_nsd_x_nsd.MultABCT(dDeltaLbarchiPdDelgammachi,fCchie_n_inverse,PSIe_n);
                                 fTemp_matrix_nsd_x_nsd2.MultABC(fCe_n_inverse,PSIe_n,fTemp_matrix_nsd_x_nsd);
                                 dFpdDelgammachi.MultAB(fTemp_matrix_nsd_x_nsd2,fFp_n);

                                 dFedDelgammachi.MultABC(fFe,dFpdDelgammachi,fFp_inverse);
                                 dFedDelgammachi*=-1;

                                 //Forming dChie/dDgammachi
                                 dChiedDelgammachi.MultABC(fChie,dChipdDelgammachi,fChip_inverse);
                                 dChiedDelgammachi*=-1;

                                 //Forming dEpsilone/dDelgammachi
                                 dEpsilonedDelgammachi=0.0;
                                 fTemp_matrix_nsd_x_nsd.MultATB(dFedDelgammachi,fChie);
                                 dEpsilonedDelgammachi.MultATB(fFe,dChiedDelgammachi);
                                 dEpsilonedDelgammachi+= fTemp_matrix_nsd_x_nsd;
                                 fTemp_matrix_nsd_x_nsd2.Transpose(dEpsilonedDelgammachi);
                                 symdEpsilonedDelgammachi = dEpsilonedDelgammachi;
                                 symdEpsilonedDelgammachi+= fTemp_matrix_nsd_x_nsd2;
                                 dEpsilonedDelgammachi_trace=dEpsilonedDelgammachi.Trace();

         						 dEedDelgammachi.MultATB(dFedDelgammachi,fFe);
         						 fTemp_matrix_nsd_x_nsd.MultATB(fFe,dFedDelgammachi);
         						 dEedDelgammachi+=fTemp_matrix_nsd_x_nsd;
         						 dEedDelgammachi*=0.5;
         						 dEedDelgammachi_trace=dEedDelgammachi.Trace();
                                 //Forming  d(SIGMA)/dDgammachi tensor

                                 dSIGMAdDelgammachi.SetToScaled((fMaterial_Params[kLambda]+2*fMaterial_Params[kTau])*dEedDelgammachi_trace,fIdentity_matrix);

                                 fTemp_matrix_nsd_x_nsd.SetToScaled(2*(fMaterial_Params[kMu]+2*fMaterial_Params[kSigma_const]),dEedDelgammachi);
                                 dSIGMAdDelgammachi+=fTemp_matrix_nsd_x_nsd;

                                 fTemp_matrix_nsd_x_nsd.SetToScaled((2*fMaterial_Params[kEta]-fMaterial_Params[kTau])*dEpsilonedDelgammachi_trace,fIdentity_matrix);
                                 dSIGMAdDelgammachi+=fTemp_matrix_nsd_x_nsd;

                                 fTemp_matrix_nsd_x_nsd.SetToScaled((fMaterial_Params[kKappa]+fMaterial_Params[kNu]-fMaterial_Params[kSigma_const]),symdEpsilonedDelgammachi);
                                 dSIGMAdDelgammachi+=fTemp_matrix_nsd_x_nsd;

                                 //Forming  dPchi/dDgammachi (scalar) Pchi: pressure for micro-scale  dPchi/dDgammachi= (1/3)1:dSIGMA_S/dDgammachi
                                 fMeandSIGMAdDelgammachi=dSIGMAdDelgammachi.Trace()/3;

                                 //Forming  d(dev(SIGMA_S))/dDgammachi  dev(SIGMA_S): dev. part of SIGMA-S (relative stress) tensor
                                 ddevSIGMAdDelgammachi.SetToScaled(fMeandSIGMAdDelgammachi,fIdentity_matrix);
                                 ddevSIGMAdDelgammachi*=-1;
                                 ddevSIGMAdDelgammachi+=dSIGMAdDelgammachi;


                                 //Forming  d(||dev(SIGMA-S)||)/dDgammachi  dev(SIGMA-S): dev. part of Relative stress (SIGMA-S) tensor
                                 //IF ONLY ETA IS CHOSEN THE NEXT TWO LINES FAIL MAY FAIL BECAUSE devSIGMA_S_inv=0.0, AN IF STATEMENT MAY BE PUT TO GET RID OF ZERO DIVISION
                                 //OR CAN OTHER SHEAR RELATED TERM CAN BE CHOOSEN SUCH AS KAPPA

                                 fTemp_matrix_nsd_x_nsd.SetToScaled(1/fNormdevSIGMA,fdevSIGMA);
                                 dNormdevSIGMAdDelgammachi=dMatrixT::Dot(ddevSIGMAdDelgammachi,fTemp_matrix_nsd_x_nsd);

                                 //Forming  dcx/dDgammax  cx:micro-cohesion
                                 dcchidDelgammachi=fState_variables_n_IPs(IP,khc_chi)*fMaterial_Params[kHc_chi];

                                 //assemble the consistent tangent
                                 dFYchidDelgammachi=dNormdevSIGMAdDelgammachi-(Aphi_chi*dcchidDelgammachi-Bphi_chi*fMeandSIGMAdDelgammachi);
                                 //fs_micromorph3D_out<<"dFYchidDelgammachi="<<dFYchidDelgammachi<<endl;
                                 //solve for fdelDelgamma
                                 //if (dFYchidDelgammachi != 0.0) fdelDelgammachi = -fMicroYield_function/dFYchidDelgammachi;
                                 if (fabs(dFYchidDelgammachi)>=1e-10) fdelDelgammachi = -fMicroYield_function/dFYchidDelgammachi;
                                 else fdelDelgammachi = 0.0;

                                 //update fDelgammachi
                                 fDelgammachi += fdelDelgammachi;
                                 fState_variables_IPs(IP,kDelgammachi) = fDelgammachi;


                                 //update cx (c_chi) ISVs
                                 cohesion_chi= fState_variables_n_IPs(IP,kc_chi)
                                 + fDelgammachi*fState_variables_n_IPs(IP,khc_chi)*fMaterial_Params[kHc_chi];

         						if (cohesion_chi < 0.0)
         						{
         							cohesion_chi = 0.0;
         							fState_variables_IPs(IP,kc_chi)= fState_variables_n_IPs(IP,kc_chi);
         						}

                                 //update fChip
                                 fTemp_matrix_nsd_x_nsd.MultATBC(PSIe_n_inverse,fCchie_n,fChip_n);
                                 fTemp_matrix_nsd_x_nsd2.MultABC(PSIe_n_inverse,fdGchidSIGMA_tr_transpose,fTemp_matrix_nsd_x_nsd);
                                 fChip.SetToScaled(fDelgammachi,fTemp_matrix_nsd_x_nsd2);
                                 fChip+=fChip_n;

     							 fTemp_matrix_nsd_x_nsd = fChip;
     							 fTemp_matrix_nsd_x_nsd-= fChip_n;
     							 DeltaLbarchiP.MultAB(fTemp_matrix_nsd_x_nsd,fChip_inverse);

                                 //Form inverse of Chi^p
                                 fChip_inverse.Inverse(fChip);

                                 //Calculate Chie
                                 fChie.MultAB(ChiM,fChip_inverse);

     							 fTemp_matrix_nsd_x_nsd2.MultABT(fCchie_n_inverse,PSIe_n);
     							 fTemp_matrix_nsd_x_nsd3.MultAB(DeltaLbarchiP,fTemp_matrix_nsd_x_nsd2);
     							 fTemp_matrix_nsd_x_nsd2.MultAB(PSIe_n,fTemp_matrix_nsd_x_nsd3);
     							 fTemp_matrix_nsd_x_nsd3.MultAB(fCe_n_inverse,fTemp_matrix_nsd_x_nsd2);

     							 fTemp_matrix_nsd_x_nsd3+= fIdentity_matrix;
     							 fFp.MultAB(fTemp_matrix_nsd_x_nsd3,fFp_n);
     							 fFp_inverse.Inverse(fFp);
     							 fFe.MultAB(fDeformation_Gradient,fFp_inverse);

                                 //[fMicroElastic_Right_Cauchy_Green_tensor] will be formed
                                 fMicroRight_Elastic_Cauchy_Green_tensor.MultATB(fChie,fChie);
                                 if (fMicroRight_Elastic_Cauchy_Green_tensor.Det()==0)
                                     fMicroRight_Elastic_Cauchy_Green_tensor = fIdentity_matrix;

                                 //Update PSIe
                                 PSIe.MultATB(fFe,fChie);


                                 //Update Elastic micro strain tenso will be formed in Bbar
                                 Elastic_MicroStnTensor = fIdentity_matrix;
                                 Elastic_MicroStnTensor *= -1;
                                 //Elastic deformation measure Elastic_PSI EPSI
                                 Elastic_MicroStnTensor += PSIe;
                                 Elastic_MicroStnTensor_trace=Elastic_MicroStnTensor.Trace();

     							 Elastic_MicroStnTensor_transpose.Transpose(Elastic_MicroStnTensor);
     	                         Symm_Elastic_MicroStnTensor = Elastic_MicroStnTensor;
     	                         Symm_Elastic_MicroStnTensor+= Elastic_MicroStnTensor_transpose;
     	                         Symm_Elastic_MicroStnTensor*=0.5;

     							 fRight_Elastic_Cauchy_Green_tensor.MultATB(fFe,fFe);
     							 if (fRight_Elastic_Cauchy_Green_tensor.Det()==0)
     								fRight_Elastic_Cauchy_Green_tensor = fIdentity_matrix;

								 Elastic_LagrangianStn=fIdentity_matrix;
    							 Elastic_LagrangianStn*=-1;
    							 Elastic_LagrangianStn+=fRight_Elastic_Cauchy_Green_tensor;
    							 Elastic_LagrangianStn*=0.5;
    							 Elastic_LagrangianStn_trace=Elastic_LagrangianStn.Trace();

                                 //update S stress
                                 fTemp_matrix_nsd_x_nsd.SetToScaled(Elastic_LagrangianStn_trace*(fMaterial_Params[kLambda]+fMaterial_Params[kTau]),fIdentity_matrix);

                                 SPK.SetToScaled(2*(fMaterial_Params[kMu]+fMaterial_Params[kSigma_const]),Elastic_LagrangianStn);
                                 SPK+=fTemp_matrix_nsd_x_nsd;

                                 fTemp_matrix_nsd_x_nsd.SetToScaled(Elastic_MicroStnTensor_trace*fMaterial_Params[kEta],fIdentity_matrix);
                                 SPK+=fTemp_matrix_nsd_x_nsd;

                                 fTemp_matrix_nsd_x_nsd.SetToScaled(fMaterial_Params[kKappa],Elastic_MicroStnTensor);
                                 SPK+=fTemp_matrix_nsd_x_nsd;

                                 fTemp_matrix_nsd_x_nsd.SetToScaled(fMaterial_Params[kNu],Elastic_MicroStnTensor_transpose);
                                 SPK+=fTemp_matrix_nsd_x_nsd;

								 Pbar = SPK.Trace()/3;//Calculating the pressure term
								 devSPK.SetToScaled(Pbar,fIdentity_matrix);
								 devSPK*=-1;
								 devSPK+=SPK;
								 Temp_inv= devSPK.ScalarProduct();
								 devfSPKinv=sqrt(Temp_inv);

                                 //Update Relative stress SIGMA_S
                                 SIGMA_S.SetToScaled(Elastic_LagrangianStn_trace*fMaterial_Params[kTau],fIdentity_matrix);
                                 // 2sigmaE
                                 fTemp_matrix_nsd_x_nsd.SetToScaled(2*fMaterial_Params[kSigma_const],Elastic_LagrangianStn);
                                 SIGMA_S+=fTemp_matrix_nsd_x_nsd;
                                 //(eta-Tau)trEpsilon.1
                                 fTemp_matrix_nsd_x_nsd.SetToScaled(Elastic_MicroStnTensor_trace*(fMaterial_Params[kEta]-fMaterial_Params[kTau]),fIdentity_matrix);
                                 SIGMA_S+=fTemp_matrix_nsd_x_nsd;
                                 //(nu-sigma)*Epsilon
                                 fTemp_matrix_nsd_x_nsd.SetToScaled((fMaterial_Params[kNu]-fMaterial_Params[kSigma_const]),Elastic_MicroStnTensor);
                                 SIGMA_S+=fTemp_matrix_nsd_x_nsd;
                                 //(kappa-sigma)*Epsilon^T
                                 fTemp_matrix_nsd_x_nsd.SetToScaled((fMaterial_Params[kKappa]-fMaterial_Params[kSigma_const]),Elastic_MicroStnTensor_transpose);
                                 SIGMA_S+=fTemp_matrix_nsd_x_nsd;

     							 Pchibar=SIGMA_S.Trace()/3;//
                                 devSIGMA_S.SetToScaled(Pchibar,fIdentity_matrix);
                                 devSIGMA_S*=-1;
                                 devSIGMA_S+=SIGMA_S;
                                 //Calculate dev(SIGMA-S):dev(SIGMA-S)
                                 Temp_inv= devSIGMA_S.ScalarProduct();
                                 // Calculate ||dev(SIGMA-S)||
                                 devSIGMA_S_inv=sqrt(Temp_inv);


                                 SIGMA= SIGMA_S;
                                 SIGMA+= SPK;
                                 fMeanSIGMA_e= SIGMA.Trace()/3;
                                 fdevSIGMA.SetToScaled(fMeanSIGMA_e,fIdentity_matrix);
                                 fdevSIGMA*=-1;
                                 fdevSIGMA+=SIGMA;
                                 Temp_inv= fdevSIGMA.ScalarProduct();
                                 fNormdevSIGMA=sqrt(Temp_inv);


                                 // Calculate micro yield function with updated parameters
                                 fYield_function_check=devfSPKinv-(Aphi*fState_variables_n_IPs(IP,kc)-Bphi*Pbar);
                                 fMicroYield_function=fNormdevSIGMA-(Aphi_chi*cohesion_chi-Bphi_chi*fMeanSIGMA_e);
                                 fMicroYield_function_check = fMicroYield_function;

                                 //fs_micromorph3D_out<< "Current relative residual = " << fabs(fMicroYield_function/fMicroYield_function_tr) << endl;
                                 GXp = 0.0;
                             } //end of the local fDelgammachi while loop

                         	if (abs(fMicroYield_function) > 1e-1 || fDelgammachi < 0.0)
							{
                         		if (abs(fMicroYield_function) > 1e-1)
                         		{
                         			fs_micromorph3D_out << "Local Delgamma Newton-Raphson algorithm did not approach to zero for MicroPlasticity" << endl;
                         			ExceptionT::GeneralFail(caller,"Local Delgamma Newton-Raphson algorithm did not approach to zero for MicroPlasticity_yield %e.", fMicroYield_function);
                         		}
                         		if (fDelgammachi < 0.0)
                         		{
                         			fs_micromorph3D_out << "Local Delgamma Newton-Raphson algorithm did not find positive Delgammachi for MicroPlasticity" << endl;
                         			ExceptionT::GeneralFail(caller,"Local Delgamma Newton-Raphson algorithm did not find positive Delgammachi for MicroPlasticity %e.", fDelgammachi);
                         		}
                         	}
							else
							{

								fState_variables_IPs(IP,kDelgamma) = fDelgamma;
								fState_variables_IPs(IP,kc) = fState_variables_n_IPs(IP,kc);
								fState_variables_IPs(IP,kDelgammachi) = fDelgammachi;
								fState_variables_IPs(IP,kc_chi) = cohesion_chi;
								fState_variables_IPs(IP,kc_nablachi0) =  fState_variables_n_IPs(IP,kc_nablachi0);
								fState_variables_IPs(IP,kc_nablachi1) =  fState_variables_n_IPs(IP,kc_nablachi1);
								fState_variables_IPs(IP,kc_nablachi2) =  fState_variables_n_IPs(IP,kc_nablachi2);
								fState_variables_IPs(IP,kDelgammanablachi) = fDelgammanablachi;
								//fs_micromorph3D_out << "fDelgammachi = " << fDelgammachi << endl;
							}

						 //fs_micromorph3D_out << "Current  Macro Yield function = " << fYield_function << endl;
						 //fs_micromorph3D_out << "Current  Micro Yield function = " << fMicroYield_function << endl;
					 } //end of IF Macro-elasticity, micro-plasticity loop

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////// Coupled Plasticity check after seperate macro and micro plasticity analysis ////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

			if 	(Micro_Plasticity_Occurrence == 1 || Macro_Plasticity_Occurrence == 1)
			{
				if(iPlasticityCheck==0 && fMicroYield_function_check>1 || fYield_function_check>1)// If both scales yield! Macro and Micro
                         {
                             fs_micromorph3D_out<< "COUPLED PLASTICITY after Micro/Macro" <<endl;
                             PlasticityCondition=3;
                             //initialize yield function before iteration
                             Micro_Plasticity_Occurrence = 1;
                             Macro_Plasticity_Occurrence = 1;
                             fYield_function=fYield_function_check;
                             //initialize micro yield before iteration
                             fMicroYield_function=fMicroYield_function_check;


                             //initial Delgamma,Delgammchi, their increments
                             fdelDelgamma = 0.0;
                             fDelgamma = 0.0;

                             fdelDelgammachi = 0.0;
                             fDelgammachi=0.0;
                             fDelgammanablachi=0.0;
                             //iterate using Newton-Raphson to solve for fDelgamma
                             iter_count = 0;
                             //fs_micromorph3D_out << "Current  Macro Yield function = " << fYield_function << endl;
                             //fs_micromorph3D_out << "Current  Micro Yield function = " << fMicroYield_function << endl;


                             while (fabs(fMicroYield_function) > dAbsTol && fabs(fMicroYield_function/fMicroYield_function_tr) > dRelTol && iter_count < iIterationMax || fabs(fYield_function) > dAbsTol && fabs(fYield_function/fYield_function_tr) > dRelTol && iter_count < iIterationMax)
                             {
                                 iter_count += 1;

                                 //Form  dFe/dDgamma
                                 fFp_inverse.Inverse(fFp);
                                 dFedDelgamma=0.0;
                                 //fdGdS_tr_transpose.Transpose(fdGdS_tr);// done above
                                 //fCe_n_inverse.Inverse(fCe_n);
                                 fTemp_matrix_nsd_x_nsd.MultATBC(fdGdS_tr,fFp_n,fFp_inverse);
                                 dFedDelgamma.MultABC(fFe,fCe_n_inverse,fTemp_matrix_nsd_x_nsd);
                                 dFedDelgamma*=-1;

                                 //Forming  dE^e/dDgamma  E^e: Elas. Lag. stn tensor
                                 dEedDelgamma.MultATB(dFedDelgamma,fFe);
                                 fTemp_matrix_nsd_x_nsd.MultATB(fFe,dFedDelgamma);
                                 dEedDelgamma+=fTemp_matrix_nsd_x_nsd;
                                 dEedDelgamma*=0.5;
                                 dEedDelgamma_trace=dEedDelgamma.Trace();

                                 //Forming  dEpsilon^e/dDgamma  Epsilone^e: Elastic micro strain tensor
                                 dEpsilonedDelgamma.MultATB(dFedDelgamma,fChie);
                                 dEpsilonedDelgamma_trace=dEpsilonedDelgamma.Trace();
                                 dEpsilonedDelgamma_transpose.Transpose(dEpsilonedDelgamma);
                                 symdEpsilonedDelgamma=dEpsilonedDelgamma;
                                 symdEpsilonedDelgamma+= dEpsilonedDelgamma_transpose;

                                 //Form inverse of Chi^p
                                 fChip_inverse.Inverse(fChip);


                                 //Form dChip/dDgammachi
                                 fTemp_matrix_nsd_x_nsd.MultATBC(PSIe_n_inverse,fCchie_n,fChip_n);
                                 dChipdDelgammachi.MultABC(PSIe_n_inverse,fdGchidSIGMA_tr_transpose,fTemp_matrix_nsd_x_nsd);

                                 //Forming dChie/dDgammachi
                                 dChiedDelgammachi.MultABC(fChie,dChipdDelgammachi,fChip_inverse);
                                 dChiedDelgammachi*=-1;

                                 fTemp_matrix_nsd_x_nsd.MultABC(fChip_inverse,dChipdDelgammachi,fChip_inverse);
                                 dDeltaLbarchiPdDelgammachi.MultAB(fChip_n,fTemp_matrix_nsd_x_nsd);

                                 fTemp_matrix_nsd_x_nsd.MultABCT(dDeltaLbarchiPdDelgammachi,fCchie_n_inverse,PSIe_n);
                                 fTemp_matrix_nsd_x_nsd2.MultABC(fCe_n_inverse,PSIe_n,fTemp_matrix_nsd_x_nsd);
                                 dFpdDelgammachi.MultAB(fTemp_matrix_nsd_x_nsd2,fFp_n);
                                 dFedDelgammachi.MultABC(fFe,dFpdDelgammachi,fFp_inverse);
                                 dFedDelgammachi*=-1;


                                 //Forming dEpsilone/dDelgammachi
                                 dEpsilonedDelgammachi=0.0;
                                 dEpsilonedDelgammachi.MultATB(fFe,dChiedDelgammachi);
                                 fTemp_matrix_nsd_x_nsd.MultATB(dFedDelgammachi,fChie);
                                 dEpsilonedDelgammachi+= fTemp_matrix_nsd_x_nsd;
                                 dEpsilonedDelgammachi_trace=dEpsilonedDelgammachi.Trace();
                                 dEpsilonedDelgammachi_transpose.Transpose(dEpsilonedDelgammachi);
                                 symdEpsilonedDelgammachi=dEpsilonedDelgammachi;
                                 symdEpsilonedDelgammachi+= dEpsilonedDelgammachi_transpose;

         						 dEedDelgammachi.MultATB(dFedDelgammachi,fFe);
         						 fTemp_matrix_nsd_x_nsd.MultATB(fFe,dFedDelgammachi);
         						 dEedDelgammachi+=fTemp_matrix_nsd_x_nsd;
         						 dEedDelgammachi*=0.5;
         						 dEedDelgammachi_trace=dEedDelgammachi.Trace();

                                 //Forming  dS/dDgamma  S= SPK tensor

                                 dSdDelgamma.SetToScaled((fMaterial_Params[kLambda]+fMaterial_Params[kTau])*dEedDelgamma_trace,fIdentity_matrix);
                                 fTemp_matrix_nsd_x_nsd.SetToScaled(2*(fMaterial_Params[kMu]+fMaterial_Params[kSigma_const]),dEedDelgamma);
                                 dSdDelgamma+=fTemp_matrix_nsd_x_nsd;

                                 fTemp_matrix_nsd_x_nsd.SetToScaled(fMaterial_Params[kEta]*dEpsilonedDelgamma_trace,fIdentity_matrix);
                                 dSdDelgamma+=fTemp_matrix_nsd_x_nsd;

                                 fTemp_matrix_nsd_x_nsd.SetToScaled(fMaterial_Params[kKappa],dEpsilonedDelgamma);
                                 dSdDelgamma+=fTemp_matrix_nsd_x_nsd;

                                 fTemp_matrix_nsd_x_nsd.SetToScaled(fMaterial_Params[kNu],dEpsilonedDelgamma_transpose);
                                 dSdDelgamma+=fTemp_matrix_nsd_x_nsd;


                                 //Forming  dP/dDgamma (scalar) P: pressure  dP/dDgamma= (1/3)1:dS/dDgamma
                                 dPdDelgamma=dSdDelgamma.Trace()/3;

//
                                 //Forming  d(devS)/dDgamma  devS: dev. part of SPK tensor
                                 ddevSdDelgamma.SetToScaled(dPdDelgamma,fIdentity_matrix);
                                 ddevSdDelgamma*=-1;
                                 ddevSdDelgamma+=dSdDelgamma;

                                 //Forming  d(||devS||)/dDgamma  devS: dev. part of SPK tensor
                                 fTemp_matrix_nsd_x_nsd.SetToScaled(1/devfSPKinv,devSPK);
                                 InvddevSdDelgamma=dMatrixT::Dot(ddevSdDelgamma,fTemp_matrix_nsd_x_nsd);


                                 //Forming  dc/dDgamma  c: cohesion
                                 dcdDelgamma=fState_variables_n_IPs(IP,khc)*fMaterial_Params[kHc];

                                 //assemble the consistent tangent
                                 dFYdDelgamma=InvddevSdDelgamma-(Aphi*dcdDelgamma-Bphi*dPdDelgamma);//1

                                 //Forming  d(SIGMA)/dDgammachi tensor
                                 dSIGMAdDelgammachi.SetToScaled((fMaterial_Params[kLambda]+2*fMaterial_Params[kTau])*dEedDelgammachi_trace,fIdentity_matrix);

                                 fTemp_matrix_nsd_x_nsd.SetToScaled(2*(fMaterial_Params[kMu]+2*fMaterial_Params[kSigma_const]),dEedDelgammachi);
                                 dSIGMAdDelgammachi+=fTemp_matrix_nsd_x_nsd;

                                 fTemp_matrix_nsd_x_nsd.SetToScaled((2*fMaterial_Params[kEta]-fMaterial_Params[kTau])*dEpsilonedDelgammachi_trace,fIdentity_matrix);
                                 dSIGMAdDelgammachi+=fTemp_matrix_nsd_x_nsd;

                                 fTemp_matrix_nsd_x_nsd.SetToScaled((fMaterial_Params[kKappa]+fMaterial_Params[kNu]-fMaterial_Params[kSigma_const]),symdEpsilonedDelgammachi);
                                 dSIGMAdDelgammachi+=fTemp_matrix_nsd_x_nsd;

                                 //Forming  dPchi/dDgammachi (scalar) Pchi: pressure for micro-scale  dPchi/dDgammachi= (1/3)1:dSIGMA/dDgammachi

                                 dPchidDelgammachi=dSIGMAdDelgammachi.Trace()/3;

                                 //Forming  d(dev(SIGMA))/dDgammachi  dev(SIGMA): dev. part of SIGMA (relative stress) tensor
                                 ddevSIGMAdDelgammachi.SetToScaled(dPchidDelgammachi,fIdentity_matrix);
                                 ddevSIGMAdDelgammachi*=-1;
                                 ddevSIGMAdDelgammachi+=dSIGMAdDelgammachi;


                                 //Forming  d(||dev(SIGMA)||)/dDgammachi  dev(SIGMA): dev. part of Relative stress (SIGMA) tensor
                                 fTemp_matrix_nsd_x_nsd.SetToScaled(1/fNormdevSIGMA,fdevSIGMA);
                                 dNormdevSIGMAdDelgammachi=dMatrixT::Dot(ddevSIGMAdDelgammachi,fTemp_matrix_nsd_x_nsd);

                                 //Forming  dcx/dDgammax  cx:micro-cohesion
                                 dcchidDelgammachi=fState_variables_n_IPs(IP,khc_chi)*fMaterial_Params[kHc_chi];

                                 //assemble the consistent tangent
                                 dFYchidDelgammachi=dNormdevSIGMAdDelgammachi-(Aphi_chi*dcchidDelgammachi-Bphi_chi*dPchidDelgammachi);//2

                                 //Forming dS/dDelgammachi

                                 dSdDelgammachi.SetToScaled((fMaterial_Params[kLambda]+fMaterial_Params[kTau])*dEedDelgammachi_trace,fIdentity_matrix);
                                 fTemp_matrix_nsd_x_nsd.SetToScaled(2*(fMaterial_Params[kMu]+fMaterial_Params[kSigma_const]),dEedDelgammachi);
                                 dSdDelgammachi+=fTemp_matrix_nsd_x_nsd;

                                 fTemp_matrix_nsd_x_nsd.SetToScaled(fMaterial_Params[kEta]*dEpsilonedDelgammachi_trace,fIdentity_matrix);
                                 dSdDelgammachi+=fTemp_matrix_nsd_x_nsd;

                                 fTemp_matrix_nsd_x_nsd.SetToScaled(fMaterial_Params[kKappa],dEpsilonedDelgammachi);
                                 dSdDelgammachi+=fTemp_matrix_nsd_x_nsd;

                                 fTemp_matrix_nsd_x_nsd.SetToScaled(fMaterial_Params[kNu],dEpsilonedDelgammachi_transpose);
                                 dSdDelgammachi+=fTemp_matrix_nsd_x_nsd;

                                 //Forming dP/dDelgammachi
                                 dPdDelgammachi=dSdDelgammachi.Trace()/3;


                                 //Forming  d(devS)/dDgammachi
                                 ddevSdDelgammachi.SetToScaled(dPdDelgammachi,fIdentity_matrix);
                                 ddevSdDelgammachi*=-1;
                                 ddevSdDelgammachi+=dSdDelgammachi;


                                 //Forming  d(||devS||)/dDgammachi
                                 fTemp_matrix_nsd_x_nsd.SetToScaled(1/devfSPKinv,devSPK);
                                 ddevSdDelgammachi_inv=dMatrixT::Dot(ddevSdDelgammachi,fTemp_matrix_nsd_x_nsd);

                                 //dFy/dDelgammachi
                                 dFYdDelgammachi=ddevSdDelgammachi_inv-(-Bphi*dPdDelgammachi);//3

                                 //Forming d(SIGMA-S)/dDelgamma

                                 dSIGMAdDelgamma.SetToScaled((fMaterial_Params[kLambda]+2*fMaterial_Params[kTau])*dEedDelgamma_trace,fIdentity_matrix);

                                 fTemp_matrix_nsd_x_nsd.SetToScaled(2*(fMaterial_Params[kMu]+2*fMaterial_Params[kSigma_const]),dEedDelgamma);
                                 dSIGMAdDelgamma+=fTemp_matrix_nsd_x_nsd;

                                 fTemp_matrix_nsd_x_nsd.SetToScaled((2*fMaterial_Params[kEta]-fMaterial_Params[kTau])*dEpsilonedDelgamma_trace,fIdentity_matrix);
                                 dSIGMAdDelgamma+=fTemp_matrix_nsd_x_nsd;

                                 fTemp_matrix_nsd_x_nsd.SetToScaled((fMaterial_Params[kKappa]+fMaterial_Params[kNu]-fMaterial_Params[kSigma_const]),symdEpsilonedDelgamma);
                                 dSIGMAdDelgamma+=fTemp_matrix_nsd_x_nsd;

                                 //Forming dPchi/dDelgamma
                                 dPchidDelgamma=dSIGMAdDelgamma.Trace()/3;

                                 //Forming  d(dev(SIGMA-S))/dDgamma
                                 ddevSIGMAdDelgamma.SetToScaled(dPchidDelgamma,fIdentity_matrix);
                                 ddevSIGMAdDelgamma*=-1;
                                 ddevSIGMAdDelgamma+=dSIGMAdDelgamma;


                                 //Forming  d(||dev(SIGMA-S)||)/dDgamma
                                 fTemp_matrix_nsd_x_nsd.SetToScaled(1/fNormdevSIGMA,fdevSIGMA);
                                 dNormdevSIGMAdDelgamma=dMatrixT::Dot(ddevSIGMAdDelgamma,fTemp_matrix_nsd_x_nsd);


                                 //dFYchi/dDelgamma
                                 dFYchidDelgamma=dNormdevSIGMAdDelgamma-(-Bphi_chi*dPchidDelgamma);//4

                                 LocalConsistentTangent=0.0;
                                 LocalConsistentTangent(0,0)=dFYdDelgamma;
                                 LocalConsistentTangent(0,1)=dFYdDelgammachi;
                                 LocalConsistentTangent(1,0)=dFYchidDelgamma;
                                 LocalConsistentTangent(1,1)=dFYchidDelgammachi;

                                 //double mm=4.7;

                                 LocalRHSVector[0]=-fYield_function;
                                 LocalRHSVector[1]=-fMicroYield_function;


                                 if (LocalConsistentTangent.Det() != 0.0)
                                 {
                                     LocalConsistentTangentInverse.Inverse(LocalConsistentTangent);
                                     LocalConsistentTangentInverse.Multx(LocalRHSVector,fdelDelgammaVector);
                                     fdelDelgamma=fdelDelgammaVector[0];
                                     fdelDelgammachi=fdelDelgammaVector[1];
                                 }
                                 else
                                 {
                                     fdelDelgammachi = 0.0;
                                     fdelDelgamma = 0.0;
                                 }


                                 fDelgamma+=fdelDelgamma;
                                 fDelgammachi+=fdelDelgammachi;


                                 fState_variables_IPs(IP,kDelgamma) = fDelgamma;
                                 fState_variables_IPs(IP,kDelgammachi) = fDelgammachi;


                                 cohesion= fState_variables_n_IPs(IP,kc)
                                 + fDelgamma*fState_variables_n_IPs(IP,khc)*fMaterial_Params[kHc];
                                 if (cohesion < 0.0)
									{
										cohesion = 0.0;
										fState_variables_IPs(IP,kc)= fState_variables_n_IPs(IP,kc);
									}


                                 //update cx (c_chi) ISVs
                                 cohesion_chi= fState_variables_n_IPs(IP,kc_chi)
                                 + fDelgammachi*fState_variables_n_IPs(IP,khc_chi)*fMaterial_Params[kHc_chi];
                                 if (cohesion_chi < 0.0)
									{
										cohesion_chi = 0.0;
										fState_variables_IPs(IP,kc_chi)= fState_variables_n_IPs(IP,kc_chi);
									}


                                 //update fChip
                                 fTemp_matrix_nsd_x_nsd.MultATBC(PSIe_n_inverse,fCchie_n,fChip_n);
                                 fTemp_matrix_nsd_x_nsd2.MultABC(PSIe_n_inverse,fdGchidSIGMA_tr_transpose,fTemp_matrix_nsd_x_nsd);
                                 fChip.SetToScaled(fDelgammachi,fTemp_matrix_nsd_x_nsd2);
                                 fChip+=fChip_n;

     							 fTemp_matrix_nsd_x_nsd = fChip;
     							 fTemp_matrix_nsd_x_nsd-= fChip_n;
     							 DeltaLbarchiP.MultAB(fTemp_matrix_nsd_x_nsd,fChip_inverse);

                                 //Form inverse of Chi^p
                                 fChip_inverse.Inverse(fChip);

                                 //Calculate Chie
                                 fChie.MultAB(ChiM,fChip_inverse);

     							 fTemp_matrix_nsd_x_nsd2.MultABT(fCchie_n_inverse,PSIe_n);
     							 fTemp_matrix_nsd_x_nsd3.MultAB(DeltaLbarchiP,fTemp_matrix_nsd_x_nsd2);
     							 fTemp_matrix_nsd_x_nsd2.MultAB(PSIe_n,fTemp_matrix_nsd_x_nsd3);
     							 fTemp_matrix_nsd_x_nsd3.MultAB(fCe_n_inverse,fTemp_matrix_nsd_x_nsd2);

                                 fTemp_matrix_nsd_x_nsd.MultABT(fCe_n_inverse,fdGdS_tr);
                                 fTemp_matrix_nsd_x_nsd*=fDelgamma;

     							 fTemp_matrix_nsd_x_nsd3+= fIdentity_matrix;
     							 fTemp_matrix_nsd_x_nsd3+= fTemp_matrix_nsd_x_nsd;

     							 fFp.MultAB(fTemp_matrix_nsd_x_nsd3,fFp_n);
     							 fFp_inverse.Inverse(fFp);
     							 fFe.MultAB(fDeformation_Gradient,fFp_inverse);


                                 //[fElastic_Right_Cauchy_Green_tensor] will be formed
                                 fRight_Elastic_Cauchy_Green_tensor.MultATB(fFe,fFe);
                                 if (fRight_Elastic_Cauchy_Green_tensor.Det()==0)
                                     fRight_Elastic_Cauchy_Green_tensor = fIdentity_matrix;


                                 //Update Elastic Lagrangian strain tensor E
                                 Elastic_LagrangianStn=fIdentity_matrix;
                                 Elastic_LagrangianStn*=-1;
                                 Elastic_LagrangianStn+=fRight_Elastic_Cauchy_Green_tensor;
                                 Elastic_LagrangianStn*=0.5;
                                 Elastic_LagrangianStn_trace=Elastic_LagrangianStn.Trace();


                                 //[fMicroElastic_Right_Cauchy_Green_tensor] (Cchie) will be formed
                                 fMicroRight_Elastic_Cauchy_Green_tensor.MultATB(fChie,fChie);
                                 if (fMicroRight_Elastic_Cauchy_Green_tensor.Det()==0)
                                     fMicroRight_Elastic_Cauchy_Green_tensor = fIdentity_matrix;


                                 //Update fCchie
                                 fCchie.MultATB(fChie,fChie);

                                 //Update PSIe
                                 PSIe.MultATB(fFe,fChie);


                                 //Update Elastic micro strain tenso will be formed in Bbar
                                 Elastic_MicroStnTensor = fIdentity_matrix;
                                 Elastic_MicroStnTensor *= -1;
                                 Elastic_MicroStnTensor += PSIe;
                                 Elastic_MicroStnTensor_trace=Elastic_MicroStnTensor.Trace();
                                 Elastic_MicroStnTensor_transpose.Transpose(Elastic_MicroStnTensor);

                                 //update S stress
                                 fTemp_matrix_nsd_x_nsd.SetToScaled(Elastic_LagrangianStn_trace*(fMaterial_Params[kLambda]+fMaterial_Params[kTau]),fIdentity_matrix);

                                 SPK.SetToScaled(2*(fMaterial_Params[kMu]+fMaterial_Params[kSigma_const]),Elastic_LagrangianStn);
                                 SPK+=fTemp_matrix_nsd_x_nsd;

                                 fTemp_matrix_nsd_x_nsd.SetToScaled(Elastic_MicroStnTensor_trace*fMaterial_Params[kEta],fIdentity_matrix);
                                 SPK+=fTemp_matrix_nsd_x_nsd;

                                 fTemp_matrix_nsd_x_nsd.SetToScaled(fMaterial_Params[kKappa],Elastic_MicroStnTensor);
                                 SPK+=fTemp_matrix_nsd_x_nsd;

                                 fTemp_matrix_nsd_x_nsd.SetToScaled(fMaterial_Params[kNu],Elastic_MicroStnTensor_transpose);
                                 SPK+=fTemp_matrix_nsd_x_nsd;

								 Pbar = SPK.Trace()/3;//Calculating the pressure term
								 devSPK.SetToScaled(Pbar,fIdentity_matrix);
								 devSPK*=-1;
								 devSPK+=SPK;
								 Temp_inv= devSPK.ScalarProduct();
								 devfSPKinv=sqrt(Temp_inv);

                                 //Update Relative stress SIGMA_S
                                 SIGMA_S.SetToScaled(Elastic_LagrangianStn_trace*fMaterial_Params[kTau],fIdentity_matrix);
                                 // 2sigmaE
                                 fTemp_matrix_nsd_x_nsd.SetToScaled(2*fMaterial_Params[kSigma_const],Elastic_LagrangianStn);
                                 SIGMA_S+=fTemp_matrix_nsd_x_nsd;
                                 //(eta-Tau)trEpsilon.1
                                 fTemp_matrix_nsd_x_nsd.SetToScaled(Elastic_MicroStnTensor_trace*(fMaterial_Params[kEta]-fMaterial_Params[kTau]),fIdentity_matrix);
                                 SIGMA_S+=fTemp_matrix_nsd_x_nsd;
                                 //(nu-sigma)*Epsilon
                                 fTemp_matrix_nsd_x_nsd.SetToScaled((fMaterial_Params[kNu]-fMaterial_Params[kSigma_const]),Elastic_MicroStnTensor);
                                 SIGMA_S+=fTemp_matrix_nsd_x_nsd;
                                 //(kappa-sigma)*Epsilon^T
                                 fTemp_matrix_nsd_x_nsd.SetToScaled((fMaterial_Params[kKappa]-fMaterial_Params[kSigma_const]),Elastic_MicroStnTensor_transpose);
                                 SIGMA_S+=fTemp_matrix_nsd_x_nsd;

     							 Pchibar=SIGMA_S.Trace()/3;//
                                 devSIGMA_S.SetToScaled(Pchibar,fIdentity_matrix);
                                 devSIGMA_S*=-1;
                                 devSIGMA_S+=SIGMA_S;
                                 //Calculate dev(SIGMA-S):dev(SIGMA-S)
                                 Temp_inv= devSIGMA_S.ScalarProduct();
                                 // Calculate ||dev(SIGMA-S)||
                                 devSIGMA_S_inv=sqrt(Temp_inv);
                                 // Calculate yield function with updated parameters

                                 SIGMA= SIGMA_S;
                                 SIGMA+= SPK;
                                 fMeanSIGMA_e= SIGMA.Trace()/3;
                                 fdevSIGMA.SetToScaled(fMeanSIGMA_e,fIdentity_matrix);
                                 fdevSIGMA*=-1;
                                 fdevSIGMA+=SIGMA;
                                 Temp_inv= fdevSIGMA.ScalarProduct();
                                 fNormdevSIGMA=sqrt(Temp_inv);

                                 fYield_function=devfSPKinv-(Aphi*cohesion-Bphi*Pbar);
                                 // Calculate micro yield function with updated parameters
                                 fMicroYield_function=fNormdevSIGMA-(Aphi_chi*cohesion_chi-Bphi_chi*fMeanSIGMA_e);
                                 GXp = 0.0;
                                 //fs_micromorph3D_out<<"Current Macro relative residual = "<< fabs(fYield_function/fYield_function_tr)<<" && "<< "Current Micro relative residual = " << fabs(fMicroYield_function/fMicroYield_function_tr) << " && "<<" Yield Function="<< fYield_function<<" && "<<" Micro Yield Function = "<< fMicroYield_function << endl;
                             }

                             if (abs(fMicroYield_function) > 1e-1 || abs(fYield_function) > 1e-1 || fDelgamma < 0.0 || fDelgammachi < 0.0)
								{
                            	 if (abs(fMicroYield_function) > 1e-1)
									 {
										fs_micromorph3D_out << "Local Delgamma Newton-Raphson algorithm did not approach to zero for Microyield_func of the Coupled-Plasticity after Macro/Micro" << endl;
										ExceptionT::GeneralFail(caller,"Local Delgamma Newton-Raphson algorithm did not approach to zero for Microyield_func of the Coupled-Plasticity after Macro/Micro %e.", fMicroYield_function);
									 }
                               	 if (abs(fYield_function) > 1e-1)
                                	 {
    									fs_micromorph3D_out << "Local Delgamma Newton-Raphson algorithm did not approach to zero for Macroyield_func of the Coupled-Plasticity after Macro/Micro" << endl;
    									ExceptionT::GeneralFail(caller,"Local Delgamma Newton-Raphson algorithm did not approach to zero for Macroyield_func of the Coupled-Plasticity after Macro/Micro %e.", fYield_function);
                                	 }
                               	 if (fDelgamma < 0.0)
                                	 {
    									fs_micromorph3D_out << "Local Delgamma Newton-Raphson algorithm did not find positive fDelgamma for Coupled-Plasticity after Macro/Micro" << endl;
    									ExceptionT::GeneralFail(caller,"Local Delgamma Newton-Raphson algorithm did not find positive fDelgamma for Coupled-Plasticity after Macro/Micro %e.", fDelgamma);
                                	 }
                               	 if (fDelgammachi < 0.0)
                                	 {
    									fs_micromorph3D_out << "Local Delgamma Newton-Raphson algorithm did not find positive fDelgammachi for Coupled-Plasticity after Macro/Micro" << endl;
    									ExceptionT::GeneralFail(caller,"Local Delgamma Newton-Raphson algorithm did not find positive fDelgammachi for Coupled-Plasticity after Macro/Micro %e.", fDelgammachi);
                                	 }
                            	}
								else
								{
									fState_variables_IPs(IP,kDelgammachi) = fDelgammachi;
									fState_variables_IPs(IP,kc_chi) = cohesion_chi;
									fState_variables_IPs(IP,kDelgamma) = fDelgamma;
									fState_variables_IPs(IP,kc) = cohesion;
									fState_variables_IPs(IP,kc_nablachi0) =  fState_variables_n_IPs(IP,kc_nablachi0);
									fState_variables_IPs(IP,kc_nablachi1) =  fState_variables_n_IPs(IP,kc_nablachi1);
									fState_variables_IPs(IP,kc_nablachi2) =  fState_variables_n_IPs(IP,kc_nablachi2);
									fState_variables_IPs(IP,kDelgammanablachi) = fDelgammanablachi;
									//fs_micromorph3D_out << "fDelgamma = " << fDelgamma << endl;
									//fs_micromorph3D_out << "fDelgammachi = " << fDelgammachi << endl;
									//fs_micromorph3D_out << "fState_variables_IPs(IP,kc_chi) = " << fState_variables_IPs(IP,kc_chi) << endl;
									//fs_micromorph3D_out << "fState_variables_IPs(IP,kc) = " << fState_variables_IPs(IP,kc) << endl;
									//fs_micromorph3D_out << "fState_variables_IPs(IP,kDelgammachi) = " << fState_variables_IPs(IP,kDelgammachi) << endl;
									//fs_micromorph3D_out << "fState_variables_IPs(IP,kDelgamma) = " << fState_variables_IPs(IP,kDelgamma) << endl;
								}
                         }
    			}



/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



				if(iPlasticityCheck==0 && fYield_function_tr>dYieldTrialTol && fMicroYield_function_tr> dYieldTrialTol)// If both scales yield! Macro and Micro
                         {
                             fs_micromorph3D_out<< "COUPLED PLASTICITY " <<endl;
                             PlasticityCondition=3;
                             //initialize yield function before iteration
                             fYield_function=fYield_function_tr;

                             //initialize micro yield before iteration
                             fMicroYield_function=fMicroYield_function_tr;
                             Micro_Plasticity_Occurrence = 1;
                             Macro_Plasticity_Occurrence = 1;
                             //initial values for Fe and Chie
                             fFe=fFe_tr;
                             fChie=fChie_tr;
                             fCchie=fCchie_tr;
                             PSIe=PSIe_tr;

                             //initial values for Fp and Chip are assumed the same with previous step
                             fFp=fFp_n;
                             fChip=fChip_n;

                             //initial  stress tensors  and their invariants
                             SPK=fSPK_tr;
                             devSPK=fdevSPK_tr;
                             devfSPKinv=devfSPKinv_tr;

                             SIGMA=SIGMA_tr;
                             fdevSIGMA=fdevSIGMA_tr;
                             fNormdevSIGMA=fNormdevSIGMA_tr;
                             //fs_micromorph3D_out<<"devSIGMA_S_inv="<< devSIGMA_S_inv<<endl;

                             //Elastic_LagrangianStn=Elastic_LagrangianStn_tr;


                             //initial Delgamma,Delgammchi, their increments
                             fdelDelgamma = 0.0;
                             fDelgamma = 0.0;

                             fdelDelgammachi = 0.0;
                             fDelgammachi=0.0;
                             fDelgammanablachi=0.0;
                             //iterate using Newton-Raphson to solve for fDelgamma
                             iter_count = 0;
                             //fs_micromorph3D_out << "Current  Macro Yield function = " << fYield_function << endl;
                             //fs_micromorph3D_out << "Current  Micro Yield function = " << fMicroYield_function << endl;


                             while (fabs(fMicroYield_function) > dAbsTol && fabs(fMicroYield_function/fMicroYield_function_tr) > dRelTol && iter_count < iIterationMax || fabs(fYield_function) > dAbsTol && fabs(fYield_function/fYield_function_tr) > dRelTol && iter_count < iIterationMax)
                             {
                                 //Form  dFe/dDgamma
                                 iter_count += 1;

                                 //Form  dFe/dDgamma
                                 fFp_inverse.Inverse(fFp);
                                 dFedDelgamma=0.0;
                                 //fdGdS_tr_transpose.Transpose(fdGdS_tr);// done above
                                 //fCe_n_inverse.Inverse(fCe_n);
                                 fTemp_matrix_nsd_x_nsd.MultATBC(fdGdS_tr,fFp_n,fFp_inverse);
                                 dFedDelgamma.MultABC(fFe,fCe_n_inverse,fTemp_matrix_nsd_x_nsd);
                                 dFedDelgamma*=-1;

                                 //Forming  dE^e/dDgamma  E^e: Elas. Lag. stn tensor
                                 dEedDelgamma.MultATB(dFedDelgamma,fFe);
                                 fTemp_matrix_nsd_x_nsd.MultATB(fFe,dFedDelgamma);
                                 dEedDelgamma+=fTemp_matrix_nsd_x_nsd;
                                 dEedDelgamma*=0.5;
                                 dEedDelgamma_trace=dEedDelgamma.Trace();

                                 //Forming  dEpsilon^e/dDgamma  Epsilone^e: Elastic micro strain tensor
                                 dEpsilonedDelgamma.MultATB(dFedDelgamma,fChie);
                                 dEpsilonedDelgamma_trace=dEpsilonedDelgamma.Trace();
                                 dEpsilonedDelgamma_transpose.Transpose(dEpsilonedDelgamma);
                                 symdEpsilonedDelgamma=dEpsilonedDelgamma;
                                 symdEpsilonedDelgamma+= dEpsilonedDelgamma_transpose;

                                 //Form inverse of Chi^p
                                 fChip_inverse.Inverse(fChip);


                                 //Form dChip/dDgammachi
                                 fTemp_matrix_nsd_x_nsd.MultATBC(PSIe_n_inverse,fCchie_n,fChip_n);
                                 dChipdDelgammachi.MultABC(PSIe_n_inverse,fdGchidSIGMA_tr_transpose,fTemp_matrix_nsd_x_nsd);

                                 //Forming dChie/dDgammachi
                                 dChiedDelgammachi.MultABC(fChie,dChipdDelgammachi,fChip_inverse);
                                 dChiedDelgammachi*=-1;

                                 fTemp_matrix_nsd_x_nsd.MultABC(fChip_inverse,dChipdDelgammachi,fChip_inverse);
                                 dDeltaLbarchiPdDelgammachi.MultAB(fChip_n,fTemp_matrix_nsd_x_nsd);

                                 fTemp_matrix_nsd_x_nsd.MultABCT(dDeltaLbarchiPdDelgammachi,fCchie_n_inverse,PSIe_n);
                                 fTemp_matrix_nsd_x_nsd2.MultABC(fCe_n_inverse,PSIe_n,fTemp_matrix_nsd_x_nsd);
                                 dFpdDelgammachi.MultAB(fTemp_matrix_nsd_x_nsd2,fFp_n);
                                 dFedDelgammachi.MultABC(fFe,dFpdDelgammachi,fFp_inverse);
                                 dFedDelgammachi*=-1;


                                 //Forming dEpsilone/dDelgammachi
                                 dEpsilonedDelgammachi=0.0;
                                 dEpsilonedDelgammachi.MultATB(fFe,dChiedDelgammachi);
                                 fTemp_matrix_nsd_x_nsd.MultATB(dFedDelgammachi,fChie);
                                 dEpsilonedDelgammachi+= fTemp_matrix_nsd_x_nsd;
                                 dEpsilonedDelgammachi_trace=dEpsilonedDelgammachi.Trace();
                                 dEpsilonedDelgammachi_transpose.Transpose(dEpsilonedDelgammachi);
                                 symdEpsilonedDelgammachi=dEpsilonedDelgammachi;
                                 symdEpsilonedDelgammachi+= dEpsilonedDelgammachi_transpose;

         						 dEedDelgammachi.MultATB(dFedDelgammachi,fFe);
         						 fTemp_matrix_nsd_x_nsd.MultATB(fFe,dFedDelgammachi);
         						 dEedDelgammachi+=fTemp_matrix_nsd_x_nsd;
         						 dEedDelgammachi*=0.5;
         						 dEedDelgammachi_trace=dEedDelgammachi.Trace();

                                 //Forming  dS/dDgamma  S= SPK tensor

                                 dSdDelgamma.SetToScaled((fMaterial_Params[kLambda]+fMaterial_Params[kTau])*dEedDelgamma_trace,fIdentity_matrix);
                                 fTemp_matrix_nsd_x_nsd.SetToScaled(2*(fMaterial_Params[kMu]+fMaterial_Params[kSigma_const]),dEedDelgamma);
                                 dSdDelgamma+=fTemp_matrix_nsd_x_nsd;

                                 fTemp_matrix_nsd_x_nsd.SetToScaled(fMaterial_Params[kEta]*dEpsilonedDelgamma_trace,fIdentity_matrix);
                                 dSdDelgamma+=fTemp_matrix_nsd_x_nsd;

                                 fTemp_matrix_nsd_x_nsd.SetToScaled(fMaterial_Params[kKappa],dEpsilonedDelgamma);
                                 dSdDelgamma+=fTemp_matrix_nsd_x_nsd;

                                 fTemp_matrix_nsd_x_nsd.SetToScaled(fMaterial_Params[kNu],dEpsilonedDelgamma_transpose);
                                 dSdDelgamma+=fTemp_matrix_nsd_x_nsd;


                                 //Forming  dP/dDgamma (scalar) P: pressure  dP/dDgamma= (1/3)1:dS/dDgamma
                                 dPdDelgamma=dSdDelgamma.Trace()/3;

//
                                 //Forming  d(devS)/dDgamma  devS: dev. part of SPK tensor
                                 ddevSdDelgamma.SetToScaled(dPdDelgamma,fIdentity_matrix);
                                 ddevSdDelgamma*=-1;
                                 ddevSdDelgamma+=dSdDelgamma;

                                 //Forming  d(||devS||)/dDgamma  devS: dev. part of SPK tensor
                                 fTemp_matrix_nsd_x_nsd.SetToScaled(1/devfSPKinv,devSPK);
                                 InvddevSdDelgamma=dMatrixT::Dot(ddevSdDelgamma,fTemp_matrix_nsd_x_nsd);


                                 //Forming  dc/dDgamma  c: cohesion
                                 dcdDelgamma=fState_variables_n_IPs(IP,khc)*fMaterial_Params[kHc];

                                 //assemble the consistent tangent
                                 dFYdDelgamma=InvddevSdDelgamma-(Aphi*dcdDelgamma-Bphi*dPdDelgamma);//1

                                 //Forming  d(SIGMA)/dDgammachi tensor
                                 dSIGMAdDelgammachi.SetToScaled((fMaterial_Params[kLambda]+2*fMaterial_Params[kTau])*dEedDelgammachi_trace,fIdentity_matrix);

                                 fTemp_matrix_nsd_x_nsd.SetToScaled(2*(fMaterial_Params[kMu]+2*fMaterial_Params[kSigma_const]),dEedDelgammachi);
                                 dSIGMAdDelgammachi+=fTemp_matrix_nsd_x_nsd;

                                 fTemp_matrix_nsd_x_nsd.SetToScaled((2*fMaterial_Params[kEta]-fMaterial_Params[kTau])*dEpsilonedDelgammachi_trace,fIdentity_matrix);
                                 dSIGMAdDelgammachi+=fTemp_matrix_nsd_x_nsd;

                                 fTemp_matrix_nsd_x_nsd.SetToScaled((fMaterial_Params[kKappa]+fMaterial_Params[kNu]-fMaterial_Params[kSigma_const]),symdEpsilonedDelgammachi);
                                 dSIGMAdDelgammachi+=fTemp_matrix_nsd_x_nsd;

                                 //Forming  dPchi/dDgammachi (scalar) Pchi: pressure for micro-scale  dPchi/dDgammachi= (1/3)1:dSIGMA/dDgammachi

                                 dPchidDelgammachi=dSIGMAdDelgammachi.Trace()/3;

                                 //Forming  d(dev(SIGMA))/dDgammachi  dev(SIGMA): dev. part of SIGMA (relative stress) tensor
                                 ddevSIGMAdDelgammachi.SetToScaled(dPchidDelgammachi,fIdentity_matrix);
                                 ddevSIGMAdDelgammachi*=-1;
                                 ddevSIGMAdDelgammachi+=dSIGMAdDelgammachi;


                                 //Forming  d(||dev(SIGMA)||)/dDgammachi  dev(SIGMA): dev. part of Relative stress (SIGMA) tensor
                                 fTemp_matrix_nsd_x_nsd.SetToScaled(1/fNormdevSIGMA,fdevSIGMA);
                                 dNormdevSIGMAdDelgammachi=dMatrixT::Dot(ddevSIGMAdDelgammachi,fTemp_matrix_nsd_x_nsd);

                                 //Forming  dcx/dDgammax  cx:micro-cohesion
                                 dcchidDelgammachi=fState_variables_n_IPs(IP,khc_chi)*fMaterial_Params[kHc_chi];

                                 //assemble the consistent tangent
                                 dFYchidDelgammachi=dNormdevSIGMAdDelgammachi-(Aphi_chi*dcchidDelgammachi-Bphi_chi*dPchidDelgammachi);//2

                                 //Forming dS/dDelgammachi

                                 dSdDelgammachi.SetToScaled((fMaterial_Params[kLambda]+fMaterial_Params[kTau])*dEedDelgammachi_trace,fIdentity_matrix);
                                 fTemp_matrix_nsd_x_nsd.SetToScaled(2*(fMaterial_Params[kMu]+fMaterial_Params[kSigma_const]),dEedDelgammachi);
                                 dSdDelgammachi+=fTemp_matrix_nsd_x_nsd;

                                 fTemp_matrix_nsd_x_nsd.SetToScaled(fMaterial_Params[kEta]*dEpsilonedDelgammachi_trace,fIdentity_matrix);
                                 dSdDelgammachi+=fTemp_matrix_nsd_x_nsd;

                                 fTemp_matrix_nsd_x_nsd.SetToScaled(fMaterial_Params[kKappa],dEpsilonedDelgammachi);
                                 dSdDelgammachi+=fTemp_matrix_nsd_x_nsd;

                                 fTemp_matrix_nsd_x_nsd.SetToScaled(fMaterial_Params[kNu],dEpsilonedDelgammachi_transpose);
                                 dSdDelgammachi+=fTemp_matrix_nsd_x_nsd;

                                 //Forming dP/dDelgammachi
                                 dPdDelgammachi=dSdDelgammachi.Trace()/3;


                                 //Forming  d(devS)/dDgammachi
                                 ddevSdDelgammachi.SetToScaled(dPdDelgammachi,fIdentity_matrix);
                                 ddevSdDelgammachi*=-1;
                                 ddevSdDelgammachi+=dSdDelgammachi;


                                 //Forming  d(||devS||)/dDgammachi
                                 fTemp_matrix_nsd_x_nsd.SetToScaled(1/devfSPKinv,devSPK);
                                 ddevSdDelgammachi_inv=dMatrixT::Dot(ddevSdDelgammachi,fTemp_matrix_nsd_x_nsd);

                                 //dFy/dDelgammachi
                                 dFYdDelgammachi=ddevSdDelgammachi_inv-(-Bphi*dPdDelgammachi);//3

                                 //Forming d(SIGMA-S)/dDelgamma

                                 dSIGMAdDelgamma.SetToScaled((fMaterial_Params[kLambda]+2*fMaterial_Params[kTau])*dEedDelgamma_trace,fIdentity_matrix);

                                 fTemp_matrix_nsd_x_nsd.SetToScaled(2*(fMaterial_Params[kMu]+2*fMaterial_Params[kSigma_const]),dEedDelgamma);
                                 dSIGMAdDelgamma+=fTemp_matrix_nsd_x_nsd;

                                 fTemp_matrix_nsd_x_nsd.SetToScaled((2*fMaterial_Params[kEta]-fMaterial_Params[kTau])*dEpsilonedDelgamma_trace,fIdentity_matrix);
                                 dSIGMAdDelgamma+=fTemp_matrix_nsd_x_nsd;

                                 fTemp_matrix_nsd_x_nsd.SetToScaled((fMaterial_Params[kKappa]+fMaterial_Params[kNu]-fMaterial_Params[kSigma_const]),symdEpsilonedDelgamma);
                                 dSIGMAdDelgamma+=fTemp_matrix_nsd_x_nsd;

                                 //Forming dPchi/dDelgamma
                                 dPchidDelgamma=dSIGMAdDelgamma.Trace()/3;

                                 //Forming  d(dev(SIGMA-S))/dDgamma
                                 ddevSIGMAdDelgamma.SetToScaled(dPchidDelgamma,fIdentity_matrix);
                                 ddevSIGMAdDelgamma*=-1;
                                 ddevSIGMAdDelgamma+=dSIGMAdDelgamma;


                                 //Forming  d(||dev(SIGMA-S)||)/dDgamma
                                 fTemp_matrix_nsd_x_nsd.SetToScaled(1/fNormdevSIGMA,fdevSIGMA);
                                 dNormdevSIGMAdDelgamma=dMatrixT::Dot(ddevSIGMAdDelgamma,fTemp_matrix_nsd_x_nsd);


                                 //dFYchi/dDelgamma
                                 dFYchidDelgamma=dNormdevSIGMAdDelgamma-(-Bphi_chi*dPchidDelgamma);//4

                                 LocalConsistentTangent=0.0;
                                 LocalConsistentTangent(0,0)=dFYdDelgamma;
                                 LocalConsistentTangent(0,1)=dFYdDelgammachi;
                                 LocalConsistentTangent(1,0)=dFYchidDelgamma;
                                 LocalConsistentTangent(1,1)=dFYchidDelgammachi;

                                 //double mm=4.7;

                                 LocalRHSVector[0]=-fYield_function;
                                 LocalRHSVector[1]=-fMicroYield_function;


                                 if (LocalConsistentTangent.Det() != 0.0)
                                 {
                                     LocalConsistentTangentInverse.Inverse(LocalConsistentTangent);
                                     LocalConsistentTangentInverse.Multx(LocalRHSVector,fdelDelgammaVector);
                                     fdelDelgamma=fdelDelgammaVector[0];
                                     fdelDelgammachi=fdelDelgammaVector[1];
                                 }
                                 else
                                 {
                                     fdelDelgammachi = 0.0;
                                     fdelDelgamma = 0.0;
                                 }


                                 fDelgamma+=fdelDelgamma;
                                 fDelgammachi+=fdelDelgammachi;


                                 fState_variables_IPs(IP,kDelgamma) = fDelgamma;
                                 fState_variables_IPs(IP,kDelgammachi) = fDelgammachi;


                                 cohesion= fState_variables_n_IPs(IP,kc)
                                 + fDelgamma*fState_variables_n_IPs(IP,khc)*fMaterial_Params[kHc];
                                 if (cohesion < 0.0)
									{
										cohesion = 0.0;
										fState_variables_IPs(IP,kc)= fState_variables_n_IPs(IP,kc);
									}


                                 //update cx (c_chi) ISVs
                                 cohesion_chi= fState_variables_n_IPs(IP,kc_chi)
                                 + fDelgammachi*fState_variables_n_IPs(IP,khc_chi)*fMaterial_Params[kHc_chi];
                                 if (cohesion_chi < 0.0)
									{
										cohesion_chi = 0.0;
										fState_variables_IPs(IP,kc_chi)= fState_variables_n_IPs(IP,kc_chi);
									}


                                 //update fChip
                                 fTemp_matrix_nsd_x_nsd.MultATBC(PSIe_n_inverse,fCchie_n,fChip_n);
                                 fTemp_matrix_nsd_x_nsd2.MultABC(PSIe_n_inverse,fdGchidSIGMA_tr_transpose,fTemp_matrix_nsd_x_nsd);
                                 fChip.SetToScaled(fDelgammachi,fTemp_matrix_nsd_x_nsd2);
                                 fChip+=fChip_n;

     							 fTemp_matrix_nsd_x_nsd = fChip;
     							 fTemp_matrix_nsd_x_nsd-= fChip_n;
     							 DeltaLbarchiP.MultAB(fTemp_matrix_nsd_x_nsd,fChip_inverse);

                                 //Form inverse of Chi^p
                                 fChip_inverse.Inverse(fChip);

                                 //Calculate Chie
                                 fChie.MultAB(ChiM,fChip_inverse);


     							 fTemp_matrix_nsd_x_nsd2.MultABT(fCchie_n_inverse,PSIe_n);
     							 fTemp_matrix_nsd_x_nsd3.MultAB(DeltaLbarchiP,fTemp_matrix_nsd_x_nsd2);
     							 fTemp_matrix_nsd_x_nsd2.MultAB(PSIe_n,fTemp_matrix_nsd_x_nsd3);
     							 fTemp_matrix_nsd_x_nsd3.MultAB(fCe_n_inverse,fTemp_matrix_nsd_x_nsd2);

                                 fTemp_matrix_nsd_x_nsd.MultABT(fCe_n_inverse,fdGdS_tr);
                                 fTemp_matrix_nsd_x_nsd*=fDelgamma;

     							 fTemp_matrix_nsd_x_nsd3+= fIdentity_matrix;
     							 fTemp_matrix_nsd_x_nsd3+= fTemp_matrix_nsd_x_nsd;

     							 fFp.MultAB(fTemp_matrix_nsd_x_nsd3,fFp_n);
     							 fFp_inverse.Inverse(fFp);
     							 fFe.MultAB(fDeformation_Gradient,fFp_inverse);



                                 //[fElastic_Right_Cauchy_Green_tensor] will be formed
                                 fRight_Elastic_Cauchy_Green_tensor.MultATB(fFe,fFe);
                                 if (fRight_Elastic_Cauchy_Green_tensor.Det()==0)
                                     fRight_Elastic_Cauchy_Green_tensor = fIdentity_matrix;


                                 //Update Elastic Lagrangian strain tensor E
                                 Elastic_LagrangianStn=fIdentity_matrix;
                                 Elastic_LagrangianStn*=-1;
                                 Elastic_LagrangianStn+=fRight_Elastic_Cauchy_Green_tensor;
                                 Elastic_LagrangianStn*=0.5;
                                 Elastic_LagrangianStn_trace=Elastic_LagrangianStn.Trace();

                                 //[fMicroElastic_Right_Cauchy_Green_tensor] (Cchie) will be formed
                                 fMicroRight_Elastic_Cauchy_Green_tensor.MultATB(fChie,fChie);
                                 if (fMicroRight_Elastic_Cauchy_Green_tensor.Det()==0)
                                     fMicroRight_Elastic_Cauchy_Green_tensor = fIdentity_matrix;

                                 //Update fCchie
                                 fCchie.MultATB(fChie,fChie);

                                 //Update PSIe
                                 PSIe.MultATB(fFe,fChie);

                                 //Update Elastic micro strain tenso will be formed in Bbar
                                 Elastic_MicroStnTensor = fIdentity_matrix;
                                 Elastic_MicroStnTensor *= -1;
                                 Elastic_MicroStnTensor += PSIe;
                                 Elastic_MicroStnTensor_trace=Elastic_MicroStnTensor.Trace();
                                 Elastic_MicroStnTensor_transpose.Transpose(Elastic_MicroStnTensor);

                                 //update S stress
                                 //update S stress
                                 fTemp_matrix_nsd_x_nsd.SetToScaled(Elastic_LagrangianStn_trace*(fMaterial_Params[kLambda]+fMaterial_Params[kTau]),fIdentity_matrix);

                                 SPK.SetToScaled(2*(fMaterial_Params[kMu]+fMaterial_Params[kSigma_const]),Elastic_LagrangianStn);
                                 SPK+=fTemp_matrix_nsd_x_nsd;

                                 fTemp_matrix_nsd_x_nsd.SetToScaled(Elastic_MicroStnTensor_trace*fMaterial_Params[kEta],fIdentity_matrix);
                                 SPK+=fTemp_matrix_nsd_x_nsd;

                                 fTemp_matrix_nsd_x_nsd.SetToScaled(fMaterial_Params[kKappa],Elastic_MicroStnTensor);
                                 SPK+=fTemp_matrix_nsd_x_nsd;

                                 fTemp_matrix_nsd_x_nsd.SetToScaled(fMaterial_Params[kNu],Elastic_MicroStnTensor_transpose);
                                 SPK+=fTemp_matrix_nsd_x_nsd;

								 Pbar = SPK.Trace()/3;//Calculating the pressure term
								 devSPK.SetToScaled(Pbar,fIdentity_matrix);
								 devSPK*=-1;
								 devSPK+=SPK;
								 Temp_inv= devSPK.ScalarProduct();
								 devfSPKinv=sqrt(Temp_inv);

                                 //Update Relative stress SIGMA_S
                                 SIGMA_S.SetToScaled(Elastic_LagrangianStn_trace*fMaterial_Params[kTau],fIdentity_matrix);
                                 // 2sigmaE
                                 fTemp_matrix_nsd_x_nsd.SetToScaled(2*fMaterial_Params[kSigma_const],Elastic_LagrangianStn);
                                 SIGMA_S+=fTemp_matrix_nsd_x_nsd;
                                 //(eta-Tau)trEpsilon.1
                                 fTemp_matrix_nsd_x_nsd.SetToScaled(Elastic_MicroStnTensor_trace*(fMaterial_Params[kEta]-fMaterial_Params[kTau]),fIdentity_matrix);
                                 SIGMA_S+=fTemp_matrix_nsd_x_nsd;
                                 //(nu-sigma)*Epsilon
                                 fTemp_matrix_nsd_x_nsd.SetToScaled((fMaterial_Params[kNu]-fMaterial_Params[kSigma_const]),Elastic_MicroStnTensor);
                                 SIGMA_S+=fTemp_matrix_nsd_x_nsd;
                                 //(kappa-sigma)*Epsilon^T
                                 fTemp_matrix_nsd_x_nsd.SetToScaled((fMaterial_Params[kKappa]-fMaterial_Params[kSigma_const]),Elastic_MicroStnTensor_transpose);
                                 SIGMA_S+=fTemp_matrix_nsd_x_nsd;

                                 //calculate  devS stress
     							 Pchibar=SIGMA_S.Trace()/3;//
                                 devSIGMA_S.SetToScaled(Pchibar,fIdentity_matrix);
                                 devSIGMA_S*=-1;
                                 devSIGMA_S+=SIGMA_S;
                                 //Calculate dev(SIGMA-S):dev(SIGMA-S)
                                 Temp_inv= devSIGMA_S.ScalarProduct();
                                 // Calculate ||dev(SIGMA-S)||
                                 devSIGMA_S_inv=sqrt(Temp_inv);

                                 SIGMA= SIGMA_S;
                                 SIGMA+= SPK;
                                 fMeanSIGMA_e= SIGMA.Trace()/3;
                                 fdevSIGMA.SetToScaled(fMeanSIGMA_e,fIdentity_matrix);
                                 fdevSIGMA*=-1;
                                 fdevSIGMA+=SIGMA;
                                 Temp_inv= fdevSIGMA.ScalarProduct();
                                 fNormdevSIGMA=sqrt(Temp_inv);

                                 fYield_function=devfSPKinv-(Aphi*cohesion-Bphi*Pbar);

                                 // Calculate micro yield function with updated parameters
                                 fMicroYield_function=fNormdevSIGMA-(Aphi_chi*cohesion_chi-Bphi_chi*fMeanSIGMA_e);
                                 GXp = 0.0;
                                 //fs_micromorph3D_out<<"Current Macro relative residual = "<< fabs(fYield_function/fYield_function_tr)<<" && "<< "Current Micro relative residual = " << fabs(fMicroYield_function/fMicroYield_function_tr) << " && "<<" Yield Function="<< fYield_function<<" && "<<" Micro Yield Function = "<< fMicroYield_function << endl;
                             }

                             if (abs(fMicroYield_function) > 1e-1 || abs(fYield_function) > 1e-1 || fDelgamma < 0.0 || fDelgammachi < 0.0)
								{
                            	 if (abs(fMicroYield_function) > 1e-1)
									 {
										fs_micromorph3D_out << "Local Delgamma Newton-Raphson algorithm did not approach to zero for Microyield_func of the Coupled-Plasticity" << endl;
										ExceptionT::GeneralFail(caller,"Local Delgamma Newton-Raphson algorithm did not approach to zero for Microyield_func of the Coupled-Plasticity %e.", fMicroYield_function);
									 }
                               	 if (abs(fYield_function) > 1e-1)
                                	 {
    									fs_micromorph3D_out << "Local Delgamma Newton-Raphson algorithm did not approach to zero for Macroyield_func of the Coupled-Plasticity" << endl;
    									ExceptionT::GeneralFail(caller,"Local Delgamma Newton-Raphson algorithm did not approach to zero for Macroyield_func of the Coupled-Plasticity %e.", fYield_function);
                                	 }
                               	 if (fDelgamma < 0.0)
                                	 {
    									fs_micromorph3D_out << "Local Delgamma Newton-Raphson algorithm did not find positive fDelgamma for Coupled-Plasticity" << endl;
    									ExceptionT::GeneralFail(caller,"Local Delgamma Newton-Raphson algorithm did not find positive fDelgamma for Coupled-Plasticity %e.", fDelgamma);
                                	 }
                               	 if (fDelgammachi < 0.0)
                                	 {
    									fs_micromorph3D_out << "Local Delgamma Newton-Raphson algorithm did not find positive fDelgammachi for Coupled-Plasticity" << endl;
    									ExceptionT::GeneralFail(caller,"Local Delgamma Newton-Raphson algorithm did not find positive fDelgammachi for Coupled-Plasticity %e.", fDelgammachi);
                                	 }
								}
								else
								{
									fState_variables_IPs(IP,kDelgammachi) = fDelgammachi;
									fState_variables_IPs(IP,kc_chi) = cohesion_chi;
									fState_variables_IPs(IP,kDelgamma) = fDelgamma;
									fState_variables_IPs(IP,kc) = cohesion;
									fState_variables_IPs(IP,kc_nablachi0) =  fState_variables_n_IPs(IP,kc_nablachi0);
									fState_variables_IPs(IP,kc_nablachi1) =  fState_variables_n_IPs(IP,kc_nablachi1);
									fState_variables_IPs(IP,kc_nablachi2) =  fState_variables_n_IPs(IP,kc_nablachi2);
									fState_variables_IPs(IP,kDelgammanablachi) = fDelgammanablachi;
									//fs_micromorph3D_out << "fDelgamma = " << fDelgamma << endl;
									//fs_micromorph3D_out << "fDelgammachi = " << fDelgammachi << endl;
									//fs_micromorph3D_out << "fState_variables_IPs(IP,kc_chi) = " << fState_variables_IPs(IP,kc_chi) << endl;
									//fs_micromorph3D_out << "fState_variables_IPs(IP,kc) = " << fState_variables_IPs(IP,kc) << endl;
									//fs_micromorph3D_out << "fState_variables_IPs(IP,kDelgammachi) = " << fState_variables_IPs(IP,kDelgammachi) << endl;
									//fs_micromorph3D_out << "fState_variables_IPs(IP,kDelgamma) = " << fState_variables_IPs(IP,kDelgamma) << endl;
								}
                         }

				if(iPlasticityCheck==0 && fMicro_gradient_Yield_function_tr>dYieldTrialTol)
					{

						fs_micromorph3D_out<<"MICRO-GRADIENT-PLASTICITY"<<endl;
						fMicro_gradient_Yield_function = fMicro_gradient_Yield_function_tr;
						Micro_gradient_Plasticity_Occurrence = 1;

						if (Micro_Plasticity_Occurrence == 0 && Macro_Plasticity_Occurrence == 0)
						{
							fFe=fFe_tr;
							fChie=fChie_tr;
							fCchie=fCchie_tr;
							fFp=fFp_n;
							fFp_inverse.Inverse(fFp);
							SPK=fSPK_tr;
							devSPK=fdevSPK_tr;
							fTemp_matrix_one_x_one = fdevSPK_tr.ScalarProduct();
							devfSPKinv_tr = sqrt(fTemp_matrix_one_x_one);
							devfSPKinv = devfSPKinv_tr;
							SIGMA_S=SIGMA_S_tr;
							devSIGMA_S_inv=devSIGMA_S_inv_tr;
							devSIGMA_S=devSIGMA_S_tr;
							PSIe=PSIe_tr;
							fChip=fChip_n;
							fChip_inverse.Inverse(fChip);
							fState_variables_IPs(IP,kc) =  fState_variables_n_IPs(IP,kc);
							fState_variables_IPs(IP,kc_chi) = fState_variables_n_IPs(IP,kc_chi);
							fState_variables_IPs(IP,kDelgamma) = fDelgamma;
							fState_variables_IPs(IP,kDelgammachi) = fDelgammachi;
						}

						fDelgammanablachi = 0.0;
						fdelDelgammanablachi = 0.0;
						fMeKLM = fMKLM_tr;
						Mean_fMeKLM = Mean_fMKLM_tr;
						fdevMeKLM = fdevMKLM_tr;
						fNormdevMeKLM = fNormdevMKLM_tr;
						Norm_Mean_fMeKLM = Norm_Mean_fMKLM_tr;
						Form_kc_nablachi_n(IP);
						Form_Norm_kc_nablachi_n();

						cohesion_nablachi = kc_nablachi_n;
						Norm_cohesion_nablachi = Norm_kc_nablachi_n;

						fTemp_matrix_nsd_x_nsd = fFp;
						fTemp_matrix_nsd_x_nsd-= fFp_n;
						fDeltaLbar_P.MultATB(fTemp_matrix_nsd_x_nsd,fFp_inverse);

						fTemp_matrix_nsd_x_nsd = fChip;
						fTemp_matrix_nsd_x_nsd-= fChip_n;
						fDeltaLbarChai_P.MultATB(fTemp_matrix_nsd_x_nsd,fChip_inverse);



						//fs_micromorph3D_out << "Mean_fMeKLM = " << Mean_fMeKLM << endl;
						//fs_micromorph3D_out << "fdevMeKLM = " << fdevMeKLM << endl;
						//fs_micromorph3D_out << "fNormdevMeKLM = " << fNormdevMeKLM << endl;
						//fs_micromorph3D_out << "Norm_Mean_fMeKLM = " << Norm_Mean_fMeKLM << endl;
						//fs_micromorph3D_out << "kc_nablachi_n = " << kc_nablachi_n << endl;
						//fs_micromorph3D_out << "Norm_kc_nablachi_n = " << Norm_kc_nablachi_n << endl;

						//fs_micromorph3D_out << "fNormdevMKLM_tr = " << fNormdevMKLM_tr << endl;
						//fs_micromorph3D_out << "Norm_Mean_fMKLM_tr = " << Norm_Mean_fMKLM_tr << endl;

						// iterate using Newton-Raphson to solve for fDelgammanablachai
						iter_count = 0;
						//fs_micromorph3D_out << "Gauss Point = " << IP << endl;
						//fs_micromorph3D_out << "Current Macro Yield function = " << fYield_function << endl;

						while (fabs(fMicro_gradient_Yield_function) > dAbsTol && fabs(fMicro_gradient_Yield_function/fMicro_gradient_Yield_function_tr) > dRelTol
								&& iter_count < iIterationMax)
						{
							iter_count += 1;
							Form_dfMKLMdDelgammanablachi();
							Form_dmeanfMKLMdDelgammanablachi();
							Form_dfdevMKLMdDelgammanablachi();
							Form_dfNorm_devMKLMdDelgammanablachi();
							Form_dNorm_meanfMKLMdDelgammanablachi();
							Form_dfkc_nablachidDelgammanablachi(IP);
							Form_dNorm_kc_nablachidDelgammanablachi();

							dFyield_nablachidDelgammanablachi = dfNorm_devMKLMdDelgammanablachi - (Aphi_nablachi*dNorm_kc_nablachidDelgammanablachi
									- Bphi_nablachi*dNorm_meanfMKLMdDelgammanablachi);


							//solve for fdelDelgammanablaci
							if (fabs(dFyield_nablachidDelgammanablachi) >= 1e-12) fdelDelgammanablachi = -fMicro_gradient_Yield_function/dFyield_nablachidDelgammanablachi;
							else fdelDelgammanablachi = 0.0;

								fDelgammanablachi+= fdelDelgammanablachi;

								fTemp_matrix_one_x_one = (1/Norm_kc_nablachi_n)*fMaterial_Params[kHc_nablachi]*Apsi_nablachi*fDelgammanablachi;
								fDelkc_nablachi.SetToScaled(fTemp_matrix_one_x_one,kc_nablachi_n);


							cohesion_nablachi=kc_nablachi_n;
							cohesion_nablachi+= fDelkc_nablachi;

							if (cohesion_nablachi(0,0) < 0.0)
							{
								cohesion_nablachi(0,0) = 0.0;
								fState_variables_IPs(IP,kc_nablachi0)= fState_variables_n_IPs(IP,kc_nablachi0);
							}

							if (cohesion_nablachi(1,0) < 0.0)
							{
								cohesion_nablachi(1,0) = 0.0;
								fState_variables_IPs(IP,kc_nablachi1)= fState_variables_n_IPs(IP,kc_nablachi1);
							}

							if (cohesion_nablachi(2,0) < 0.0)
							{
								cohesion_nablachi(2,0) = 0.0;
								fState_variables_IPs(IP,kc_nablachi2)= fState_variables_n_IPs(IP,kc_nablachi2);
							}


				            Form_GXp();
				            Form_GXe();
				            Form_GAMMAe();
				            Form_fMeKLM();
				            Form_Mean_fMeKLM();
				            Form_fdevMeKLM();
				            Form_Norm_Mean_fMeKLM();
				            Form_fNormdevMeKLM();
				            Form_Norm_cohesion_nablachi();



				            fMicro_gradient_Yield_function = fNormdevMeKLM - (Aphi_nablachi*Norm_cohesion_nablachi
							- Bphi_nablachi*Norm_Mean_fMeKLM);

							//fs_micromorph3D_out  << "fMicro_gradient_Yield_function = " << fMicro_gradient_Yield_function << endl;

							}


					if (abs(fMicro_gradient_Yield_function) > 1e-1 || fDelgammanablachi < 0.0)
					{
						if (abs(fMicro_gradient_Yield_function) > 1e-1)
						{
							fs_micromorph3D_out << "Local Delgamma Newton-Raphson algorithm did not approach to zero for the MicroGradiednt Plasticity" << endl;
							ExceptionT::GeneralFail(caller,"Local Delgamma Newton-Raphson algorithm did not approach to zero for the micro-gradient plasticity %e.", fMicro_gradient_Yield_function);
						}
						if (fDelgammanablachi < 0.0)
						{
							fs_micromorph3D_out << "Local Delgamma Newton-Raphson algorithm did not find a positive DelgammaNablaChi" << endl;
							ExceptionT::GeneralFail(caller,"Local Delgamma Newton-Raphson algorithm did not find a positive DelgammaNablaChi for the micro-gradient plasticity %e.", fDelgammanablachi);
						}
					}
					else
					{
						fState_variables_IPs(IP,kDelgammanablachi) = fDelgammanablachi;
						fState_variables_IPs(IP,kc_nablachi0) =  cohesion_nablachi(0,0);
						fState_variables_IPs(IP,kc_nablachi1) =  cohesion_nablachi(1,0);
						fState_variables_IPs(IP,kc_nablachi2) =  cohesion_nablachi(2,0);
						//fs_micromorph3D_out << "fState_variables_IPs(IP,kc_chi) = " << fState_variables_IPs(IP,kc_chi) << endl;
						//fs_micromorph3D_out << "fState_variables_IPs(IP,kc) = " << fState_variables_IPs(IP,kc) << endl;
						//fs_micromorph3D_out << "fState_variables_IPs(IP,kDelgammachi) = " << fState_variables_IPs(IP,kDelgammachi) << endl;
						//fs_micromorph3D_out << "fState_variables_IPs(IP,kDelgamma) = " << fState_variables_IPs(IP,kDelgamma) << endl;
					}
					}

				//fs_micromorph3D_out << "after loop fMeKLM = " << fMeKLM << endl;

//                              /* This part is already calculated above*/
//                              /* calculate fFp_Inverse  */
                              fFp_inverse.Inverse(fFp);
                              /* calculate Fe */
                              fFe.MultAB(fDeformation_Gradient,fFp_inverse);
                              /* [fElastic_Right_Cauchy_Green_tensor] will be formed */
                              fRight_Elastic_Cauchy_Green_tensor.MultATB(fFe,fFe);
                              if (fRight_Elastic_Cauchy_Green_tensor.Det()==0)
                                      fRight_Elastic_Cauchy_Green_tensor = fIdentity_matrix;





                                Jp=fFp.Det();
                                Je=fFe.Det();

                                fTemp_matrix_nsd_x_nsd.MultABCT(fFe,SPK,fFe);
                                KirchhoffST.SetToScaled(Jp,fTemp_matrix_nsd_x_nsd);
                                fCauchy_stress_tensor_current_IP.SetToScaled(1/J,KirchhoffST);
                                //fs_micromorph3D_out<<"fCauchy_stress_tensor_current_IP= "<< fCauchy_stress_tensor_current_IP<<endl;
                                //fs_micromorph3D_out<<"SPK= "<< SPK<<endl;
                               // fs_micromorph3D_out<<"fFe= "<< fFe<<endl;




                                // Save Cauchy effective stress tensor of the current IP
                                fCauchy_stress_IPs.SetRow(IP,fCauchy_stress_tensor_current_IP);

                                /* [fLeft_Cauchy_Green_tensor] will be formed */
                                fLeft_Cauchy_Green_tensor.MultABT(fDeformation_Gradient, fDeformation_Gradient);
                                /* [fLeft_Cauchy_Green_tensor_Inverse] will be formed */
                                if (fLeft_Cauchy_Green_tensor.Det()==0)
                                        fLeft_Cauchy_Green_tensor = fIdentity_matrix;
                                fLeft_Cauchy_Green_tensor_Inverse.Inverse(fLeft_Cauchy_Green_tensor);

                                /* [fEulerian_strain_tensor_current_IP] will be formed */
                                fEulerian_strain_tensor_current_IP = fLeft_Cauchy_Green_tensor_Inverse;
                                fEulerian_strain_tensor_current_IP *= -1;
                                fEulerian_strain_tensor_current_IP += fIdentity_matrix;
                                fEulerian_strain_tensor_current_IP *= 0.5;

                                /* The Right Cauchy Green  Tensor will be formed */
                                fRight_Cauchy_Green_tensor.MultATB(fDeformation_Gradient,fDeformation_Gradient);
                                if (fRight_Cauchy_Green_tensor.Det()==0)
                                        fRight_Cauchy_Green_tensor = fIdentity_matrix;



                                /* Total Lagrangian Strain Tensor will be formed */
                                LagrangianStn=fIdentity_matrix;
                                LagrangianStn*=-1;
                                LagrangianStn+=fRight_Cauchy_Green_tensor;
                                LagrangianStn*=0.5;

                                /* Total Lagraingian strain tensor is saved as Eulerian strain tensor for plotting purposes */
                                fEulerian_strain_tensor_current_IP=LagrangianStn;

                                Extract_six_values_from_symmetric_tensor(fEulerian_strain_tensor_current_IP,fTemp_nine_values);

                                /* Save Eulerian strain tensor of the current IP */
                                fEulerian_strain_IPs.SetRow(IP,fTemp_nine_values);

                               /* [fMicroElastic_Right_Cauchy_Green_tensor] (Cchie) will be formed */
                                fMicroRight_Elastic_Cauchy_Green_tensor.MultATB(fChie,fChie);
                                if (fMicroRight_Elastic_Cauchy_Green_tensor.Det()==0)
                                 fMicroRight_Elastic_Cauchy_Green_tensor = fIdentity_matrix;

                                /* Assigning MicroRight_Elastic_Cauchy_Green_tensor to fCchie to be used in calculations*/
                                fCchie=fMicroRight_Elastic_Cauchy_Green_tensor;

                                /* Calculating the inverse of PSIe */
                                //PSIe_inverse.Inverse(PSIe);
								Form_GXe();
								Form_GAMMAe();
                                Form_fMeKLM();
                                Form_Mean_fMeKLM();
    				            Form_fdevMeKLM();
    				            Form_Norm_Mean_fMeKLM();
    				            Form_fNormdevMeKLM();


								/* calculate stress derivative of yield function */
								fdFYdS = 0.0;
								fdFYdS.SetToScaled(Bphi*1.0/3.0,fIdentity_matrix);
								fTemp_matrix_nsd_x_nsd.SetToScaled(1/devfSPKinv,devSPK);
								fdFYdS+=fTemp_matrix_nsd_x_nsd;
								fdFYdS_trace = fdFYdS.Trace();
								/* calculate stress derivative of plastic potential function */
								fdGdS = 0.0;
								fdGdS.SetToScaled(Bpsi*1.0/3.0,fIdentity_matrix);
								fTemp_matrix_nsd_x_nsd.SetToScaled(1/devfSPKinv,devSPK);
								fdGdS+=fTemp_matrix_nsd_x_nsd;
								//fdGdS*=0.0001;

								fTemp_matrix_nsd_x_nsd.MultABCT(fFe,SPK,fFe);
								KirchhoffST.SetToScaled(Jp,fTemp_matrix_nsd_x_nsd);
								fCauchy_stress_tensor_current_IP.SetToScaled(1/J,KirchhoffST);

								/* calculate derivative of micro yield function with respect to SIGMA-S */
								fdFYchidSIGMA = 0.0;
								fdFYchidSIGMA.SetToScaled(Bphi_chi*1.0/3.0,fIdentity_matrix);
								fTemp_matrix_nsd_x_nsd.SetToScaled(1/fNormdevSIGMA,fdevSIGMA);
								fdFYchidSIGMA+=fTemp_matrix_nsd_x_nsd;
								fdFYchidSIGMA_trace = fdFYchidSIGMA.Trace();
								/* calculate  derivative of  Micro plastic potential function wrt SIGMA-S */
								fdGchidSIGMA= 0.0;
								fdGchidSIGMA.SetToScaled(Bpsi_chi*1.0/3.0,fIdentity_matrix);
								fTemp_matrix_nsd_x_nsd.SetToScaled(1/fNormdevSIGMA,fdevSIGMA);
								fdGchidSIGMA+=fTemp_matrix_nsd_x_nsd;
								//fdGchidSIGMA*=0.01;

                                Form_dGnablachidMKLM();
                                Form_dFnablachidMKLM();
/*
    	                        fs_micromorph3D_out<<"GXp(0,0,0)= "<< GXp(0,0,0) <<endl;
    	                        fs_micromorph3D_out<<"GXp(0,0,1)= "<< GXp(0,0,1) <<endl;
    	                        fs_micromorph3D_out<<"GXp(0,0,2)= "<< GXp(0,0,2) <<endl;
    	                        fs_micromorph3D_out<<"GXp(0,1,0)= "<< GXp(0,1,0) <<endl;
    	                        fs_micromorph3D_out<<"GXp(0,1,1)= "<< GXp(0,1,1) <<endl;
    	                        fs_micromorph3D_out<<"GXp(0,1,2)= "<< GXp(0,1,2) <<endl;
    	                        fs_micromorph3D_out<<"GXp(0,2,0)= "<< GXp(0,2,0) <<endl;
    	                        fs_micromorph3D_out<<"GXp(0,2,1)= "<< GXp(0,2,1) <<endl;
    	                        fs_micromorph3D_out<<"GXp(0,2,2)= "<< GXp(0,2,2) <<endl;
    	                        fs_micromorph3D_out<<"GXp(1,0,0)= "<< GXp(1,0,0) <<endl;
    	                        fs_micromorph3D_out<<"GXp(1,0,1)= "<< GXp(1,0,1) <<endl;
    	                        fs_micromorph3D_out<<"GXp(1,0,2)= "<< GXp(1,0,2) <<endl;
    	                        fs_micromorph3D_out<<"GXp(1,1,0)= "<< GXp(1,1,0) <<endl;
    	                        fs_micromorph3D_out<<"GXp(1,1,1)= "<< GXp(1,1,1) <<endl;
    	                        fs_micromorph3D_out<<"GXp(1,1,2)= "<< GXp(1,1,2) <<endl;
    	                        fs_micromorph3D_out<<"GXp(1,2,0)= "<< GXp(1,2,0) <<endl;
    	                        fs_micromorph3D_out<<"GXp(1,2,1)= "<< GXp(1,2,1) <<endl;
    	                        fs_micromorph3D_out<<"GXp(1,2,2)= "<< GXp(1,2,2) <<endl;
    	                        fs_micromorph3D_out<<"GXp(2,0,0)= "<< GXp(2,0,0) <<endl;
    	                        fs_micromorph3D_out<<"GXp(2,0,1)= "<< GXp(2,0,1) <<endl;
    	                        fs_micromorph3D_out<<"GXp(2,0,2)= "<< GXp(2,0,2) <<endl;
    	                        fs_micromorph3D_out<<"GXp(2,1,0)= "<< GXp(2,1,0) <<endl;
    	                        fs_micromorph3D_out<<"GXp(2,1,1)= "<< GXp(2,1,1) <<endl;
    	                        fs_micromorph3D_out<<"GXp(2,1,2)= "<< GXp(2,1,2) <<endl;
    	                        fs_micromorph3D_out<<"GXp(2,2,0)= "<< GXp(2,2,0) <<endl;
    	                        fs_micromorph3D_out<<"GXp(2,2,1)= "<< GXp(2,2,1) <<endl;
    	                        fs_micromorph3D_out<<"GXp(2,2,2)= "<< GXp(2,2,2) <<endl;
    							fs_micromorph3D_out << "GXp_n = " << GXp_n << endl;
    							fs_micromorph3D_out << "GXe = " << GXe << endl;
    							fs_micromorph3D_out << "GAMMAe = " << GAMMAe << endl;
    							fs_micromorph3D_out << "GAMMAe_n = " << GAMMAe_n << endl;
    							fs_micromorph3D_out << "fDeltaLbar_P = " << fDeltaLbar_P << endl;
    							fs_micromorph3D_out << "fDeltaLbarChai_P = " << fDeltaLbarChai_P << endl;

    	                        fs_micromorph3D_out<<"fMeKLM(0,0,0)= "<< fMeKLM(0,0,0) <<endl;
    	                        fs_micromorph3D_out<<"fMeKLM(0,0,1)= "<< fMeKLM(0,0,1) <<endl;
    	                        fs_micromorph3D_out<<"fMeKLM(0,0,2)= "<< fMeKLM(0,0,2) <<endl;
    	                        fs_micromorph3D_out<<"fMeKLM(0,1,0)= "<< fMeKLM(0,1,0) <<endl;
    	                        fs_micromorph3D_out<<"fMeKLM(0,1,1)= "<< fMeKLM(0,1,1) <<endl;
    	                        fs_micromorph3D_out<<"fMeKLM(0,1,2)= "<< fMeKLM(0,1,2) <<endl;
    	                        fs_micromorph3D_out<<"fMeKLM(0,2,0)= "<< fMeKLM(0,2,0) <<endl;
    	                        fs_micromorph3D_out<<"fMeKLM(0,2,1)= "<< fMeKLM(0,2,1) <<endl;
    	                        fs_micromorph3D_out<<"fMeKLM(0,2,2)= "<< fMeKLM(0,2,2) <<endl;
    	                        fs_micromorph3D_out<<"fMeKLM(1,0,0)= "<< fMeKLM(1,0,0) <<endl;
    	                        fs_micromorph3D_out<<"fMeKLM(1,0,1)= "<< fMeKLM(1,0,1) <<endl;
    	                        fs_micromorph3D_out<<"fMeKLM(1,0,2)= "<< fMeKLM(1,0,2) <<endl;
    	                        fs_micromorph3D_out<<"fMeKLM(1,1,0)= "<< fMeKLM(1,1,0) <<endl;
    	                        fs_micromorph3D_out<<"fMeKLM(1,1,1)= "<< fMeKLM(1,1,1) <<endl;
    	                        fs_micromorph3D_out<<"fMeKLM(1,1,2)= "<< fMeKLM(1,1,2) <<endl;
    	                        fs_micromorph3D_out<<"fMeKLM(1,2,0)= "<< fMeKLM(1,2,0) <<endl;
    	                        fs_micromorph3D_out<<"fMeKLM(1,2,1)= "<< fMeKLM(1,2,1) <<endl;
    	                        fs_micromorph3D_out<<"fMeKLM(1,2,2)= "<< fMeKLM(1,2,2) <<endl;
    	                        fs_micromorph3D_out<<"fMeKLM(2,0,0)= "<< fMeKLM(2,0,0) <<endl;
    	                        fs_micromorph3D_out<<"fMeKLM(2,0,1)= "<< fMeKLM(2,0,1) <<endl;
    	                        fs_micromorph3D_out<<"fMeKLM(2,0,2)= "<< fMeKLM(2,0,2) <<endl;
    	                        fs_micromorph3D_out<<"fMeKLM(2,1,0)= "<< fMeKLM(2,1,0) <<endl;
    	                        fs_micromorph3D_out<<"fMeKLM(2,1,1)= "<< fMeKLM(2,1,1) <<endl;
    	                        fs_micromorph3D_out<<"fMeKLM(2,1,2)= "<< fMeKLM(2,1,2) <<endl;
    	                        fs_micromorph3D_out<<"fMeKLM(2,2,0)= "<< fMeKLM(2,2,0) <<endl;
    	                        fs_micromorph3D_out<<"fMeKLM(2,2,1)= "<< fMeKLM(2,2,1) <<endl;
    	                        fs_micromorph3D_out<<"fMeKLM(2,2,2)= "<< fMeKLM(2,2,2) <<endl;


    							fs_micromorph3D_out << "fdevMeKLM = " << fdevMeKLM << endl;
    							fs_micromorph3D_out << "Mean_fMeKLM = " << Mean_fMeKLM << endl;
    							fs_micromorph3D_out << "Norm_Mean_fMeKLM = " << Norm_Mean_fMeKLM << endl;
    							fs_micromorph3D_out << "fNormdevMeKLM = " << fNormdevMeKLM << endl;
    							fs_micromorph3D_out << "Norm_cohesion_nablachi = " << Norm_cohesion_nablachi << endl;
    							fs_micromorph3D_out << "fMicro_gradient_Yield_function = " << fMicro_gradient_Yield_function << endl;
    							fs_micromorph3D_out << "fDelgammanablachi = " << fDelgammanablachi << endl;
    							fs_micromorph3D_out << "fMicro_Yield_function = " << fMicroYield_function << endl;
    							fs_micromorph3D_out << "fDelgammachi = " << fDelgammachi << endl;
    							fs_micromorph3D_out << "fYield_function = " << fYield_function << endl;
    							fs_micromorph3D_out << "fDelgamma = " << fDelgamma << endl;
    							fs_micromorph3D_out << "SPK = " << SPK << endl;
    							fs_micromorph3D_out << "SIGMA_S = " << SIGMA_S << endl;
    							fs_micromorph3D_out << "dGnablachidMKLM = " << fdGnablachidMKLM << endl;

    	                        fs_micromorph3D_out<<"fdGnablachidMKLM_tr(0,0,0)= "<< fdGnablachidMKLM_tr(0,0,0) <<endl;
    	                        fs_micromorph3D_out<<"fdGnablachidMKLM_tr(0,0,1)= "<< fdGnablachidMKLM_tr(0,0,1) <<endl;
    	                        fs_micromorph3D_out<<"fdGnablachidMKLM_tr(0,0,2)= "<< fdGnablachidMKLM_tr(0,0,2) <<endl;
    	                        fs_micromorph3D_out<<"fdGnablachidMKLM_tr(0,1,0)= "<< fdGnablachidMKLM_tr(0,1,0) <<endl;
    	                        fs_micromorph3D_out<<"fdGnablachidMKLM_tr(0,1,1)= "<< fdGnablachidMKLM_tr(0,1,1) <<endl;
    	                        fs_micromorph3D_out<<"fdGnablachidMKLM_tr(0,1,2)= "<< fdGnablachidMKLM_tr(0,1,2) <<endl;
    	                        fs_micromorph3D_out<<"fdGnablachidMKLM_tr(0,2,0)= "<< fdGnablachidMKLM_tr(0,2,0) <<endl;
    	                        fs_micromorph3D_out<<"fdGnablachidMKLM_tr(0,2,1)= "<< fdGnablachidMKLM_tr(0,2,1) <<endl;
    	                        fs_micromorph3D_out<<"fdGnablachidMKLM_tr(0,2,2)= "<< fdGnablachidMKLM_tr(0,2,2) <<endl;
    	                        fs_micromorph3D_out<<"fdGnablachidMKLM_tr(1,0,0)= "<< fdGnablachidMKLM_tr(1,0,0) <<endl;
    	                        fs_micromorph3D_out<<"fdGnablachidMKLM_tr(1,0,1)= "<< fdGnablachidMKLM_tr(1,0,1) <<endl;
    	                        fs_micromorph3D_out<<"fdGnablachidMKLM_tr(1,0,2)= "<< fdGnablachidMKLM_tr(1,0,2) <<endl;
    	                        fs_micromorph3D_out<<"fdGnablachidMKLM_tr(1,1,0)= "<< fdGnablachidMKLM_tr(1,1,0) <<endl;
    	                        fs_micromorph3D_out<<"fdGnablachidMKLM_tr(1,1,1)= "<< fdGnablachidMKLM_tr(1,1,1) <<endl;
    	                        fs_micromorph3D_out<<"fdGnablachidMKLM_tr(1,1,2)= "<< fdGnablachidMKLM_tr(1,1,2) <<endl;
    	                        fs_micromorph3D_out<<"fdGnablachidMKLM_tr(1,2,0)= "<< fdGnablachidMKLM_tr(1,2,0) <<endl;
    	                        fs_micromorph3D_out<<"fdGnablachidMKLM_tr(1,2,1)= "<< fdGnablachidMKLM_tr(1,2,1) <<endl;
    	                        fs_micromorph3D_out<<"fdGnablachidMKLM_tr(1,2,2)= "<< fdGnablachidMKLM_tr(1,2,2) <<endl;
    	                        fs_micromorph3D_out<<"fdGnablachidMKLM_tr(2,0,0)= "<< fdGnablachidMKLM_tr(2,0,0) <<endl;
    	                        fs_micromorph3D_out<<"fdGnablachidMKLM_tr(2,0,1)= "<< fdGnablachidMKLM_tr(2,0,1) <<endl;
    	                        fs_micromorph3D_out<<"fdGnablachidMKLM_tr(2,0,2)= "<< fdGnablachidMKLM_tr(2,0,2) <<endl;
    	                        fs_micromorph3D_out<<"fdGnablachidMKLM_tr(2,1,0)= "<< fdGnablachidMKLM_tr(2,1,0) <<endl;
    	                        fs_micromorph3D_out<<"fdGnablachidMKLM_tr(2,1,1)= "<< fdGnablachidMKLM_tr(2,1,1) <<endl;
    	                        fs_micromorph3D_out<<"fdGnablachidMKLM_tr(2,1,2)= "<< fdGnablachidMKLM_tr(2,1,2) <<endl;
    	                        fs_micromorph3D_out<<"fdGnablachidMKLM_tr(2,2,0)= "<< fdGnablachidMKLM_tr(2,2,0) <<endl;
    	                        fs_micromorph3D_out<<"fdGnablachidMKLM_tr(2,2,1)= "<< fdGnablachidMKLM_tr(2,2,1) <<endl;
    	                        fs_micromorph3D_out<<"fdGnablachidMKLM_tr(2,2,2)= "<< fdGnablachidMKLM_tr(2,2,2) <<endl;

    							fs_micromorph3D_out << "fState_variables_IPs(IP,kc_nablachi0) = " << fState_variables_IPs(IP,kc_nablachi0) << endl;
    							fs_micromorph3D_out << "fState_variables_IPs(IP,kc_nablachi1) = " << fState_variables_IPs(IP,kc_nablachi1) << endl;
    							fs_micromorph3D_out << "fState_variables_IPs(IP,kc_nablachi2) = " << fState_variables_IPs(IP,kc_nablachi2) << endl;
    							fs_micromorph3D_out << "fState_variables_IPs(IP,kc_chi) = " << fState_variables_IPs(IP,kc_chi) << endl;
    							fs_micromorph3D_out << "fState_variables_IPs(IP,kc) = " << fState_variables_IPs(IP,kc) << endl;
*/
                                fdFYdc=-Aphi;
                                fdFYchidcchi=-Aphi_chi;

                                /* Inverse of  Fp */
                                fFp_inverse.Inverse(fFp);

                                /* Form inverse of Chi^p*/
                                fChip_inverse.Inverse(fChip);


                                /* Transpose of Fe */
                                fFeT.Transpose(fFe);

                                /* Inverse of Ce_n */
                                fCe_n_inverse.Inverse(fCe_n);

                                /* Inverse of PSIe_n*/
                                PSIe_n_inverse.Inverse(PSIe_n);
                                PSIe_n_inverseT.Transpose(PSIe_n_inverse);

                    /////////////////////////////////Forming fA1////////////////////////////////////////
                                ///// ([Fe][Ce-1][(dG/dS_tr)]T[Fp_n][Fp-1])T [Fe] //////////////////
                                ////////////////////////////////////////////////////////////////////
                                ////////////////////////////////////////////////////////////////////
                                fTemp_matrix_nsd_x_nsd2.MultATBC(fdGdS_tr,fFp_n,fFp_inverse);
								//fTemp_matrix_nsd_x_nsd.MultABC(fFeT,fFe,fCe_n_inverse);
								fTemp_matrix_nsd_x_nsd.MultATBC(fFe,fFe,fCe_n_inverse);
								/*fA1=(Fe^T).Fe.(Cen^-1).(dG/dStr^T).Fpn.Fp^-1*/
								fA1.MultAB(fTemp_matrix_nsd_x_nsd,fTemp_matrix_nsd_x_nsd2);
                                trfA1=fA1.Trace();
                                fdFYdS_fA1=dMatrixT::Dot(fdFYdS,fA1);

                                fTemp_matrix_nsd_x_nsd.Transpose(fA1);
                                fdFYdS_fA1T=dMatrixT::Dot(fdFYdS,fTemp_matrix_nsd_x_nsd);

                                dFYdScol1=dMatrixT::Dot(fdFYdS,fIdentity_matrix);
                   /////////////////////////////////////////////////////////////////////////////////////

                                /* Forming the matrix N */
                                fTemp_matrix_nsd_x_nsd2.MultATBC(fdGdS_tr,fFp_n,fFp_inverse);
                                fTemp_matrix_nsd_x_nsd.MultATBC(fChie,fFe,fCe_n_inverse);
                                fN1.MultAB(fTemp_matrix_nsd_x_nsd,fTemp_matrix_nsd_x_nsd2);

                                /* define trace of N */
                                trfN1=fN1.Trace();


                                /* define dFY/dS:N */
                                fdFYdS_fN1=dMatrixT::Dot(fdFYdS,fN1);

                                /* define dFY/dS:N^T */
                                fTemp_matrix_nsd_x_nsd.Transpose(fN1);
                                fdFYdS_fN1T=dMatrixT::Dot(fdFYdS,fTemp_matrix_nsd_x_nsd);


                                /* Forming the matrix D */
                                fTemp_matrix_nsd_x_nsd.MultABCT(fChie,PSIe_n_inverse,fdGchidSIGMA_tr);
                                fTemp_matrix_nsd_x_nsd2.MultATBC(PSIe_n_inverse,fCchie_n,fChip_n);
                                fD1.MultAB(fTemp_matrix_nsd_x_nsd,fTemp_matrix_nsd_x_nsd2);
                                fTemp_matrix_nsd_x_nsd.MultATBC(fFe,fD1,fChip_inverse);
                                fD1=fTemp_matrix_nsd_x_nsd;


                                /* define trace of D */
                                trfD1=fD1.Trace();

                                /* define dFYchi/dSIGMA_S:D */
                                fdFYchidSIGMA_fD1=dMatrixT::Dot(fdFYchidSIGMA,fD1);

                                /* define dFYchi/dSIGMA_S:D^T */
                                fTemp_matrix_nsd_x_nsd.Transpose(fD1);
                                fdFYchidSIGMA_fD1T=dMatrixT::Dot(fdFYchidSIGMA,fTemp_matrix_nsd_x_nsd);

                                /* define dFYchi/dSIGMA_S:1 */
                                dFYchidSIGMA_Scol1=dMatrixT::Dot(fdFYchidSIGMA,fIdentity_matrix);

                                /* define dFY/dS:D */
                                fdFYdS_fD1=dMatrixT::Dot(fdFYdS,fD1);

                                /* define dFY/dS:D^T */
                                fTemp_matrix_nsd_x_nsd.Transpose(fD1);
                                fdFYdS_fD1T=dMatrixT::Dot(fdFYdS,fTemp_matrix_nsd_x_nsd);



                                /* define dFYchi/dSIGMA_S:A*/
                                fdFYchidSIGMA_fA1=dMatrixT::Dot(fdFYchidSIGMA,fA1);



                                /* define dFYchi/dSIGMA_S:A^T*/
                                fTemp_matrix_nsd_x_nsd.Transpose(fA1);
                                fdFYchidSIGMA_fA1T=dMatrixT::Dot(fdFYchidSIGMA,fTemp_matrix_nsd_x_nsd);

                                /* define dFYchi/dSIGMA_S:N*/
                                fdFYchidSIGMA_fN1=dMatrixT::Dot(fdFYchidSIGMA,fN1);

                                /* define dFYchi/dSIGMA_S:N^T*/
                                fTemp_matrix_nsd_x_nsd.Transpose(fN1);
                                fdFYchidSIGMA_fN1T=dMatrixT::Dot(fdFYchidSIGMA,fTemp_matrix_nsd_x_nsd);

                                fTemp_matrix_nsd_x_nsd.MultATBC(PSIe_n_inverse,fCchie_n,fChip_n);
                                fTemp_matrix_nsd_x_nsd2.MultABCT(fChip_inverse,PSIe_n_inverse,fdGchidSIGMA_tr);
                                fTemp_matrix_nsd_x_nsd3.MultABC(fChip_n,fTemp_matrix_nsd_x_nsd2,fTemp_matrix_nsd_x_nsd);
                                VardeltaLbarchiP.MultAB(fTemp_matrix_nsd_x_nsd3,fChip_inverse);

                                fTemp_matrix_nsd_x_nsd.MultABCT(VardeltaLbarchiP,fCchie_n_inverse,PSIe_n);
                                fTemp_matrix_nsd_x_nsd2.MultABC(fCe_n_inverse,PSIe_n,fTemp_matrix_nsd_x_nsd);
                                VarfFp_Delgammachi.MultATB(fTemp_matrix_nsd_x_nsd3,fFe);

                                fTemp_matrix_nsd_x_nsd.MultATBC(PSIe_n,fFp_n,fFp_inverse);
                                fTemp_matrix_nsd_x_nsd2.MultABC(VardeltaLbarchiP,fCchie_n_inverse,fTemp_matrix_nsd_x_nsd);
                                fTemp_matrix_nsd_x_nsd.MultABC(fFe,fCe_n_inverse,PSIe_n);
                                fTemp_matrix_nsd_x_nsd3.MultAB(fTemp_matrix_nsd_x_nsd,fTemp_matrix_nsd_x_nsd2);
                                Term1.MultATB(fTemp_matrix_nsd_x_nsd3,fFe);
                                Term1_trace=Term1.Trace();
                                Term1_transpose.Transpose(Term1);

                                fdFYdS_Term1=dMatrixT::Dot(fdFYdS,Term1);
                                fdFYdS_Term1T=dMatrixT::Dot(fdFYdS,Term1_transpose);

                                fdFYchidSIGMA_Term1=dMatrixT::Dot(fdFYchidSIGMA,Term1);
                                fdFYchidSIGMA_Term1T=dMatrixT::Dot(fdFYchidSIGMA,Term1_transpose);

                                Term2.MultATB(fTemp_matrix_nsd_x_nsd3,fChie);
                                Term2_trace=Term2.Trace();
                                Term2_transpose.Transpose(Term2);

                                fdFYdS_Term2=dMatrixT::Dot(fdFYdS,Term2);
                                fdFYdS_Term2T=dMatrixT::Dot(fdFYdS,Term2_transpose);
                                fdFYchidSIGMA_Term2=dMatrixT::Dot(fdFYchidSIGMA,Term2);
                                fdFYchidSIGMA_Term2T=dMatrixT::Dot(fdFYchidSIGMA,Term2_transpose);


                                Comp11=0;
                                Comp12=0;
                                Comp21=0;
                                Comp22=0;

                                fConst1=(fMaterial_Params[kLambda]+fMaterial_Params[kTau])*trfA1*dFYdScol1
                                +(fMaterial_Params[kMu]+fMaterial_Params[kSigma_const])*fdFYdS_fA1
                                +(fMaterial_Params[kMu]+fMaterial_Params[kSigma_const])*fdFYdS_fA1T
                                +fMaterial_Params[kEta]*dFYdScol1*trfN1
                                +fMaterial_Params[kKappa]*fdFYdS_fN1T
                                +fMaterial_Params[kNu]*fdFYdS_fN1
                                -fdFYdc*fMaterial_Params[kHc]*fState_variables_n_IPs(IP,khc);


                                fConst2=(fMaterial_Params[kLambda]+fMaterial_Params[kTau])*Term1_trace*dFYdScol1
                                +(fMaterial_Params[kMu]+fMaterial_Params[kSigma_const])*fdFYdS_Term1
                                +(fMaterial_Params[kMu]+fMaterial_Params[kSigma_const])*fdFYdS_Term1T
                                +fMaterial_Params[kEta]*dFYdScol1*Term2_trace
                                +fMaterial_Params[kKappa]*fdFYdS_Term2
                                +fMaterial_Params[kNu]*fdFYdS_Term2T
                                +fMaterial_Params[kEta]*dFYdScol1*trfD1
                                +fMaterial_Params[kKappa]*fdFYdS_fD1
                                +fMaterial_Params[kNu]*fdFYdS_fD1T;

                                fConst3=(fMaterial_Params[kLambda]+2*fMaterial_Params[kTau])*dFYchidSIGMA_Scol1*trfA1
                                +(fMaterial_Params[kMu]+2*fMaterial_Params[kSigma_const])*fdFYchidSIGMA_fA1
                                +(fMaterial_Params[kMu]+2*fMaterial_Params[kSigma_const])*fdFYchidSIGMA_fA1T
                                +(2*fMaterial_Params[kEta]-fMaterial_Params[kTau])*dFYchidSIGMA_Scol1*trfN1
                                +(fMaterial_Params[kKappa]+fMaterial_Params[kNu]-fMaterial_Params[kSigma_const])*fdFYchidSIGMA_fN1T
                                +(fMaterial_Params[kKappa]+fMaterial_Params[kNu]-fMaterial_Params[kSigma_const])*fdFYchidSIGMA_fN1;


                                fConst4=(fMaterial_Params[kLambda]+2*fMaterial_Params[kTau])*dFYchidSIGMA_Scol1*Term1_trace
                                +(fMaterial_Params[kMu]+2*fMaterial_Params[kSigma_const])*fdFYchidSIGMA_Term1
                                +(fMaterial_Params[kMu]+2*fMaterial_Params[kSigma_const])*fdFYchidSIGMA_Term1T
                                +(2*fMaterial_Params[kEta]-fMaterial_Params[kTau])*dFYchidSIGMA_Scol1*Term2_trace
                                +(fMaterial_Params[kKappa]+fMaterial_Params[kNu]-fMaterial_Params[kSigma_const])*fdFYchidSIGMA_Term2
                                +(fMaterial_Params[kKappa]+fMaterial_Params[kNu]-fMaterial_Params[kSigma_const])*fdFYchidSIGMA_Term2T
                                +(2*fMaterial_Params[kEta]-fMaterial_Params[kTau])*dFYchidSIGMA_Scol1*trfD1
                                +(fMaterial_Params[kKappa]+fMaterial_Params[kNu]-fMaterial_Params[kSigma_const])*fdFYchidSIGMA_fD1
                                +(fMaterial_Params[kKappa]+fMaterial_Params[kNu]-fMaterial_Params[kSigma_const])*fdFYchidSIGMA_fD1T
                                -fdFYchidcchi*fMaterial_Params[kHc_chi]*fState_variables_n_IPs(IP,khc_chi);

                                //////////// Micro-Gradient Plasticity //////////////////////
                                if(Micro_gradient_Plasticity_Occurrence == 1)
                                {
                                    fTemp_matrix_one_x_one = -1*Aphi_nablachi/Norm_cohesion_nablachi;
                                	fdfnablachidcohesion_nablachi.SetToScaled(fTemp_matrix_one_x_one,cohesion_nablachi);
                                	Form_Coeff_delDelgamma_nablachi(IP);
                                }
                                //fs_micromorph3D_out << "Coeff_delDelgamma_nablachi = " << Coeff_delDelgamma_nablachi << endl;

                                if(PlasticityCondition==4)
                                {
                                    Comp22=fConst1+fConst2+fConst3+fConst4;
                                    Comp11=1/Comp22;
                                    Comp12=Comp11;
                                    Comp21=Comp11;
                                    Comp22=Comp11;
                                }


                                if(PlasticityCondition==1)// Macro scale plasticity
                                {
                                    Comp11=1/fConst1;
                                    Comp22=0.0;
                                    Comp12=0.0;
                                    Comp21=0.0;
                                    Comp33 = 0.0;
                                    Comp33= devfSPKinv_tr;
                                    Comp33 = 1/Comp33;
                                    Comp44 = 0.0;
                                    Comp44 = devfSPKinv_tr;
                                    Comp44*= devfSPKinv_tr;
                                    Comp44*= devfSPKinv_tr;
                                    Comp44 = 1/Comp44;
                                }

                                if(PlasticityCondition==2)// Micro scale plasticity
                                {
                                    /* delgamma   =0.0
                                       delgammachi = Comp22 x f2 where Comp22= 1/fConst4 */
                                    Comp11=0.0;
                                    Comp22=1/fConst4;
                                    Comp12=0.0;
                                    Comp21=0.0;


                                }

                                /* This condition below takes care of coupling plasticity by assigning different multiplier */
                                /* after solving global delgamma and delgammachi */
                                if(PlasticityCondition==3)// Macro and Micro scale coupled plasticity
                                {



                                  /* LocalConsistentTangent is used but it is not actual LocalConsistentTangent used above.
                                     It is used because of its dimensions 2x2 but nothing else */
                                    LocalConsistentTangent=0.0;
                                    LocalConsistentTangent(0,0)=fConst1;
                                    LocalConsistentTangent(0,1)=fConst2;
                                    LocalConsistentTangent(1,0)=fConst3;
                                    LocalConsistentTangent(1,1)=fConst4;


                                    LocalConsistentTangentInverse.Inverse(LocalConsistentTangent);

                                    Comp11=LocalConsistentTangentInverse(0,0);
                                    Comp12=LocalConsistentTangentInverse(0,1);
                                    Comp21=LocalConsistentTangentInverse(1,0);
                                    Comp22=LocalConsistentTangentInverse(1,1);

                                }
    			}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////// Local Plasticity algorithm for the Drucker-Prager with Cap ////////////////////////////////////
    			///////////////////////////////////////////////////////////////////////
    			///////////////////////////////////////////////////////////////////////
    			if (fMaterial_Params[kCapped_Model_Flag] == 1)
    			{

    				if(iPlasticityCheck==0 && fYield_function_tr>dYieldTrialTol  && fMicroYield_function_tr<= dYieldTrialTol && devfSPKinv_tr>=1)
    				{

    					fs_micromorph3D_out<<"MACRO-PLASTICITY FOR THE CAPPED MODEL"<<endl;
    					PlasticityCondition=1;
                        Macro_Plasticity_Occurrence = 1;
    					// initialize before iteration
    					fYield_function=fYield_function_tr;
    					fMicroYield_function=fMicroYield_function_tr;
    					fFe=fFe_tr;
    					fChie=fChie_tr;
    					fCchie=fCchie_tr;
    					//initial values for Fp is assumed the same with previous step
    					fFp=fFp_n;


    					SPK=fSPK_tr;
    					devSPK=fdevSPK_tr;
    					fTemp_matrix_one_x_one = fdevSPK_tr.ScalarProduct();
    					devfSPKinv_tr = sqrt(fTemp_matrix_one_x_one);
    					devfSPKinv=devfSPKinv_tr;
    					SIGMA_S=SIGMA_S_tr;
    					devSIGMA_S_inv=devSIGMA_S_inv_tr;
    					devSIGMA_S=devSIGMA_S_tr;
    					PSIe=PSIe_tr;
    					fdelDelgamma = 0.0;
    					fDelgamma = 0.0;
    					fDelgammachi=0.0;
    					fDelgammanablachi = 0.0;
    					Xphi_m=Xphi_m_n;
    					fMacfunc=fMacfunc_tr;
    					fPhiCap=fPhiCap_tr;
    					Xpsi_m=Xpsi_m_n;
    					fPsiCap=fPsiCap_tr;
    					cohesion=fState_variables_n_IPs(IP,kc);
    					Pbar=Pbar_tr;

						SIGMA=SIGMA_tr;
						fNormdevSIGMA=fNormdevSIGMA_tr;
						fdevSIGMA=fdevSIGMA_tr;
    					// iterate using Newton-Raphson to solve for fDelgamma
    					iter_count = 0;
    					fs_micromorph3D_out << "Gauss Point = " << IP << endl;
    					fs_micromorph3D_out << "Current Macro Yield function = " << fYield_function << endl;

    					while (fabs(fYield_function) > dAbsTol && iter_count < iIterationMax)
    					{
    						iter_count += 1;
    						//Form  dFe/dDgamma
    						fFp_inverse.Inverse(fFp);
    						dFedDelgamma=0.0;
    						fCe_n_inverse.Inverse(fCe_n);
    						fTemp_matrix_nsd_x_nsd.MultATBC(fdGdS_tr,fFp_n,fFp_inverse);
    						dFedDelgamma.MultABC(fFe,fCe_n_inverse,fTemp_matrix_nsd_x_nsd);
    						dFedDelgamma*=-1;

    						//Forming  dE^e/dDgamma  E^e: Elas. Lag. stn tensor
    						dEedDelgamma.MultATB(dFedDelgamma,fFe);
    						fTemp_matrix_nsd_x_nsd.MultATB(fFe,dFedDelgamma);
    						dEedDelgamma+=fTemp_matrix_nsd_x_nsd;
    						dEedDelgamma*=0.5;
    						dEedDelgamma_trace=dEedDelgamma.Trace();
    						//Forming  dEpsilon^e/dDgamma  Epsilone^e: Elastic micro strain tensor
    						dEpsilonedDelgamma.MultATB(dFedDelgamma,fChie);
    						dEpsilonedDelgamma_trace=dEpsilonedDelgamma.Trace();
    						dEpsilonedDelgamma_transpose.Transpose(dEpsilonedDelgamma);
    						//Forming  dS/dDgamma  S= SPK tensor

    						dSdDelgamma.SetToScaled((fMaterial_Params[kLambda]+fMaterial_Params[kTau])*dEedDelgamma_trace,fIdentity_matrix);

    						fTemp_matrix_nsd_x_nsd.SetToScaled(2*(fMaterial_Params[kMu]+fMaterial_Params[kSigma_const]),dEedDelgamma);
    						dSdDelgamma+=fTemp_matrix_nsd_x_nsd;

    						fTemp_matrix_nsd_x_nsd.SetToScaled(fMaterial_Params[kEta]*dEpsilonedDelgamma_trace,fIdentity_matrix);
    						dSdDelgamma+=fTemp_matrix_nsd_x_nsd;

    						fTemp_matrix_nsd_x_nsd.SetToScaled(fMaterial_Params[kKappa],dEpsilonedDelgamma);
    						dSdDelgamma+=fTemp_matrix_nsd_x_nsd;

    						fTemp_matrix_nsd_x_nsd.SetToScaled(fMaterial_Params[kNu],dEpsilonedDelgamma_transpose);
    						dSdDelgamma+=fTemp_matrix_nsd_x_nsd;

    						fs_micromorph3D_out<< "dSdDelgamma="<< dSdDelgamma<<endl;
    						dPdDelgamma=dSdDelgamma.Trace()/3;

    						//Forming  d(devS)/dDgamma  devS: dev. part of SPK tensor
    						ddevSdDelgamma.SetToScaled(dPdDelgamma,fIdentity_matrix);
    						ddevSdDelgamma*=-1;
    						ddevSdDelgamma+=dSdDelgamma;

    						fs_micromorph3D_out<< "devSPK="<< devSPK<<endl;

    						//Forming  d(||devS||)/dDgamma  devS: dev. part of SPK tensor
    						fTemp_matrix_nsd_x_nsd.SetToScaled(1/devfSPKinv,devSPK);
    						InvddevSdDelgamma=dMatrixT::Dot(devSPK,ddevSdDelgamma);
							if (fMacfunc > 0.0) signMacfunc = 1.0;
							else signMacfunc = 0.0;
    						//Forming  dc/dDgamma  c: cohesion
    						dcdDelgamma=fState_variables_n_IPs(IP,khc)*fMaterial_Params[kHc];
    						dKappadDelgamma=fState_variables_n_IPs(IP,khKappa)*fMaterial_Params[kHkappa];
    						dXphi_m_dDelgamma=-1.0*fMaterial_Params[kR]*(Aphi*dcdDelgamma-Bphi*dKappadDelgamma);
			    			dFphicapdDelgamma = 2*(fMacfunc/(Xphi_m*Xphi_m))*((fMacfunc/Xphi_m)*dXphi_m_dDelgamma
			    				- dKappadDelgamma + 3*dPdDelgamma);

							//Forming  d(||devS||)/dDgamma  devS: dev. part of SPK tensor
							fTemp_matrix_nsd_x_nsd.SetToScaled(1/devfSPKinv,devSPK);
							InvddevSdDelgamma=dMatrixT::Dot(ddevSdDelgamma,fTemp_matrix_nsd_x_nsd);

			    			dFYdDelgamma=InvddevSdDelgamma-dFphicapdDelgamma*(Aphi*cohesion-Bphi*Pbar)/(2*sqrt(fabs(fPhiCap)))-
			    			sqrt(fabs(fPhiCap))*(Aphi*dcdDelgamma-Bphi*dPdDelgamma);

    						//solve for fdelDelgamma
    						if (fabs(dFYdDelgamma) >= 1e-12) fdelDelgamma = -fYield_function/dFYdDelgamma;
    						else fdelDelgamma = 0.0;

    							fDelgamma+= fdelDelgamma;

    							cohesion=fState_variables_n_IPs(IP,kc)+fDelgamma*fState_variables_n_IPs(IP,khc)*fMaterial_Params[kHc];

    							fState_variables_IPs(IP,Kappa)=fState_variables_n_IPs(IP,Kappa)+
    							fDelgamma*fState_variables_n_IPs(IP,khKappa)*fMaterial_Params[kHkappa];

    							fState_variables_IPs(IP,kZkappa)=fState_variables_n_IPs(IP,kZkappa)+fDelgamma*fState_variables_n_IPs(IP,khKappa);


    							if (cohesion < 0.0)
    							{
    								cohesion = 0.0;
    								fState_variables_IPs(IP,kc)= fState_variables_n_IPs(IP,kc);
    							}

    							//update fFp
    							fCe_n_inverse.Inverse(fCe_n);
    							fTemp_matrix_nsd_x_nsd.MultABT(fCe_n_inverse,fdGdS_tr);
    							fTemp_matrix_nsd_x_nsd*=fDelgamma;
    							fTemp_matrix_nsd_x_nsd += fIdentity_matrix;
    							fFp.MultAB(fTemp_matrix_nsd_x_nsd,fFp_n);

    							//calculate fFp_Inverse
    							fFp_inverse.Inverse(fFp);

    							//calculate Fe
    							fFe.MultAB(fDeformation_Gradient,fFp_inverse);

    							//[fElastic_Right_Cauchy_Green_tensor] will be formed
    							fRight_Elastic_Cauchy_Green_tensor.MultATB(fFe,fFe);
    							if (fRight_Elastic_Cauchy_Green_tensor.Det()==0)
    								fRight_Elastic_Cauchy_Green_tensor = fIdentity_matrix;

    							//[fMicroElastic_Right_Cauchy_Green_tensor] will be formed
    							fMicroRight_Elastic_Cauchy_Green_tensor.MultATB(fChie,fChie);
    							if (fMicroRight_Elastic_Cauchy_Green_tensor.Det()==0)
    								fMicroRight_Elastic_Cauchy_Green_tensor = fIdentity_matrix;

    							//Update Elastic Lagrangian strain tensor E
    							Elastic_LagrangianStn=fIdentity_matrix;
    							Elastic_LagrangianStn*=-1;
    							Elastic_LagrangianStn+=fRight_Elastic_Cauchy_Green_tensor;
    							Elastic_LagrangianStn*=0.5;
    							Elastic_LagrangianStn_trace=Elastic_LagrangianStn.Trace();

    							//Update Elastic micro strain tensor will be formed in Bbar
    							Elastic_MicroStnTensor = fIdentity_matrix;
    							Elastic_MicroStnTensor*= -1;
    							//Micro Elastic deformation measure (PSIe)
    							PSIe.MultATB(fFe,fChie);
    							Elastic_MicroStnTensor += PSIe;
                                Elastic_MicroStnTensor_trace=Elastic_MicroStnTensor.Trace();
                                Elastic_MicroStnTensor_transpose.Transpose(Elastic_MicroStnTensor);

    							//update S stress
    							fTemp_matrix_nsd_x_nsd.SetToScaled(Elastic_LagrangianStn_trace*(fMaterial_Params[kLambda]+fMaterial_Params[kTau]),fIdentity_matrix);

    							SPK.SetToScaled(2*(fMaterial_Params[kMu]+fMaterial_Params[kSigma_const]),Elastic_LagrangianStn);
    							SPK+=fTemp_matrix_nsd_x_nsd;

    							fTemp_matrix_nsd_x_nsd.SetToScaled(Elastic_MicroStnTensor_trace*fMaterial_Params[kEta],fIdentity_matrix);
    							SPK+=fTemp_matrix_nsd_x_nsd;

    							fTemp_matrix_nsd_x_nsd.SetToScaled(fMaterial_Params[kKappa],Elastic_MicroStnTensor);
    							SPK+=fTemp_matrix_nsd_x_nsd;

    							fTemp_matrix_nsd_x_nsd.SetToScaled(fMaterial_Params[kNu],Elastic_MicroStnTensor_transpose);
    							SPK+=fTemp_matrix_nsd_x_nsd;

    							fs_micromorph3D_out<< "Second Piola Kirchhoff="<< SPK<<endl;

    							//calculate  devS stress
    							Pbar = SPK.Trace()/3;//Calculating the pressure term
    							devSPK.SetToScaled(Pbar,fIdentity_matrix);
    							devSPK*=-1;
    							devSPK+=SPK;
    							Temp_inv= devSPK.ScalarProduct();
    							devfSPKinv=sqrt(Temp_inv);

    							//Update Relative stress SIGMA_S
    							SIGMA_S.SetToScaled(Elastic_LagrangianStn_trace*fMaterial_Params[kTau],fIdentity_matrix);
    							// 2sigmaE
    							fTemp_matrix_nsd_x_nsd.SetToScaled(2*fMaterial_Params[kSigma_const],Elastic_LagrangianStn);
    							SIGMA_S+=fTemp_matrix_nsd_x_nsd;
    							//(eta-Tau)trEpsilon.1

    							fTemp_matrix_nsd_x_nsd.SetToScaled(Elastic_MicroStnTensor_trace*(fMaterial_Params[kEta]-fMaterial_Params[kTau]),fIdentity_matrix);
    							SIGMA_S+=fTemp_matrix_nsd_x_nsd;
    							//(nu-sigma)*Epsilon
    							fTemp_matrix_nsd_x_nsd.SetToScaled((fMaterial_Params[kNu]-fMaterial_Params[kSigma_const]),Elastic_MicroStnTensor);
    							SIGMA_S+=fTemp_matrix_nsd_x_nsd;
    							//(kappa-sigma)*Epsilon^T

    							fTemp_matrix_nsd_x_nsd.SetToScaled((fMaterial_Params[kKappa]-fMaterial_Params[kSigma_const]),Elastic_MicroStnTensor_transpose);
    							SIGMA_S+=fTemp_matrix_nsd_x_nsd;

    							fs_micromorph3D_out<< "SIGMA_S="<< SIGMA_S <<endl;

    							Pchibar=SIGMA_S.Trace()/3;//
                                devSIGMA_S.SetToScaled(Pchibar,fIdentity_matrix);
                                devSIGMA_S*=-1;
                                devSIGMA_S+=SIGMA_S;
                                //Calculate dev(SIGMA-S):dev(SIGMA-S)
                                Temp_inv= devSIGMA_S.ScalarProduct();
                                // Calculate ||dev(SIGMA-S)||
                                devSIGMA_S_inv=sqrt(Temp_inv);

                                fChip=fChip_n;
                                fChip_inverse.Inverse(fChip);

                                SIGMA= SIGMA_S;
                                SIGMA+= SPK;
                                fMeanSIGMA_e= SIGMA.Trace()/3;
                                fdevSIGMA.SetToScaled(fMeanSIGMA_e,fIdentity_matrix);
                                fdevSIGMA*=-1;
                                fdevSIGMA+=SIGMA;
                                Temp_inv= fdevSIGMA.ScalarProduct();
                                fNormdevSIGMA=sqrt(Temp_inv);

                                GXp = 0.0;

                                Xphi=fState_variables_IPs(IP,Kappa)-fMaterial_Params[kR]*(Aphi*cohesion-Bphi*fState_variables_IPs(IP,Kappa));
            					Xphi_m=-1.0*fMaterial_Params[kR]*(Aphi*cohesion-Bphi*fState_variables_IPs(IP,Kappa));
            					Xpsi_m=-1.0*fMaterial_Params[kR]*(Apsi*cohesion-Bpsi*fState_variables_IPs(IP,Kappa));
            					fMacfunc=0.5*(fabs(fState_variables_IPs(IP,Kappa)-3*Pbar)+fState_variables_IPs(IP,Kappa)-3*Pbar);
            					fPhiCap=1.0-fMacfunc*(fState_variables_IPs(IP,Kappa)-3*Pbar)/(Xphi_m*Xphi_m);
            					fPsiCap=1.0-fMacfunc*(fState_variables_IPs(IP,Kappa)-3*Pbar)/(Xpsi_m*Xpsi_m);

            					Xphi_chi_m=Xphi_chi_m_n;
            					Xpsi_chi_m=Xpsi_chi_m_n;
            					fMacfunc_chi=0.5*(fabs(fState_variables_n_IPs(IP,Kappa_chi)-3*Pchibar)+fState_variables_n_IPs(IP,Kappa_chi)-3*Pchibar);
            					fPhiCap_chi=1.0-fMacfunc_chi*(fState_variables_n_IPs(IP,Kappa_chi)-3*Pchibar)/(Xphi_chi_m*Xphi_chi_m);
            					fPsiCap_chi=1.0-fMacfunc_chi*(fState_variables_n_IPs(IP,Kappa_chi)-3*Pchibar)/(Xpsi_chi_m*Xpsi_chi_m);

    							// Calculate yield function with updated parameters
    							fYield_function=devfSPKinv-sqrt(fabs(fPhiCap))*(Aphi*cohesion-Bphi*Pbar);
    							fYield_function_check = fYield_function;
    							fMicroYield_function_check = devSIGMA_S_inv-sqrt(fabs(fPhiCap_chi))*(Aphi_chi*fState_variables_n_IPs(IP,kc_chi)-Bphi_chi*Pchibar);


    						}
    						fs_micromorph3D_out  << "Current relative residual = " << fabs(fYield_function/fYield_function_tr) << endl;
    					    fs_micromorph3D_out << "fFp = " << fFp << endl;
    					    fs_micromorph3D_out << "fYield_function = " << fYield_function << endl;
    					    fs_micromorph3D_out << "fDelgamma = " << fDelgamma << endl;
    				if (fabs(fYield_function) > 1e-1 || fDelgamma < 0.0)
    				{
                 		if (abs(fYield_function) > 1e-1)
                 		{
                 			fs_micromorph3D_out << "Local Delgamma Newton-Raphson algorithm for the Capped model did not approach to zero for MacroPlasticity" << endl;
                 			ExceptionT::GeneralFail(caller,"Local Delgamma Newton-Raphson algorithm for the Capped model did not approach to zero for MacroPlasticity_yield %e.", fYield_function);
                 		}
                 		if (fDelgamma < 0.0)
                 		{
                 			fs_micromorph3D_out << "Local Delgamma Newton-Raphson algorithm for the Capped model did not find positive Delgamma for MacroPlasticity" << endl;
                 			ExceptionT::GeneralFail(caller,"Local Delgamma Newton-Raphson algorithm for the Capped model did not find positive fDelgamma for MacroPlasticity %e.", fDelgamma);
                 		}
    				}
    				else
    				{
    					fState_variables_IPs(IP,kDelgammachi) = fDelgammachi;
    					fState_variables_IPs(IP,kDelgamma) = fDelgamma;
    					fState_variables_IPs(IP,kc) = cohesion;
    					fState_variables_IPs(IP,kc_chi) = fState_variables_n_IPs(IP,kc_chi);
    					fState_variables_IPs(IP,Kappa_chi) = fState_variables_n_IPs(IP,Kappa_chi);
    					fState_variables_IPs(IP,kZkappa_chi)=fState_variables_n_IPs(IP,kZkappa_chi);
						fState_variables_IPs(IP,kc_nablachi0) =  fState_variables_n_IPs(IP,kc_nablachi0);
						fState_variables_IPs(IP,kc_nablachi1) =  fState_variables_n_IPs(IP,kc_nablachi1);
						fState_variables_IPs(IP,kc_nablachi2) =  fState_variables_n_IPs(IP,kc_nablachi2);
						fState_variables_IPs(IP,Kappa_nablachi0) =  fState_variables_n_IPs(IP,Kappa_nablachi0);
						fState_variables_IPs(IP,Kappa_nablachi1) =  fState_variables_n_IPs(IP,Kappa_nablachi1);
						fState_variables_IPs(IP,Kappa_nablachi2) =  fState_variables_n_IPs(IP,Kappa_nablachi2);
						fState_variables_IPs(IP,kDelgammanablachi) = fDelgammanablachi;
    					fs_micromorph3D_out << "fDelgamma = " << fDelgamma << endl;
    					fs_micromorph3D_out << "fState_variables_IPs(IP,kc_chi) = " << fState_variables_IPs(IP,kc_chi) << endl;
    					fs_micromorph3D_out << "fState_variables_IPs(IP,kc) = " << fState_variables_IPs(IP,kc) << endl;
    					fs_micromorph3D_out << "fState_variables_IPs(IP,kDelgammachi) = " << fState_variables_IPs(IP,kDelgammachi) << endl;
    					fs_micromorph3D_out << "fState_variables_IPs(IP,kDelgamma) = " << fState_variables_IPs(IP,kDelgamma) << endl;
    				}
    				}
    				fs_micromorph3D_out  << "Current relative residual = " << fabs(fYield_function/fYield_function_tr) << endl;


    				if(iPlasticityCheck==0 && fYield_function_tr>dYieldTrialTol && devfSPKinv_tr <= 1  && fMicroYield_function_tr<= dYieldTrialTol)
							{

								fs_micromorph3D_out<<"MACRO-PLASTICITY FOR THE CAPPED MODEL ON HYDROSTATIC COMPRESSION"<<endl;
								PlasticityCondition=1;
								Macro_Plasticity_Occurrence = 1;
								// initialize before iteration
								fYield_function=fYield_function_tr;
								fMicroYield_function=fMicroYield_function_tr;
								fFe=fFe_tr;
								fChie=fChie_tr;
								fCchie=fCchie_tr;
								//initial values for Fp is assumed the same with previous step
								fFp=fFp_n;


								SPK=fSPK_tr;
								devSPK=fdevSPK_tr;
								fTemp_matrix_one_x_one = fdevSPK_tr.ScalarProduct();
								devfSPKinv_tr = sqrt(fTemp_matrix_one_x_one);
								devfSPKinv=devfSPKinv_tr;
								SIGMA_S=SIGMA_S_tr;
								devSIGMA_S_inv=devSIGMA_S_inv_tr;
								devSIGMA_S=devSIGMA_S_tr;
								SIGMA=SIGMA_tr;
								fNormdevSIGMA=fNormdevSIGMA_tr;
								fdevSIGMA=fdevSIGMA_tr;
								PSIe=PSIe_tr;
								fdelDelgamma = 0.0;
								fDelgamma = 0.0;
								fDelgammachi=0.0;
								fDelgammanablachi = 0.0;
								Xphi_m=Xphi_m_n;
								fMacfunc=fMacfunc_tr;
								fPhiCap=fPhiCap_tr;
								Xpsi_m=Xpsi_m_n;
								fPsiCap=fPsiCap_tr;
								cohesion=fState_variables_n_IPs(IP,kc);
								Pbar=Pbar_tr;
								// iterate using Newton-Raphson to solve for fDelgamma
								iter_count = 0;
								fs_micromorph3D_out << "Gauss Point = " << IP << endl;
								fs_micromorph3D_out << "Current Macro Yield function = " << fYield_function << endl;

								while (fabs(fYield_function) > dAbsTol && iter_count < iIterationMax)
								{
									iter_count += 1;
									//Form  dFe/dDgamma
									fFp_inverse.Inverse(fFp);
									dFedDelgamma=0.0;
									fCe_n_inverse.Inverse(fCe_n);
									fTemp_matrix_nsd_x_nsd.MultATBC(fdGdS_tr,fFp_n,fFp_inverse);
									dFedDelgamma.MultABC(fFe,fCe_n_inverse,fTemp_matrix_nsd_x_nsd);
									dFedDelgamma*=-1;

									//Forming  dE^e/dDgamma  E^e: Elas. Lag. stn tensor
									dEedDelgamma.MultATB(dFedDelgamma,fFe);
									fTemp_matrix_nsd_x_nsd.MultATB(fFe,dFedDelgamma);
									dEedDelgamma+=fTemp_matrix_nsd_x_nsd;
									dEedDelgamma*=0.5;
									dEedDelgamma_trace=dEedDelgamma.Trace();
									//Forming  dEpsilon^e/dDgamma  Epsilone^e: Elastic micro strain tensor
									dEpsilonedDelgamma.MultATB(dFedDelgamma,fChie);
									dEpsilonedDelgamma_transpose.Transpose(dEpsilonedDelgamma);
									//Forming  dS/dDgamma  S= SPK tensor

									dSdDelgamma.SetToScaled((fMaterial_Params[kLambda]+fMaterial_Params[kTau])*dEedDelgamma_trace,fIdentity_matrix);

									fTemp_matrix_nsd_x_nsd.SetToScaled(2*(fMaterial_Params[kMu]+fMaterial_Params[kSigma_const]),dEedDelgamma);
									dSdDelgamma+=fTemp_matrix_nsd_x_nsd;

									Temp_inv=dEpsilonedDelgamma.Trace();
									fTemp_matrix_nsd_x_nsd.SetToScaled(fMaterial_Params[kEta]*Temp_inv,fIdentity_matrix);
									dSdDelgamma+=fTemp_matrix_nsd_x_nsd;

									fTemp_matrix_nsd_x_nsd.SetToScaled(fMaterial_Params[kKappa],dEpsilonedDelgamma);
									dSdDelgamma+=fTemp_matrix_nsd_x_nsd;

									fTemp_matrix_nsd_x_nsd.SetToScaled(fMaterial_Params[kNu],dEpsilonedDelgamma_transpose);
									dSdDelgamma+=fTemp_matrix_nsd_x_nsd;

									fs_micromorph3D_out<< "dSdDelgamma="<< dSdDelgamma<<endl;
									dPdDelgamma=dSdDelgamma.Trace()/3;

									if (fMacfunc > 0.0) signMacfunc = 1.0;
									else signMacfunc = 0.0;
									//Forming  dc/dDgamma  c: cohesion
									dcdDelgamma=fState_variables_n_IPs(IP,khc)*fMaterial_Params[kHc];
									dKappadDelgamma=fState_variables_n_IPs(IP,khKappa)*fMaterial_Params[kHkappa];


									dFYdDelgamma=-dPdDelgamma-(1.0/3.0)*fMaterial_Params[kR]*(Aphi*dcdDelgamma-Bphi*dKappadDelgamma);

									//solve for fdelDelgamma
									if (fabs(dFYdDelgamma) >= 1e-12) fdelDelgamma = -fYield_function/dFYdDelgamma;
									else fdelDelgamma = 0.0;

										fDelgamma+= fdelDelgamma;

										cohesion=fState_variables_n_IPs(IP,kc)+fDelgamma*fState_variables_n_IPs(IP,khc)*fMaterial_Params[kHc];

										fState_variables_IPs(IP,Kappa)=fState_variables_n_IPs(IP,Kappa)+
										fDelgamma*fState_variables_n_IPs(IP,khKappa)*fMaterial_Params[kHkappa];

										fState_variables_IPs(IP,kZkappa)=fState_variables_n_IPs(IP,kZkappa)+fDelgamma*fState_variables_n_IPs(IP,khKappa);


										if (cohesion < 0.0)
										{
											cohesion = 0.0;
											fState_variables_IPs(IP,kc)= fState_variables_n_IPs(IP,kc);
										}

										//update fFp
										fCe_n_inverse.Inverse(fCe_n);
										fTemp_matrix_nsd_x_nsd.MultABT(fCe_n_inverse,fdGdS_tr);
										fTemp_matrix_nsd_x_nsd*=fDelgamma;
										fTemp_matrix_nsd_x_nsd += fIdentity_matrix;
										fFp.MultAB(fTemp_matrix_nsd_x_nsd,fFp_n);

										//calculate fFp_Inverse
										fFp_inverse.Inverse(fFp);

										//calculate Fe
										fFe.MultAB(fDeformation_Gradient,fFp_inverse);

										//[fElastic_Right_Cauchy_Green_tensor] will be formed
										fRight_Elastic_Cauchy_Green_tensor.MultATB(fFe,fFe);
										if (fRight_Elastic_Cauchy_Green_tensor.Det()==0)
											fRight_Elastic_Cauchy_Green_tensor = fIdentity_matrix;

										//[fMicroElastic_Right_Cauchy_Green_tensor] will be formed
										fMicroRight_Elastic_Cauchy_Green_tensor.MultATB(fChie,fChie);
										if (fMicroRight_Elastic_Cauchy_Green_tensor.Det()==0)
											fMicroRight_Elastic_Cauchy_Green_tensor = fIdentity_matrix;

										//Update Elastic Lagrangian strain tensor E
										Elastic_LagrangianStn=fIdentity_matrix;
										Elastic_LagrangianStn*=-1;
										Elastic_LagrangianStn+=fRight_Elastic_Cauchy_Green_tensor;
										Elastic_LagrangianStn*=0.5;

										//Update Elastic micro strain tensor will be formed in Bbar
										Elastic_MicroStnTensor = fIdentity_matrix;
										Elastic_MicroStnTensor*= -1;
										//Micro Elastic deformation measure (PSIe)
										PSIe.MultATB(fFe,fChie);
										Elastic_MicroStnTensor += PSIe;

										//update S stress
										Temp_inv=0.0;
										Temp_inv=Elastic_LagrangianStn.Trace();//Calculating the tr(E) and keep in temp. var.
										fTemp_matrix_nsd_x_nsd.SetToScaled(Temp_inv*(fMaterial_Params[kLambda]+fMaterial_Params[kTau]),fIdentity_matrix);

										SPK.SetToScaled(2*(fMaterial_Params[kMu]+fMaterial_Params[kSigma_const]),Elastic_LagrangianStn);
										SPK+=fTemp_matrix_nsd_x_nsd;

										Temp_inv=0.0;
										Temp_inv=Elastic_MicroStnTensor.Trace();
										fTemp_matrix_nsd_x_nsd.SetToScaled(Temp_inv*fMaterial_Params[kEta],fIdentity_matrix);
										SPK+=fTemp_matrix_nsd_x_nsd;

										fTemp_matrix_nsd_x_nsd.SetToScaled(fMaterial_Params[kKappa],Elastic_MicroStnTensor);
										SPK+=fTemp_matrix_nsd_x_nsd;

										fTemp_matrix_nsd_x_nsd2.Transpose(Elastic_MicroStnTensor);
										fTemp_matrix_nsd_x_nsd.SetToScaled(fMaterial_Params[kNu],fTemp_matrix_nsd_x_nsd2);
										SPK+=fTemp_matrix_nsd_x_nsd;

										fs_micromorph3D_out<< "Second Piola Kirchhoff="<< SPK<<endl;

										//calculate  devS stress
										Pbar = SPK.Trace()/3;//Calculating the pressure term
										devSPK.SetToScaled(Pbar,fIdentity_matrix);
										devSPK*=-1;
										devSPK+=SPK;
										Temp_inv= devSPK.ScalarProduct();
										devfSPKinv=sqrt(Temp_inv);

										//Update Relative stress SIGMA_S
										Temp_inv=Elastic_LagrangianStn.Trace();
										SIGMA_S.SetToScaled(Temp_inv*fMaterial_Params[kTau],fIdentity_matrix);
										// 2sigmaE
										fTemp_matrix_nsd_x_nsd.SetToScaled(2*fMaterial_Params[kSigma_const],Elastic_LagrangianStn);
										SIGMA_S+=fTemp_matrix_nsd_x_nsd;
										//(eta-Tau)trEpsilon.1
										Temp_inv=Elastic_MicroStnTensor.Trace();
										fTemp_matrix_nsd_x_nsd.SetToScaled(Temp_inv*(fMaterial_Params[kEta]-fMaterial_Params[kTau]),fIdentity_matrix);
										SIGMA_S+=fTemp_matrix_nsd_x_nsd;
										//(nu-sigma)*Epsilon
										fTemp_matrix_nsd_x_nsd.SetToScaled((fMaterial_Params[kNu]-fMaterial_Params[kSigma_const]),Elastic_MicroStnTensor);
										SIGMA_S+=fTemp_matrix_nsd_x_nsd;
										//(kappa-sigma)*Epsilon^T
										fTemp_matrix_nsd_x_nsd2.Transpose(Elastic_MicroStnTensor);
										fTemp_matrix_nsd_x_nsd.SetToScaled((fMaterial_Params[kKappa]-fMaterial_Params[kSigma_const]),fTemp_matrix_nsd_x_nsd2);
										SIGMA_S+=fTemp_matrix_nsd_x_nsd;

										fs_micromorph3D_out<< "SIGMA_S="<< SIGMA_S <<endl;

										Pchibar=SIGMA_S.Trace()/3;//
										devSIGMA_S.SetToScaled(Pchibar,fIdentity_matrix);
										devSIGMA_S*=-1;
										devSIGMA_S+=SIGMA_S;
										//Calculate dev(SIGMA-S):dev(SIGMA-S)
										Temp_inv= devSIGMA_S.ScalarProduct();
										// Calculate ||dev(SIGMA-S)||
										devSIGMA_S_inv=sqrt(Temp_inv);

		                                SIGMA= SIGMA_S;
		                                SIGMA+= SPK;
		                                fMeanSIGMA_e= SIGMA.Trace()/3;
		                                fdevSIGMA.SetToScaled(fMeanSIGMA_e,fIdentity_matrix);
		                                fdevSIGMA*=-1;
		                                fdevSIGMA+=SIGMA;
		                                Temp_inv= fdevSIGMA.ScalarProduct();
		                                fNormdevSIGMA=sqrt(Temp_inv);

										fChip=fChip_n;
										fChip_inverse.Inverse(fChip);

										GXp = 0.0;

										Xphi=fState_variables_IPs(IP,Kappa)-fMaterial_Params[kR]*(Aphi*cohesion-Bphi*fState_variables_IPs(IP,Kappa));
										Xphi_m=-1.0*fMaterial_Params[kR]*(Aphi*cohesion-Bphi*fState_variables_IPs(IP,Kappa));
										Xpsi_m=-1.0*fMaterial_Params[kR]*(Apsi*cohesion-Bpsi*fState_variables_IPs(IP,Kappa));
										fMacfunc=0.5*(fabs(fState_variables_IPs(IP,Kappa)-3*Pbar)+fState_variables_IPs(IP,Kappa)-3*Pbar);
										fPhiCap=1.0-fMacfunc*(fState_variables_IPs(IP,Kappa)-3*Pbar)/(Xphi_m*Xphi_m);
										fPsiCap=1.0-fMacfunc*(fState_variables_IPs(IP,Kappa)-3*Pbar)/(Xpsi_m*Xpsi_m);

										Xphi_chi_m=Xphi_chi_m_n;
										Xpsi_chi_m=Xpsi_chi_m_n;
										fMacfunc_chi=0.5*(fabs(fState_variables_n_IPs(IP,Kappa_chi)-3*Pchibar)+fState_variables_n_IPs(IP,Kappa_chi)-3*Pchibar);
										fPhiCap_chi=1.0-fMacfunc_chi*(fState_variables_n_IPs(IP,Kappa_chi)-3*Pchibar)/(Xphi_chi_m*Xphi_chi_m);
										fPsiCap_chi=1.0-fMacfunc_chi*(fState_variables_n_IPs(IP,Kappa_chi)-3*Pchibar)/(Xpsi_chi_m*Xpsi_chi_m);

										// Calculate yield function with updated parameters
										fYield_function=-Pbar+(1.0/3.0)*Xphi_m;
										fYield_function_check = fYield_function;
										fMicroYield_function_check = devSIGMA_S_inv-sqrt(fabs(fPhiCap_chi))*(Aphi_chi*fState_variables_n_IPs(IP,kc_chi)-Bphi_chi*Pchibar);


									}
									fs_micromorph3D_out  << "Current relative residual = " << fabs(fYield_function/fYield_function_tr) << endl;
									fs_micromorph3D_out << "fFp = " << fFp << endl;
									fs_micromorph3D_out << "fYield_function = " << fYield_function << endl;
									fs_micromorph3D_out << "fDelgamma = " << fDelgamma << endl;
							if (fabs(fYield_function) > 1e-1 || fDelgamma < 0.0)
							{
								if (abs(fYield_function) > 1e-1)
								{
									fs_micromorph3D_out << "Local Delgamma Newton-Raphson algorithm for the Capped model did not approach to zero for MacroPlasticity" << endl;
									ExceptionT::GeneralFail(caller,"Local Delgamma Newton-Raphson algorithm for the Capped model did not approach to zero for MacroPlasticity_yield %e.", fYield_function);
								}
								if (fDelgamma < 0.0)
								{
									fs_micromorph3D_out << "Local Delgamma Newton-Raphson algorithm for the Capped model did not find positive Delgamma for MacroPlasticity" << endl;
									ExceptionT::GeneralFail(caller,"Local Delgamma Newton-Raphson algorithm for the Capped model did not find positive fDelgamma for MacroPlasticity %e.", fDelgamma);
								}
							}
							else
							{
								fState_variables_IPs(IP,kDelgammachi) = fDelgammachi;
								fState_variables_IPs(IP,kDelgamma) = fDelgamma;
								fState_variables_IPs(IP,kc) = cohesion;
								fState_variables_IPs(IP,kc_chi) = fState_variables_n_IPs(IP,kc_chi);
								fState_variables_IPs(IP,Kappa_chi) = fState_variables_n_IPs(IP,Kappa_chi);
								fState_variables_IPs(IP,kZkappa_chi)=fState_variables_n_IPs(IP,kZkappa_chi);
								fState_variables_IPs(IP,kc_nablachi0) =  fState_variables_n_IPs(IP,kc_nablachi0);
								fState_variables_IPs(IP,kc_nablachi1) =  fState_variables_n_IPs(IP,kc_nablachi1);
								fState_variables_IPs(IP,kc_nablachi2) =  fState_variables_n_IPs(IP,kc_nablachi2);
								fState_variables_IPs(IP,Kappa_nablachi0) =  fState_variables_n_IPs(IP,Kappa_nablachi0);
								fState_variables_IPs(IP,Kappa_nablachi1) =  fState_variables_n_IPs(IP,Kappa_nablachi1);
								fState_variables_IPs(IP,Kappa_nablachi2) =  fState_variables_n_IPs(IP,Kappa_nablachi2);
								fState_variables_IPs(IP,kDelgammanablachi) = fDelgammanablachi;
								fs_micromorph3D_out << "fDelgamma = " << fDelgamma << endl;
								fs_micromorph3D_out << "fState_variables_IPs(IP,kc_chi) = " << fState_variables_IPs(IP,kc_chi) << endl;
								fs_micromorph3D_out << "fState_variables_IPs(IP,kc) = " << fState_variables_IPs(IP,kc) << endl;
								fs_micromorph3D_out << "fState_variables_IPs(IP,kDelgammachi) = " << fState_variables_IPs(IP,kDelgammachi) << endl;
								fs_micromorph3D_out << "fState_variables_IPs(IP,kDelgamma) = " << fState_variables_IPs(IP,kDelgamma) << endl;
							}
							}

    				//}//end of the Macro-plasticity, micro-elasticity loop


    				if(iPlasticityCheck==0 && fMicroYield_function_tr>dYieldTrialTol && fYield_function_tr<= dYieldTrialTol)//Macro-elastic, Micro-plastic
                             {
								fs_micromorph3D_out<<"MICRO-PLASTICITY FOR CAP MODEL "<<endl;
								PlasticityCondition=2;
								Micro_Plasticity_Occurrence = 1;
								//initialize before iteration
								fYield_function=fYield_function_tr;
								fMicroYield_function=fMicroYield_function_tr;

								fFe=fFe_tr;
								fChie=fChie_tr;
								fCchie=fCchie_tr;
								// initial values for Fp and Chip are assumed the same with previous step
								fFp=fFp_n;
								fChip=fChip_n;

								SPK=fSPK_tr;
								devSPK=fdevSPK_tr;
								devfSPKinv=devfSPKinv_tr;

								SIGMA_S=SIGMA_S_tr;
								devSIGMA_S=devSIGMA_S_tr;
								devSIGMA_S_inv=devSIGMA_S_inv_tr;
								Elastic_LagrangianStn=Elastic_LagrangianStn_tr;

								SIGMA=SIGMA_tr;
								fNormdevSIGMA=fNormdevSIGMA_tr;
								fdevSIGMA=fdevSIGMA_tr;
								fMeanSIGMA_e=fMeanSIGMA_etr;

								fdelDelgammachi = 0.0;
								fDelgammachi=0.0;
								fDelgamma=0.0;
								fDelgammanablachi = 0.0;
								Xphi_chi_m=Xphi_chi_m_n;
								Xpsi_chi_m=Xpsi_chi_m_n;
								fMacfunc_chi=fMacfunc_chi_tr;
								fPhiCap_chi=fPhiCap_chi_tr;
								fPsiCap_chi=fPsiCap_chi_tr;
								cohesion_chi= fState_variables_n_IPs(IP,kc_chi);


								//iterate using Newton-Raphson to solve for fDelgamma
								iter_count = 0;
								fs_micromorph3D_out<< "Gauss Point = "<< IP <<endl;
								fs_micromorph3D_out << "Current  Micro Yield function = " << fMicroYield_function << endl;
                                 while (fabs(fMicroYield_function) > dAbsTol && iter_count < iIterationMax)                //while (iter_count <10)
                                 {

                                     // Solvig loop for fDelgammachi
                                     iter_count += 1;
                                     //Form inverse of Chi^p
                                     fChip_inverse.Inverse(fChip);

                                     //dFe/dDgammachi =0 by definition

                                     //Form dChip/dDgammachi
                                     fTemp_matrix_nsd_x_nsd.MultATBC(PSIe_n_inverse,fCchie_n,fChip_n);
                                     dChipdDelgammachi.MultABC(PSIe_n_inverse,fdGchidSIGMA_tr_transpose,fTemp_matrix_nsd_x_nsd);

                                     //Forming dChie/dDgammachi
                                     dChiedDelgammachi.MultABC(fChie,dChipdDelgammachi,fChip_inverse);
                                     dChiedDelgammachi*=-1;

                                     fTemp_matrix_nsd_x_nsd.MultABC(fChip_inverse,dChipdDelgammachi,fChip_inverse);
									 dDeltaLbarchiPdDelgammachi.MultAB(fChip_n,fTemp_matrix_nsd_x_nsd);

									 fTemp_matrix_nsd_x_nsd.MultABCT(dDeltaLbarchiPdDelgammachi,fCchie_n_inverse,PSIe_n);
									 fTemp_matrix_nsd_x_nsd2.MultABC(fCe_n_inverse,PSIe_n,fTemp_matrix_nsd_x_nsd);
									 dFpdDelgammachi.MultAB(fTemp_matrix_nsd_x_nsd2,fFp_n);

									 dFedDelgammachi.MultABC(fFe,dFpdDelgammachi,fFp_inverse);
									 dFedDelgammachi*=-1;

									 //Forming dChie/dDgammachi
									 dChiedDelgammachi.MultABC(fChie,dChipdDelgammachi,fChip_inverse);
									 dChiedDelgammachi*=-1;

									 //Forming dEpsilone/dDelgammachi
									 dEpsilonedDelgammachi=0.0;
									 fTemp_matrix_nsd_x_nsd.MultATB(dFedDelgammachi,fChie);
									 dEpsilonedDelgammachi.MultATB(fFe,dChiedDelgammachi);
									 dEpsilonedDelgammachi+= fTemp_matrix_nsd_x_nsd;
									 fTemp_matrix_nsd_x_nsd2.Transpose(dEpsilonedDelgammachi);
									 symdEpsilonedDelgammachi = dEpsilonedDelgammachi;
									 symdEpsilonedDelgammachi+= fTemp_matrix_nsd_x_nsd2;
									 dEpsilonedDelgammachi_trace=dEpsilonedDelgammachi.Trace();

									 dEedDelgammachi.MultATB(dFedDelgammachi,fFe);
									 fTemp_matrix_nsd_x_nsd.MultATB(fFe,dFedDelgammachi);
									 dEedDelgammachi+=fTemp_matrix_nsd_x_nsd;
									 dEedDelgammachi*=0.5;
									 dEedDelgammachi_trace=dEedDelgammachi.Trace();
									 //Forming  d(SIGMA)/dDgammachi tensor

									 dSIGMAdDelgammachi.SetToScaled((fMaterial_Params[kLambda]+2*fMaterial_Params[kTau])*dEedDelgammachi_trace,fIdentity_matrix);

									 fTemp_matrix_nsd_x_nsd.SetToScaled(2*(fMaterial_Params[kMu]+2*fMaterial_Params[kSigma_const]),dEedDelgammachi);
									 dSIGMAdDelgammachi+=fTemp_matrix_nsd_x_nsd;

									 fTemp_matrix_nsd_x_nsd.SetToScaled((2*fMaterial_Params[kEta]-fMaterial_Params[kTau])*dEpsilonedDelgammachi_trace,fIdentity_matrix);
									 dSIGMAdDelgammachi+=fTemp_matrix_nsd_x_nsd;

									 fTemp_matrix_nsd_x_nsd.SetToScaled((fMaterial_Params[kKappa]+fMaterial_Params[kNu]-fMaterial_Params[kSigma_const]),symdEpsilonedDelgammachi);
									 dSIGMAdDelgammachi+=fTemp_matrix_nsd_x_nsd;

									 //Forming  dPchi/dDgammachi (scalar) Pchi: pressure for micro-scale  dPchi/dDgammachi= (1/3)1:dSIGMA_S/dDgammachi
									 fMeandSIGMAdDelgammachi=dSIGMAdDelgammachi.Trace()/3;

									 //Forming  d(dev(SIGMA))/dDgammachi  dev(SIGMA): dev. part of SIGMA-S (relative stress) tensor
									 ddevSIGMAdDelgammachi.SetToScaled(fMeandSIGMAdDelgammachi,fIdentity_matrix);
									 ddevSIGMAdDelgammachi*=-1;
									 ddevSIGMAdDelgammachi+=dSIGMAdDelgammachi;


									 //Forming  d(||dev(SIGMA)||)/dDgammachi  dev(SIGMA): dev. part of Relative stress (SIGMA-S) tensor
									 //IF ONLY ETA IS CHOSEN THE NEXT TWO LINES FAIL MAY FAIL BECAUSE devSIGMA_S_inv=0.0, AN IF STATEMENT MAY BE PUT TO GET RID OF ZERO DIVISION
									 //OR CAN OTHER SHEAR RELATED TERM CAN BE CHOOSEN SUCH AS KAPPA

									 fTemp_matrix_nsd_x_nsd.SetToScaled(1/fNormdevSIGMA,fdevSIGMA);
									 dNormdevSIGMAdDelgammachi=dMatrixT::Dot(ddevSIGMAdDelgammachi,fTemp_matrix_nsd_x_nsd);


                                     //Forming  dcx/dDgammax  cx:micro-cohesion
                                     dcchidDelgammachi=fState_variables_n_IPs(IP,khc_chi)*fMaterial_Params[kHc_chi];
                                     dKappachidDelgammachi=fState_variables_n_IPs(IP,khKappa_chi)*fMaterial_Params[kHKappa_chi];
                                     dXphi_chi_m_dDelgammachi=-1*fMaterial_Params[kR_chi]*(Aphi_chi*dcchidDelgammachi-Bphi_chi*dKappachidDelgammachi);
                                     dFphichicapdDelgammachi=(2*fMacfunc_chi/(Xphi_chi_m*Xphi_chi_m))*((fMacfunc_chi/(Xphi_chi_m))*dXphi_chi_m_dDelgammachi-
                                    		 dKappachidDelgammachi+3*fMeandSIGMAdDelgammachi);
                                     //assemble the consistent tangent

                                     dFYchidDelgammachi=dNormdevSIGMAdDelgammachi-dFphichicapdDelgammachi*(Aphi_chi*cohesion_chi-Bphi_chi*fMeanSIGMA_e)/(2*sqrt(fabs(fPhiCap_chi)))
                                     -sqrt(fabs(fPhiCap_chi))*(Aphi_chi*dcchidDelgammachi-Bphi_chi*fMeandSIGMAdDelgammachi);

                                     //fs_micromorph3D_out<<"dFYchidDelgammachi="<<dFYchidDelgammachi<<endl;
                                     //solve for fdelDelgamma
                                     //if (dFYchidDelgammachi != 0.0) fdelDelgammachi = -fMicroYield_function/dFYchidDelgammachi;
                                     if (fabs(dFYchidDelgammachi)>=1e-10) fdelDelgammachi = -fMicroYield_function/dFYchidDelgammachi;
                                     else fdelDelgammachi = 0.0;

                                     //update fDelgammachi
                                     fDelgammachi += fdelDelgammachi;
                                     fState_variables_IPs(IP,kDelgammachi) = fDelgammachi;


                                     //update cx (c_chi) ISVs
                                     cohesion_chi= fState_variables_n_IPs(IP,kc_chi)
                                     + fDelgammachi*fState_variables_n_IPs(IP,khc_chi)*fMaterial_Params[kHc_chi];

         							 fState_variables_IPs(IP,Kappa_chi)=fState_variables_n_IPs(IP,Kappa_chi)+
         							 fDelgammachi*fState_variables_n_IPs(IP,khKappa_chi)*fMaterial_Params[kHKappa_chi];

         							 fState_variables_IPs(IP,kZkappa_chi)=fState_variables_n_IPs(IP,kZkappa_chi)+
         							 fDelgammachi*fState_variables_n_IPs(IP,khKappa_chi);

             						if (cohesion_chi < 0.0)
             						{
             							cohesion_chi = 0.0;
             							fState_variables_IPs(IP,kc_chi)= fState_variables_n_IPs(IP,kc_chi);
             						}

                                     //update fChip
                                     //update fChip
                                     fTemp_matrix_nsd_x_nsd.MultATBC(PSIe_n_inverse,fCchie_n,fChip_n);
                                     fTemp_matrix_nsd_x_nsd2.MultABC(PSIe_n_inverse,fdGchidSIGMA_tr_transpose,fTemp_matrix_nsd_x_nsd);
                                     fChip.SetToScaled(fDelgammachi,fTemp_matrix_nsd_x_nsd2);
                                     fChip+=fChip_n;

        							 fTemp_matrix_nsd_x_nsd = fChip;
        							 fTemp_matrix_nsd_x_nsd-= fChip_n;
        							 DeltaLbarchiP.MultAB(fTemp_matrix_nsd_x_nsd,fChip_inverse);

                                     //Form inverse of Chi^p
                                     fChip_inverse.Inverse(fChip);

                                     //Calculate Chie
                                     fChie.MultAB(ChiM,fChip_inverse);


        							 fTemp_matrix_nsd_x_nsd2.MultABT(fCchie_n_inverse,PSIe_n);
        							 fTemp_matrix_nsd_x_nsd3.MultAB(DeltaLbarchiP,fTemp_matrix_nsd_x_nsd2);
        							 fTemp_matrix_nsd_x_nsd2.MultAB(PSIe_n,fTemp_matrix_nsd_x_nsd3);
        							 fTemp_matrix_nsd_x_nsd3.MultAB(fCe_n_inverse,fTemp_matrix_nsd_x_nsd2);

                                     fTemp_matrix_nsd_x_nsd.MultABT(fCe_n_inverse,fdGdS_tr);
                                     fTemp_matrix_nsd_x_nsd*=fDelgamma;

        							 fTemp_matrix_nsd_x_nsd3+= fIdentity_matrix;
        							 fTemp_matrix_nsd_x_nsd3+= fTemp_matrix_nsd_x_nsd;

        							 fFp.MultAB(fTemp_matrix_nsd_x_nsd3,fFp_n);
        							 fFp_inverse.Inverse(fFp);
        							 fFe.MultAB(fDeformation_Gradient,fFp_inverse);


                                     //[fMicroElastic_Right_Cauchy_Green_tensor] will be formed
                                     fMicroRight_Elastic_Cauchy_Green_tensor.MultATB(fChie,fChie);
                                     if (fMicroRight_Elastic_Cauchy_Green_tensor.Det()==0)
                                         fMicroRight_Elastic_Cauchy_Green_tensor = fIdentity_matrix;

                                     //Update PSIe
                                     PSIe.MultATB(fFe,fChie);


                                     //Update Elastic micro strain tenso will be formed in Bbar
                                     Elastic_MicroStnTensor = fIdentity_matrix;
                                     Elastic_MicroStnTensor *= -1;
                                     //Elastic deformation measure Elastic_PSI EPSI
                                     Elastic_MicroStnTensor += PSIe;
                                     Elastic_MicroStnTensor_trace=Elastic_MicroStnTensor.Trace();

         							 Elastic_MicroStnTensor_transpose.Transpose(Elastic_MicroStnTensor);
         	                         Symm_Elastic_MicroStnTensor = Elastic_MicroStnTensor;
         	                         Symm_Elastic_MicroStnTensor+= Elastic_MicroStnTensor_transpose;
         	                         Symm_Elastic_MicroStnTensor*=0.5;

         							 fRight_Elastic_Cauchy_Green_tensor.MultATB(fFe,fFe);
         							 if (fRight_Elastic_Cauchy_Green_tensor.Det()==0)
         								fRight_Elastic_Cauchy_Green_tensor = fIdentity_matrix;

    								 Elastic_LagrangianStn=fIdentity_matrix;
        							 Elastic_LagrangianStn*=-1;
        							 Elastic_LagrangianStn+=fRight_Elastic_Cauchy_Green_tensor;
        							 Elastic_LagrangianStn*=0.5;
        							 Elastic_LagrangianStn_trace=Elastic_LagrangianStn.Trace();


                                     //update S stress

                                     fTemp_matrix_nsd_x_nsd.SetToScaled(Elastic_LagrangianStn_trace*(fMaterial_Params[kLambda]+fMaterial_Params[kTau]),fIdentity_matrix);

                                     SPK.SetToScaled(2*(fMaterial_Params[kMu]+fMaterial_Params[kSigma_const]),Elastic_LagrangianStn);
                                     SPK+=fTemp_matrix_nsd_x_nsd;

                                     fTemp_matrix_nsd_x_nsd.SetToScaled(Elastic_MicroStnTensor_trace*fMaterial_Params[kEta],fIdentity_matrix);
                                     SPK+=fTemp_matrix_nsd_x_nsd;

                                     fTemp_matrix_nsd_x_nsd.SetToScaled(fMaterial_Params[kKappa],Elastic_MicroStnTensor);
                                     SPK+=fTemp_matrix_nsd_x_nsd;

                                     fTemp_matrix_nsd_x_nsd.SetToScaled(fMaterial_Params[kNu],Elastic_MicroStnTensor_transpose);
                                     SPK+=fTemp_matrix_nsd_x_nsd;

    								 Pbar = SPK.Trace()/3;//Calculating the pressure term
    								 devSPK.SetToScaled(Pbar,fIdentity_matrix);
    								 devSPK*=-1;
    								 devSPK+=SPK;
    								 Temp_inv= devSPK.ScalarProduct();
    								 devfSPKinv=sqrt(Temp_inv);

                                     //Update Relative stress SIGMA_S
                                     SIGMA_S.SetToScaled(Elastic_LagrangianStn_trace*fMaterial_Params[kTau],fIdentity_matrix);
                                     // 2sigmaE
                                     fTemp_matrix_nsd_x_nsd.SetToScaled(2*fMaterial_Params[kSigma_const],Elastic_LagrangianStn);
                                     SIGMA_S+=fTemp_matrix_nsd_x_nsd;
                                     //(eta-Tau)trEpsilon.1
                                     fTemp_matrix_nsd_x_nsd.SetToScaled(Elastic_MicroStnTensor_trace*(fMaterial_Params[kEta]-fMaterial_Params[kTau]),fIdentity_matrix);
                                     SIGMA_S+=fTemp_matrix_nsd_x_nsd;
                                     //(nu-sigma)*Epsilon
                                     fTemp_matrix_nsd_x_nsd.SetToScaled((fMaterial_Params[kNu]-fMaterial_Params[kSigma_const]),Elastic_MicroStnTensor);
                                     SIGMA_S+=fTemp_matrix_nsd_x_nsd;
                                     //(kappa-sigma)*Epsilon^T
                                     fTemp_matrix_nsd_x_nsd.SetToScaled((fMaterial_Params[kKappa]-fMaterial_Params[kSigma_const]),Elastic_MicroStnTensor_transpose);
                                     SIGMA_S+=fTemp_matrix_nsd_x_nsd;
                                     fFp_inverse.Inverse(fFp);

         							 Pchibar=SIGMA_S.Trace()/3;//
                                     devSIGMA_S.SetToScaled(Pchibar,fIdentity_matrix);
                                     devSIGMA_S*=-1;
                                     devSIGMA_S+=SIGMA_S;
                                     //Calculate dev(SIGMA-S):dev(SIGMA-S)
                                     Temp_inv= devSIGMA_S.ScalarProduct();
                                     // Calculate ||dev(SIGMA-S)||
                                     devSIGMA_S_inv=sqrt(Temp_inv);

									 SIGMA= SIGMA_S;
									 SIGMA+= SPK;
									 fMeanSIGMA_e= SIGMA.Trace()/3;
									 fdevSIGMA.SetToScaled(fMeanSIGMA_e,fIdentity_matrix);
									 fdevSIGMA*=-1;
									 fdevSIGMA+=SIGMA;
									 Temp_inv= fdevSIGMA.ScalarProduct();
									 fNormdevSIGMA=sqrt(Temp_inv);

                                     Xphi=Xphi_n;
                 					 Xphi_m=Xphi_m_n;
                 					 Xpsi_m=Xpsi_m_n;
                 					 fMacfunc=0.5*(fabs(fState_variables_n_IPs(IP,Kappa)-3*Pbar)+fState_variables_n_IPs(IP,Kappa)-3*Pbar);
                 					 fPhiCap=1-fMacfunc*(fState_variables_n_IPs(IP,Kappa)-3*Pbar)/(Xphi_m*Xphi_m);
                 					 fPsiCap=1-fMacfunc*(fState_variables_n_IPs(IP,Kappa)-3*Pbar)/(Xpsi_m*Xpsi_m);

                 					 Xphi_chi_m=-1*fMaterial_Params[kR_chi]*(Aphi_chi*cohesion_chi-Bphi_chi*fState_variables_IPs(IP,Kappa_chi));
                 					 Xpsi_chi_m=-1*fMaterial_Params[kR_chi]*(Apsi_chi*cohesion_chi-Bpsi_chi*fState_variables_IPs(IP,Kappa_chi));
                 					 fMacfunc_chi=0.5*(fabs(fState_variables_IPs(IP,Kappa_chi)-3*fMeanSIGMA_e)+fState_variables_IPs(IP,Kappa_chi)-3*fMeanSIGMA_e);
                 					 fPhiCap_chi=1-fMacfunc_chi*(fState_variables_IPs(IP,Kappa_chi)-3*fMeanSIGMA_e)/(Xphi_chi_m*Xphi_chi_m);
                 					 fPsiCap_chi=1-fMacfunc_chi*(fState_variables_IPs(IP,Kappa_chi)-3*fMeanSIGMA_e)/(Xpsi_chi_m*Xpsi_chi_m);

         							 // Calculate yield function with updated parameters
                 					 fYield_function_check=devfSPKinv-sqrt(fabs(fPhiCap))*(Aphi*fState_variables_n_IPs(IP,kc)-Bphi*Pbar);
         							 fMicroYield_function = fNormdevSIGMA-sqrt(fabs(fPhiCap_chi))*(Aphi_chi*cohesion_chi-Bphi_chi*fMeanSIGMA_e);
         							 fMicroYield_function_check = fMicroYield_function;

                                      fs_micromorph3D_out<< "Current relative residual = " << fabs(fMicroYield_function/fMicroYield_function_tr) << endl;
                                      GXp = 0.0;
                                 } //end of the local fDelgammachi while loop

                             	if (abs(fMicroYield_function) > 1e-1 || fDelgammachi < 0.0)
    							{
                             		if (abs(fMicroYield_function) > 1e-1)
                             		{
                             			fs_micromorph3D_out << "Local Delgamma Newton-Raphson algorithm for the Capped model did not approach to zero for MicroPlasticity" << endl;
                             			ExceptionT::GeneralFail(caller,"Local Delgamma Newton-Raphson algorithm for the Capped model did not approach to zero for MicroPlasticity_yield %e.", fMicroYield_function);
                             		}
                             		if (fDelgammachi < 0.0)
                             		{
                             			fs_micromorph3D_out << "Local Delgamma Newton-Raphson algorithm for the Capped model did not find positive Delgammachi for MicroPlasticity" << endl;
                             			ExceptionT::GeneralFail(caller,"Local Delgamma Newton-Raphson algorithm for the Capped model did not find positive Delgammachi for MicroPlasticity %e.", fDelgammachi);
                             		}
    							}
    							else
    							{

    								fState_variables_IPs(IP,kDelgamma) = fDelgamma;
    								fState_variables_IPs(IP,kc) = fState_variables_n_IPs(IP,kc);
    								fState_variables_IPs(IP,kDelgammachi) = fDelgammachi;
    								fState_variables_IPs(IP,kc_chi) = cohesion_chi;
    		    					fState_variables_IPs(IP,Kappa) = fState_variables_n_IPs(IP,Kappa);
    		    					fState_variables_IPs(IP,kZkappa)=fState_variables_n_IPs(IP,kZkappa);
    	    						fState_variables_IPs(IP,kc_nablachi0) =  fState_variables_n_IPs(IP,kc_nablachi0);
    	    						fState_variables_IPs(IP,kc_nablachi1) =  fState_variables_n_IPs(IP,kc_nablachi1);
    	    						fState_variables_IPs(IP,kc_nablachi2) =  fState_variables_n_IPs(IP,kc_nablachi2);
    	    						fState_variables_IPs(IP,Kappa_nablachi0) =  fState_variables_n_IPs(IP,Kappa_nablachi0);
    	    						fState_variables_IPs(IP,Kappa_nablachi1) =  fState_variables_n_IPs(IP,Kappa_nablachi1);
    	    						fState_variables_IPs(IP,Kappa_nablachi2) =  fState_variables_n_IPs(IP,Kappa_nablachi2);
    	    						fState_variables_IPs(IP,kDelgammanablachi) = fDelgammanablachi;

    								fs_micromorph3D_out << "fDelgammachi = " << fDelgammachi << endl;
    							}

    						 fs_micromorph3D_out << "Current  Macro Yield function = " << fYield_function << endl;
    						 fs_micromorph3D_out << "Current  Micro Yield function = " << fMicroYield_function << endl;
    					 } //end of IF Macro-elasticity, micro-plasticity loop

    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //////////////////////////////// Coupled Plasticity check after seperate macro and micro plasticity analysis ////////////////////////////////////
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

    			if 	(Micro_Plasticity_Occurrence == 1 || Macro_Plasticity_Occurrence == 1)
    			{
    				if(iPlasticityCheck==0 && fMicroYield_function_check > 1 || fYield_function_check > 1)// If both scales yield! Macro and Micro
                             {
                                 fs_micromorph3D_out<< "COUPLED PLASTICITY after Micro/Macro for the CAP model" <<endl;
                                 //cout<< "MACRO AND MICRO PLASTICITY " <<endl;
                                 PlasticityCondition=3;
                                 //initialize yield function before iteration
                                 Micro_Plasticity_Occurrence = 1;
                                 Macro_Plasticity_Occurrence = 1;
                                 fYield_function=fYield_function_check;
                                 //initialize micro yield before iteration
                                 fMicroYield_function=fMicroYield_function_check;


                                 //initial Delgamma,Delgammchi, their increments
                                 fdelDelgamma = 0.0;
                                 fDelgamma = 0.0;

                                 fdelDelgammachi = 0.0;
                                 fDelgammachi=0.0;

                                 fDelgammanablachi = 0.0;
                                 cohesion_chi = fState_variables_IPs(IP,kc_chi);
                                 cohesion = fState_variables_IPs(IP,kc);
                                 //iterate using Newton-Raphson to solve for fDelgamma
                                 iter_count = 0;
                                 fs_micromorph3D_out << "Current  Macro Yield function = " << fYield_function << endl;
                                 fs_micromorph3D_out << "Current  Micro Yield function = " << fMicroYield_function << endl;


                                 while (fabs(fMicroYield_function) > dAbsTol && iter_count < iIterationMax || fabs(fYield_function) > dAbsTol && iter_count < iIterationMax)
                                 {
                                     iter_count += 1;

                                     //Form  dFe/dDgamma
                                     fFp_inverse.Inverse(fFp);
                                     dFedDelgamma=0.0;
                                     //fdGdS_tr_transpose.Transpose(fdGdS_tr);// done above
                                     //fCe_n_inverse.Inverse(fCe_n);
                                     fTemp_matrix_nsd_x_nsd.MultATBC(fdGdS_tr,fFp_n,fFp_inverse);
                                     dFedDelgamma.MultABC(fFe,fCe_n_inverse,fTemp_matrix_nsd_x_nsd);
                                     dFedDelgamma*=-1;

                                     //Forming  dE^e/dDgamma  E^e: Elas. Lag. stn tensor
									 dEedDelgamma.MultATB(dFedDelgamma,fFe);
									 fTemp_matrix_nsd_x_nsd.MultATB(fFe,dFedDelgamma);
									 dEedDelgamma+=fTemp_matrix_nsd_x_nsd;
									 dEedDelgamma*=0.5;
									 dEedDelgamma_trace=dEedDelgamma.Trace();

									 //Forming  dEpsilon^e/dDgamma  Epsilone^e: Elastic micro strain tensor
									 dEpsilonedDelgamma.MultATB(dFedDelgamma,fChie);
									 dEpsilonedDelgamma_trace=dEpsilonedDelgamma.Trace();
									 dEpsilonedDelgamma_transpose.Transpose(dEpsilonedDelgamma);
									 symdEpsilonedDelgamma=dEpsilonedDelgamma;
									 symdEpsilonedDelgamma+= dEpsilonedDelgamma_transpose;

									 //Form inverse of Chi^p
									 fChip_inverse.Inverse(fChip);


									 //Form dChip/dDgammachi
									 fTemp_matrix_nsd_x_nsd.MultATBC(PSIe_n_inverse,fCchie_n,fChip_n);
									 dChipdDelgammachi.MultABC(PSIe_n_inverse,fdGchidSIGMA_tr_transpose,fTemp_matrix_nsd_x_nsd);

									 //Forming dChie/dDgammachi
									 dChiedDelgammachi.MultABC(fChie,dChipdDelgammachi,fChip_inverse);
									 dChiedDelgammachi*=-1;

									 fTemp_matrix_nsd_x_nsd.MultABC(fChip_inverse,dChipdDelgammachi,fChip_inverse);
									 dDeltaLbarchiPdDelgammachi.MultAB(fChip_n,fTemp_matrix_nsd_x_nsd);

									 fTemp_matrix_nsd_x_nsd.MultABCT(dDeltaLbarchiPdDelgammachi,fCchie_n_inverse,PSIe_n);
									 fTemp_matrix_nsd_x_nsd2.MultABC(fCe_n_inverse,PSIe_n,fTemp_matrix_nsd_x_nsd);
									 dFpdDelgammachi.MultAB(fTemp_matrix_nsd_x_nsd2,fFp_n);
									 dFedDelgammachi.MultABC(fFe,dFpdDelgammachi,fFp_inverse);
									 dFedDelgammachi*=-1;


									 //Forming dEpsilone/dDelgammachi
									 dEpsilonedDelgammachi=0.0;
									 dEpsilonedDelgammachi.MultATB(fFe,dChiedDelgammachi);
									 fTemp_matrix_nsd_x_nsd.MultATB(dFedDelgammachi,fChie);
									 dEpsilonedDelgammachi+= fTemp_matrix_nsd_x_nsd;
									 dEpsilonedDelgammachi_trace=dEpsilonedDelgammachi.Trace();
									 dEpsilonedDelgammachi_transpose.Transpose(dEpsilonedDelgammachi);
									 symdEpsilonedDelgammachi=dEpsilonedDelgammachi;
									 symdEpsilonedDelgammachi+= dEpsilonedDelgammachi_transpose;

									 dEedDelgammachi.MultATB(dFedDelgammachi,fFe);
									 fTemp_matrix_nsd_x_nsd.MultATB(fFe,dFedDelgammachi);
									 dEedDelgammachi+=fTemp_matrix_nsd_x_nsd;
									 dEedDelgammachi*=0.5;
									 dEedDelgammachi_trace=dEedDelgammachi.Trace();

									  //Forming  dS/dDgamma  S= SPK tensor

									 dSdDelgamma.SetToScaled((fMaterial_Params[kLambda]+fMaterial_Params[kTau])*dEedDelgamma_trace,fIdentity_matrix);
									 fTemp_matrix_nsd_x_nsd.SetToScaled(2*(fMaterial_Params[kMu]+fMaterial_Params[kSigma_const]),dEedDelgamma);
									 dSdDelgamma+=fTemp_matrix_nsd_x_nsd;

									 fTemp_matrix_nsd_x_nsd.SetToScaled(fMaterial_Params[kEta]*dEpsilonedDelgamma_trace,fIdentity_matrix);
									 dSdDelgamma+=fTemp_matrix_nsd_x_nsd;

									 fTemp_matrix_nsd_x_nsd.SetToScaled(fMaterial_Params[kKappa],dEpsilonedDelgamma);
									 dSdDelgamma+=fTemp_matrix_nsd_x_nsd;

									 fTemp_matrix_nsd_x_nsd.SetToScaled(fMaterial_Params[kNu],dEpsilonedDelgamma_transpose);
									 dSdDelgamma+=fTemp_matrix_nsd_x_nsd;


									 //Forming  dP/dDgamma (scalar) P: pressure  dP/dDgamma= (1/3)1:dS/dDgamma
									 dPdDelgamma=dSdDelgamma.Trace()/3;

	 //
									 //Forming  d(devS)/dDgamma  devS: dev. part of SPK tensor
									 ddevSdDelgamma.SetToScaled(dPdDelgamma,fIdentity_matrix);
									 ddevSdDelgamma*=-1;
									 ddevSdDelgamma+=dSdDelgamma;

									 //Forming  d(||devS||)/dDgamma  devS: dev. part of SPK tensor
									 fTemp_matrix_nsd_x_nsd.SetToScaled(1/devfSPKinv,devSPK);
									 InvddevSdDelgamma=dMatrixT::Dot(ddevSdDelgamma,fTemp_matrix_nsd_x_nsd);


									 //Forming  dc/dDgamma  c: cohesion
									 dcdDelgamma=fState_variables_n_IPs(IP,khc)*fMaterial_Params[kHc];

									 //assemble the consistent tangent
									 dFYdDelgamma=InvddevSdDelgamma-(Aphi*dcdDelgamma-Bphi*dPdDelgamma);//1

									 //Forming  d(SIGMA)/dDgammachi tensor
									 dSIGMAdDelgammachi.SetToScaled((fMaterial_Params[kLambda]+2*fMaterial_Params[kTau])*dEedDelgammachi_trace,fIdentity_matrix);

									 fTemp_matrix_nsd_x_nsd.SetToScaled(2*(fMaterial_Params[kMu]+2*fMaterial_Params[kSigma_const]),dEedDelgammachi);
									 dSIGMAdDelgammachi+=fTemp_matrix_nsd_x_nsd;

									 fTemp_matrix_nsd_x_nsd.SetToScaled((2*fMaterial_Params[kEta]-fMaterial_Params[kTau])*dEpsilonedDelgammachi_trace,fIdentity_matrix);
									 dSIGMAdDelgammachi+=fTemp_matrix_nsd_x_nsd;

									 fTemp_matrix_nsd_x_nsd.SetToScaled((fMaterial_Params[kKappa]+fMaterial_Params[kNu]-fMaterial_Params[kSigma_const]),symdEpsilonedDelgammachi);
									 dSIGMAdDelgammachi+=fTemp_matrix_nsd_x_nsd;

									 //Forming  dPchi/dDgammachi (scalar) Pchi: pressure for micro-scale  dPchi/dDgammachi= (1/3)1:dSIGMA/dDgammachi

									 dPchidDelgammachi=dSIGMAdDelgammachi.Trace()/3;

									 //Forming  d(dev(SIGMA))/dDgammachi  dev(SIGMA): dev. part of SIGMA (relative stress) tensor
									 ddevSIGMAdDelgammachi.SetToScaled(dPchidDelgammachi,fIdentity_matrix);
									 ddevSIGMAdDelgammachi*=-1;
									 ddevSIGMAdDelgammachi+=dSIGMAdDelgammachi;


									 //Forming  d(||dev(SIGMA)||)/dDgammachi  dev(SIGMA): dev. part of Relative stress (SIGMA) tensor
									 fTemp_matrix_nsd_x_nsd.SetToScaled(1/fNormdevSIGMA,fdevSIGMA);
									 dNormdevSIGMAdDelgammachi=dMatrixT::Dot(ddevSIGMAdDelgammachi,fTemp_matrix_nsd_x_nsd);

									 //Forming  dcx/dDgammax  cx:micro-cohesion
									 dcchidDelgammachi=fState_variables_n_IPs(IP,khc_chi)*fMaterial_Params[kHc_chi];

									 //assemble the consistent tangent
									 dFYchidDelgammachi=dNormdevSIGMAdDelgammachi-(Aphi_chi*dcchidDelgammachi-Bphi_chi*dPchidDelgammachi);//2

									 //Forming dS/dDelgammachi

									 dSdDelgammachi.SetToScaled((fMaterial_Params[kLambda]+fMaterial_Params[kTau])*dEedDelgammachi_trace,fIdentity_matrix);
									 fTemp_matrix_nsd_x_nsd.SetToScaled(2*(fMaterial_Params[kMu]+fMaterial_Params[kSigma_const]),dEedDelgammachi);
									 dSdDelgammachi+=fTemp_matrix_nsd_x_nsd;

									 fTemp_matrix_nsd_x_nsd.SetToScaled(fMaterial_Params[kEta]*dEpsilonedDelgammachi_trace,fIdentity_matrix);
									 dSdDelgammachi+=fTemp_matrix_nsd_x_nsd;

									 fTemp_matrix_nsd_x_nsd.SetToScaled(fMaterial_Params[kKappa],dEpsilonedDelgammachi);
									 dSdDelgammachi+=fTemp_matrix_nsd_x_nsd;

									 fTemp_matrix_nsd_x_nsd.SetToScaled(fMaterial_Params[kNu],dEpsilonedDelgammachi_transpose);
									 dSdDelgammachi+=fTemp_matrix_nsd_x_nsd;

									 //Forming dP/dDelgammachi
									 dPdDelgammachi=dSdDelgammachi.Trace()/3;


									 //Forming  d(devS)/dDgammachi
									 ddevSdDelgammachi.SetToScaled(dPdDelgammachi,fIdentity_matrix);
									 ddevSdDelgammachi*=-1;
									 ddevSdDelgammachi+=dSdDelgammachi;


								  //Forming  d(||devS||)/dDgammachi
									 fTemp_matrix_nsd_x_nsd.SetToScaled(1/devfSPKinv,devSPK);
									 ddevSdDelgammachi_inv=dMatrixT::Dot(ddevSdDelgammachi,fTemp_matrix_nsd_x_nsd);

									 //dFy/dDelgammachi
									 dFYdDelgammachi=ddevSdDelgammachi_inv-(-Bphi*dPdDelgammachi);//3

									 //Forming d(SIGMA-S)/dDelgamma

									 dSIGMAdDelgamma.SetToScaled((fMaterial_Params[kLambda]+2*fMaterial_Params[kTau])*dEedDelgamma_trace,fIdentity_matrix);

									 fTemp_matrix_nsd_x_nsd.SetToScaled(2*(fMaterial_Params[kMu]+2*fMaterial_Params[kSigma_const]),dEedDelgamma);
									 dSIGMAdDelgamma+=fTemp_matrix_nsd_x_nsd;

									 fTemp_matrix_nsd_x_nsd.SetToScaled((2*fMaterial_Params[kEta]-fMaterial_Params[kTau])*dEpsilonedDelgamma_trace,fIdentity_matrix);
									 dSIGMAdDelgamma+=fTemp_matrix_nsd_x_nsd;

									 fTemp_matrix_nsd_x_nsd.SetToScaled((fMaterial_Params[kKappa]+fMaterial_Params[kNu]-fMaterial_Params[kSigma_const]),symdEpsilonedDelgamma);
									 dSIGMAdDelgamma+=fTemp_matrix_nsd_x_nsd;

									 //Forming dPchi/dDelgamma
									 dPchidDelgamma=dSIGMAdDelgamma.Trace()/3;

									 //Forming  d(dev(SIGMA-S))/dDgamma
									 ddevSIGMAdDelgamma.SetToScaled(dPchidDelgamma,fIdentity_matrix);
									 ddevSIGMAdDelgamma*=-1;
									 ddevSIGMAdDelgamma+=dSIGMAdDelgamma;


									 //Forming  d(||dev(SIGMA-S)||)/dDgamma
									 fTemp_matrix_nsd_x_nsd.SetToScaled(1/fNormdevSIGMA,fdevSIGMA);
									 dNormdevSIGMAdDelgamma=dMatrixT::Dot(ddevSIGMAdDelgamma,fTemp_matrix_nsd_x_nsd);


									 //dFYchi/dDelgamma
									 dFYchidDelgamma=dNormdevSIGMAdDelgamma-(-Bphi_chi*dPchidDelgamma);//4


                                     LocalConsistentTangent=0.0;
                                     LocalConsistentTangent(0,0)=dFYdDelgamma;
                                     LocalConsistentTangent(0,1)=dFYdDelgammachi;
                                     LocalConsistentTangent(1,0)=dFYchidDelgamma;
                                     LocalConsistentTangent(1,1)=dFYchidDelgammachi;

                                     //double mm=4.7;

                                     LocalRHSVector[0]=-fYield_function;
                                     LocalRHSVector[1]=-fMicroYield_function;


                                     if (LocalConsistentTangent.Det() != 0.0)
                                     {
                                         LocalConsistentTangentInverse.Inverse(LocalConsistentTangent);
                                         LocalConsistentTangentInverse.Multx(LocalRHSVector,fdelDelgammaVector);
                                         fdelDelgamma=fdelDelgammaVector[0];
                                         fdelDelgammachi=fdelDelgammaVector[1];
                                     }
                                     else
                                     {
                                         fdelDelgammachi = 0.0;
                                         fdelDelgamma = 0.0;
                                     }


                                     fDelgamma+=fdelDelgamma;
                                     fDelgammachi+=fdelDelgammachi;


                                     fState_variables_IPs(IP,kDelgamma) = fDelgamma;
                                     fState_variables_IPs(IP,kDelgammachi) = fDelgammachi;


                                     cohesion= fState_variables_n_IPs(IP,kc)
                                     + fDelgamma*fState_variables_n_IPs(IP,khc)*fMaterial_Params[kHc];

         							 fState_variables_IPs(IP,Kappa)=fState_variables_n_IPs(IP,Kappa)+
         							 fDelgamma*fState_variables_n_IPs(IP,khKappa)*fMaterial_Params[kHkappa];

         							 fState_variables_IPs(IP,kZkappa)=fState_variables_n_IPs(IP,kZkappa)+fDelgamma*fState_variables_n_IPs(IP,khKappa);

                                     if (cohesion < 0.0)
    									{
    										cohesion = 0.0;
    										fState_variables_IPs(IP,kc)= fState_variables_n_IPs(IP,kc);
    									}


                                     //update cx (c_chi) ISVs
                                    cohesion_chi= fState_variables_n_IPs(IP,kc_chi)
                                     + fDelgammachi*fState_variables_n_IPs(IP,khc_chi)*fMaterial_Params[kHc_chi];

          							fState_variables_IPs(IP,Kappa_chi)=fState_variables_n_IPs(IP,Kappa_chi)+
          							fDelgammachi*fState_variables_n_IPs(IP,khKappa_chi)*fMaterial_Params[kHKappa_chi];

          							fState_variables_IPs(IP,kZkappa_chi)=fState_variables_n_IPs(IP,kZkappa_chi)+
          							fDelgammachi*fState_variables_n_IPs(IP,khKappa_chi);

                                     if (cohesion_chi < 0.0)
    									{
    										cohesion_chi = 0.0;
    										fState_variables_IPs(IP,kc_chi)= fState_variables_n_IPs(IP,kc_chi);
    									}

                                    //update fChip
                                    fTemp_matrix_nsd_x_nsd.MultATBC(PSIe_n_inverse,fCchie_n,fChip_n);
                                    fTemp_matrix_nsd_x_nsd2.MultABC(PSIe_n_inverse,fdGchidSIGMA_tr_transpose,fTemp_matrix_nsd_x_nsd);
                                    fChip.SetToScaled(fDelgammachi,fTemp_matrix_nsd_x_nsd2);
                                    fChip+=fChip_n;

         							fTemp_matrix_nsd_x_nsd = fChip;
         							fTemp_matrix_nsd_x_nsd-= fChip_n;
         							DeltaLbarchiP.MultAB(fTemp_matrix_nsd_x_nsd,fChip_inverse);

                                    //Form inverse of Chi^p
                                    fChip_inverse.Inverse(fChip);

                                    //Calculate Chie
                                    fChie.MultAB(ChiM,fChip_inverse);

         							fTemp_matrix_nsd_x_nsd2.MultABT(fCchie_n_inverse,PSIe_n);
         							fTemp_matrix_nsd_x_nsd3.MultAB(DeltaLbarchiP,fTemp_matrix_nsd_x_nsd2);
         							fTemp_matrix_nsd_x_nsd2.MultAB(PSIe_n,fTemp_matrix_nsd_x_nsd3);
         							fTemp_matrix_nsd_x_nsd3.MultAB(fCe_n_inverse,fTemp_matrix_nsd_x_nsd2);

                                    fTemp_matrix_nsd_x_nsd.MultABT(fCe_n_inverse,fdGdS_tr);
                                    fTemp_matrix_nsd_x_nsd*=fDelgamma;

         							fTemp_matrix_nsd_x_nsd3+= fIdentity_matrix;
         							fTemp_matrix_nsd_x_nsd3+= fTemp_matrix_nsd_x_nsd;

         							fFp.MultAB(fTemp_matrix_nsd_x_nsd3,fFp_n);
         							fFp_inverse.Inverse(fFp);
         							fFe.MultAB(fDeformation_Gradient,fFp_inverse);


                                    //[fElastic_Right_Cauchy_Green_tensor] will be formed
                                    fRight_Elastic_Cauchy_Green_tensor.MultATB(fFe,fFe);
                                    if (fRight_Elastic_Cauchy_Green_tensor.Det()==0)
                                         fRight_Elastic_Cauchy_Green_tensor = fIdentity_matrix;


                                    //Update Elastic Lagrangian strain tensor E
                                    Elastic_LagrangianStn=fIdentity_matrix;
                                    Elastic_LagrangianStn*=-1;
                                    Elastic_LagrangianStn+=fRight_Elastic_Cauchy_Green_tensor;
                                    Elastic_LagrangianStn*=0.5;
                                    Elastic_LagrangianStn_trace=Elastic_LagrangianStn.Trace();


                                    //[fMicroElastic_Right_Cauchy_Green_tensor] (Cchie) will be formed
                                    fMicroRight_Elastic_Cauchy_Green_tensor.MultATB(fChie,fChie);
                                    if (fMicroRight_Elastic_Cauchy_Green_tensor.Det()==0)
                                         fMicroRight_Elastic_Cauchy_Green_tensor = fIdentity_matrix;


                                     //Update fCchie
                                     fCchie.MultATB(fChie,fChie);

                                     //Update PSIe
                                     PSIe.MultATB(fFe,fChie);

                                     //Update Elastic micro strain tenso will be formed in Bbar
                                     Elastic_MicroStnTensor = fIdentity_matrix;
                                     Elastic_MicroStnTensor *= -1;
                                     Elastic_MicroStnTensor += PSIe;
                                     Elastic_MicroStnTensor_trace=Elastic_MicroStnTensor.Trace();
                                     Elastic_MicroStnTensor_transpose.Transpose(Elastic_MicroStnTensor);


                                     //update S stress
                                     fTemp_matrix_nsd_x_nsd.SetToScaled(Elastic_LagrangianStn_trace*(fMaterial_Params[kLambda]+fMaterial_Params[kTau]),fIdentity_matrix);

                                     SPK.SetToScaled(2*(fMaterial_Params[kMu]+fMaterial_Params[kSigma_const]),Elastic_LagrangianStn);
                                     SPK+=fTemp_matrix_nsd_x_nsd;

                                     fTemp_matrix_nsd_x_nsd.SetToScaled(Elastic_MicroStnTensor_trace*fMaterial_Params[kEta],fIdentity_matrix);
                                     SPK+=fTemp_matrix_nsd_x_nsd;

                                     fTemp_matrix_nsd_x_nsd.SetToScaled(fMaterial_Params[kKappa],Elastic_MicroStnTensor);
                                     SPK+=fTemp_matrix_nsd_x_nsd;

                                     fTemp_matrix_nsd_x_nsd.SetToScaled(fMaterial_Params[kNu],Elastic_MicroStnTensor_transpose);
                                     SPK+=fTemp_matrix_nsd_x_nsd;

    								 Pbar = SPK.Trace()/3;//Calculating the pressure term
    								 devSPK.SetToScaled(Pbar,fIdentity_matrix);
    								 devSPK*=-1;
    								 devSPK+=SPK;
    								 Temp_inv= devSPK.ScalarProduct();
    								 devfSPKinv=sqrt(Temp_inv);

                                     //Update Relative stress SIGMA_S
                                     SIGMA_S.SetToScaled(Elastic_LagrangianStn_trace*fMaterial_Params[kTau],fIdentity_matrix);
                                     // 2sigmaE
                                     fTemp_matrix_nsd_x_nsd.SetToScaled(2*fMaterial_Params[kSigma_const],Elastic_LagrangianStn);
                                     SIGMA_S+=fTemp_matrix_nsd_x_nsd;
                                     //(eta-Tau)trEpsilon.1
                                     fTemp_matrix_nsd_x_nsd.SetToScaled(Elastic_MicroStnTensor_trace*(fMaterial_Params[kEta]-fMaterial_Params[kTau]),fIdentity_matrix);
                                     SIGMA_S+=fTemp_matrix_nsd_x_nsd;
                                     //(nu-sigma)*Epsilon
                                     fTemp_matrix_nsd_x_nsd.SetToScaled((fMaterial_Params[kNu]-fMaterial_Params[kSigma_const]),Elastic_MicroStnTensor);
                                     SIGMA_S+=fTemp_matrix_nsd_x_nsd;
                                     //(kappa-sigma)*Epsilon^T
                                     fTemp_matrix_nsd_x_nsd.SetToScaled((fMaterial_Params[kKappa]-fMaterial_Params[kSigma_const]),Elastic_MicroStnTensor_transpose);
                                     SIGMA_S+=fTemp_matrix_nsd_x_nsd;

         							 Pchibar=SIGMA_S.Trace()/3;//
                                     devSIGMA_S.SetToScaled(Pchibar,fIdentity_matrix);
                                     devSIGMA_S*=-1;
                                     devSIGMA_S+=SIGMA_S;
                                     //Calculate dev(SIGMA-S):dev(SIGMA-S)
                                     Temp_inv= devSIGMA_S.ScalarProduct();
                                     // Calculate ||dev(SIGMA-S)||
                                     devSIGMA_S_inv=sqrt(Temp_inv);
                                     // Calculate yield function with updated parameters

                                     SIGMA= SIGMA_S;
                                     SIGMA+= SPK;
                                     fMeanSIGMA_e= SIGMA.Trace()/3;
                                     fdevSIGMA.SetToScaled(fMeanSIGMA_e,fIdentity_matrix);
                                     fdevSIGMA*=-1;
                                     fdevSIGMA+=SIGMA;
                                     Temp_inv= fdevSIGMA.ScalarProduct();
                                     fNormdevSIGMA=sqrt(Temp_inv);

                                     Xphi=fState_variables_IPs(IP,Kappa)-fMaterial_Params[kR]*(Aphi*cohesion-Bphi*fState_variables_IPs(IP,Kappa));
                 					 Xphi_m=-fMaterial_Params[kR]*(Aphi*cohesion-Bphi*fState_variables_IPs(IP,Kappa));
                 					 Xpsi_m=-fMaterial_Params[kR]*(Apsi*cohesion-Bpsi*fState_variables_IPs(IP,Kappa));
                 					 fMacfunc=0.5*(fabs(fState_variables_IPs(IP,Kappa)-3*Pbar)+fState_variables_IPs(IP,Kappa)-3*Pbar);
                 					 fPhiCap=1-fMacfunc*(fState_variables_IPs(IP,Kappa)-3*Pbar)/(Xphi_m*Xphi_m);
                 					 fPsiCap=1-fMacfunc*(fState_variables_IPs(IP,Kappa)-3*Pbar)/(Xpsi_m*Xpsi_m);

                 					 Xphi_chi=fState_variables_IPs(IP,Kappa_chi)-fMaterial_Params[kR_chi]*(Aphi_chi*cohesion_chi-Bphi_chi*fState_variables_IPs(IP,Kappa_chi));
                 					 Xphi_chi_m=-1*fMaterial_Params[kR_chi]*(Aphi_chi*cohesion_chi-Bphi_chi*fState_variables_IPs(IP,Kappa_chi));
                 					 Xpsi_chi_m=-1*fMaterial_Params[kR_chi]*(Apsi_chi*cohesion_chi-Bpsi_chi*fState_variables_IPs(IP,Kappa_chi));
                 					 fMacfunc_chi=0.5*(fabs(fState_variables_IPs(IP,Kappa_chi)-3*fMeanSIGMA_e)+fState_variables_IPs(IP,Kappa_chi)-3*fMeanSIGMA_e);
                 					 fPhiCap_chi=1-fMacfunc_chi*(fState_variables_IPs(IP,Kappa_chi)-3*fMeanSIGMA_e)/(Xphi_chi_m*Xphi_chi_m);
                 					 fPsiCap_chi=1-fMacfunc_chi*(fState_variables_IPs(IP,Kappa_chi)-3*fMeanSIGMA_e)/(Xpsi_chi_m*Xpsi_chi_m);

         							// Calculate yield function with updated parameters
         							 fYield_function=devfSPKinv-sqrt(fabs(fPhiCap))*(Aphi*cohesion-Bphi*Pbar);
         							 fMicroYield_function = fNormdevSIGMA-sqrt(fabs(fPhiCap_chi))*(Aphi_chi*cohesion_chi-Bphi_chi*fMeanSIGMA_e);

                                     GXp = 0.0;
                                     fs_micromorph3D_out<<"Current Macro relative residual = "<< fabs(fYield_function/fYield_function_tr)<<" && "<< "Current Micro relative residual = " << fabs(fMicroYield_function/fMicroYield_function_tr) << " && "<<" Yield Function="<< fYield_function<<" && "<<" Micro Yield Function = "<< fMicroYield_function << endl;
                                 }

                                 if (abs(fMicroYield_function) > 1e-1 || abs(fYield_function) > 1e-1 || fDelgamma < 0.0 || fDelgammachi < 0.0)
    								{
                                	 if (abs(fMicroYield_function) > 1e-1)
    									 {
    										fs_micromorph3D_out << "Local Delgamma Newton-Raphson algorithm for the Capped model did not approach to zero for Microyield_func of the Coupled-Plasticity after Macro/Micro" << endl;
    										ExceptionT::GeneralFail(caller,"Local Delgamma Newton-Raphson algorithm for the Capped model did not approach to zero for Microyield_func of the Coupled-Plasticity after Macro/Micro %e.", fMicroYield_function);
    									 }
                                   	 if (abs(fYield_function) > 1e-1)
                                    	 {
        									fs_micromorph3D_out << "Local Delgamma Newton-Raphson algorithm for the Capped model did not approach to zero for Macroyield_func of the Coupled-Plasticity after Macro/Micro" << endl;
        									ExceptionT::GeneralFail(caller,"Local Delgamma Newton-Raphson algorithm for the Capped model did not approach to zero for Macroyield_func of the Coupled-Plasticity after Macro/Micro %e.", fYield_function);
                                    	 }
                                   	 if (fDelgamma < 0.0)
                                    	 {
        									fs_micromorph3D_out << "Local Delgamma Newton-Raphson algorithm for the Capped model did not find positive fDelgamma for Coupled-Plasticity after Macro/Micro" << endl;
        									ExceptionT::GeneralFail(caller,"Local Delgamma Newton-Raphson algorithm for the Capped model did not find positive fDelgamma for Coupled-Plasticity after Macro/Micro %e.", fDelgamma);
                                    	 }
                                   	 if (fDelgammachi < 0.0)
                                    	 {
        									fs_micromorph3D_out << "Local Delgamma Newton-Raphson algorithm for the Capped model did not find positive fDelgammachi for Coupled-Plasticity after Macro/Micro" << endl;
        									ExceptionT::GeneralFail(caller,"Local Delgamma Newton-Raphson algorithm for the Capped model did not find positive fDelgammachi for Coupled-Plasticity after Macro/Micro %e.", fDelgammachi);
                                    	 }
    								}
    								else
    								{
    									fState_variables_IPs(IP,kDelgammachi) = fDelgammachi;
    									fState_variables_IPs(IP,kc_chi) = cohesion_chi;
    									fState_variables_IPs(IP,kDelgamma) = fDelgamma;
    									fState_variables_IPs(IP,kc) = cohesion;
    		    						fState_variables_IPs(IP,kc_nablachi0) =  fState_variables_n_IPs(IP,kc_nablachi0);
    		    						fState_variables_IPs(IP,kc_nablachi1) =  fState_variables_n_IPs(IP,kc_nablachi1);
    		    						fState_variables_IPs(IP,kc_nablachi2) =  fState_variables_n_IPs(IP,kc_nablachi2);
    		    						fState_variables_IPs(IP,Kappa_nablachi0) =  fState_variables_n_IPs(IP,Kappa_nablachi0);
    		    						fState_variables_IPs(IP,Kappa_nablachi1) =  fState_variables_n_IPs(IP,Kappa_nablachi1);
    		    						fState_variables_IPs(IP,Kappa_nablachi2) =  fState_variables_n_IPs(IP,Kappa_nablachi2);
    		    						fState_variables_IPs(IP,kDelgammanablachi) = fDelgammanablachi;
    									fs_micromorph3D_out << "fDelgamma = " << fDelgamma << endl;
    									fs_micromorph3D_out << "fDelgammachi = " << fDelgammachi << endl;
    									fs_micromorph3D_out << "fState_variables_IPs(IP,kc_chi) = " << fState_variables_IPs(IP,kc_chi) << endl;
    									fs_micromorph3D_out << "fState_variables_IPs(IP,kc) = " << fState_variables_IPs(IP,kc) << endl;
    									fs_micromorph3D_out << "fState_variables_IPs(IP,kDelgammachi) = " << fState_variables_IPs(IP,kDelgammachi) << endl;
    									fs_micromorph3D_out << "fState_variables_IPs(IP,kDelgamma) = " << fState_variables_IPs(IP,kDelgamma) << endl;
    								}
                             }
        			}



    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



    				if(iPlasticityCheck==0 && fYield_function_tr>dYieldTrialTol && fMicroYield_function_tr> dYieldTrialTol)// If both scales yield! Macro and Micro
                             {
                                 fs_micromorph3D_out<< "COUPLED PLASTICITY for the CAP model " <<endl;
                                 //cout<< "MACRO AND MICRO PLASTICITY " <<endl;
                                 PlasticityCondition=3;
                                 //initialize yield function before iteration
                                 fYield_function=fYield_function_tr;

                                 //initialize micro yield before iteration
                                 fMicroYield_function=fMicroYield_function_tr;
                                 Micro_Plasticity_Occurrence = 1;
                                 Macro_Plasticity_Occurrence = 1;
                                 //initial values for Fe and Chie
                                 fFe=fFe_tr;
                                 fChie=fChie_tr;
                                 fCchie=fCchie_tr;
                                 PSIe=PSIe_tr;

                                 //initial values for Fp and Chip are assumed the same with previous step
                                 fFp=fFp_n;
                                 fChip=fChip_n;

                                 //initial  stress tensors  and their invariants
                                 SPK=fSPK_tr;
                                 devSPK=fdevSPK_tr;
                                 devfSPKinv=devfSPKinv_tr;

                                 SIGMA_S=SIGMA_S_tr;
                                 devSIGMA_S=devSIGMA_S_tr;
                                 devSIGMA_S_inv=devSIGMA_S_inv_tr;
 								 SIGMA=SIGMA_tr;
 								 fNormdevSIGMA=fNormdevSIGMA_tr;
 								 fdevSIGMA=fdevSIGMA_tr;
 								 fMeanSIGMA_e=fMeanSIGMA_etr;


                                 //initial Delgamma,Delgammchi, their increments
                                 fdelDelgamma = 0.0;
                                 fDelgamma = 0.0;

                                 fdelDelgammachi = 0.0;
                                 fDelgammachi=0.0;
                                 fDelgammanablachi = 0.0;
             					 Xphi_m=Xphi_m_n;
             					 Xpsi_m=Xpsi_m_n;
             					 fMacfunc=fMacfunc_tr;
             					 fPhiCap=fPhiCap_tr;
             					 fPsiCap=fPsiCap_tr;
             					 cohesion=fState_variables_n_IPs(IP,kc);
             					 Pbar=Pbar_tr;

 								 Xphi_chi_m=Xphi_chi_m_n;
 								 Xpsi_chi_m=Xpsi_chi_m_n;
 								 fMacfunc_chi=fMacfunc_chi_tr;
 								 fPhiCap_chi=fPhiCap_chi_tr;
 								 fPsiCap_chi=fPsiCap_chi_tr;
 								 cohesion_chi= fState_variables_n_IPs(IP,kc_chi);

                                 //iterate using Newton-Raphson to solve for fDelgamma
                                 iter_count = 0;
                                 fs_micromorph3D_out << "Current  Macro Yield function = " << fYield_function << endl;
                                 fs_micromorph3D_out << "Current  Micro Yield function = " << fMicroYield_function << endl;


                                 while (fabs(fMicroYield_function) > dAbsTol && iter_count < iIterationMax || fabs(fYield_function) > dAbsTol && iter_count < iIterationMax)
                                 {
                                     iter_count += 1;

                                     //Form  dFe/dDgamma
                                      fFp_inverse.Inverse(fFp);
                                      dFedDelgamma=0.0;
                                      //fdGdS_tr_transpose.Transpose(fdGdS_tr);// done above
                                      //fCe_n_inverse.Inverse(fCe_n);
                                      fTemp_matrix_nsd_x_nsd.MultATBC(fdGdS_tr,fFp_n,fFp_inverse);
                                      dFedDelgamma.MultABC(fFe,fCe_n_inverse,fTemp_matrix_nsd_x_nsd);
                                      dFedDelgamma*=-1;

                                      //Forming  dE^e/dDgamma  E^e: Elas. Lag. stn tensor
 									 dEedDelgamma.MultATB(dFedDelgamma,fFe);
 									 fTemp_matrix_nsd_x_nsd.MultATB(fFe,dFedDelgamma);
 									 dEedDelgamma+=fTemp_matrix_nsd_x_nsd;
 									 dEedDelgamma*=0.5;
 									 dEedDelgamma_trace=dEedDelgamma.Trace();

 									 //Forming  dEpsilon^e/dDgamma  Epsilone^e: Elastic micro strain tensor
 									 dEpsilonedDelgamma.MultATB(dFedDelgamma,fChie);
 									 dEpsilonedDelgamma_trace=dEpsilonedDelgamma.Trace();
 									 dEpsilonedDelgamma_transpose.Transpose(dEpsilonedDelgamma);
 									 symdEpsilonedDelgamma=dEpsilonedDelgamma;
 									 symdEpsilonedDelgamma+= dEpsilonedDelgamma_transpose;

 									 //Form inverse of Chi^p
 									 fChip_inverse.Inverse(fChip);


 									 //Form dChip/dDgammachi
 									 fTemp_matrix_nsd_x_nsd.MultATBC(PSIe_n_inverse,fCchie_n,fChip_n);
 									 dChipdDelgammachi.MultABC(PSIe_n_inverse,fdGchidSIGMA_tr_transpose,fTemp_matrix_nsd_x_nsd);

 									 //Forming dChie/dDgammachi
 									 dChiedDelgammachi.MultABC(fChie,dChipdDelgammachi,fChip_inverse);
 									 dChiedDelgammachi*=-1;

 									 fTemp_matrix_nsd_x_nsd.MultABC(fChip_inverse,dChipdDelgammachi,fChip_inverse);
 									 dDeltaLbarchiPdDelgammachi.MultAB(fChip_n,fTemp_matrix_nsd_x_nsd);

 									 fTemp_matrix_nsd_x_nsd.MultABCT(dDeltaLbarchiPdDelgammachi,fCchie_n_inverse,PSIe_n);
 									 fTemp_matrix_nsd_x_nsd2.MultABC(fCe_n_inverse,PSIe_n,fTemp_matrix_nsd_x_nsd);
 									 dFpdDelgammachi.MultAB(fTemp_matrix_nsd_x_nsd2,fFp_n);
 									 dFedDelgammachi.MultABC(fFe,dFpdDelgammachi,fFp_inverse);
 									 dFedDelgammachi*=-1;


 									 //Forming dEpsilone/dDelgammachi
 									 dEpsilonedDelgammachi=0.0;
 									 dEpsilonedDelgammachi.MultATB(fFe,dChiedDelgammachi);
 									 fTemp_matrix_nsd_x_nsd.MultATB(dFedDelgammachi,fChie);
 									 dEpsilonedDelgammachi+= fTemp_matrix_nsd_x_nsd;
 									 dEpsilonedDelgammachi_trace=dEpsilonedDelgammachi.Trace();
 									 dEpsilonedDelgammachi_transpose.Transpose(dEpsilonedDelgammachi);
 									 symdEpsilonedDelgammachi=dEpsilonedDelgammachi;
 									 symdEpsilonedDelgammachi+= dEpsilonedDelgammachi_transpose;

 									 dEedDelgammachi.MultATB(dFedDelgammachi,fFe);
 									 fTemp_matrix_nsd_x_nsd.MultATB(fFe,dFedDelgammachi);
 									 dEedDelgammachi+=fTemp_matrix_nsd_x_nsd;
 									 dEedDelgammachi*=0.5;
 									 dEedDelgammachi_trace=dEedDelgammachi.Trace();

 									  //Forming  dS/dDgamma  S= SPK tensor

 									 dSdDelgamma.SetToScaled((fMaterial_Params[kLambda]+fMaterial_Params[kTau])*dEedDelgamma_trace,fIdentity_matrix);
 									 fTemp_matrix_nsd_x_nsd.SetToScaled(2*(fMaterial_Params[kMu]+fMaterial_Params[kSigma_const]),dEedDelgamma);
 									 dSdDelgamma+=fTemp_matrix_nsd_x_nsd;

 									 fTemp_matrix_nsd_x_nsd.SetToScaled(fMaterial_Params[kEta]*dEpsilonedDelgamma_trace,fIdentity_matrix);
 									 dSdDelgamma+=fTemp_matrix_nsd_x_nsd;

 									 fTemp_matrix_nsd_x_nsd.SetToScaled(fMaterial_Params[kKappa],dEpsilonedDelgamma);
 									 dSdDelgamma+=fTemp_matrix_nsd_x_nsd;

 									 fTemp_matrix_nsd_x_nsd.SetToScaled(fMaterial_Params[kNu],dEpsilonedDelgamma_transpose);
 									 dSdDelgamma+=fTemp_matrix_nsd_x_nsd;


 									 //Forming  dP/dDgamma (scalar) P: pressure  dP/dDgamma= (1/3)1:dS/dDgamma
 									 dPdDelgamma=dSdDelgamma.Trace()/3;

 	 //
 									 //Forming  d(devS)/dDgamma  devS: dev. part of SPK tensor
 									 ddevSdDelgamma.SetToScaled(dPdDelgamma,fIdentity_matrix);
 									 ddevSdDelgamma*=-1;
 									 ddevSdDelgamma+=dSdDelgamma;

 									 //Forming  d(||devS||)/dDgamma  devS: dev. part of SPK tensor
 									 fTemp_matrix_nsd_x_nsd.SetToScaled(1/devfSPKinv,devSPK);
 									 InvddevSdDelgamma=dMatrixT::Dot(ddevSdDelgamma,fTemp_matrix_nsd_x_nsd);


 									 //Forming  dc/dDgamma  c: cohesion
 									 dcdDelgamma=fState_variables_n_IPs(IP,khc)*fMaterial_Params[kHc];

 									 //assemble the consistent tangent
 									 dFYdDelgamma=InvddevSdDelgamma-(Aphi*dcdDelgamma-Bphi*dPdDelgamma);//1

 									 //Forming  d(SIGMA)/dDgammachi tensor
 									 dSIGMAdDelgammachi.SetToScaled((fMaterial_Params[kLambda]+2*fMaterial_Params[kTau])*dEedDelgammachi_trace,fIdentity_matrix);

 									 fTemp_matrix_nsd_x_nsd.SetToScaled(2*(fMaterial_Params[kMu]+2*fMaterial_Params[kSigma_const]),dEedDelgammachi);
 									 dSIGMAdDelgammachi+=fTemp_matrix_nsd_x_nsd;

 									 fTemp_matrix_nsd_x_nsd.SetToScaled((2*fMaterial_Params[kEta]-fMaterial_Params[kTau])*dEpsilonedDelgammachi_trace,fIdentity_matrix);
 									 dSIGMAdDelgammachi+=fTemp_matrix_nsd_x_nsd;

 									 fTemp_matrix_nsd_x_nsd.SetToScaled((fMaterial_Params[kKappa]+fMaterial_Params[kNu]-fMaterial_Params[kSigma_const]),symdEpsilonedDelgammachi);
 									 dSIGMAdDelgammachi+=fTemp_matrix_nsd_x_nsd;

 									 //Forming  dPchi/dDgammachi (scalar) Pchi: pressure for micro-scale  dPchi/dDgammachi= (1/3)1:dSIGMA/dDgammachi

 									 dPchidDelgammachi=dSIGMAdDelgammachi.Trace()/3;

 									 //Forming  d(dev(SIGMA))/dDgammachi  dev(SIGMA): dev. part of SIGMA (relative stress) tensor
 									 ddevSIGMAdDelgammachi.SetToScaled(dPchidDelgammachi,fIdentity_matrix);
 									 ddevSIGMAdDelgammachi*=-1;
 									 ddevSIGMAdDelgammachi+=dSIGMAdDelgammachi;


 									 //Forming  d(||dev(SIGMA)||)/dDgammachi  dev(SIGMA): dev. part of Relative stress (SIGMA) tensor
 									 fTemp_matrix_nsd_x_nsd.SetToScaled(1/fNormdevSIGMA,fdevSIGMA);
 									 dNormdevSIGMAdDelgammachi=dMatrixT::Dot(ddevSIGMAdDelgammachi,fTemp_matrix_nsd_x_nsd);

 									 //Forming  dcx/dDgammax  cx:micro-cohesion
 									 dcchidDelgammachi=fState_variables_n_IPs(IP,khc_chi)*fMaterial_Params[kHc_chi];

 									 //assemble the consistent tangent
 									 dFYchidDelgammachi=dNormdevSIGMAdDelgammachi-(Aphi_chi*dcchidDelgammachi-Bphi_chi*dPchidDelgammachi);//2

 									 //Forming dS/dDelgammachi

 									 dSdDelgammachi.SetToScaled((fMaterial_Params[kLambda]+fMaterial_Params[kTau])*dEedDelgammachi_trace,fIdentity_matrix);
 									 fTemp_matrix_nsd_x_nsd.SetToScaled(2*(fMaterial_Params[kMu]+fMaterial_Params[kSigma_const]),dEedDelgammachi);
 									 dSdDelgammachi+=fTemp_matrix_nsd_x_nsd;

 									 fTemp_matrix_nsd_x_nsd.SetToScaled(fMaterial_Params[kEta]*dEpsilonedDelgammachi_trace,fIdentity_matrix);
 									 dSdDelgammachi+=fTemp_matrix_nsd_x_nsd;

 									 fTemp_matrix_nsd_x_nsd.SetToScaled(fMaterial_Params[kKappa],dEpsilonedDelgammachi);
 									 dSdDelgammachi+=fTemp_matrix_nsd_x_nsd;

 									 fTemp_matrix_nsd_x_nsd.SetToScaled(fMaterial_Params[kNu],dEpsilonedDelgammachi_transpose);
 									 dSdDelgammachi+=fTemp_matrix_nsd_x_nsd;

 									 //Forming dP/dDelgammachi
 									 dPdDelgammachi=dSdDelgammachi.Trace()/3;


 									 //Forming  d(devS)/dDgammachi
 									 ddevSdDelgammachi.SetToScaled(dPdDelgammachi,fIdentity_matrix);
 									 ddevSdDelgammachi*=-1;
 									 ddevSdDelgammachi+=dSdDelgammachi;


 								  //Forming  d(||devS||)/dDgammachi
 									 fTemp_matrix_nsd_x_nsd.SetToScaled(1/devfSPKinv,devSPK);
 									 ddevSdDelgammachi_inv=dMatrixT::Dot(ddevSdDelgammachi,fTemp_matrix_nsd_x_nsd);

 									 //dFy/dDelgammachi
 									 dFYdDelgammachi=ddevSdDelgammachi_inv-(-Bphi*dPdDelgammachi);//3

 									 //Forming d(SIGMA-S)/dDelgamma

 									 dSIGMAdDelgamma.SetToScaled((fMaterial_Params[kLambda]+2*fMaterial_Params[kTau])*dEedDelgamma_trace,fIdentity_matrix);

 									 fTemp_matrix_nsd_x_nsd.SetToScaled(2*(fMaterial_Params[kMu]+2*fMaterial_Params[kSigma_const]),dEedDelgamma);
 									 dSIGMAdDelgamma+=fTemp_matrix_nsd_x_nsd;

 									 fTemp_matrix_nsd_x_nsd.SetToScaled((2*fMaterial_Params[kEta]-fMaterial_Params[kTau])*dEpsilonedDelgamma_trace,fIdentity_matrix);
 									 dSIGMAdDelgamma+=fTemp_matrix_nsd_x_nsd;

 									 fTemp_matrix_nsd_x_nsd.SetToScaled((fMaterial_Params[kKappa]+fMaterial_Params[kNu]-fMaterial_Params[kSigma_const]),symdEpsilonedDelgamma);
 									 dSIGMAdDelgamma+=fTemp_matrix_nsd_x_nsd;

 									 //Forming dPchi/dDelgamma
 									 dPchidDelgamma=dSIGMAdDelgamma.Trace()/3;

 									 //Forming  d(dev(SIGMA-S))/dDgamma
 									 ddevSIGMAdDelgamma.SetToScaled(dPchidDelgamma,fIdentity_matrix);
 									 ddevSIGMAdDelgamma*=-1;
 									 ddevSIGMAdDelgamma+=dSIGMAdDelgamma;


 									 //Forming  d(||dev(SIGMA-S)||)/dDgamma
 									 fTemp_matrix_nsd_x_nsd.SetToScaled(1/fNormdevSIGMA,fdevSIGMA);
 									 dNormdevSIGMAdDelgamma=dMatrixT::Dot(ddevSIGMAdDelgamma,fTemp_matrix_nsd_x_nsd);


 									 //dFYchi/dDelgamma
 									 dFYchidDelgamma=dNormdevSIGMAdDelgamma-(-Bphi_chi*dPchidDelgamma);//4


                                     LocalConsistentTangent=0.0;
                                     LocalConsistentTangent(0,0)=dFYdDelgamma;
                                     LocalConsistentTangent(0,1)=dFYdDelgammachi;
                                     LocalConsistentTangent(1,0)=dFYchidDelgamma;
                                     LocalConsistentTangent(1,1)=dFYchidDelgammachi;

                                     //double mm=4.7;

                                     LocalRHSVector[0]=-fYield_function;
                                     LocalRHSVector[1]=-fMicroYield_function;


                                     if (LocalConsistentTangent.Det() != 0.0)
                                     {
                                         LocalConsistentTangentInverse.Inverse(LocalConsistentTangent);
                                         LocalConsistentTangentInverse.Multx(LocalRHSVector,fdelDelgammaVector);
                                         fdelDelgamma=fdelDelgammaVector[0];
                                         fdelDelgammachi=fdelDelgammaVector[1];
                                     }
                                     else
                                     {
                                         fdelDelgammachi = 0.0;
                                         fdelDelgamma = 0.0;
                                     }


                                     fDelgamma+=fdelDelgamma;
                                     fDelgammachi+=fdelDelgammachi;


                                     fState_variables_IPs(IP,kDelgamma) = fDelgamma;
                                     fState_variables_IPs(IP,kDelgammachi) = fDelgammachi;


                                     cohesion= fState_variables_n_IPs(IP,kc)
                                     + fDelgamma*fState_variables_n_IPs(IP,khc)*fMaterial_Params[kHc];

         							 fState_variables_IPs(IP,Kappa)=fState_variables_n_IPs(IP,Kappa)+
         							 fDelgamma*fState_variables_n_IPs(IP,khKappa)*fMaterial_Params[kHkappa];

         							 fState_variables_IPs(IP,kZkappa)=fState_variables_n_IPs(IP,kZkappa)+fDelgamma*fState_variables_n_IPs(IP,khKappa);

                                     if (cohesion < 0.0)
    									{
    										cohesion = 0.0;
    										fState_variables_IPs(IP,kc)= fState_variables_n_IPs(IP,kc);
    									}


                                     //update cx (c_chi) ISVs
                                     cohesion_chi= fState_variables_n_IPs(IP,kc_chi)
                                     + fDelgammachi*fState_variables_n_IPs(IP,khc_chi)*fMaterial_Params[kHc_chi];

           							 fState_variables_IPs(IP,Kappa_chi)=fState_variables_n_IPs(IP,Kappa_chi)+
           							 fDelgammachi*fState_variables_n_IPs(IP,khKappa_chi)*fMaterial_Params[kHKappa_chi];

           							 fState_variables_IPs(IP,kZkappa_chi)=fState_variables_n_IPs(IP,kZkappa_chi)+
           							 fDelgammachi*fState_variables_n_IPs(IP,khKappa_chi);

                                     if (cohesion_chi < 0.0)
    									{
    										cohesion_chi = 0.0;
    										fState_variables_IPs(IP,kc_chi)= fState_variables_n_IPs(IP,kc_chi);
    									}

                                     //update fChip
                                     fTemp_matrix_nsd_x_nsd.MultATBC(PSIe_n_inverse,fCchie_n,fChip_n);
                                     fTemp_matrix_nsd_x_nsd2.MultABC(PSIe_n_inverse,fdGchidSIGMA_tr_transpose,fTemp_matrix_nsd_x_nsd);
                                     fChip.SetToScaled(fDelgammachi,fTemp_matrix_nsd_x_nsd2);
                                     fChip+=fChip_n;

          							 fTemp_matrix_nsd_x_nsd = fChip;
          							 fTemp_matrix_nsd_x_nsd-= fChip_n;
          							 DeltaLbarchiP.MultAB(fTemp_matrix_nsd_x_nsd,fChip_inverse);

                                     //Form inverse of Chi^p
                                     fChip_inverse.Inverse(fChip);

                                     //Calculate Chie
                                     fChie.MultAB(ChiM,fChip_inverse);

          							 fTemp_matrix_nsd_x_nsd2.MultABT(fCchie_n_inverse,PSIe_n);
          							 fTemp_matrix_nsd_x_nsd3.MultAB(DeltaLbarchiP,fTemp_matrix_nsd_x_nsd2);
          							 fTemp_matrix_nsd_x_nsd2.MultAB(PSIe_n,fTemp_matrix_nsd_x_nsd3);
          							 fTemp_matrix_nsd_x_nsd3.MultAB(fCe_n_inverse,fTemp_matrix_nsd_x_nsd2);

                                     fTemp_matrix_nsd_x_nsd.MultABT(fCe_n_inverse,fdGdS_tr);
                                     fTemp_matrix_nsd_x_nsd*=fDelgamma;

          							 fTemp_matrix_nsd_x_nsd3+= fIdentity_matrix;
          							 fTemp_matrix_nsd_x_nsd3+= fTemp_matrix_nsd_x_nsd;

          							 fFp.MultAB(fTemp_matrix_nsd_x_nsd3,fFp_n);
          							 fFp_inverse.Inverse(fFp);
          							 fFe.MultAB(fDeformation_Gradient,fFp_inverse);



                                     //[fElastic_Right_Cauchy_Green_tensor] will be formed
                                     fRight_Elastic_Cauchy_Green_tensor.MultATB(fFe,fFe);
                                     if (fRight_Elastic_Cauchy_Green_tensor.Det()==0)
                                         fRight_Elastic_Cauchy_Green_tensor = fIdentity_matrix;


                                     //Update Elastic Lagrangian strain tensor E
                                     Elastic_LagrangianStn=fIdentity_matrix;
                                     Elastic_LagrangianStn*=-1;
                                     Elastic_LagrangianStn+=fRight_Elastic_Cauchy_Green_tensor;
                                     Elastic_LagrangianStn*=0.5;
                                     Elastic_LagrangianStn_trace=Elastic_LagrangianStn.Trace();

                                     //[fMicroElastic_Right_Cauchy_Green_tensor] (Cchie) will be formed
                                     fMicroRight_Elastic_Cauchy_Green_tensor.MultATB(fChie,fChie);
                                     if (fMicroRight_Elastic_Cauchy_Green_tensor.Det()==0)
                                         fMicroRight_Elastic_Cauchy_Green_tensor = fIdentity_matrix;


                                     //Update fCchie
                                     fCchie.MultATB(fChie,fChie);

                                     //Update PSIe
                                     PSIe.MultATB(fFe,fChie);


                                     //Update Elastic micro strain tenso will be formed in Bbar
                                     Elastic_MicroStnTensor = fIdentity_matrix;
                                     Elastic_MicroStnTensor *= -1;
                                     Elastic_MicroStnTensor += PSIe;
                                     Elastic_MicroStnTensor_trace=Elastic_MicroStnTensor.Trace();
                                     Elastic_MicroStnTensor_transpose.Transpose(Elastic_MicroStnTensor);

                                     //update S stress

                                     fTemp_matrix_nsd_x_nsd.SetToScaled(Elastic_LagrangianStn_trace*(fMaterial_Params[kLambda]+fMaterial_Params[kTau]),fIdentity_matrix);
                                     SPK.SetToScaled(2*(fMaterial_Params[kMu]+fMaterial_Params[kSigma_const]),Elastic_LagrangianStn);
                                     SPK+=fTemp_matrix_nsd_x_nsd;

                                     fTemp_matrix_nsd_x_nsd.SetToScaled(Elastic_MicroStnTensor_trace*fMaterial_Params[kEta],fIdentity_matrix);
                                     SPK+=fTemp_matrix_nsd_x_nsd;

                                     fTemp_matrix_nsd_x_nsd.SetToScaled(fMaterial_Params[kKappa],Elastic_MicroStnTensor);
                                     SPK+=fTemp_matrix_nsd_x_nsd;

                                     fTemp_matrix_nsd_x_nsd.SetToScaled(fMaterial_Params[kNu],Elastic_MicroStnTensor_transpose);
                                     SPK+=fTemp_matrix_nsd_x_nsd;

    								 Pbar = SPK.Trace()/3;//Calculating the pressure term
    								 devSPK.SetToScaled(Pbar,fIdentity_matrix);
    								 devSPK*=-1;
    								 devSPK+=SPK;
    								 Temp_inv= devSPK.ScalarProduct();
    								 devfSPKinv=sqrt(Temp_inv);

                                     //Update Relative stress SIGMA_S
                                     SIGMA_S.SetToScaled(Elastic_LagrangianStn_trace*fMaterial_Params[kTau],fIdentity_matrix);
                                     // 2sigmaE
                                     fTemp_matrix_nsd_x_nsd.SetToScaled(2*fMaterial_Params[kSigma_const],Elastic_LagrangianStn);
                                     SIGMA_S+=fTemp_matrix_nsd_x_nsd;
                                     //(eta-Tau)trEpsilon.1
                                     Temp_inv=Elastic_MicroStnTensor.Trace();
                                     fTemp_matrix_nsd_x_nsd.SetToScaled(Elastic_MicroStnTensor_trace*(fMaterial_Params[kEta]-fMaterial_Params[kTau]),fIdentity_matrix);
                                     SIGMA_S+=fTemp_matrix_nsd_x_nsd;
                                     //(nu-sigma)*Epsilon
                                     fTemp_matrix_nsd_x_nsd.SetToScaled((fMaterial_Params[kNu]-fMaterial_Params[kSigma_const]),Elastic_MicroStnTensor);
                                     SIGMA_S+=fTemp_matrix_nsd_x_nsd;
                                     //(kappa-sigma)*Epsilon^T
                                     fTemp_matrix_nsd_x_nsd.SetToScaled((fMaterial_Params[kKappa]-fMaterial_Params[kSigma_const]),Elastic_MicroStnTensor_transpose);
                                     SIGMA_S+=fTemp_matrix_nsd_x_nsd;

                                     //calculate  devS stress
         							 Pchibar=SIGMA_S.Trace()/3;//
                                     devSIGMA_S.SetToScaled(Pchibar,fIdentity_matrix);
                                     devSIGMA_S*=-1;
                                     devSIGMA_S+=SIGMA_S;
                                     //Calculate dev(SIGMA-S):dev(SIGMA-S)
                                     Temp_inv= devSIGMA_S.ScalarProduct();
                                     // Calculate ||dev(SIGMA-S)||
                                     devSIGMA_S_inv=sqrt(Temp_inv);

                                     SIGMA= SIGMA_S;
                                     SIGMA+= SPK;
                                     fMeanSIGMA_e= SIGMA.Trace()/3;
                                     fdevSIGMA.SetToScaled(fMeanSIGMA_e,fIdentity_matrix);
                                     fdevSIGMA*=-1;
                                     fdevSIGMA+=SIGMA;
                                     Temp_inv= fdevSIGMA.ScalarProduct();
                                     fNormdevSIGMA=sqrt(Temp_inv);

                                     Xphi=fState_variables_IPs(IP,Kappa)-fMaterial_Params[kR]*(Aphi*cohesion-Bphi*fState_variables_IPs(IP,Kappa));
                 					 Xphi_m=-1.0*fMaterial_Params[kR]*(Aphi*cohesion-Bphi*fState_variables_IPs(IP,Kappa));
                 					 Xpsi_m=-1.0*fMaterial_Params[kR]*(Apsi*cohesion-Bpsi*fState_variables_IPs(IP,Kappa));
                 					 fMacfunc=0.5*(fabs(fState_variables_IPs(IP,Kappa)-3*Pbar)+fState_variables_IPs(IP,Kappa)-3*Pbar);
                 					 fPhiCap=1-fMacfunc*(fState_variables_IPs(IP,Kappa)-3*Pbar)/(Xphi_m*Xphi_m);
                 					 fPsiCap=1-fMacfunc*(fState_variables_IPs(IP,Kappa)-3*Pbar)/(Xpsi_m*Xpsi_m);

                 					 Xphi_chi=fState_variables_IPs(IP,Kappa_chi)-fMaterial_Params[kR_chi]*(Aphi_chi*cohesion_chi-Bphi_chi*fState_variables_IPs(IP,Kappa_chi));
                 					 Xphi_chi_m=-1*fMaterial_Params[kR_chi]*(Aphi_chi*cohesion_chi-Bphi_chi*fState_variables_IPs(IP,Kappa_chi));
                 					 Xpsi_chi_m=-1*fMaterial_Params[kR_chi]*(Apsi_chi*cohesion_chi-Bpsi_chi*fState_variables_IPs(IP,Kappa_chi));
                 					 fMacfunc_chi=0.5*(fabs(fState_variables_IPs(IP,Kappa_chi)-3*fMeanSIGMA_e)+fState_variables_IPs(IP,Kappa_chi)-3*fMeanSIGMA_e);
                 					 fPhiCap_chi=1-fMacfunc_chi*(fState_variables_IPs(IP,Kappa_chi)-3*fMeanSIGMA_e)/(Xphi_chi_m*Xphi_chi_m);
                 					 fPsiCap_chi=1-fMacfunc_chi*(fState_variables_IPs(IP,Kappa_chi)-3*fMeanSIGMA_e)/(Xpsi_chi_m*Xpsi_chi_m);

         							// Calculate yield function with updated parameters
         							 fYield_function=devfSPKinv-sqrt(fabs(fPhiCap))*(Aphi*cohesion-Bphi*Pbar);
         							 fMicroYield_function = fNormdevSIGMA-sqrt(fabs(fPhiCap_chi))*(Aphi_chi*cohesion_chi-Bphi_chi*fMeanSIGMA_e);

                                     GXp = 0.0;
                                     fs_micromorph3D_out<<"Current Macro relative residual = "<< fabs(fYield_function/fYield_function_tr)<<" && "<< "Current Micro relative residual = " << fabs(fMicroYield_function/fMicroYield_function_tr) << " && "<<" Yield Function="<< fYield_function<<" && "<<" Micro Yield Function = "<< fMicroYield_function << endl;
                                 }

                                 if (abs(fMicroYield_function) > 1e-1 || abs(fYield_function) > 1e-1 || fDelgamma < 0.0 || fDelgammachi < 0.0)
    								{
                                	 if (abs(fMicroYield_function) > 1e-1)
    									 {
    										fs_micromorph3D_out << "Local Delgamma Newton-Raphson algorithm for the Capped model did not approach to zero for Microyield_func of the Coupled-Plasticity" << endl;
    										ExceptionT::GeneralFail(caller,"Local Delgamma Newton-Raphson algorithm for the Capped model did not approach to zero for Microyield_func of the Coupled-Plasticity %e.", fMicroYield_function);
    									 }
                                   	 if (abs(fYield_function) > 1e-1)
                                    	 {
        									fs_micromorph3D_out << "Local Delgamma Newton-Raphson algorithm for the Capped model did not approach to zero for Macroyield_func of the Coupled-Plasticity" << endl;
        									ExceptionT::GeneralFail(caller,"Local Delgamma Newton-Raphson algorithm for the Capped model did not approach to zero for Macroyield_func of the Coupled-Plasticity %e.", fYield_function);
                                    	 }
                                   	 if (fDelgamma < 0.0)
                                    	 {
        									fs_micromorph3D_out << "Local Delgamma Newton-Raphson algorithm for the Capped model did not find positive fDelgamma for Coupled-Plasticity" << endl;
        									ExceptionT::GeneralFail(caller,"Local Delgamma Newton-Raphson algorithm for the Capped model did not find positive fDelgamma for Coupled-Plasticity %e.", fDelgamma);
                                    	 }
                                   	 if (fDelgammachi < 0.0)
                                    	 {
        									fs_micromorph3D_out << "Local Delgamma Newton-Raphson algorithm for the Capped model did not find positive fDelgammachi for Coupled-Plasticity" << endl;
        									ExceptionT::GeneralFail(caller,"Local Delgamma Newton-Raphson algorithm for the Capped model did not find positive fDelgammachi for Coupled-Plasticity %e.", fDelgammachi);
                                    	 }
    								}
    								else
    								{
    									fState_variables_IPs(IP,kDelgammachi) = fDelgammachi;
    									fState_variables_IPs(IP,kc_chi) = cohesion_chi;
    									fState_variables_IPs(IP,kDelgamma) = fDelgamma;
    									fState_variables_IPs(IP,kc) = cohesion;
    		    						fState_variables_IPs(IP,kc_nablachi0) =  fState_variables_n_IPs(IP,kc_nablachi0);
    		    						fState_variables_IPs(IP,kc_nablachi1) =  fState_variables_n_IPs(IP,kc_nablachi1);
    		    						fState_variables_IPs(IP,kc_nablachi2) =  fState_variables_n_IPs(IP,kc_nablachi2);
    		    						fState_variables_IPs(IP,Kappa_nablachi0) =  fState_variables_n_IPs(IP,Kappa_nablachi0);
    		    						fState_variables_IPs(IP,Kappa_nablachi1) =  fState_variables_n_IPs(IP,Kappa_nablachi1);
    		    						fState_variables_IPs(IP,Kappa_nablachi2) =  fState_variables_n_IPs(IP,Kappa_nablachi2);
    		    						fState_variables_IPs(IP,kDelgammanablachi) = fDelgammanablachi;
    									fs_micromorph3D_out << "fDelgamma = " << fDelgamma << endl;
    									fs_micromorph3D_out << "fDelgammachi = " << fDelgammachi << endl;
    									fs_micromorph3D_out << "fState_variables_IPs(IP,kc_chi) = " << fState_variables_IPs(IP,kc_chi) << endl;
    									fs_micromorph3D_out << "fState_variables_IPs(IP,kc) = " << fState_variables_IPs(IP,kc) << endl;
    									fs_micromorph3D_out << "fState_variables_IPs(IP,kDelgammachi) = " << fState_variables_IPs(IP,kDelgammachi) << endl;
    									fs_micromorph3D_out << "fState_variables_IPs(IP,kDelgamma) = " << fState_variables_IPs(IP,kDelgamma) << endl;
    								}
                             }




    				if(iPlasticityCheck==0 && fMicro_gradient_Yield_function_tr>dYieldTrialTol)
    					{

    						fs_micromorph3D_out<<"MICRO-GRADIENT-PLASTICITY"<<endl;
    						fMicro_gradient_Yield_function = fMicro_gradient_Yield_function_tr;
    						Micro_gradient_Plasticity_Occurrence = 1;

    						if (Micro_Plasticity_Occurrence == 0 && Macro_Plasticity_Occurrence == 0)
    						{
    							fFe=fFe_tr;
    							fChie=fChie_tr;
    							fCchie=fCchie_tr;
    							fFp=fFp_n;
    							fFp_inverse.Inverse(fFp);
    							SPK=fSPK_tr;
    							devSPK=fdevSPK_tr;
    							fTemp_matrix_one_x_one = fdevSPK_tr.ScalarProduct();
    							devfSPKinv_tr = sqrt(fTemp_matrix_one_x_one);
    							devfSPKinv = devfSPKinv_tr;
    							SIGMA_S=SIGMA_S_tr;
    							devSIGMA_S_inv=devSIGMA_S_inv_tr;
    							devSIGMA_S=devSIGMA_S_tr;
								SIGMA=SIGMA_tr;
								fNormdevSIGMA=fNormdevSIGMA_tr;
								fdevSIGMA=fdevSIGMA_tr;
								fMeanSIGMA_e=fMeanSIGMA_etr;
    							PSIe=PSIe_tr;
    							fChip=fChip_n;
    							fChip_inverse.Inverse(fChip);
    							fState_variables_IPs(IP,kc) =  fState_variables_n_IPs(IP,kc);
    							fState_variables_IPs(IP,kc_chi) = fState_variables_n_IPs(IP,kc_chi);
    							fState_variables_IPs(IP,Kappa) =  fState_variables_n_IPs(IP,Kappa);
    							fState_variables_IPs(IP,Kappa_chi) = fState_variables_n_IPs(IP,Kappa_chi);
    							fState_variables_IPs(IP,kDelgamma) = fDelgamma;
    							fState_variables_IPs(IP,kDelgammachi) = fDelgammachi;
    							fState_variables_IPs(IP,kZkappa)=fState_variables_n_IPs(IP,kZkappa);
    							fState_variables_IPs(IP,kZkappa_chi)=fState_variables_n_IPs(IP,kZkappa_chi);
    							Pbar=Pbar_tr;
    							Pchibar=Pchibar_tr;
            					Xphi_m=Xphi_m_n;
            					Xpsi_m=Xpsi_m_n;
            					fMacfunc=fMacfunc_tr;
            					fPhiCap=fPhiCap_tr;
            					fPsiCap=fPsiCap_tr;

								Xphi_chi_m=Xphi_chi_m_n;
								Xpsi_chi_m=Xpsi_chi_m_n;
								fMacfunc_chi=fMacfunc_chi_tr;
								fPhiCap_chi=fPhiCap_chi_tr;
								fPsiCap_chi=fPsiCap_chi_tr;
    						}

    						fDelgammanablachi = 0.0;
    						fdelDelgammanablachi = 0.0;
    						fMeKLM = fMKLM_tr;
    						Mean_fMeKLM = Mean_fMKLM_tr;
    						fdevMeKLM = fdevMKLM_tr;
    						fNormdevMeKLM = fNormdevMKLM_tr;
    						Norm_Mean_fMeKLM = Norm_Mean_fMKLM_tr;
    						fMacfunc_nablachi = fMacfunc_nablachi_tr;
    						Xphi_nablachi = Xphi_nablachi_n;
    						Xphi_nablachi_m = Xphi_nablachi_m_n;
    						fPhiCap_nablachi = fPhiCap_nablachi_tr;
    						Xpsi_nablachi_m = Xpsi_nablachi_m_n;
    						fPsiCap_nablachi = fPsiCap_nablachi_tr;


    						Form_kc_nablachi_n(IP);
    						Form_Norm_kc_nablachi_n();

    						Form_Kappa_nablachi_n(IP);
    						Form_Norm_Kappa_nablachi_n();

    						cohesion_nablachi = kc_nablachi_n;
    						Norm_cohesion_nablachi = Norm_kc_nablachi_n;

    						Kappa_nablachi = Kappa_nablachi_n;
    						Norm_Kappa_nablachi = Norm_Kappa_nablachi_n;

    						fTemp_matrix_nsd_x_nsd = fFp;
    						fTemp_matrix_nsd_x_nsd-= fFp_n;
    						fDeltaLbar_P.MultATB(fTemp_matrix_nsd_x_nsd,fFp_inverse);

    						fTemp_matrix_nsd_x_nsd = fChip;
    						fTemp_matrix_nsd_x_nsd-= fChip_n;
    						fDeltaLbarChai_P.MultATB(fTemp_matrix_nsd_x_nsd,fChip_inverse);



    						fs_micromorph3D_out << "Mean_fMeKLM = " << Mean_fMeKLM << endl;
    						fs_micromorph3D_out << "fdevMeKLM = " << fdevMeKLM << endl;
    						fs_micromorph3D_out << "fNormdevMeKLM = " << fNormdevMeKLM << endl;
    						fs_micromorph3D_out << "Norm_Mean_fMeKLM = " << Norm_Mean_fMeKLM << endl;
    						fs_micromorph3D_out << "kc_nablachi_n = " << kc_nablachi_n << endl;
    						fs_micromorph3D_out << "Norm_kc_nablachi_n = " << Norm_kc_nablachi_n << endl;

    						fs_micromorph3D_out << "fNormdevMKLM_tr = " << fNormdevMKLM_tr << endl;
    						fs_micromorph3D_out << "Norm_Mean_fMKLM_tr = " << Norm_Mean_fMKLM_tr << endl;

    						// iterate using Newton-Raphson to solve for fDelgammanablachai
    						iter_count = 0;
    						fs_micromorph3D_out << "Gauss Point = " << IP << endl;
    						fs_micromorph3D_out << "Current Macro Yield function = " << fYield_function << endl;

    						while (fabs(fMicro_gradient_Yield_function) > dAbsTol && iter_count < iIterationMax)
    						{
    							iter_count += 1;
    							Form_dfMKLMdDelgammanablachi();
    							Form_dmeanfMKLMdDelgammanablachi();
    							Form_dfdevMKLMdDelgammanablachi();
    							Form_dfNorm_devMKLMdDelgammanablachi();
    							Form_dNorm_meanfMKLMdDelgammanablachi();
    							Form_dfkc_nablachidDelgammanablachi(IP);
    							Form_dNorm_kc_nablachidDelgammanablachi();
    							Form_dfKappa_nablachidDelgammanablachi(IP);
    							Form_dNorm_Kappa_nablachidDelgammanablachi();

    							dXphi_nablachi_mdDelgammanablachi = -1*fMaterial_Params[kR_nablachi]*(Aphi_nablachi*dNorm_kc_nablachidDelgammanablachi-
    									Bphi_nablachi*dNorm_Kappa_nablachidDelgammanablachi);

    							dFphi_nabalchidDelgammanablachi = (2*fMacfunc_nablachi/(Xphi_nablachi_m*Xphi_nablachi_m))*(fMacfunc_nablachi/(Xphi_nablachi_m)*
    									(dXphi_nablachi_mdDelgammanablachi)-dNorm_Kappa_nablachidDelgammanablachi+3*dNorm_meanfMKLMdDelgammanablachi);

    							dFyield_nablachidDelgammanablachi = dfNorm_devMKLMdDelgammanablachi-dFphi_nabalchidDelgammanablachi*
    							(Aphi_nablachi*Norm_cohesion_nablachi-Bphi_nablachi*Norm_Mean_fMeKLM)/(2*sqrt(fabs(fPhiCap_nablachi)))-
    							sqrt(fabs(fPhiCap_nablachi))*(Aphi_nablachi*dNorm_kc_nablachidDelgammanablachi-Bphi_nablachi*dNorm_meanfMKLMdDelgammanablachi);


    							//solve for fdelDelgammanablaci
    							if (fabs(dFyield_nablachidDelgammanablachi) >= 1e-12) fdelDelgammanablachi = -fMicro_gradient_Yield_function/dFyield_nablachidDelgammanablachi;
    							else fdelDelgammanablachi = 0.0;

    								fDelgammanablachi+= fdelDelgammanablachi;


    								fTemp_matrix_one_x_one = (1/Norm_kc_nablachi_n)*fMaterial_Params[kHc_nablachi]*fState_variables_n_IPs(IP,khc_nablachi)*fDelgammanablachi;
    								fDelkc_nablachi.SetToScaled(fTemp_matrix_one_x_one,kc_nablachi_n);

									cohesion_nablachi=kc_nablachi_n;
									cohesion_nablachi+= fDelkc_nablachi;

    								fTemp_matrix_one_x_one = (1/Norm_Kappa_nablachi_n)*fMaterial_Params[kHKappa_nablachi]*fState_variables_n_IPs(IP,khKappa_nablachi)*fDelgammanablachi;
    								fDelKappa_nablachi.SetToScaled(fTemp_matrix_one_x_one,Kappa_nablachi_n);

									Kappa_nablachi=Kappa_nablachi_n;
									Kappa_nablachi+= fDelKappa_nablachi;

    							if (cohesion_nablachi(0,0) < 0.0)
    							{
    								cohesion_nablachi(0,0) = 0.0;
    								fState_variables_IPs(IP,kc_nablachi0)= fState_variables_n_IPs(IP,kc_nablachi0);
    							}

    							if (cohesion_nablachi(1,0) < 0.0)
    							{
    								cohesion_nablachi(1,0) = 0.0;
    								fState_variables_IPs(IP,kc_nablachi1)= fState_variables_n_IPs(IP,kc_nablachi1);
    							}

    							if (cohesion_nablachi(2,0) < 0.0)
    							{
    								cohesion_nablachi(2,0) = 0.0;
    								fState_variables_IPs(IP,kc_nablachi2)= fState_variables_n_IPs(IP,kc_nablachi2);
    							}

    							if (Kappa_nablachi(0,0) < 0.0)
    							{
    								Kappa_nablachi(0,0) = 0.0;
    								fState_variables_IPs(IP,Kappa_nablachi0)= fState_variables_n_IPs(IP,Kappa_nablachi0);
    							}

    							if (Kappa_nablachi(1,0) < 0.0)
    							{
    								Kappa_nablachi(1,0) = 0.0;
    								fState_variables_IPs(IP,Kappa_nablachi1)= fState_variables_n_IPs(IP,Kappa_nablachi1);
    							}

    							if (Kappa_nablachi(2,0) < 0.0)
    							{
    								Kappa_nablachi(2,0) = 0.0;
    								fState_variables_IPs(IP,Kappa_nablachi2)= fState_variables_n_IPs(IP,Kappa_nablachi2);
    							}


    				            Form_GXp();
    				            Form_GXe();
    				            Form_GAMMAe();
    				            Form_fMeKLM();
    				            Form_Mean_fMeKLM();
    				            Form_fdevMeKLM();
    				            Form_Norm_Mean_fMeKLM();
    				            Form_fNormdevMeKLM();
    				            Form_Norm_cohesion_nablachi();
    				            Form_Norm_Kappa_nablachi();

    							Xphi_nablachi = Norm_Kappa_nablachi-fMaterial_Params[kR_nablachi]*(Aphi_nablachi*Norm_cohesion_nablachi-Bphi_nablachi*Norm_Kappa_nablachi);
    							Xphi_nablachi_m = -1*fMaterial_Params[kR_nablachi]*(Aphi_nablachi*Norm_cohesion_nablachi-Bphi_nablachi*Norm_Kappa_nablachi);
    							Xpsi_nablachi_m = -1*fMaterial_Params[kR_nablachi]*(Apsi_nablachi*Norm_cohesion_nablachi-Bpsi_nablachi*Norm_Kappa_nablachi);
    	                        fMacfunc_nablachi = 0.5*(fabs(Norm_Kappa_nablachi-3*Norm_Mean_fMeKLM)+(Norm_Kappa_nablachi-3*Norm_Mean_fMeKLM));
    	                        fPhiCap_nablachi = 1-fMacfunc_nablachi*(Norm_Kappa_nablachi-3*Norm_Mean_fMeKLM)/(Xphi_nablachi_m*Xphi_nablachi_m);
    	                        fPsiCap_nablachi = 1-fMacfunc_nablachi*(Norm_Kappa_nablachi-3*Norm_Mean_fMeKLM)/(Xpsi_nablachi_m*Xpsi_nablachi_m);


    				            fMicro_gradient_Yield_function = fNormdevMeKLM - sqrt(fabs(fPhiCap_nablachi))*(Aphi_nablachi*Norm_cohesion_nablachi
    							- Bphi_nablachi*Norm_Mean_fMeKLM);

    					//		fs_micromorph3D_out  << "fMicro_gradient_Yield_function = " << fMicro_gradient_Yield_function << endl;

    							}


    					if (abs(fMicro_gradient_Yield_function) > 1e-1 || fDelgammanablachi < 0.0)
    					{
    						if (abs(fMicro_gradient_Yield_function) > 1e-1)
    						{
    							fs_micromorph3D_out << "Local Delgamma Newton-Raphson algorithm for the Capped model did not approach to zero for the MicroGradiednt Plasticity" << endl;
    							ExceptionT::GeneralFail(caller,"Local Delgamma Newton-Raphson algorithm for the Capped model did not approach to zero for the micro-gradient plasticity %e.", fMicro_gradient_Yield_function);
    						}
    						if (fDelgammanablachi < 0.0)
    						{
    							fs_micromorph3D_out << "Local Delgamma Newton-Raphson algorithm for the Capped model did not find a positive DelgammaNablaChi" << endl;
    							ExceptionT::GeneralFail(caller,"Local Delgamma Newton-Raphson algorithm for the Capped model did not find a positive DelgammaNablaChi for the micro-gradient plasticity %e.", fDelgammanablachi);
    						}
    					}
    					else
    					{
    						fState_variables_IPs(IP,kDelgammanablachi) = fDelgammanablachi;
    						fState_variables_IPs(IP,kc_nablachi0) =  cohesion_nablachi(0,0);
    						fState_variables_IPs(IP,kc_nablachi1) =  cohesion_nablachi(1,0);
    						fState_variables_IPs(IP,kc_nablachi2) =  cohesion_nablachi(2,0);
    						fState_variables_IPs(IP,Kappa_nablachi0) =  Kappa_nablachi(0,0);
    						fState_variables_IPs(IP,Kappa_nablachi1) =  Kappa_nablachi(1,0);
    						fState_variables_IPs(IP,Kappa_nablachi2) =  Kappa_nablachi(2,0);

    						fs_micromorph3D_out << "fState_variables_IPs(IP,kc_chi) = " << fState_variables_IPs(IP,kc_chi) << endl;
    						fs_micromorph3D_out << "fState_variables_IPs(IP,kc) = " << fState_variables_IPs(IP,kc) << endl;
    						fs_micromorph3D_out << "fState_variables_IPs(IP,kDelgammachi) = " << fState_variables_IPs(IP,kDelgammachi) << endl;
    						fs_micromorph3D_out << "fState_variables_IPs(IP,kDelgamma) = " << fState_variables_IPs(IP,kDelgamma) << endl;
    					}
    					}

    //                              /* This part is already calculated above*/
    //                              /* calculate fFp_Inverse  */
                                  fFp_inverse.Inverse(fFp);
                                  /* calculate Fe */
                                  fFe.MultAB(fDeformation_Gradient,fFp_inverse);
                                  /* [fElastic_Right_Cauchy_Green_tensor] will be formed */
                                  fRight_Elastic_Cauchy_Green_tensor.MultATB(fFe,fFe);
                                  if (fRight_Elastic_Cauchy_Green_tensor.Det()==0)
                                          fRight_Elastic_Cauchy_Green_tensor = fIdentity_matrix;





                                    Jp=fFp.Det();
                                    Je=fFe.Det();

                                    fTemp_matrix_nsd_x_nsd.MultABCT(fFe,SPK,fFe);
                                    KirchhoffST.SetToScaled(Jp,fTemp_matrix_nsd_x_nsd);
                                    fCauchy_stress_tensor_current_IP.SetToScaled(1/J,KirchhoffST);
                                    //fs_micromorph3D_out<<"fCauchy_stress_tensor_current_IP= "<< fCauchy_stress_tensor_current_IP<<endl;
                                    //fs_micromorph3D_out<<"SPK= "<< SPK<<endl;
                                    //fs_micromorph3D_out<<"fFe= "<< fFe<<endl;




                                    // Save Cauchy effective stress tensor of the current IP
                                    fCauchy_stress_IPs.SetRow(IP,fCauchy_stress_tensor_current_IP);

                                    /* [fLeft_Cauchy_Green_tensor] will be formed */
                                    fLeft_Cauchy_Green_tensor.MultABT(fDeformation_Gradient, fDeformation_Gradient);
                                    /* [fLeft_Cauchy_Green_tensor_Inverse] will be formed */
                                    if (fLeft_Cauchy_Green_tensor.Det()==0)
                                            fLeft_Cauchy_Green_tensor = fIdentity_matrix;
                                    fLeft_Cauchy_Green_tensor_Inverse.Inverse(fLeft_Cauchy_Green_tensor);

                                    /* [fEulerian_strain_tensor_current_IP] will be formed */
                                    fEulerian_strain_tensor_current_IP = fLeft_Cauchy_Green_tensor_Inverse;
                                    fEulerian_strain_tensor_current_IP *= -1;
                                    fEulerian_strain_tensor_current_IP += fIdentity_matrix;
                                    fEulerian_strain_tensor_current_IP *= 0.5;

                                    /* The Right Cauchy Green  Tensor will be formed */
                                    fRight_Cauchy_Green_tensor.MultATB(fDeformation_Gradient,fDeformation_Gradient);
                                    if (fRight_Cauchy_Green_tensor.Det()==0)
                                            fRight_Cauchy_Green_tensor = fIdentity_matrix;



                                    /* Total Lagrangian Strain Tensor will be formed */
                                    LagrangianStn=fIdentity_matrix;
                                    LagrangianStn*=-1;
                                    LagrangianStn+=fRight_Cauchy_Green_tensor;
                                    LagrangianStn*=0.5;

                                    /* Total Lagraingian strain tensor is saved as Eulerian strain tensor for plotting purposes */
                                    fEulerian_strain_tensor_current_IP=LagrangianStn;

                                    Extract_six_values_from_symmetric_tensor(fEulerian_strain_tensor_current_IP,fTemp_nine_values);

                                    /* Save Eulerian strain tensor of the current IP */
                                    fEulerian_strain_IPs.SetRow(IP,fTemp_nine_values);

                                   /* [fMicroElastic_Right_Cauchy_Green_tensor] (Cchie) will be formed */
                                    fMicroRight_Elastic_Cauchy_Green_tensor.MultATB(fChie,fChie);
                                    if (fMicroRight_Elastic_Cauchy_Green_tensor.Det()==0)
                                     fMicroRight_Elastic_Cauchy_Green_tensor = fIdentity_matrix;

                                    /* Assigning MicroRight_Elastic_Cauchy_Green_tensor to fCchie to be used in calculations*/
                                    fCchie=fMicroRight_Elastic_Cauchy_Green_tensor;

                                    /* Calculating the inverse of PSIe */
                                    //PSIe_inverse.Inverse(PSIe);
    								Form_GXe();
    								Form_GAMMAe();
                                    Form_fMeKLM();
                                    Form_Mean_fMeKLM();
        				            Form_fdevMeKLM();
        				            Form_Norm_Mean_fMeKLM();
        				            Form_fNormdevMeKLM();

        				            if (Micro_gradient_Plasticity_Occurrence == 0)
        				            {
        				            	Norm_cohesion_nablachi=Norm_kc_nablachi_n;
        	    						Xphi_nablachi = Xphi_nablachi_n;
        	    						Xphi_nablachi_m = Xphi_nablachi_m_n;
        	    						Xpsi_nablachi_m = Xpsi_nablachi_m_n;
        	    						fMacfunc_nablachi = 0.5*(fabs(Norm_Kappa_nablachi_n-3*Norm_Mean_fMeKLM)+(Norm_Kappa_nablachi_n-3*Norm_Mean_fMeKLM));
        	    						fPhiCap_nablachi =  1-fMacfunc_nablachi*(Norm_Kappa_nablachi_n-3*Norm_Mean_fMeKLM)/(Xphi_nablachi_m*Xphi_nablachi_m);
        	    						fPsiCap_nablachi =  1-fMacfunc_nablachi*(Norm_Kappa_nablachi_n-3*Norm_Mean_fMeKLM)/(Xpsi_nablachi_m*Xpsi_nablachi_m);
        	    						fDelgammanablachi = 0.0;
        	    						Kappa_nablachi=Kappa_nablachi_n;
        	    						Norm_Kappa_nablachi = Norm_Kappa_nablachi_n;
        				            }

        							if (fMacfunc > 0.0) signMacfunc = 1.0;
        							else signMacfunc = 0.0;

        							if (fMacfunc_chi > 0.0) signfMacfunc_chi = 1.0;
        							else signfMacfunc_chi = 0.0;

        							if (fMacfunc_nablachi > 0.0) signfMacfunc_nablachi = 1.0;
        							else signfMacfunc_nablachi = 0.0;


        							if (devfSPKinv<=1 && fMaterial_Params[kCapped_Model_Flag] == 1)
        							{
        								fdGdc=(-1.0/3.0)*fMaterial_Params[kR]*Apsi;
        								dGdKappa=(1.0/3.0)*fMaterial_Params[kR]*Bpsi;
        								fdGdS.SetToScaled(-1.0/3.0,fIdentity_matrix);
        								fdFYdc=(-1.0/3.0)*fMaterial_Params[kR]*Aphi;
        								dFYdKappa=(1.0/3.0)*fMaterial_Params[kR]*Bphi;
        								fdFYdS.SetToScaled(-1.0/3.0,fIdentity_matrix);
            	    					fState_variables_IPs(IP,khKappa) = -1.0*dGdKappa;
            	    					fState_variables_IPs(IP,khc) = -1.0*fdGdc;
        							}
        							else
        							{
            	                        Cpsi = ((Bpsi*sqrt(fabs(fPsiCap))/3.0)-(Apsi*fState_variables_IPs(IP,kc)-Bpsi*Pbar)*
            	                        		(signMacfunc*(fState_variables_IPs(IP,Kappa)-3*Pbar)/(Xpsi_m*Xpsi_m*sqrt(fabs(fPsiCap)))));

            	                        Cphi = ((Bphi*sqrt(fabs(fPhiCap))/3.0)-(Aphi*fState_variables_IPs(IP,kc)-Bphi*Pbar)*
            	                        		(signMacfunc*(fState_variables_IPs(IP,Kappa)-3*Pbar)/(Xphi_m*Xphi_m*sqrt(fabs(fPhiCap)))));

                                        fdGdc=-1.0*sqrt(fabs(fPsiCap))*Apsi;

                                        dFpsidKappa = (-1.0*signMacfunc*(fState_variables_IPs(IP,Kappa)-3*Pbar)/(Xpsi_m*Xpsi_m))-
                                        (fMacfunc/(Xpsi_m*Xpsi_m))+(2*fMaterial_Params[kR]*Bpsi*fMacfunc*
                                        		(fState_variables_IPs(IP,Kappa)-3*Pbar))/(Xpsi_m*Xpsi_m*Xpsi_m);

                                        dGdKappa = -1*dFpsidKappa*(Apsi*fState_variables_IPs(IP,kc)-Bpsi*Pbar)/(2*sqrt(fabs(fPsiCap)));
            	    					fState_variables_IPs(IP,khKappa) = -1.0*dGdKappa;
            	    					fState_variables_IPs(IP,khc) = -1.0*fdGdc;

            	    					fdGdS = 0.0;
            	    					fdGdS.SetToScaled(Cpsi,fIdentity_matrix);
            	    					fTemp_matrix_nsd_x_nsd.SetToScaled(1/devfSPKinv,devSPK);
            	    					fdGdS+=fTemp_matrix_nsd_x_nsd;
            	    					fdGdS_transpose.Transpose(fdGdS);
            	    					//fs_micromorph3D_out<<"fdGdS= "<< fdGdS <<endl;

        								/* calculate stress derivative of yield function */
        								fdFYdS = 0.0;
        								fdFYdS.SetToScaled(Cphi,fIdentity_matrix);
        								fTemp_matrix_nsd_x_nsd.SetToScaled(1/devfSPKinv,devSPK);
        								fdFYdS+=fTemp_matrix_nsd_x_nsd;
        								fdFYdS_trace = fdFYdS.Trace();

        								fdFYdc=-1.0*sqrt(fabs(fPhiCap))*Aphi;

                                        dFphidKappa = (-1.0*signMacfunc*(fState_variables_IPs(IP,Kappa)-3*Pbar)/(Xphi_m*Xphi_m))-
                                        (fMacfunc/(Xphi_m*Xphi_m))+(2*fMaterial_Params[kR]*Bphi*fMacfunc*
                                        		(fState_variables_IPs(IP,Kappa)-3*Pbar))/(Xphi_m*Xphi_m*Xphi_m);
                                        dFYdKappa = -1*dFphidKappa*(Aphi*fState_variables_IPs(IP,kc)-Bphi*Pbar)/(2*sqrt(fabs(fPhiCap)));
        							}


        	                        Cpsi_chi = ((Bpsi_chi*sqrt(fabs(fPsiCap_chi))/3.0)-(Apsi_chi*fState_variables_IPs(IP,kc_chi)-Bpsi_chi*fMeanSIGMA_e)
        	                        		*(signfMacfunc_chi*(fState_variables_IPs(IP,Kappa_chi)-3*fMeanSIGMA_e)/(Xpsi_chi_m*Xpsi_chi_m*sqrt(fabs(fPsiCap_chi)))));

        	                        Cpsi_nablachi = ((Bpsi_nablachi*sqrt(fabs(fPsiCap_nablachi))/(3*Norm_Mean_fMeKLM))-(Apsi_nablachi*Norm_cohesion_nablachi-Bpsi_nablachi*Norm_Mean_fMeKLM)*
        	                        		(signfMacfunc_nablachi*(Norm_Kappa_nablachi-3*Norm_Mean_fMeKLM)
        	                        				/(Xpsi_nablachi_m*Xpsi_nablachi_m*Norm_Mean_fMeKLM*sqrt(fabs(fPsiCap_nablachi)))));


        	                        Cphi_chi = ((Bphi_chi*sqrt(fabs(fPhiCap_chi))/3.0)-(Aphi_chi*fState_variables_IPs(IP,kc_chi)-Bphi_chi*fMeanSIGMA_e)
        	                        		*(signfMacfunc_chi*(fState_variables_IPs(IP,Kappa_chi)-3*fMeanSIGMA_e)/(Xphi_chi_m*Xphi_chi_m*sqrt(fabs(fPhiCap_chi)))));

        	                        Cphi_nablachi = ((Bphi_nablachi*sqrt(fabs(fPhiCap_nablachi))/(3*Norm_Mean_fMeKLM))-(Aphi_nablachi*Norm_cohesion_nablachi-Bphi_nablachi*Norm_Mean_fMeKLM)*
        	                        		(signfMacfunc_nablachi*(Norm_Kappa_nablachi-3*Norm_Mean_fMeKLM)
        	                        				/(Xphi_nablachi_m*Xphi_nablachi_m*Norm_Mean_fMeKLM*sqrt(fabs(fPhiCap_nablachi)))));

                                    fdGYchidcchi=-1.0*sqrt(fabs(fPsiCap_chi))*Apsi_chi;


                                    dFpsichidKappachi = (-signfMacfunc_chi*(fState_variables_IPs(IP,Kappa_chi)-3*fMeanSIGMA_e)/(Xpsi_chi_m*Xpsi_chi_m))-
                                    (fMacfunc_chi/(Xpsi_chi_m*Xpsi_chi_m))+(2*fMaterial_Params[kR_chi]*Bpsi_chi*fMacfunc_chi*
                                    		(fState_variables_IPs(IP,Kappa_chi)-3*fMeanSIGMA_e))/(Xpsi_chi_m*Xpsi_chi_m*Xpsi_chi_m);

                                    dGchidKappachi = -1*dFpsichidKappachi*(Apsi_chi*fState_variables_IPs(IP,kc_chi)-Bpsi_chi*fMeanSIGMA_e)/(2*sqrt(fabs(fPsiCap_chi)));


        	    					fState_variables_IPs(IP,khKappa_chi) = -1*dGchidKappachi;
        	    					fState_variables_IPs(IP,khc_chi) = -1*fdGYchidcchi;

                                    fTemp_matrix_one_x_one = (-signfMacfunc_nablachi*(Norm_Kappa_nablachi-3*Norm_Mean_fMeKLM)/(Xpsi_nablachi_m*Xpsi_nablachi_m))-
                                    (fMacfunc_nablachi/(Xpsi_nablachi_m*Xpsi_nablachi_m))+(2*fMaterial_Params[kR_nablachi]*Bpsi_nablachi*fMacfunc_nablachi*
                                    		(Norm_Kappa_nablachi-3*Norm_Mean_fMeKLM))/(Xpsi_nablachi_m*Xpsi_nablachi_m*Xpsi_nablachi_m);
                                    fTemp_matrix_one_x_one*= ((Apsi_nablachi*Norm_cohesion_nablachi-Bpsi_nablachi*Norm_Mean_fMeKLM)/(2*sqrt(fabs(fPsiCap_nablachi))));

                                    fState_variables_IPs(IP,khKappa_nablachi) = fTemp_matrix_one_x_one;

                                    fTemp_matrix_one_x_one = -1.0*sqrt(fabs(fPsiCap_nablachi))*Apsi_nablachi;
                                    fState_variables_IPs(IP,khc_nablachi) = -1*fTemp_matrix_one_x_one;

/*
        	    					fState_variables_IPs(IP,kEpsVolp) = fState_variables_n_IPs(IP,kEpsVolp) + fState_variables_IPs(IP,kDelgamma)*3*Cpsi;
        	    					fState_variables_IPs(IP,khKappa) = 3*signMacfunc*exp(-fMaterial_Params[kAlpha]
        	    						*fState_variables_IPs(IP,kEpsVolp))*Cpsi;
        	    					fState_variables_IPs(IP,khc) =  2.0*devfSPKinv;

        	    					fState_variables_IPs(IP,kEpsVolp_chi) = fState_variables_n_IPs(IP,kEpsVolp_chi) + fState_variables_IPs(IP,kDelgammachi)*3*Cpsi_chi;
        	    					fState_variables_IPs(IP,khKappa_chi) = 3*signfMacfunc_chi*exp(-fMaterial_Params[kAlpha_chi]
        	    						*fState_variables_IPs(IP,kEpsVolp_chi))*Cpsi_chi;
        	    					fState_variables_IPs(IP,khc_chi) =  2.0*devSIGMA_S_inv;

        	    					fState_variables_IPs(IP,kEpsVolp_nablachi) = fState_variables_n_IPs(IP,kEpsVolp_nablachi) + fState_variables_IPs(IP,kDelgammanablachi)*3*Cpsi_nablachi;
        	    					fState_variables_IPs(IP,khKappa_nablachi) = 3*signfMacfunc_nablachi*exp(-fMaterial_Params[kAlpha_nablachi]
        	    						*fState_variables_IPs(IP,kEpsVolp_nablachi))*Cpsi_nablachi;
        	    					fState_variables_IPs(IP,khc_nablachi) =  2.0*fNormdevMeKLM;
*/

        	                        fdGchidSIGMA= 0.0;
        	                        fdGchidSIGMA.SetToScaled(Cpsi_chi,fIdentity_matrix);
        	                        fTemp_matrix_nsd_x_nsd.SetToScaled(1/fNormdevSIGMA,fdevSIGMA);
        	                        fdGchidSIGMA+=fTemp_matrix_nsd_x_nsd;

    								fTemp_matrix_nsd_x_nsd.MultABCT(fFe,SPK,fFe);
    								KirchhoffST.SetToScaled(Jp,fTemp_matrix_nsd_x_nsd);
    								fCauchy_stress_tensor_current_IP.SetToScaled(1/J,KirchhoffST);

    								/* calculate derivative of micro yield function with respect to SIGMA-S */
    								fdFYchidSIGMA = 0.0;
    								fdFYchidSIGMA.SetToScaled(Cphi_chi,fIdentity_matrix);
    								fTemp_matrix_nsd_x_nsd.SetToScaled(1/fNormdevSIGMA,fdevSIGMA);
    								fdFYchidSIGMA+=fTemp_matrix_nsd_x_nsd;
    								fdFYchidSIGMA_trace = fdFYchidSIGMA.Trace();


                                    Form_dGnablachidMKLM();
                                    Form_dFnablachidMKLM();
/*
        	                        fs_micromorph3D_out<<"GXp(0,0,0)= "<< GXp(0,0,0) <<endl;
        	                        fs_micromorph3D_out<<"GXp(0,0,1)= "<< GXp(0,0,1) <<endl;
        	                        fs_micromorph3D_out<<"GXp(0,0,2)= "<< GXp(0,0,2) <<endl;
        	                        fs_micromorph3D_out<<"GXp(0,1,0)= "<< GXp(0,1,0) <<endl;
        	                        fs_micromorph3D_out<<"GXp(0,1,1)= "<< GXp(0,1,1) <<endl;
        	                        fs_micromorph3D_out<<"GXp(0,1,2)= "<< GXp(0,1,2) <<endl;
        	                        fs_micromorph3D_out<<"GXp(0,2,0)= "<< GXp(0,2,0) <<endl;
        	                        fs_micromorph3D_out<<"GXp(0,2,1)= "<< GXp(0,2,1) <<endl;
        	                        fs_micromorph3D_out<<"GXp(0,2,2)= "<< GXp(0,2,2) <<endl;
        	                        fs_micromorph3D_out<<"GXp(1,0,0)= "<< GXp(1,0,0) <<endl;
        	                        fs_micromorph3D_out<<"GXp(1,0,1)= "<< GXp(1,0,1) <<endl;
        	                        fs_micromorph3D_out<<"GXp(1,0,2)= "<< GXp(1,0,2) <<endl;
        	                        fs_micromorph3D_out<<"GXp(1,1,0)= "<< GXp(1,1,0) <<endl;
        	                        fs_micromorph3D_out<<"GXp(1,1,1)= "<< GXp(1,1,1) <<endl;
        	                        fs_micromorph3D_out<<"GXp(1,1,2)= "<< GXp(1,1,2) <<endl;
        	                        fs_micromorph3D_out<<"GXp(1,2,0)= "<< GXp(1,2,0) <<endl;
        	                        fs_micromorph3D_out<<"GXp(1,2,1)= "<< GXp(1,2,1) <<endl;
        	                        fs_micromorph3D_out<<"GXp(1,2,2)= "<< GXp(1,2,2) <<endl;
        	                        fs_micromorph3D_out<<"GXp(2,0,0)= "<< GXp(2,0,0) <<endl;
        	                        fs_micromorph3D_out<<"GXp(2,0,1)= "<< GXp(2,0,1) <<endl;
        	                        fs_micromorph3D_out<<"GXp(2,0,2)= "<< GXp(2,0,2) <<endl;
        	                        fs_micromorph3D_out<<"GXp(2,1,0)= "<< GXp(2,1,0) <<endl;
        	                        fs_micromorph3D_out<<"GXp(2,1,1)= "<< GXp(2,1,1) <<endl;
        	                        fs_micromorph3D_out<<"GXp(2,1,2)= "<< GXp(2,1,2) <<endl;
        	                        fs_micromorph3D_out<<"GXp(2,2,0)= "<< GXp(2,2,0) <<endl;
        	                        fs_micromorph3D_out<<"GXp(2,2,1)= "<< GXp(2,2,1) <<endl;
        	                        fs_micromorph3D_out<<"GXp(2,2,2)= "<< GXp(2,2,2) <<endl;
        							fs_micromorph3D_out << "GXp_n = " << GXp_n << endl;
        							fs_micromorph3D_out << "GXe = " << GXe << endl;
        							fs_micromorph3D_out << "GAMMAe = " << GAMMAe << endl;
        							fs_micromorph3D_out << "GAMMAe_n = " << GAMMAe_n << endl;
        							fs_micromorph3D_out << "fDeltaLbar_P = " << fDeltaLbar_P << endl;
        							fs_micromorph3D_out << "fDeltaLbarChai_P = " << fDeltaLbarChai_P << endl;

        	                        fs_micromorph3D_out<<"fMeKLM(0,0,0)= "<< fMeKLM(0,0,0) <<endl;
        	                        fs_micromorph3D_out<<"fMeKLM(0,0,1)= "<< fMeKLM(0,0,1) <<endl;
        	                        fs_micromorph3D_out<<"fMeKLM(0,0,2)= "<< fMeKLM(0,0,2) <<endl;
        	                        fs_micromorph3D_out<<"fMeKLM(0,1,0)= "<< fMeKLM(0,1,0) <<endl;
        	                        fs_micromorph3D_out<<"fMeKLM(0,1,1)= "<< fMeKLM(0,1,1) <<endl;
        	                        fs_micromorph3D_out<<"fMeKLM(0,1,2)= "<< fMeKLM(0,1,2) <<endl;
        	                        fs_micromorph3D_out<<"fMeKLM(0,2,0)= "<< fMeKLM(0,2,0) <<endl;
        	                        fs_micromorph3D_out<<"fMeKLM(0,2,1)= "<< fMeKLM(0,2,1) <<endl;
        	                        fs_micromorph3D_out<<"fMeKLM(0,2,2)= "<< fMeKLM(0,2,2) <<endl;
        	                        fs_micromorph3D_out<<"fMeKLM(1,0,0)= "<< fMeKLM(1,0,0) <<endl;
        	                        fs_micromorph3D_out<<"fMeKLM(1,0,1)= "<< fMeKLM(1,0,1) <<endl;
        	                        fs_micromorph3D_out<<"fMeKLM(1,0,2)= "<< fMeKLM(1,0,2) <<endl;
        	                        fs_micromorph3D_out<<"fMeKLM(1,1,0)= "<< fMeKLM(1,1,0) <<endl;
        	                        fs_micromorph3D_out<<"fMeKLM(1,1,1)= "<< fMeKLM(1,1,1) <<endl;
        	                        fs_micromorph3D_out<<"fMeKLM(1,1,2)= "<< fMeKLM(1,1,2) <<endl;
        	                        fs_micromorph3D_out<<"fMeKLM(1,2,0)= "<< fMeKLM(1,2,0) <<endl;
        	                        fs_micromorph3D_out<<"fMeKLM(1,2,1)= "<< fMeKLM(1,2,1) <<endl;
        	                        fs_micromorph3D_out<<"fMeKLM(1,2,2)= "<< fMeKLM(1,2,2) <<endl;
        	                        fs_micromorph3D_out<<"fMeKLM(2,0,0)= "<< fMeKLM(2,0,0) <<endl;
        	                        fs_micromorph3D_out<<"fMeKLM(2,0,1)= "<< fMeKLM(2,0,1) <<endl;
        	                        fs_micromorph3D_out<<"fMeKLM(2,0,2)= "<< fMeKLM(2,0,2) <<endl;
        	                        fs_micromorph3D_out<<"fMeKLM(2,1,0)= "<< fMeKLM(2,1,0) <<endl;
        	                        fs_micromorph3D_out<<"fMeKLM(2,1,1)= "<< fMeKLM(2,1,1) <<endl;
        	                        fs_micromorph3D_out<<"fMeKLM(2,1,2)= "<< fMeKLM(2,1,2) <<endl;
        	                        fs_micromorph3D_out<<"fMeKLM(2,2,0)= "<< fMeKLM(2,2,0) <<endl;
        	                        fs_micromorph3D_out<<"fMeKLM(2,2,1)= "<< fMeKLM(2,2,1) <<endl;
        	                        fs_micromorph3D_out<<"fMeKLM(2,2,2)= "<< fMeKLM(2,2,2) <<endl;


        							fs_micromorph3D_out << "fdevMeKLM = " << fdevMeKLM << endl;
        							fs_micromorph3D_out << "Mean_fMeKLM = " << Mean_fMeKLM << endl;
        							fs_micromorph3D_out << "Norm_Mean_fMeKLM = " << Norm_Mean_fMeKLM << endl;
        							fs_micromorph3D_out << "fNormdevMeKLM = " << fNormdevMeKLM << endl;
        							fs_micromorph3D_out << "Norm_cohesion_nablachi = " << Norm_cohesion_nablachi << endl;
        							fs_micromorph3D_out << "fMicro_gradient_Yield_function = " << fMicro_gradient_Yield_function << endl;
        							fs_micromorph3D_out << "fDelgammanablachi = " << fDelgammanablachi << endl;
        							fs_micromorph3D_out << "fMicro_Yield_function = " << fMicroYield_function << endl;
        							fs_micromorph3D_out << "fDelgammachi = " << fDelgammachi << endl;
        							fs_micromorph3D_out << "fYield_function = " << fYield_function << endl;
        							fs_micromorph3D_out << "fDelgamma = " << fDelgamma << endl;
        							fs_micromorph3D_out << "SPK = " << SPK << endl;
        							fs_micromorph3D_out << "SIGMA_S = " << SIGMA_S << endl;
        							fs_micromorph3D_out << "dGnablachidMKLM = " << fdGnablachidMKLM << endl;

        	                        fs_micromorph3D_out<<"fdGnablachidMKLM_tr(0,0,0)= "<< fdGnablachidMKLM_tr(0,0,0) <<endl;
        	                        fs_micromorph3D_out<<"fdGnablachidMKLM_tr(0,0,1)= "<< fdGnablachidMKLM_tr(0,0,1) <<endl;
        	                        fs_micromorph3D_out<<"fdGnablachidMKLM_tr(0,0,2)= "<< fdGnablachidMKLM_tr(0,0,2) <<endl;
        	                        fs_micromorph3D_out<<"fdGnablachidMKLM_tr(0,1,0)= "<< fdGnablachidMKLM_tr(0,1,0) <<endl;
        	                        fs_micromorph3D_out<<"fdGnablachidMKLM_tr(0,1,1)= "<< fdGnablachidMKLM_tr(0,1,1) <<endl;
        	                        fs_micromorph3D_out<<"fdGnablachidMKLM_tr(0,1,2)= "<< fdGnablachidMKLM_tr(0,1,2) <<endl;
        	                        fs_micromorph3D_out<<"fdGnablachidMKLM_tr(0,2,0)= "<< fdGnablachidMKLM_tr(0,2,0) <<endl;
        	                        fs_micromorph3D_out<<"fdGnablachidMKLM_tr(0,2,1)= "<< fdGnablachidMKLM_tr(0,2,1) <<endl;
        	                        fs_micromorph3D_out<<"fdGnablachidMKLM_tr(0,2,2)= "<< fdGnablachidMKLM_tr(0,2,2) <<endl;
        	                        fs_micromorph3D_out<<"fdGnablachidMKLM_tr(1,0,0)= "<< fdGnablachidMKLM_tr(1,0,0) <<endl;
        	                        fs_micromorph3D_out<<"fdGnablachidMKLM_tr(1,0,1)= "<< fdGnablachidMKLM_tr(1,0,1) <<endl;
        	                        fs_micromorph3D_out<<"fdGnablachidMKLM_tr(1,0,2)= "<< fdGnablachidMKLM_tr(1,0,2) <<endl;
        	                        fs_micromorph3D_out<<"fdGnablachidMKLM_tr(1,1,0)= "<< fdGnablachidMKLM_tr(1,1,0) <<endl;
        	                        fs_micromorph3D_out<<"fdGnablachidMKLM_tr(1,1,1)= "<< fdGnablachidMKLM_tr(1,1,1) <<endl;
        	                        fs_micromorph3D_out<<"fdGnablachidMKLM_tr(1,1,2)= "<< fdGnablachidMKLM_tr(1,1,2) <<endl;
        	                        fs_micromorph3D_out<<"fdGnablachidMKLM_tr(1,2,0)= "<< fdGnablachidMKLM_tr(1,2,0) <<endl;
        	                        fs_micromorph3D_out<<"fdGnablachidMKLM_tr(1,2,1)= "<< fdGnablachidMKLM_tr(1,2,1) <<endl;
        	                        fs_micromorph3D_out<<"fdGnablachidMKLM_tr(1,2,2)= "<< fdGnablachidMKLM_tr(1,2,2) <<endl;
        	                        fs_micromorph3D_out<<"fdGnablachidMKLM_tr(2,0,0)= "<< fdGnablachidMKLM_tr(2,0,0) <<endl;
        	                        fs_micromorph3D_out<<"fdGnablachidMKLM_tr(2,0,1)= "<< fdGnablachidMKLM_tr(2,0,1) <<endl;
        	                        fs_micromorph3D_out<<"fdGnablachidMKLM_tr(2,0,2)= "<< fdGnablachidMKLM_tr(2,0,2) <<endl;
        	                        fs_micromorph3D_out<<"fdGnablachidMKLM_tr(2,1,0)= "<< fdGnablachidMKLM_tr(2,1,0) <<endl;
        	                        fs_micromorph3D_out<<"fdGnablachidMKLM_tr(2,1,1)= "<< fdGnablachidMKLM_tr(2,1,1) <<endl;
        	                        fs_micromorph3D_out<<"fdGnablachidMKLM_tr(2,1,2)= "<< fdGnablachidMKLM_tr(2,1,2) <<endl;
        	                        fs_micromorph3D_out<<"fdGnablachidMKLM_tr(2,2,0)= "<< fdGnablachidMKLM_tr(2,2,0) <<endl;
        	                        fs_micromorph3D_out<<"fdGnablachidMKLM_tr(2,2,1)= "<< fdGnablachidMKLM_tr(2,2,1) <<endl;
        	                        fs_micromorph3D_out<<"fdGnablachidMKLM_tr(2,2,2)= "<< fdGnablachidMKLM_tr(2,2,2) <<endl;

        							fs_micromorph3D_out << "fState_variables_IPs(IP,kc_nablachi0) = " << fState_variables_IPs(IP,kc_nablachi0) << endl;
        							fs_micromorph3D_out << "fState_variables_IPs(IP,kc_nablachi1) = " << fState_variables_IPs(IP,kc_nablachi1) << endl;
        							fs_micromorph3D_out << "fState_variables_IPs(IP,kc_nablachi2) = " << fState_variables_IPs(IP,kc_nablachi2) << endl;
        							fs_micromorph3D_out << "fState_variables_IPs(IP,kc_chi) = " << fState_variables_IPs(IP,kc_chi) << endl;
        							fs_micromorph3D_out << "fState_variables_IPs(IP,kc) = " << fState_variables_IPs(IP,kc) << endl;
*/
                                    fdFYchidcchi=-1.0*sqrt(fabs(fPhiCap_chi))*Aphi_chi;

                                    dFphichidKappachi = (-signfMacfunc_chi*(fState_variables_IPs(IP,Kappa_chi)-3*fMeanSIGMA_e)/(Xphi_chi_m*Xphi_chi_m))-
                                    (fMacfunc_chi/(Xphi_chi_m*Xphi_chi_m))+(2*fMaterial_Params[kR_chi]*Bphi_chi*fMacfunc_chi*
                                    		(fState_variables_IPs(IP,Kappa_chi)-3*fMeanSIGMA_e))/(Xphi_chi_m*Xphi_chi_m*Xphi_chi_m);
                                    dFYchidKappachi = -1*dFphichidKappachi*(Aphi_chi*fState_variables_IPs(IP,kc_chi)-Bphi_chi*fMeanSIGMA_e)/(2*sqrt(fabs(fPhiCap_chi)));

                                    fTemp_matrix_one_x_one = (-signfMacfunc_nablachi*(Norm_Kappa_nablachi-3*Norm_Mean_fMeKLM)/(Xphi_nablachi_m*Xphi_nablachi_m))-
                                    (fMacfunc_nablachi/(Xphi_nablachi_m*Xphi_nablachi_m))+(2*fMaterial_Params[kR_nablachi]*Bphi_nablachi*fMacfunc_nablachi*
                                    		(Norm_Kappa_nablachi-3*Norm_Mean_fMeKLM))/(Xphi_nablachi_m*Xphi_nablachi_m*Xphi_nablachi_m);
                                    fTemp_matrix_one_x_one*= 1.0/Norm_Kappa_nablachi;
                                    dFphinablachidKappanablachi.SetToScaled(fTemp_matrix_one_x_one,Kappa_nablachi);

                                    fTemp_matrix_one_x_one = -1*(Aphi_nablachi*Norm_cohesion_nablachi-Bphi_nablachi*Norm_Mean_fMeKLM)/(2*sqrt(fabs(fPhiCap_nablachi)));
                                    dFYnablachidKappanablachi.SetToScaled(fTemp_matrix_one_x_one,dFphinablachidKappanablachi);

                                    fTemp_matrix_one_x_one = -1.0*sqrt(fabs(fPhiCap_nablachi))*Aphi_nablachi/Norm_cohesion_nablachi;
                                	fdfnablachidcohesion_nablachi.SetToScaled(fTemp_matrix_one_x_one,cohesion_nablachi);

                                    /* Inverse of  Fp */
                                    fFp_inverse.Inverse(fFp);

                                    /* Form inverse of Chi^p*/
                                    fChip_inverse.Inverse(fChip);


                                    /* Transpose of Fe */
                                    fFeT.Transpose(fFe);

                                    /* Inverse of Ce_n */
                                    fCe_n_inverse.Inverse(fCe_n);

                                    /* Inverse of PSIe_n*/
                                    PSIe_n_inverse.Inverse(PSIe_n);
                                    PSIe_n_inverseT.Transpose(PSIe_n_inverse);

                        /////////////////////////////////Forming fA1////////////////////////////////////////
                                    ///// ([Fe][Ce-1][(dG/dS_tr)]T[Fp_n][Fp-1])T [Fe] //////////////////
                                    ////////////////////////////////////////////////////////////////////
                                    ////////////////////////////////////////////////////////////////////
                                    fTemp_matrix_nsd_x_nsd2.MultATBC(fdGdS_tr,fFp_n,fFp_inverse);
    								//fTemp_matrix_nsd_x_nsd.MultABC(fFeT,fFe,fCe_n_inverse);
    								fTemp_matrix_nsd_x_nsd.MultATBC(fFe,fFe,fCe_n_inverse);
    								/*fA1=(Fe^T).Fe.(Cen^-1).(dG/dStr^T).Fpn.Fp^-1*/
    								fA1.MultAB(fTemp_matrix_nsd_x_nsd,fTemp_matrix_nsd_x_nsd2);
                                    trfA1=fA1.Trace();
                                    fdFYdS_fA1=dMatrixT::Dot(fdFYdS,fA1);

                                    fTemp_matrix_nsd_x_nsd.Transpose(fA1);
                                    fdFYdS_fA1T=dMatrixT::Dot(fdFYdS,fTemp_matrix_nsd_x_nsd);

                                    dFYdScol1=dMatrixT::Dot(fdFYdS,fIdentity_matrix);
                       /////////////////////////////////////////////////////////////////////////////////////

                                    /* Forming the matrix N */
                                    fTemp_matrix_nsd_x_nsd2.MultATBC(fdGdS_tr,fFp_n,fFp_inverse);
                                    fTemp_matrix_nsd_x_nsd.MultATBC(fChie,fFe,fCe_n_inverse);
                                    fN1.MultAB(fTemp_matrix_nsd_x_nsd,fTemp_matrix_nsd_x_nsd2);

                                    /* define trace of N */
                                    trfN1=fN1.Trace();


                                    /* define dFY/dS:N */
                                    fdFYdS_fN1=dMatrixT::Dot(fdFYdS,fN1);

                                    /* define dFY/dS:N^T */
                                    fTemp_matrix_nsd_x_nsd.Transpose(fN1);
                                    fdFYdS_fN1T=dMatrixT::Dot(fdFYdS,fTemp_matrix_nsd_x_nsd);


                                    /* Forming the matrix D */
                                    fTemp_matrix_nsd_x_nsd.MultABCT(fChie,PSIe_n_inverse,fdGchidSIGMA_tr);
                                    fTemp_matrix_nsd_x_nsd2.MultATBC(PSIe_n_inverse,fCchie_n,fChip_n);
                                    fD1.MultAB(fTemp_matrix_nsd_x_nsd,fTemp_matrix_nsd_x_nsd2);
                                    fTemp_matrix_nsd_x_nsd.MultATBC(fFe,fD1,fChip_inverse);
                                    fD1=fTemp_matrix_nsd_x_nsd;


                                    /* define trace of D */
                                    trfD1=fD1.Trace();

                                    /* define dFYchi/dSIGMA_S:D */
                                    fdFYchidSIGMA_fD1=dMatrixT::Dot(fdFYchidSIGMA,fD1);

                                    /* define dFYchi/dSIGMA_S:D^T */
                                    fTemp_matrix_nsd_x_nsd.Transpose(fD1);
                                    fdFYchidSIGMA_fD1T=dMatrixT::Dot(fdFYchidSIGMA,fTemp_matrix_nsd_x_nsd);

                                    /* define dFYchi/dSIGMA_S:1 */
                                    dFYchidSIGMA_Scol1=dMatrixT::Dot(fdFYchidSIGMA,fIdentity_matrix);

                                    /* define dFY/dS:D */
                                    fdFYdS_fD1=dMatrixT::Dot(fdFYdS,fD1);

                                    /* define dFY/dS:D^T */
                                    fTemp_matrix_nsd_x_nsd.Transpose(fD1);
                                    fdFYdS_fD1T=dMatrixT::Dot(fdFYdS,fTemp_matrix_nsd_x_nsd);



                                    /* define dFYchi/dSIGMA_S:A*/
                                    fdFYchidSIGMA_fA1=dMatrixT::Dot(fdFYchidSIGMA,fA1);



                                    /* define dFYchi/dSIGMA_S:A^T*/
                                    fTemp_matrix_nsd_x_nsd.Transpose(fA1);
                                    fdFYchidSIGMA_fA1T=dMatrixT::Dot(fdFYchidSIGMA,fTemp_matrix_nsd_x_nsd);

                                    /* define dFYchi/dSIGMA_S:N*/
                                    fdFYchidSIGMA_fN1=dMatrixT::Dot(fdFYchidSIGMA,fN1);

                                    /* define dFYchi/dSIGMA_S:N^T*/
                                    fTemp_matrix_nsd_x_nsd.Transpose(fN1);
                                    fdFYchidSIGMA_fN1T=dMatrixT::Dot(fdFYchidSIGMA,fTemp_matrix_nsd_x_nsd);



                                    fConst1=(fMaterial_Params[kLambda]+fMaterial_Params[kTau])*trfA1*dFYdScol1
                                    +(fMaterial_Params[kMu]+fMaterial_Params[kSigma_const])*fdFYdS_fA1
                                    +(fMaterial_Params[kMu]+fMaterial_Params[kSigma_const])*fdFYdS_fA1T
                                    +fMaterial_Params[kEta]*dFYdScol1*trfN1
                                    +fMaterial_Params[kKappa]*fdFYdS_fN1T
                                    +fMaterial_Params[kNu]*fdFYdS_fN1
                                    -fdFYdc*fMaterial_Params[kHc]*fState_variables_n_IPs(IP,khc);
                                    -dFYdKappa*fMaterial_Params[kHkappa]*fState_variables_n_IPs(IP,khKappa);

                                    fConst2=(fMaterial_Params[kLambda]+fMaterial_Params[kTau])*Term1_trace*dFYdScol1
                                    +(fMaterial_Params[kMu]+fMaterial_Params[kSigma_const])*fdFYdS_Term1
                                    +(fMaterial_Params[kMu]+fMaterial_Params[kSigma_const])*fdFYdS_Term1T
                                    +fMaterial_Params[kEta]*dFYdScol1*Term2_trace
                                    +fMaterial_Params[kKappa]*fdFYdS_Term2
                                    +fMaterial_Params[kNu]*fdFYdS_Term2T
                                    +fMaterial_Params[kEta]*dFYdScol1*trfD1
                                    +fMaterial_Params[kKappa]*fdFYdS_fD1
                                    +fMaterial_Params[kNu]*fdFYdS_fD1T;

                                    fConst3=(fMaterial_Params[kLambda]+2*fMaterial_Params[kTau])*dFYchidSIGMA_Scol1*trfA1
                                    +(fMaterial_Params[kMu]+2*fMaterial_Params[kSigma_const])*fdFYchidSIGMA_fA1
                                    +(fMaterial_Params[kMu]+2*fMaterial_Params[kSigma_const])*fdFYchidSIGMA_fA1T
                                    +(2*fMaterial_Params[kEta]-fMaterial_Params[kTau])*dFYchidSIGMA_Scol1*trfN1
                                    +(fMaterial_Params[kKappa]+fMaterial_Params[kNu]-fMaterial_Params[kSigma_const])*fdFYchidSIGMA_fN1T
                                    +(fMaterial_Params[kKappa]+fMaterial_Params[kNu]-fMaterial_Params[kSigma_const])*fdFYchidSIGMA_fN1;


                                    fConst4=(fMaterial_Params[kLambda]+2*fMaterial_Params[kTau])*dFYchidSIGMA_Scol1*Term1_trace
                                    +(fMaterial_Params[kMu]+2*fMaterial_Params[kSigma_const])*fdFYchidSIGMA_Term1
                                    +(fMaterial_Params[kMu]+2*fMaterial_Params[kSigma_const])*fdFYchidSIGMA_Term1T
                                    +(2*fMaterial_Params[kEta]-fMaterial_Params[kTau])*dFYchidSIGMA_Scol1*Term2_trace
                                    +(fMaterial_Params[kKappa]+fMaterial_Params[kNu]-fMaterial_Params[kSigma_const])*fdFYchidSIGMA_Term2
                                    +(fMaterial_Params[kKappa]+fMaterial_Params[kNu]-fMaterial_Params[kSigma_const])*fdFYchidSIGMA_Term2T
                                    +(2*fMaterial_Params[kEta]-fMaterial_Params[kTau])*dFYchidSIGMA_Scol1*trfD1
                                    +(fMaterial_Params[kKappa]+fMaterial_Params[kNu]-fMaterial_Params[kSigma_const])*fdFYchidSIGMA_fD1
                                    +(fMaterial_Params[kKappa]+fMaterial_Params[kNu]-fMaterial_Params[kSigma_const])*fdFYchidSIGMA_fD1T
                                    -fdFYchidcchi*fMaterial_Params[kHc_chi]*fState_variables_n_IPs(IP,khc_chi)
                                    -dFYchidKappachi*fMaterial_Params[kHKappa_chi]*fState_variables_n_IPs(IP,khKappa_chi);



                                    //////////// Micro-Gradient Plasticity //////////////////////
                                    if(Micro_gradient_Plasticity_Occurrence == 1)
                                    {
                                    	Form_Coeff_delDelgamma_nablachi(IP);
                                    }
                                    fs_micromorph3D_out << "Coeff_delDelgamma_nablachi = " << Coeff_delDelgamma_nablachi << endl;

                                    if(PlasticityCondition==4)
                                    {
                                        Comp22=fConst1+fConst2+fConst3+fConst4;
                                        Comp11=1/Comp22;
                                        Comp12=Comp11;
                                        Comp21=Comp11;
                                        Comp22=Comp11;

                                    }


                                    if(PlasticityCondition==1)// Macro scale plasticity
                                    {

                                        Comp11=1/fConst1;
                                        Comp22=0.0;
                                        Comp12=0.0;
                                        Comp21=0.0;
                                        Comp33 = 0.0;
                                        Comp33= devfSPKinv_tr;
                                        Comp33 = 1/Comp33;
                                        Comp44 = 0.0;
                                        Comp44 = devfSPKinv_tr;
                                        Comp44*= devfSPKinv_tr;
                                        Comp44*= devfSPKinv_tr;
                                        Comp44 = 1/Comp44;

                                    }

                                    if(PlasticityCondition==2)// Micro scale plasticity
                                    {
                                        /* delgamma   =0.0
                                           delgammachi = Comp22 x f2 where Comp22= 1/fConst4 */
                                        Comp11=0.0;
                                        Comp22=1/fConst4;
                                        Comp12=0.0;
                                        Comp21=0.0;


                                    }

                                    /* This condition below takes care of coupling plasticity by assigning different multiplier */
                                    /* after solving global delgamma and delgammachi */
                                    if(PlasticityCondition==3)// Macro and Micro scale coupled plasticity
                                    {
                                      /* LocalConsistentTangent is used but it is not actual LocalConsistentTangent used above.
                                         It is used because of its dimensions 2x2 but nothing else */
                                        LocalConsistentTangent=0.0;
                                        LocalConsistentTangent(0,0)=fConst1;
                                        LocalConsistentTangent(0,1)=fConst2;
                                        LocalConsistentTangent(1,0)=fConst3;
                                        LocalConsistentTangent(1,1)=fConst4;


                                        LocalConsistentTangentInverse.Inverse(LocalConsistentTangent);

                                        Comp11=LocalConsistentTangentInverse(0,0);
                                        Comp12=LocalConsistentTangentInverse(0,1);
                                        Comp21=LocalConsistentTangentInverse(1,0);
                                        Comp22=LocalConsistentTangentInverse(1,1);

                                    }

    			}

                                //KirchhoffST.MultABCT(fFe,SPK,fFe);
                                Form_fV1p();//
                                fShapeDisplGrad.MultTx(fV1p,Vintp_1_temp);
                                scale=scale_const*Jp;
                                Vintp_1_temp*=scale;
                                Vintp_1 +=Vintp_1_temp;


                                Form_fV2p();//gives F.SIGMA_S.F^T = s_sigma *J
                                NCHI.MultTx(fV2p,Vintp_2_temp);
                                scale=scale_const*Jp;
                                Vintp_2_temp*=scale;
                                Vintp_2 +=Vintp_2_temp;

                                Form_fV3p();

//                                //fIota_eta_temp_matrix.Multx(fV3,Vint_3_temp);
                                GRAD_NCHI.MultTx(fV3p,Vintp_3_temp);
                                scale=scale_const*Jp;
                                Vintp_3_temp*=scale;
                                Vintp_3+=Vintp_3_temp;


                                Calculate_fmeklm();
                                fmeklm*=1/Je;



                                // saving Fp, Ce, dG/dS and dF/dS, etc. at each IP of the current element
                                fFp_IPs.SetRow(IP,fFp);
                                fChip_IPs.SetRow(IP,fChip);
                                fCe_IPs.SetRow(IP,fRight_Elastic_Cauchy_Green_tensor);
                                fdGdS_IPs.SetRow(IP,fdGdS);
                                fDeformation_Gradient_IPs.SetRow(IP,fDeformation_Gradient);
                                fCauchy_stress_IPs.SetRow(IP,fCauchy_stress_tensor_current_IP);

                                fdFYdS_IPs.SetRow(IP,fdFYdS);
                                PSIe_IPs.SetRow(IP,PSIe);
                                fCchie_IPs.SetRow(IP,fCchie);
                                fdGchidSIGMA_IPs.SetRow(IP,fdGchidSIGMA);
                                fdFYchidSIGMA_IPs.SetRow(IP,fdFYchidSIGMA);
                                dGnablachidMKLM_IPs.SetRow(IP,fdGnablachidMKLM);
                                GAMMAe_IPs.SetRow(IP,GAMMAe);

                                GXp_IPs.SetRow(IP,GXp);
                                fMeKLM_IPs.SetRow(IP,fMeKLM);
                                SPK_IPs.SetRow(IP,SPK);
                                SIGMA_S_IPs.SetRow(IP,SIGMA_S);
                                SIGMA_IPs.SetRow(IP,SIGMA);
                                Elastic_LagrangianStn_IPs.SetRow(IP,Elastic_LagrangianStn);
                                Elastic_MicroStnTensor_IPs.SetRow(IP,Elastic_MicroStnTensor);


                                Form_IJp_1();// The first matrix coming from Linearization of Jp
                                Form_IJp_2();//
                                Form_IJp_3();//

                                Form_IJp_4();// Addition of micromorphic terms to macro-scale
                                Form_IJp_5();
                                Form_IJp_6();
                                Form_IJp_7();
                                Form_IJp_8();
                                Form_IJp_9();

                                /*Matrices from coupling */

                                Form_IJp_10();
                                Form_IJp_11();
                                Form_IJp_12();
                                Form_IJp_13();
                                Form_IJp_14();
                                Form_IJp_15();
                                Form_IJp_16();
                                Form_IJp_17();



                                Form_I1e_1(); // The first term first matrix

                                Form_I2e_1(); // The second term first matrix
                                Form_I2p_2();
                                Form_I2p_3();
                                Form_I2p_4();

                                Form_fA4();
                                Form_I2p_5();
                                Form_I2p_6();
                                Form_I2p_7();
                                Form_I2p_8();
                                Form_I2p_9();
                                Form_I2p_10();

                                /* Matrices from coupling*/

                                Form_I2p_11();
                                Form_I2p_12();
                                Form_I2p_13();
                                Form_I2p_14();
                                Form_I2p_15();
                                Form_I2p_16();
                                Form_I2p_17();
                                Form_I2p_18();



                                Form_I3e_1(); // The third term first matrix
                                Form_I3e_2(); //
                                Form_I3e_3(); //
                                Form_I3p_4(); //
                                Form_I3p_5(); //
                                Form_I3p_6(); //
                                Form_I3p_7(); //
                                Form_I3p_8(); //
                                Form_I3p_9(); //
                                Form_I3p_10();//
                                Form_I3p_11();//
                                Form_I3p_12();//

                                Form_I3e_13();//Micromorphic addition
                                Form_I3e_14();//
                                Form_I3e_15();//
                                Form_I3p_16();//
                                Form_I3p_17();//
                                Form_I3p_18();//
                                Form_I3p_19();//
                                Form_I3p_20();//
                                Form_I3p_21();//
                                Form_I3p_22();//
                                Form_I3p_23();//
                                Form_I3p_24();//
                                Form_I3p_25();//
                                Form_I3p_26();//
                                Form_I3p_27();//
                                Form_I3p_28();//
                                Form_I3p_29();//
                                Form_I3p_30();//
                                Form_I3p_31();//
                                Form_I3p_32();//
                                Form_I3p_33();//
                                Form_I3p_34();//
                                Form_I3p_35();//
                                Form_I3p_36();//
                                Form_I3e_37();//
                                Form_I3e_38();//
                                Form_I3e_39();//
                                Form_I3p_40();//
                                Form_I3p_41();//
                                Form_I3p_42();//
                                Form_I3p_43();//
                                Form_I3p_44();//
                                Form_I3p_45();//
                                Form_I3p_46();//
                                Form_I3p_47();//
                                Form_I3p_48();//
                                Form_I3p_49();//
                                Form_I3p_50();//
                                Form_I3p_51();//
                                Form_I3p_52();//
                                Form_I3p_53();//
                                Form_I3p_54();//

                                /* Matrices for Del(delgammachi) */

                                Form_I3p_55();//
                                Form_I3p_56();//
                                Form_I3p_57();//
                                Form_I3p_58();//
                                Form_I3p_59();//
                                Form_I3p_60();//
                                Form_I3p_61();//
                                Form_I3p_62();//
                                Form_I3p_63();//
                                Form_I3p_64();//
                                Form_I3p_65();//
                                Form_I3p_66();//
                                Form_I3p_67();//
                                Form_I3p_68();//
                                Form_I3p_69();//
                                Form_I3p_70();//
                                Form_I3p_71();//
                                Form_I3p_72();//
                                Form_I3p_73();//
                                Form_I3p_74();//
                                Form_I3p_75();//
                                Form_I3p_76();//
                                Form_I3p_77();//
                                Form_I3p_78();//

                                /*Matrices from coupling*/

                                Form_I3p_79();//
                                Form_I3p_80();//
                                Form_I3p_81();//
                                Form_I3p_82();//
                                Form_I3p_83();//
                                Form_I3p_84();//
                                Form_I3p_85();//
                                Form_I3p_86();//
                                Form_I3p_87();//
                                Form_I3p_88();//
                                Form_I3p_89();//
                                Form_I3p_90();//
                                Form_I3p_91();//
                                Form_I3p_92();//
                                Form_I3p_93();//
                                Form_I3p_94();//
                                Form_I3p_95();//
                                Form_I3p_96();//
                                Form_I3p_97();//
                                Form_I3p_98();//
                                Form_I3p_99();//
                                Form_I3p_100();//
                                Form_I3p_101();//
                                Form_I3p_102();//
                                Form_I3p_103();//
                                Form_I3p_104();//
                                Form_I3p_105();//
                                Form_I3p_106();//
                                Form_I3p_107();//
                                Form_I3p_108();//
                                Form_I3p_109();//
                                Form_I3p_110();//
                                Form_I3p_111();//
                                Form_I3p_112();//
                                Form_I3p_113();//
                                Form_I3p_114();//
                                Form_I3p_115();//
                                Form_I3p_116();//
                                Form_I3p_117();//
                                Form_I3p_118();//
                                Form_I3p_119();//
                                Form_I3p_120();//
                                Form_I3p_121();//
                                Form_I3p_122();//
                                Form_I3p_123();//
                                Form_I3p_124();//
                                Form_I3p_125();//
                                Form_I3p_126();//
                                Form_I3p_127();//
                                Form_I3p_128();//
                                Form_I3p_129();//
                                Form_I3p_130();//
                                Form_I3p_131();//
                                Form_I3p_132();//
                                Form_I3p_133();//
                                Form_I3p_134();//
                                Form_I3p_135();//
                                Form_I3p_136();//
                                Form_I3p_137();//
                                Form_I3p_138();//
                                Form_I3p_139();//
                                Form_I3p_140();//
                                Form_I3p_141();//
                                Form_I3p_142();//




                                Form_I4e_1(); // The fourth term first matrix
                                Form_I4p_2(); //
                                Form_I4p_3(); //
                                Form_I4p_4(); //

                                Form_I4p_5(); //
                                Form_I4p_6(); //
                                Form_I4p_7(); //
                                Form_I4p_8(); //
                                Form_I4p_9(); //
                                Form_I4p_10(); //

                                /*Matrices from coupling */

                                Form_I4p_11(); //
                                Form_I4p_12(); //
                                Form_I4p_13(); //
                                Form_I4p_14(); //
                                Form_I4p_15(); //
                                Form_I4p_16(); //
                                Form_I4p_17(); //
                                Form_I4p_18(); //


/*
                                Form_I2p_trial_1();
                                Form_I2p_trial_2();
                                Form_I2p_trial_3();
                                Form_I2p_trial_4();
                                Form_I2p_trial_5();

                                Form_I3p_trial_1();
                                Form_I3p_trial_2();
                                Form_I3p_trial_3();
                                Form_I3p_trial_4();
                                Form_I3p_trial_5();

                                Form_I4p_trial_1();
                                Form_I4p_trial_2();
                                Form_I4p_trial_3();
                                Form_I4p_trial_4();
                                Form_I4p_trial_5();

                                Form_I4p_trial_6();
                                Form_I4p_trial_7();
                                Form_I4p_trial_8();
                                Form_I4p_trial_9();
                                Form_I4p_trial_10();

                                Form_I4p_trial_11();
                                Form_I4p_trial_12();
                                Form_I4p_trial_13();
                                Form_I4p_trial_14();
                                Form_I4p_trial_15();

                                Form_I5p_trial_1();
                                Form_I5p_trial_2();
                                Form_I5p_trial_3();
                                Form_I5p_trial_4();
                                Form_I5p_trial_5();
                                */
/*
                                Form_I2p_trial_1_5();
                                Form_I3p_trial_1_5();
                                Form_I4p_trial_1_5();
                                Form_I4p_trial_6_10();
                                Form_I4p_trial_11_15();
                                Form_I5p_trial_1_5();
*/
/*
                                Form_I_temp_DelGamma_dGdStrial();
                                Form_I_temp_DelGamma_dGdStrial_transpose();
*/
/*
                                Form_I6p_trial_1();
                                Form_I6p_trial_2();
                                Form_I7p_trial_1();
                                Form_I7p_trial_2();
                                Form_I8p_trial_1();
                                Form_I8p_trial_2();
                                Form_I9p_trial_1();
                                Form_I9p_trial_2();
                                Form_I10p_trial_1();
                                Form_I10p_trial_2();
                                Form_I11p_trial_1();
                                Form_I11p_trial_2();
*/

/*
                                Form_I6p_trial_1_2();
                                Form_I7p_trial_1_2();
                                Form_I8p_trial_1_2();
                                Form_I9p_trial_1_2();
                                Form_I10p_trial_1_2();
                                Form_I11p_trial_1_2();
*/

                                /* From the second bal. eqn */

                                Form_IIJp_1();
                                Form_IIJp_2();//
                                Form_IIJp_3();//Addition of micromorphic terms to macro-scale
                                Form_IIJp_4();//
                                Form_IIJp_5();
                                Form_IIJp_6();
                                Form_IIJp_7();
                                Form_IIJp_8();

                                /*Matrices from coupling */

                                Form_IIJp_9();
                                Form_IIJp_10();
                                Form_IIJp_11();
                                Form_IIJp_12();
                                Form_IIJp_13();
                                Form_IIJp_14();
                                Form_IIJp_15();
                                Form_IIJp_16();




                                Form_II2e_1(); // The second term first matrix
                                Form_II2p_2();
                                Form_II2p_3();
                                Form_II2p_4();
                                Form_II2p_5();// micromorphic terms introduced to macro-scale without delta(gamma^chi)
                                Form_II2p_6();
                                Form_II2p_7();
                                Form_II2p_8();
                                Form_II2p_9();

                                /*Matrices from coupling */

                                Form_II2p_10();
                                Form_II2p_11();
                                Form_II2p_12();
                                Form_II2p_13();
                                Form_II2p_14();
                                Form_II2p_15();
                                Form_II2p_16();
                                Form_II2p_17();


                                Form_II3e_1();
                                Form_II3e_2();
                                Form_II3e_3();
                                Form_II3e_4();
                                Form_II3e_5();

                                Form_II3p_6();
                                Form_II3p_7();
                                Form_II3p_8();
                                Form_II3p_9();
                                Form_II3p_10();
                                Form_II3p_11();
                                Form_II3p_12();
                                Form_II3p_13();
                                Form_II3p_14();
                                Form_II3p_15();
                                Form_II3p_16();
                                Form_II3p_17();
                                Form_II3p_18();
                                Form_II3p_19();
                                Form_II3p_20();
                                Form_II3p_21();
                                Form_II3p_22();
                                Form_II3p_23();
                                Form_II3p_24();
                                Form_II3p_25();
                                Form_II3p_26();
                                Form_II3p_27();
                                Form_II3p_28();
                                Form_II3p_29();
                                Form_II3p_30();
                                Form_II3e_31();
                                Form_II3e_32();
                                Form_II3e_33();
                                Form_II3p_34();
                                Form_II3p_35();
                                Form_II3p_36();
                                Form_II3p_37();
                                Form_II3p_38();
                                Form_II3p_39();
                                Form_II3p_40();
                                Form_II3p_41();
                                Form_II3p_42();
                                Form_II3p_43();
                                Form_II3p_44();
                                Form_II3p_45();
                                Form_II3p_46();
                                Form_II3p_47();
                                Form_II3p_48();

                                /* Matrices from Del(delgammachi)*/

                                Form_II3p_49();
                                Form_II3p_50();
                                Form_II3p_51();
                                Form_II3p_52();
                                Form_II3p_53();
                                Form_II3p_54();
                                Form_II3p_55();
                                Form_II3p_56();
                                Form_II3p_57();
                                Form_II3p_58();
                                Form_II3p_59();
                                Form_II3p_60();
                                Form_II3p_61();
                                Form_II3p_62();
                                Form_II3p_63();
                                Form_II3p_64();
                                Form_II3p_65();
                                Form_II3p_66();
                                Form_II3p_67();
                                Form_II3p_68();
                                Form_II3p_69();
                                Form_II3p_70();
                                Form_II3p_71();
                                Form_II3p_72();

                                /* Matrices from coupling*/

                                Form_II3p_73();
                                Form_II3p_74();
                                Form_II3p_75();
                                Form_II3p_76();
                                Form_II3p_77();
                                Form_II3p_78();
                                Form_II3p_79();
                                Form_II3p_80();
                                Form_II3p_81();
                                Form_II3p_82();
                                Form_II3p_83();
                                Form_II3p_84();
                                Form_II3p_85();
                                Form_II3p_86();
                                Form_II3p_87();
                                Form_II3p_88();
                                Form_II3p_89();
                                Form_II3p_90();
                                Form_II3p_91();
                                Form_II3p_92();
                                Form_II3p_93();
                                Form_II3p_94();
                                Form_II3p_95();
                                Form_II3p_96();
                                Form_II3p_97();
                                Form_II3p_98();
                                Form_II3p_99();
                                Form_II3p_100();
                                Form_II3p_101();
                                Form_II3p_102();
                                Form_II3p_103();
                                Form_II3p_104();
                                Form_II3p_105();
                                Form_II3p_106();
                                Form_II3p_107();
                                Form_II3p_108();
                                Form_II3p_109();
                                Form_II3p_110();
                                Form_II3p_111();
                                Form_II3p_112();
                                Form_II3p_113();
                                Form_II3p_114();
                                Form_II3p_115();
                                Form_II3p_116();
                                Form_II3p_117();
                                Form_II3p_118();
                                Form_II3p_119();
                                Form_II3p_120();
                                Form_II3p_121();
                                Form_II3p_122();
                                Form_II3p_123();
                                Form_II3p_124();
                                Form_II3p_125();
                                Form_II3p_126();
                                Form_II3p_127();
                                Form_II3p_128();
                                Form_II3p_129();
                                Form_II3p_130();
                                Form_II3p_131();
                                Form_II3p_132();
                                Form_II3p_133();
                                Form_II3p_134();
                                Form_II3p_135();
                                Form_II3p_136();





                                Form_II4e_1();
                                Form_II4p_2();
                                Form_II4p_3();
                                Form_II4p_4();
                                Form_II4p_5();
                                Form_II4p_6();
                                Form_II4p_7();
                                Form_II4p_8();
                                Form_II4p_9();

                                /*Matrices from coupling*/

                                Form_II4p_10();
                                Form_II4p_11();
                                Form_II4p_12();
                                Form_II4p_13();
                                Form_II4p_14();
                                Form_II4p_15();
                                Form_II4p_16();
                                Form_II4p_17();

                                /* Matrices from higher order couple stress */

                                Form_Temp_tensor_for_II5Jp();
                                Form_II5Jp_1();
                                Form_II5Jp_2();
                                Form_II5Jp_3();
                                Form_II5Jp_4();
                                Form_II5Jp_5();
                                Form_II5Jp_6();
                                Form_II5Jp_7();
                                Form_II5Jp_8();
                                Form_II5Jp_9();
                                Form_II5Jp_10();
                                Form_II5Jp_11();
                                Form_II5Jp_12();
                                Form_II5Jp_13();
                                Form_II5Jp_14();
                                Form_II5Jp_15();
                                Form_II5Jp_16();

                                Form_II6e_1();

                                Form_II7e_1();

                                Form_Temp_tensor_for_II7();
                                Form_II7p_1();
                                Form_II7p_2();
                                Form_II7p_3();
                                Form_II7p_4();
                                Form_II7p_5();
                                Form_II7p_6();
                                Form_II7p_7();
                                Form_II7p_8();
                                Form_II7p_9();
                                Form_II7p_10();
                                Form_II7p_11();
                                Form_II7p_12();
                                Form_II7p_13();
                                Form_II7p_14();
                                Form_II7p_15();
                                Form_II7p_16();

                                Form_II8e_1();

                                Form_Temp_tensor_for_II8();
                                Form_II8p_1();
                                Form_II8p_2();
                                Form_II8p_3();
                                Form_II8p_4();
                                Form_II8p_5();
                                Form_II8p_6();
                                Form_II8p_7();
                                Form_II8p_8();
                                Form_II8p_9();
                                Form_II8p_10();
                                Form_II8p_11();
                                Form_II8p_12();
                                Form_II8p_13();
                                Form_II8p_14();
                                Form_II8p_15();
                                Form_II8p_16();

                                /* Terms due to Tau7 in Fe.Fe.o.(Me).Xe starts here */
                                /* Terms will be called II9 and II11.If additional Taus are implemented change the names as
                                 II9e_Tau7,II9p_Tau7, II10e_Tau7, II10p_Tau7, etc. For now II9 and II10 are enough to name */

                                Form_II9e_1();

                                Form_Temp_tensor_for_II9();
                                Form_II9p_1();
                                Form_II9p_2();
                                Form_II9p_3();
                                Form_II9p_4();
                                Form_II9p_5();
                                Form_II9p_6();
                                Form_II9p_7();
                                Form_II9p_8();
                                Form_II9p_9();
                                Form_II9p_10();
                                Form_II9p_11();
                                Form_II9p_12();
                                Form_II9p_13();
                                Form_II9p_14();
                                Form_II9p_15();
                                Form_II9p_16();

                                Form_II10e_1();

                                Form_Temp_tensor_for_II10();
                                Form_II10p_1();
                                Form_II10p_2();
                                Form_II10p_3();
                                Form_II10p_4();
                                Form_II10p_5();
                                Form_II10p_6();
                                Form_II10p_7();
                                Form_II10p_8();
                                Form_II10p_9();
                                Form_II10p_10();
                                Form_II10p_11();
                                Form_II10p_12();
                                Form_II10p_13();
                                Form_II10p_14();
                                Form_II10p_15();
                                Form_II10p_16();

                                /* no elastic II11e */

                                Form_Temp_tensor_for_II11();
                                Form_II11p_1();
                                Form_II11p_2();
                                Form_II11p_3();
                                Form_II11p_4();
                                Form_II11p_5();
                                Form_II11p_6();
                                Form_II11p_7();
                                Form_II11p_8();
                                Form_II11p_9();
                                Form_II11p_10();
                                Form_II11p_11();
                                Form_II11p_12();
                                Form_II11p_13();
                                Form_II11p_14();
                                Form_II11p_15();
                                Form_II11p_16();


                                Form_II12e_1();

                                Form_Temp_tensor_for_II12();
                                Form_II12p_1();
                                Form_II12p_2();
                                Form_II12p_3();
                                Form_II12p_4();
                                Form_II12p_5();
                                Form_II12p_6();
                                Form_II12p_7();
                                Form_II12p_8();
                                Form_II12p_9();
                                Form_II12p_10();
                                Form_II12p_11();
                                Form_II12p_12();
                                Form_II12p_13();
                                Form_II12p_14();
                                Form_II12p_15();
                                Form_II12p_16();


                                /* The terms related to variation of Jp have Jp_ extension i.e. IJp_1 */
                                fTemp_matrix_nsd_x_nsd2.MultABCT(fFp_inverse,fCe_n_inverse,fdGdS_tr);
                                fTemp_matrix_nsd_x_nsd.MultAB(fTemp_matrix_nsd_x_nsd2,fFp_n);
                                double Trace_const=0.0;
                                Trace_const=fTemp_matrix_nsd_x_nsd.Trace();


                                if(PlasticityCondition==1 || PlasticityCondition==3 || PlasticityCondition==4)//if(MacroPlasticityCondition==1)
                                {
                                fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,IJp_1,fShapeDisplGrad);
                                scale = (Comp11)*scale_const*Trace_const*(fMaterial_Params[kLambda]+fMaterial_Params[kTau])*dFYdScol1*Jp;
                                fTemp_matrix_nudof_x_nudof *= scale;
                                fKu_IJp_1 += fTemp_matrix_nudof_x_nudof;

                                fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,IJp_2,fShapeDisplGrad);
                                scale = (Comp11)*scale_const*Trace_const*(fMaterial_Params[kMu]+fMaterial_Params[kSigma_const])*Jp;
                                fTemp_matrix_nudof_x_nudof *= scale;
                                fKu_IJp_2 += fTemp_matrix_nudof_x_nudof;

                                fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,IJp_3,fShapeDisplGrad);
                                scale = (Comp11)*scale_const*Trace_const*(fMaterial_Params[kMu]+fMaterial_Params[kSigma_const])*Jp;
                                fTemp_matrix_nudof_x_nudof *= scale;
                                fKu_IJp_3 += fTemp_matrix_nudof_x_nudof;

                                /* Additional terms to delta(Jp) coming by introducing micromorphic terms into macro-scale */

                                fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,IJp_4,fShapeDisplGrad);
                                scale =(Comp11)*dFYdScol1*Trace_const*scale_const*fMaterial_Params[kEta]*Jp;
                                fTemp_matrix_nudof_x_nudof *= scale;
                                fKu_IJp_4 += fTemp_matrix_nudof_x_nudof;


                                fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,IJp_5,fShapeDisplGrad);
                                scale =(Comp11)*Trace_const*scale_const*fMaterial_Params[kKappa]*Jp;
                                fTemp_matrix_nudof_x_nudof *= scale;
                                fKu_IJp_5 += fTemp_matrix_nudof_x_nudof;

                                fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,IJp_6,fShapeDisplGrad);
                                scale =(Comp11)*Trace_const*scale_const*Jp*fMaterial_Params[kNu];
                                fTemp_matrix_nudof_x_nudof *= scale;
                                fKu_IJp_6 += fTemp_matrix_nudof_x_nudof;


                                fTemp_matrix_nudof_x_nchidof.MultATBC(fShapeDisplGrad,IJp_7,NCHI);
                                scale =(Comp11)*dFYdScol1*Trace_const*scale_const*Jp*fMaterial_Params[kEta];
                                fTemp_matrix_nudof_x_nchidof *= scale;
                                fKuphi_IJp_7 += fTemp_matrix_nudof_x_nchidof;

                                 fTemp_matrix_nudof_x_nchidof.MultATBC(fShapeDisplGrad,IJp_8,NCHI);
                                scale =(Comp11)*Trace_const*scale_const*Jp*fMaterial_Params[kKappa];
                                fTemp_matrix_nudof_x_nchidof *= scale;
                                fKuphi_IJp_8 += fTemp_matrix_nudof_x_nchidof;

                                fTemp_matrix_nudof_x_nchidof.MultATBC(fShapeDisplGrad,IJp_9,NCHI);
                                scale = (Comp11)*Trace_const*scale_const*Jp*fMaterial_Params[kNu];
                                fTemp_matrix_nudof_x_nchidof *= scale;
                                fKuphi_IJp_9 += fTemp_matrix_nudof_x_nchidof;

                                }


                                if(PlasticityCondition==3 || PlasticityCondition==4)
                                {

                                fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,IJp_10,fShapeDisplGrad);
                                scale =Comp12*Trace_const*scale_const*Jp*fMaterial_Params[kTau]*dFYchidSIGMA_Scol1;
                                fTemp_matrix_nudof_x_nudof *= scale;
                                fKu_IJp_10 += fTemp_matrix_nudof_x_nudof;

                                fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,IJp_11,fShapeDisplGrad);
                                scale =Comp12*Trace_const*scale_const*Jp*fMaterial_Params[kSigma_const];
                                fTemp_matrix_nudof_x_nudof *= scale;
                                fKu_IJp_11 += fTemp_matrix_nudof_x_nudof;

                                fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,IJp_12,fShapeDisplGrad);
                                scale =Comp12*Trace_const*scale_const*Jp*(fMaterial_Params[kEta]-fMaterial_Params[kTau])*dFYchidSIGMA_Scol1;
                                fTemp_matrix_nudof_x_nudof *= scale;
                                fKu_IJp_12 += fTemp_matrix_nudof_x_nudof;

                                fTemp_matrix_nudof_x_nchidof.MultATBC(fShapeDisplGrad,IJp_13,NCHI);
                                scale =Comp12*Trace_const*scale_const*Jp*(fMaterial_Params[kEta]-fMaterial_Params[kTau])*dFYchidSIGMA_Scol1;
                                fTemp_matrix_nudof_x_nchidof *= scale;
                                fKuphi_IJp_13 += fTemp_matrix_nudof_x_nchidof;


                                fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,IJp_14,fShapeDisplGrad);
                                scale =Comp12*Trace_const*scale_const*Jp*(fMaterial_Params[kNu]-fMaterial_Params[kSigma_const]);
                                fTemp_matrix_nudof_x_nudof *= scale;
                                fKu_IJp_14 += fTemp_matrix_nudof_x_nudof;

                                fTemp_matrix_nudof_x_nchidof.MultATBC(fShapeDisplGrad,IJp_15,NCHI);
                                scale =Comp12*Trace_const*scale_const*Jp*(fMaterial_Params[kNu]-fMaterial_Params[kSigma_const]);
                                fTemp_matrix_nudof_x_nchidof *= scale;
                                fKuphi_IJp_15 += fTemp_matrix_nudof_x_nchidof;

                                fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,IJp_16,fShapeDisplGrad);
                                scale =Comp12*Trace_const*scale_const*Jp*(fMaterial_Params[kKappa]-fMaterial_Params[kSigma_const]);
                                fTemp_matrix_nudof_x_nudof *= scale;
                                fKu_IJp_16 += fTemp_matrix_nudof_x_nudof;

                                fTemp_matrix_nudof_x_nchidof.MultATBC(fShapeDisplGrad,IJp_17,NCHI);
                                scale =Comp12*Trace_const*scale_const*Jp*(fMaterial_Params[kKappa]-fMaterial_Params[kSigma_const]);
                                fTemp_matrix_nudof_x_nchidof *= scale;
                                fKuphi_IJp_17 += fTemp_matrix_nudof_x_nchidof;

                                }


                                /* Terms realted to Delta(F) F: Deformation_Gradient F=FeFp used in w(l,A) delta(F^-1)(A,k) Fe(k,Kbar)S(Kbar,Lbar)Fe(l,Lbar) Jp */
                                /* All the matrices with p_ extension are plastic  such as I2p_1, I3p_10, etc.. */
                                fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I1e_1,fShapeDisplGrad);
                                scale = -1*scale_const*Jp;
                                fTemp_matrix_nudof_x_nudof *= scale;
                                fKu_I1e_1 += fTemp_matrix_nudof_x_nudof;

                                /* Terms realted to Delta(F) F: Deformation_Gradient F=FeFp used in w(l,A)(F^-1)(A,k)delta(Fe(k,Kbar))S(Kbar,Lbar)Fe(l,Lbar) Jp */
                                fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I2e_1,fShapeDisplGrad);
                                scale = scale_const*Jp;
                                fTemp_matrix_nudof_x_nudof *= scale;
                                fKu_I2e_1 += fTemp_matrix_nudof_x_nudof;

                                if(PlasticityCondition==1 || PlasticityCondition==3 || PlasticityCondition==4)//if(MacroPlasticityCondition==1)
                                {

                                fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I2p_2,fShapeDisplGrad);
                                scale =-1*(Comp11)*(fMaterial_Params[kLambda]+fMaterial_Params[kTau])*dFYdScol1*scale_const*Jp;
                                fTemp_matrix_nudof_x_nudof *= scale;
                                fKu_I2p_2 += fTemp_matrix_nudof_x_nudof;

                                fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I2p_3,fShapeDisplGrad);
                                scale =-1*(Comp11)*(fMaterial_Params[kMu]+fMaterial_Params[kSigma_const])*scale_const*Jp;
                                fTemp_matrix_nudof_x_nudof *= scale;
                                fKu_I2p_3 += fTemp_matrix_nudof_x_nudof;

                                fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I2p_4,fShapeDisplGrad);
                                scale =-1*(Comp11)*(fMaterial_Params[kMu]+fMaterial_Params[kSigma_const])*scale_const*Jp;
                                fTemp_matrix_nudof_x_nudof *= scale;
                                fKu_I2p_4 += fTemp_matrix_nudof_x_nudof;

                                /* Additional terms due to micromorphic terms into macro scale */

                                fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I2p_5,fShapeDisplGrad);
                                scale =-1*(Comp11)*dFYdScol1*scale_const*Jp*fMaterial_Params[kEta];
                                fTemp_matrix_nudof_x_nudof *= scale;
                                fKu_I2p_5 += fTemp_matrix_nudof_x_nudof;

                                fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I2p_6,fShapeDisplGrad);
                                scale =-1*(Comp11)*fMaterial_Params[kKappa]*scale_const*Jp;
                                fTemp_matrix_nudof_x_nudof *= scale;
                                fKu_I2p_6 += fTemp_matrix_nudof_x_nudof;

                                fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I2p_7,fShapeDisplGrad);
                                scale =-1*(Comp11)*scale_const*fMaterial_Params[kNu]*Jp;
                                fTemp_matrix_nudof_x_nudof *= scale;
                                fKu_I2p_7 += fTemp_matrix_nudof_x_nudof;

                                fTemp_matrix_nudof_x_nchidof.MultATBC(fShapeDisplGrad,I2p_8,NCHI);
                                scale = -1*(Comp11)*dFYdScol1*Jp*scale_const*fMaterial_Params[kEta];
                                fTemp_matrix_nudof_x_nchidof *= scale;
                                fKuphi_I2p_8 += fTemp_matrix_nudof_x_nchidof;

                                fTemp_matrix_nudof_x_nchidof.MultATBC(fShapeDisplGrad,I2p_9,NCHI);
                                scale = -1*(Comp11)*scale_const*Jp*fMaterial_Params[kKappa];
                                fTemp_matrix_nudof_x_nchidof *= scale;
                                fKuphi_I2p_9 += fTemp_matrix_nudof_x_nchidof;

                                fTemp_matrix_nudof_x_nchidof.MultATBC(fShapeDisplGrad,I2p_10,NCHI);
                                scale = -1*(Comp11)*scale_const*Jp*fMaterial_Params[kNu];
                                fTemp_matrix_nudof_x_nchidof *= scale;
                                fKuphi_I2p_10 += fTemp_matrix_nudof_x_nchidof;


////////////////////////////////Terms Related to the variation of the Trial Directional Flow Rule//////////////////////////////
                                fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I2p_trial_1,fShapeDisplGrad);
                                scale =(Comp33)*scale_const*(fMaterial_Params[kMu]+fMaterial_Params[kSigma_const])*fDelgamma*Jp;
                                fTemp_matrix_nudof_x_nudof *= scale;
                                fKu_I2p_trial_1+= fTemp_matrix_nudof_x_nudof;

                                fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I2p_trial_2,fShapeDisplGrad);
                                scale =(Comp33)*scale_const*(fMaterial_Params[kMu]+fMaterial_Params[kSigma_const])*fDelgamma*Jp;
                                fTemp_matrix_nudof_x_nudof *= scale;
                                fKu_I2p_trial_2+= fTemp_matrix_nudof_x_nudof;

                                fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I2p_trial_3,fShapeDisplGrad);
                                scale =-1*(Comp33)*scale_const*(fMaterial_Params[kMu]+fMaterial_Params[kSigma_const])*fDelgamma*Jp*(2.0/3.0);
                                fTemp_matrix_nudof_x_nudof *= scale;
                                fKu_I2p_trial_3+= fTemp_matrix_nudof_x_nudof;

                                fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I2p_trial_4,fShapeDisplGrad);
								scale =-1*(Comp44)*scale_const*(fMaterial_Params[kMu]+fMaterial_Params[kSigma_const])*fDelgamma*Jp;
								fTemp_matrix_nudof_x_nudof *= scale;
								fKu_I2p_trial_4+= fTemp_matrix_nudof_x_nudof;

                                fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I2p_trial_5,fShapeDisplGrad);
								scale =-1*(Comp44)*scale_const*(fMaterial_Params[kMu]+fMaterial_Params[kSigma_const])*fDelgamma*Jp;
								fTemp_matrix_nudof_x_nudof *= scale;
								fKu_I2p_trial_5+= fTemp_matrix_nudof_x_nudof;


                                fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I3p_trial_1,fShapeDisplGrad);
                                scale =-1*(Comp33)*scale_const*(fMaterial_Params[kMu]+fMaterial_Params[kSigma_const])*fDelgamma*Jp;
                                fTemp_matrix_nudof_x_nudof *= scale;
                                fKu_I3p_trial_1+= fTemp_matrix_nudof_x_nudof;

                                fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I3p_trial_2,fShapeDisplGrad);
                                scale =-1*(Comp33)*scale_const*(fMaterial_Params[kMu]+fMaterial_Params[kSigma_const])*fDelgamma*Jp;
                                fTemp_matrix_nudof_x_nudof *= scale;
                                fKu_I3p_trial_2+= fTemp_matrix_nudof_x_nudof;

                                fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I3p_trial_3,fShapeDisplGrad);
                                scale =(Comp33)*scale_const*(fMaterial_Params[kMu]+fMaterial_Params[kSigma_const])*fDelgamma*Jp*(2.0/3.0);
                                fTemp_matrix_nudof_x_nudof *= scale;
                                fKu_I3p_trial_3+= fTemp_matrix_nudof_x_nudof;

                                fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I3p_trial_4,fShapeDisplGrad);
								scale =(Comp44)*scale_const*(fMaterial_Params[kMu]+fMaterial_Params[kSigma_const])*fDelgamma*Jp;
								fTemp_matrix_nudof_x_nudof *= scale;
								fKu_I3p_trial_4+= fTemp_matrix_nudof_x_nudof;

                                fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I3p_trial_5,fShapeDisplGrad);
								scale =(Comp44)*scale_const*(fMaterial_Params[kMu]+fMaterial_Params[kSigma_const])*fDelgamma*Jp;
								fTemp_matrix_nudof_x_nudof *= scale;
								fKu_I3p_trial_5+= fTemp_matrix_nudof_x_nudof;


                                fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I4p_trial_1,fShapeDisplGrad);
                                scale =-1*(Comp33)*scale_const*(fMaterial_Params[kMu]+fMaterial_Params[kSigma_const])*fMaterial_Params[kLambda]*fDelgamma*Jp;
                                fTemp_matrix_nudof_x_nudof *= scale;
                                fKu_I4p_trial_1+= fTemp_matrix_nudof_x_nudof;

                                fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I4p_trial_2,fShapeDisplGrad);
                                scale =-1*(Comp33)*scale_const*(fMaterial_Params[kMu]+fMaterial_Params[kSigma_const])*fMaterial_Params[kLambda]*fDelgamma*Jp;
                                fTemp_matrix_nudof_x_nudof *= scale;
                                fKu_I4p_trial_2+= fTemp_matrix_nudof_x_nudof;

                                fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I4p_trial_3,fShapeDisplGrad);
                                scale =(Comp33)*scale_const*(fMaterial_Params[kMu]+fMaterial_Params[kSigma_const])*fMaterial_Params[kLambda]*fDelgamma*Jp*(2.0/3.0);
                                fTemp_matrix_nudof_x_nudof *= scale;
                                fKu_I4p_trial_3+= fTemp_matrix_nudof_x_nudof;

                                fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I4p_trial_4,fShapeDisplGrad);
								scale =(Comp44)*scale_const*(fMaterial_Params[kMu]+fMaterial_Params[kSigma_const])*fMaterial_Params[kLambda]*fDelgamma*Jp;
								fTemp_matrix_nudof_x_nudof *= scale;
								fKu_I4p_trial_4+= fTemp_matrix_nudof_x_nudof;

                                fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I4p_trial_5,fShapeDisplGrad);
								scale =(Comp44)*scale_const*(fMaterial_Params[kMu]+fMaterial_Params[kSigma_const])*fMaterial_Params[kLambda]*fDelgamma*Jp;
								fTemp_matrix_nudof_x_nudof *= scale;
								fKu_I4p_trial_5+= fTemp_matrix_nudof_x_nudof;

                                fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I4p_trial_6,fShapeDisplGrad);
                                scale =-1*(Comp33)*scale_const*(fMaterial_Params[kMu]+fMaterial_Params[kSigma_const])*fMaterial_Params[kMu]*fDelgamma*Jp;
                                fTemp_matrix_nudof_x_nudof *= scale;
                                fKu_I4p_trial_6+= fTemp_matrix_nudof_x_nudof;

                                fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I4p_trial_7,fShapeDisplGrad);
                                scale =-1*(Comp33)*scale_const*(fMaterial_Params[kMu]+fMaterial_Params[kSigma_const])*fMaterial_Params[kMu]*fDelgamma*Jp;
                                fTemp_matrix_nudof_x_nudof *= scale;
                                fKu_I4p_trial_7+= fTemp_matrix_nudof_x_nudof;

                                fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I4p_trial_8,fShapeDisplGrad);
                                scale =(Comp33)*scale_const*(fMaterial_Params[kMu]+fMaterial_Params[kSigma_const])*fMaterial_Params[kMu]*fDelgamma*Jp*(2.0/3.0);
                                fTemp_matrix_nudof_x_nudof *= scale;
                                fKu_I4p_trial_8+= fTemp_matrix_nudof_x_nudof;

                                fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I4p_trial_9,fShapeDisplGrad);
								scale =(Comp44)*scale_const*(fMaterial_Params[kMu]+fMaterial_Params[kSigma_const])*fMaterial_Params[kMu]*fDelgamma*Jp;
								fTemp_matrix_nudof_x_nudof *= scale;
								fKu_I4p_trial_9+= fTemp_matrix_nudof_x_nudof;

                                fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I4p_trial_10,fShapeDisplGrad);
								scale =(Comp44)*scale_const*(fMaterial_Params[kMu]+fMaterial_Params[kSigma_const])*fMaterial_Params[kMu]*fDelgamma*Jp;
								fTemp_matrix_nudof_x_nudof *= scale;
								fKu_I4p_trial_10+= fTemp_matrix_nudof_x_nudof;


                                fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I4p_trial_11,fShapeDisplGrad);
                                scale =-1*(Comp33)*scale_const*(fMaterial_Params[kMu]+fMaterial_Params[kSigma_const])*fMaterial_Params[kMu]*fDelgamma*Jp;
                                fTemp_matrix_nudof_x_nudof *= scale;
                                fKu_I4p_trial_11+= fTemp_matrix_nudof_x_nudof;

                                fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I4p_trial_12,fShapeDisplGrad);
                                scale =-1*(Comp33)*scale_const*(fMaterial_Params[kMu]+fMaterial_Params[kSigma_const])*fMaterial_Params[kMu]*fDelgamma*Jp;
                                fTemp_matrix_nudof_x_nudof *= scale;
                                fKu_I4p_trial_12+= fTemp_matrix_nudof_x_nudof;

                                fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I4p_trial_13,fShapeDisplGrad);
                                scale =(Comp33)*scale_const*(fMaterial_Params[kMu]+fMaterial_Params[kSigma_const])*fMaterial_Params[kMu]*fDelgamma*Jp*(2.0/3.0);
                                fTemp_matrix_nudof_x_nudof *= scale;
                                fKu_I4p_trial_13+= fTemp_matrix_nudof_x_nudof;

                                fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I4p_trial_14,fShapeDisplGrad);
								scale =(Comp44)*scale_const*(fMaterial_Params[kMu]+fMaterial_Params[kSigma_const])*fMaterial_Params[kMu]*fDelgamma*Jp;
								fTemp_matrix_nudof_x_nudof *= scale;
								fKu_I4p_trial_14+= fTemp_matrix_nudof_x_nudof;

                                fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I4p_trial_15,fShapeDisplGrad);
								scale =(Comp44)*scale_const*(fMaterial_Params[kMu]+fMaterial_Params[kSigma_const])*fMaterial_Params[kMu]*fDelgamma*Jp;
								fTemp_matrix_nudof_x_nudof *= scale;
								fKu_I4p_trial_15+= fTemp_matrix_nudof_x_nudof;

                                fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I5p_trial_1,fShapeDisplGrad);
                                scale =-1*(Comp33)*scale_const*(fMaterial_Params[kMu]+fMaterial_Params[kSigma_const])*fDelgamma*Jp;
                                fTemp_matrix_nudof_x_nudof *= scale;
                                fKu_I5p_trial_1+= fTemp_matrix_nudof_x_nudof;

                                fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I5p_trial_2,fShapeDisplGrad);
                                scale =-1*(Comp33)*scale_const*(fMaterial_Params[kMu]+fMaterial_Params[kSigma_const])*fDelgamma*Jp;
                                fTemp_matrix_nudof_x_nudof *= scale;
                                fKu_I5p_trial_2+= fTemp_matrix_nudof_x_nudof;

                                fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I5p_trial_3,fShapeDisplGrad);
                                scale =(Comp33)*scale_const*(fMaterial_Params[kMu]+fMaterial_Params[kSigma_const])*fDelgamma*Jp*(2.0/3.0);
                                fTemp_matrix_nudof_x_nudof *= scale;
                                fKu_I5p_trial_3+= fTemp_matrix_nudof_x_nudof;

                                fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I5p_trial_4,fShapeDisplGrad);
								scale =(Comp44)*scale_const*(fMaterial_Params[kMu]+fMaterial_Params[kSigma_const])*fDelgamma*Jp;
								fTemp_matrix_nudof_x_nudof *= scale;
								fKu_I5p_trial_4+= fTemp_matrix_nudof_x_nudof;

                                fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I5p_trial_5,fShapeDisplGrad);
								scale =(Comp44)*scale_const*(fMaterial_Params[kMu]+fMaterial_Params[kSigma_const])*fDelgamma*Jp;
								fTemp_matrix_nudof_x_nudof *= scale;
								fKu_I5p_trial_5+= fTemp_matrix_nudof_x_nudof;

								/////////////////////////////////////////////////////////////////////////////////

                                fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I6p_trial_1,fShapeDisplGrad);
                                scale = (Comp11)*scale_const*fDelgamma*Jp;
                                fTemp_matrix_nudof_x_nudof *= scale;
                                fKu_I6p_trial_1+= fTemp_matrix_nudof_x_nudof;

                                fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I6p_trial_2,fShapeDisplGrad);
                                scale = (Comp11)*scale_const*fDelgamma*Jp;
                                fTemp_matrix_nudof_x_nudof *= scale;
                                fKu_I6p_trial_2+= fTemp_matrix_nudof_x_nudof;

                                fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I7p_trial_1,fShapeDisplGrad);
                                scale =-1*(Comp11)*scale_const*fDelgamma*Jp;
                                fTemp_matrix_nudof_x_nudof *= scale;
                                fKu_I7p_trial_1+= fTemp_matrix_nudof_x_nudof;

                                fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I7p_trial_2,fShapeDisplGrad);
                                scale =-1*(Comp11)*scale_const*fDelgamma*Jp;
                                fTemp_matrix_nudof_x_nudof *= scale;
                                fKu_I7p_trial_2+= fTemp_matrix_nudof_x_nudof;

                                fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I8p_trial_1,fShapeDisplGrad);
                                scale =-1*(Comp11)*scale_const*fDelgamma*Jp;
                                fTemp_matrix_nudof_x_nudof *= scale;
                                fKu_I8p_trial_1+= fTemp_matrix_nudof_x_nudof;

                                fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I8p_trial_2,fShapeDisplGrad);
                                scale =-1*(Comp11)*scale_const*fDelgamma*Jp;
                                fTemp_matrix_nudof_x_nudof *= scale;
                                fKu_I8p_trial_2+= fTemp_matrix_nudof_x_nudof;

                                fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I9p_trial_1,fShapeDisplGrad);
                                scale =-1*(Comp11)*scale_const*fDelgamma*Jp*fMaterial_Params[kLambda];
                                fTemp_matrix_nudof_x_nudof *= scale;
                                fKu_I9p_trial_1+= fTemp_matrix_nudof_x_nudof;

                                fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I9p_trial_2,fShapeDisplGrad);
                                scale =-1*(Comp11)*scale_const*fDelgamma*Jp*fMaterial_Params[kLambda];
                                fTemp_matrix_nudof_x_nudof *= scale;
                                fKu_I9p_trial_2+= fTemp_matrix_nudof_x_nudof;

                                fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I10p_trial_1,fShapeDisplGrad);
                                scale =-1*(Comp11)*scale_const*fDelgamma*Jp*fMaterial_Params[kMu];
                                fTemp_matrix_nudof_x_nudof *= scale;
                                fKu_I10p_trial_1+= fTemp_matrix_nudof_x_nudof;

                                fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I10p_trial_2,fShapeDisplGrad);
                                scale =-1*(Comp11)*scale_const*fDelgamma*Jp*fMaterial_Params[kMu];
                                fTemp_matrix_nudof_x_nudof *= scale;
                                fKu_I10p_trial_2+= fTemp_matrix_nudof_x_nudof;

                                fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I11p_trial_1,fShapeDisplGrad);
                                scale =-1*(Comp11)*scale_const*fDelgamma*Jp*fMaterial_Params[kMu];
                                fTemp_matrix_nudof_x_nudof *= scale;
                                fKu_I11p_trial_1+= fTemp_matrix_nudof_x_nudof;

                                fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I11p_trial_2,fShapeDisplGrad);
                                scale =-1*(Comp11)*scale_const*fDelgamma*Jp*fMaterial_Params[kMu];
                                fTemp_matrix_nudof_x_nudof *= scale;
                                fKu_I11p_trial_2+= fTemp_matrix_nudof_x_nudof;


                                fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I12p_trial_1,fShapeDisplGrad);
								scale =(Comp33)*scale_const*fMaterial_Params[kKappa]*fDelgamma*Jp;
								fTemp_matrix_nudof_x_nudof *= scale;
								fKu_I12p_trial_1+= fTemp_matrix_nudof_x_nudof;

								fTemp_matrix_nudof_x_nchidof.MultATBC(fShapeDisplGrad,I12p_trial_2,NCHI);
								scale =(Comp33)*scale_const*fMaterial_Params[kKappa]*fDelgamma*Jp;
								fTemp_matrix_nudof_x_nchidof *= scale;
								fKuphi_I12p_trial_2+= fTemp_matrix_nudof_x_nchidof;

								fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I12p_trial_3,fShapeDisplGrad);
								scale =(Comp33)*scale_const*fMaterial_Params[kNu]*fDelgamma*Jp;
								fTemp_matrix_nudof_x_nudof *= scale;
								fKu_I12p_trial_3+= fTemp_matrix_nudof_x_nudof;

								fTemp_matrix_nudof_x_nchidof.MultATBC(fShapeDisplGrad,I12p_trial_4,NCHI);
								scale =(Comp33)*scale_const*fMaterial_Params[kNu]*fDelgamma*Jp;
								fTemp_matrix_nudof_x_nchidof *= scale;
								fKuphi_I12p_trial_4= fTemp_matrix_nudof_x_nchidof;

								fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I12p_trial_5,fShapeDisplGrad);
								scale =-1*(Comp33)*scale_const*(fMaterial_Params[kNu]+fMaterial_Params[kKappa])*fDelgamma*Jp;
								fTemp_matrix_nudof_x_nudof *= scale;
								fTemp_matrix_nudof_x_nudof *= 1.0/3.0;
								fKu_I12p_trial_5+= fTemp_matrix_nudof_x_nudof;

								fTemp_matrix_nudof_x_nchidof.MultATBC(fShapeDisplGrad,I12p_trial_6,NCHI);
								scale =-1*(Comp33)*scale_const*(fMaterial_Params[kNu]+fMaterial_Params[kKappa])*fDelgamma*Jp;
								fTemp_matrix_nudof_x_nchidof *= scale;
								fTemp_matrix_nudof_x_nchidof *= 1.0/3.0;
								fKuphi_I12p_trial_6= fTemp_matrix_nudof_x_nchidof;

								fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I12p_trial_7,fShapeDisplGrad);
								scale =-1*(Comp44)*scale_const*(fMaterial_Params[kKappa])*fDelgamma*Jp;
								fTemp_matrix_nudof_x_nudof *= scale;
								fKu_I12p_trial_7+= fTemp_matrix_nudof_x_nudof;

								fTemp_matrix_nudof_x_nchidof.MultATBC(fShapeDisplGrad,I12p_trial_8,NCHI);
								scale =-1*(Comp44)*scale_const*(fMaterial_Params[kKappa])*fDelgamma*Jp;
								fTemp_matrix_nudof_x_nchidof *= scale;
								fKuphi_I12p_trial_8= fTemp_matrix_nudof_x_nchidof;

								fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I12p_trial_9,fShapeDisplGrad);
								scale =-1*(Comp44)*scale_const*(fMaterial_Params[kNu])*fDelgamma*Jp;
								fTemp_matrix_nudof_x_nudof *= scale;
								fKu_I12p_trial_9+= fTemp_matrix_nudof_x_nudof;

								fTemp_matrix_nudof_x_nchidof.MultATBC(fShapeDisplGrad,I12p_trial_10,NCHI);
								scale =-1*(Comp44)*scale_const*(fMaterial_Params[kNu])*fDelgamma*Jp;
								fTemp_matrix_nudof_x_nchidof *= scale;
								fKuphi_I12p_trial_10= fTemp_matrix_nudof_x_nchidof;


								fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I13p_trial_1,fShapeDisplGrad);
								scale =-1*(Comp33)*scale_const*fMaterial_Params[kKappa]*fDelgamma*Jp;
								fTemp_matrix_nudof_x_nudof *= scale;
								fKu_I13p_trial_1+= fTemp_matrix_nudof_x_nudof;

								fTemp_matrix_nudof_x_nchidof.MultATBC(fShapeDisplGrad,I13p_trial_2,NCHI);
								scale =-1*(Comp33)*scale_const*fMaterial_Params[kKappa]*fDelgamma*Jp;
								fTemp_matrix_nudof_x_nchidof *= scale;
								fKuphi_I13p_trial_2+= fTemp_matrix_nudof_x_nchidof;

								fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I13p_trial_3,fShapeDisplGrad);
								scale =-1*(Comp33)*scale_const*fMaterial_Params[kNu]*fDelgamma*Jp;
								fTemp_matrix_nudof_x_nudof *= scale;
								fKu_I13p_trial_3+= fTemp_matrix_nudof_x_nudof;

								fTemp_matrix_nudof_x_nchidof.MultATBC(fShapeDisplGrad,I13p_trial_4,NCHI);
								scale =-1*(Comp33)*scale_const*fMaterial_Params[kNu]*fDelgamma*Jp;
								fTemp_matrix_nudof_x_nchidof *= scale;
								fKuphi_I13p_trial_4= fTemp_matrix_nudof_x_nchidof;

								fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I13p_trial_5,fShapeDisplGrad);
								scale =(Comp33)*scale_const*(fMaterial_Params[kNu]+fMaterial_Params[kKappa])*fDelgamma*Jp;
								fTemp_matrix_nudof_x_nudof *= scale;
								fTemp_matrix_nudof_x_nudof *= 1.0/3.0;
								fKu_I13p_trial_5+= fTemp_matrix_nudof_x_nudof;

								fTemp_matrix_nudof_x_nchidof.MultATBC(fShapeDisplGrad,I13p_trial_6,NCHI);
								scale =(Comp33)*scale_const*(fMaterial_Params[kNu]+fMaterial_Params[kKappa])*fDelgamma*Jp;
								fTemp_matrix_nudof_x_nchidof *= scale;
								fTemp_matrix_nudof_x_nchidof *= 1.0/3.0;
								fKuphi_I13p_trial_6= fTemp_matrix_nudof_x_nchidof;

								fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I13p_trial_7,fShapeDisplGrad);
								scale =(Comp44)*scale_const*(fMaterial_Params[kKappa])*fDelgamma*Jp;
								fTemp_matrix_nudof_x_nudof *= scale;
								fKu_I13p_trial_7+= fTemp_matrix_nudof_x_nudof;

								fTemp_matrix_nudof_x_nchidof.MultATBC(fShapeDisplGrad,I13p_trial_8,NCHI);
								scale =(Comp44)*scale_const*(fMaterial_Params[kKappa])*fDelgamma*Jp;
								fTemp_matrix_nudof_x_nchidof *= scale;
								fKuphi_I13p_trial_8= fTemp_matrix_nudof_x_nchidof;

								fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I13p_trial_9,fShapeDisplGrad);
								scale =(Comp44)*scale_const*(fMaterial_Params[kNu])*fDelgamma*Jp;
								fTemp_matrix_nudof_x_nudof *= scale;
								fKu_I13p_trial_9+= fTemp_matrix_nudof_x_nudof;

								fTemp_matrix_nudof_x_nchidof.MultATBC(fShapeDisplGrad,I13p_trial_10,NCHI);
								scale =(Comp44)*scale_const*(fMaterial_Params[kNu])*fDelgamma*Jp;
								fTemp_matrix_nudof_x_nchidof *= scale;
								fKuphi_I13p_trial_10= fTemp_matrix_nudof_x_nchidof;


								fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I14p_trial_1,fShapeDisplGrad);
								scale =-1*(Comp33)*scale_const*fMaterial_Params[kKappa]*fDelgamma*Jp;
								fTemp_matrix_nudof_x_nudof *= scale;
								fKu_I14p_trial_1+= fTemp_matrix_nudof_x_nudof;

								fTemp_matrix_nudof_x_nchidof.MultATBC(fShapeDisplGrad,I14p_trial_2,NCHI);
								scale =-1*(Comp33)*scale_const*fMaterial_Params[kKappa]*fDelgamma*Jp;
								fTemp_matrix_nudof_x_nchidof *= scale;
								fKuphi_I14p_trial_2+= fTemp_matrix_nudof_x_nchidof;

								fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I14p_trial_3,fShapeDisplGrad);
								scale =-1*(Comp33)*scale_const*fMaterial_Params[kNu]*fDelgamma*Jp;
								fTemp_matrix_nudof_x_nudof *= scale;
								fKu_I14p_trial_3+= fTemp_matrix_nudof_x_nudof;

								fTemp_matrix_nudof_x_nchidof.MultATBC(fShapeDisplGrad,I14p_trial_4,NCHI);
								scale =-1*(Comp33)*scale_const*fMaterial_Params[kNu]*fDelgamma*Jp;
								fTemp_matrix_nudof_x_nchidof *= scale;
								fKuphi_I14p_trial_4= fTemp_matrix_nudof_x_nchidof;

								fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I14p_trial_5,fShapeDisplGrad);
								scale =(Comp33)*scale_const*(fMaterial_Params[kNu]+fMaterial_Params[kKappa])*fDelgamma*Jp;
								fTemp_matrix_nudof_x_nudof *= scale;
								fTemp_matrix_nudof_x_nudof *= 1.0/3.0;
								fKu_I14p_trial_5+= fTemp_matrix_nudof_x_nudof;

								fTemp_matrix_nudof_x_nchidof.MultATBC(fShapeDisplGrad,I14p_trial_6,NCHI);
								scale =(Comp33)*scale_const*(fMaterial_Params[kNu]+fMaterial_Params[kKappa])*fDelgamma*Jp;
								fTemp_matrix_nudof_x_nchidof *= scale;
								fTemp_matrix_nudof_x_nchidof *= 1.0/3.0;
								fKuphi_I14p_trial_6= fTemp_matrix_nudof_x_nchidof;

								fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I14p_trial_7,fShapeDisplGrad);
								scale =(Comp44)*scale_const*(fMaterial_Params[kKappa])*fDelgamma*Jp;
								fTemp_matrix_nudof_x_nudof *= scale;
								fKu_I14p_trial_7+= fTemp_matrix_nudof_x_nudof;

								fTemp_matrix_nudof_x_nchidof.MultATBC(fShapeDisplGrad,I14p_trial_8,NCHI);
								scale =(Comp44)*scale_const*(fMaterial_Params[kKappa])*fDelgamma*Jp;
								fTemp_matrix_nudof_x_nchidof *= scale;
								fKuphi_I14p_trial_8= fTemp_matrix_nudof_x_nchidof;

								fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I14p_trial_9,fShapeDisplGrad);
								scale =(Comp44)*scale_const*(fMaterial_Params[kNu])*fDelgamma*Jp;
								fTemp_matrix_nudof_x_nudof *= scale;
								fKu_I14p_trial_9+= fTemp_matrix_nudof_x_nudof;

								fTemp_matrix_nudof_x_nchidof.MultATBC(fShapeDisplGrad,I14p_trial_10,NCHI);
								scale =(Comp44)*scale_const*(fMaterial_Params[kNu])*fDelgamma*Jp;
								fTemp_matrix_nudof_x_nchidof *= scale;
								fKuphi_I14p_trial_10= fTemp_matrix_nudof_x_nchidof;


								fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I15p_trial_1,fShapeDisplGrad);
								scale =-1*(Comp33)*scale_const*fMaterial_Params[kKappa]*fMaterial_Params[kLambda]*fDelgamma*Jp;
								fTemp_matrix_nudof_x_nudof *= scale;
								fKu_I15p_trial_1+= fTemp_matrix_nudof_x_nudof;

								fTemp_matrix_nudof_x_nchidof.MultATBC(fShapeDisplGrad,I15p_trial_2,NCHI);
								scale =-1*(Comp33)*scale_const*fMaterial_Params[kKappa]*fMaterial_Params[kLambda]*fDelgamma*Jp;
								fTemp_matrix_nudof_x_nchidof *= scale;
								fKuphi_I15p_trial_2+= fTemp_matrix_nudof_x_nchidof;

								fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I15p_trial_3,fShapeDisplGrad);
								scale =-1*(Comp33)*scale_const*fMaterial_Params[kNu]*fMaterial_Params[kLambda]*fDelgamma*Jp;
								fTemp_matrix_nudof_x_nudof *= scale;
								fKu_I15p_trial_3+= fTemp_matrix_nudof_x_nudof;

								fTemp_matrix_nudof_x_nchidof.MultATBC(fShapeDisplGrad,I15p_trial_4,NCHI);
								scale =-1*(Comp33)*scale_const*fMaterial_Params[kNu]*fMaterial_Params[kLambda]*fDelgamma*Jp;
								fTemp_matrix_nudof_x_nchidof *= scale;
								fKuphi_I15p_trial_4= fTemp_matrix_nudof_x_nchidof;

								fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I15p_trial_5,fShapeDisplGrad);
								scale =(Comp33)*scale_const*(fMaterial_Params[kNu]+fMaterial_Params[kKappa])*fMaterial_Params[kLambda]*fDelgamma*Jp;
								fTemp_matrix_nudof_x_nudof *= scale;
								fTemp_matrix_nudof_x_nudof *= 1.0/3.0;
								fKu_I15p_trial_5+= fTemp_matrix_nudof_x_nudof;

								fTemp_matrix_nudof_x_nchidof.MultATBC(fShapeDisplGrad,I15p_trial_6,NCHI);
								scale =(Comp33)*scale_const*(fMaterial_Params[kNu]+fMaterial_Params[kKappa])*fMaterial_Params[kLambda]*fDelgamma*Jp;
								fTemp_matrix_nudof_x_nchidof *= scale;
								fTemp_matrix_nudof_x_nchidof *= 1.0/3.0;
								fKuphi_I15p_trial_6= fTemp_matrix_nudof_x_nchidof;

								fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I15p_trial_7,fShapeDisplGrad);
								scale =(Comp44)*scale_const*(fMaterial_Params[kKappa])*fMaterial_Params[kLambda]*fDelgamma*Jp;
								fTemp_matrix_nudof_x_nudof *= scale;
								fKu_I15p_trial_7+= fTemp_matrix_nudof_x_nudof;

								fTemp_matrix_nudof_x_nchidof.MultATBC(fShapeDisplGrad,I15p_trial_8,NCHI);
								scale =(Comp44)*scale_const*(fMaterial_Params[kKappa])*fMaterial_Params[kLambda]*fDelgamma*Jp;
								fTemp_matrix_nudof_x_nchidof *= scale;
								fKuphi_I15p_trial_8= fTemp_matrix_nudof_x_nchidof;

								fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I15p_trial_9,fShapeDisplGrad);
								scale =(Comp44)*scale_const*(fMaterial_Params[kNu])*fMaterial_Params[kLambda]*fDelgamma*Jp;
								fTemp_matrix_nudof_x_nudof *= scale;
								fKu_I15p_trial_9+= fTemp_matrix_nudof_x_nudof;

								fTemp_matrix_nudof_x_nchidof.MultATBC(fShapeDisplGrad,I15p_trial_10,NCHI);
								scale =(Comp44)*scale_const*(fMaterial_Params[kNu])*fMaterial_Params[kLambda]*fDelgamma*Jp;
								fTemp_matrix_nudof_x_nchidof *= scale;
								fKuphi_I15p_trial_10= fTemp_matrix_nudof_x_nchidof;


								fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I16p_trial_1,fShapeDisplGrad);
								scale =-1*(Comp33)*scale_const*fMaterial_Params[kKappa]*fMaterial_Params[kMu]*fDelgamma*Jp;
								fTemp_matrix_nudof_x_nudof *= scale;
								fKu_I16p_trial_1+= fTemp_matrix_nudof_x_nudof;

								fTemp_matrix_nudof_x_nchidof.MultATBC(fShapeDisplGrad,I16p_trial_2,NCHI);
								scale =-1*(Comp33)*scale_const*fMaterial_Params[kKappa]*fMaterial_Params[kMu]*fDelgamma*Jp;
								fTemp_matrix_nudof_x_nchidof *= scale;
								fKuphi_I16p_trial_2+= fTemp_matrix_nudof_x_nchidof;

								fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I16p_trial_3,fShapeDisplGrad);
								scale =-1*(Comp33)*scale_const*fMaterial_Params[kNu]*fMaterial_Params[kMu]*fDelgamma*Jp;
								fTemp_matrix_nudof_x_nudof *= scale;
								fKu_I16p_trial_3+= fTemp_matrix_nudof_x_nudof;

								fTemp_matrix_nudof_x_nchidof.MultATBC(fShapeDisplGrad,I16p_trial_4,NCHI);
								scale =-1*(Comp33)*scale_const*fMaterial_Params[kNu]*fMaterial_Params[kMu]*fDelgamma*Jp;
								fTemp_matrix_nudof_x_nchidof *= scale;
								fKuphi_I16p_trial_4= fTemp_matrix_nudof_x_nchidof;

								fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I16p_trial_5,fShapeDisplGrad);
								scale =(Comp33)*scale_const*(fMaterial_Params[kNu]+fMaterial_Params[kKappa])*fMaterial_Params[kMu]*fDelgamma*Jp;
								fTemp_matrix_nudof_x_nudof *= scale;
								fTemp_matrix_nudof_x_nudof *= 1.0/3.0;
								fKu_I16p_trial_5+= fTemp_matrix_nudof_x_nudof;

								fTemp_matrix_nudof_x_nchidof.MultATBC(fShapeDisplGrad,I16p_trial_6,NCHI);
								scale =(Comp33)*scale_const*(fMaterial_Params[kNu]+fMaterial_Params[kKappa])*fMaterial_Params[kMu]*fDelgamma*Jp;
								fTemp_matrix_nudof_x_nchidof *= scale;
								fTemp_matrix_nudof_x_nchidof *= 1.0/3.0;
								fKuphi_I16p_trial_6= fTemp_matrix_nudof_x_nchidof;

								fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I16p_trial_7,fShapeDisplGrad);
								scale =(Comp44)*scale_const*(fMaterial_Params[kKappa])*fMaterial_Params[kMu]*fDelgamma*Jp;
								fTemp_matrix_nudof_x_nudof *= scale;
								fKu_I16p_trial_7+= fTemp_matrix_nudof_x_nudof;

								fTemp_matrix_nudof_x_nchidof.MultATBC(fShapeDisplGrad,I16p_trial_8,NCHI);
								scale =(Comp44)*scale_const*(fMaterial_Params[kKappa])*fMaterial_Params[kMu]*fDelgamma*Jp;
								fTemp_matrix_nudof_x_nchidof *= scale;
								fKuphi_I16p_trial_8= fTemp_matrix_nudof_x_nchidof;

								fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I16p_trial_9,fShapeDisplGrad);
								scale =(Comp44)*scale_const*(fMaterial_Params[kNu])*fMaterial_Params[kMu]*fDelgamma*Jp;
								fTemp_matrix_nudof_x_nudof *= scale;
								fKu_I16p_trial_9+= fTemp_matrix_nudof_x_nudof;

								fTemp_matrix_nudof_x_nchidof.MultATBC(fShapeDisplGrad,I16p_trial_10,NCHI);
								scale =(Comp44)*scale_const*(fMaterial_Params[kNu])*fMaterial_Params[kMu]*fDelgamma*Jp;
								fTemp_matrix_nudof_x_nchidof *= scale;
								fKuphi_I16p_trial_10= fTemp_matrix_nudof_x_nchidof;


								fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I17p_trial_1,fShapeDisplGrad);
								scale =-1*(Comp33)*scale_const*fMaterial_Params[kKappa]*fMaterial_Params[kMu]*fDelgamma*Jp;
								fTemp_matrix_nudof_x_nudof *= scale;
								fKu_I17p_trial_1+= fTemp_matrix_nudof_x_nudof;

								fTemp_matrix_nudof_x_nchidof.MultATBC(fShapeDisplGrad,I17p_trial_2,NCHI);
								scale =-1*(Comp33)*scale_const*fMaterial_Params[kKappa]*fMaterial_Params[kMu]*fDelgamma*Jp;
								fTemp_matrix_nudof_x_nchidof *= scale;
								fKuphi_I17p_trial_2+= fTemp_matrix_nudof_x_nchidof;

								fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I17p_trial_3,fShapeDisplGrad);
								scale =-1*(Comp33)*scale_const*fMaterial_Params[kNu]*fMaterial_Params[kMu]*fDelgamma*Jp;
								fTemp_matrix_nudof_x_nudof *= scale;
								fKu_I17p_trial_3+= fTemp_matrix_nudof_x_nudof;

								fTemp_matrix_nudof_x_nchidof.MultATBC(fShapeDisplGrad,I17p_trial_4,NCHI);
								scale =-1*(Comp33)*scale_const*fMaterial_Params[kNu]*fMaterial_Params[kMu]*fDelgamma*Jp;
								fTemp_matrix_nudof_x_nchidof *= scale;
								fKuphi_I17p_trial_4= fTemp_matrix_nudof_x_nchidof;

								fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I17p_trial_5,fShapeDisplGrad);
								scale =(Comp33)*scale_const*(fMaterial_Params[kNu]+fMaterial_Params[kKappa])*fMaterial_Params[kMu]*fDelgamma*Jp;
								fTemp_matrix_nudof_x_nudof *= scale;
								fTemp_matrix_nudof_x_nudof *= 1.0/3.0;
								fKu_I17p_trial_5+= fTemp_matrix_nudof_x_nudof;

								fTemp_matrix_nudof_x_nchidof.MultATBC(fShapeDisplGrad,I17p_trial_6,NCHI);
								scale =(Comp33)*scale_const*(fMaterial_Params[kNu]+fMaterial_Params[kKappa])*fMaterial_Params[kMu]*fDelgamma*Jp;
								fTemp_matrix_nudof_x_nchidof *= scale;
								fTemp_matrix_nudof_x_nchidof *= 1.0/3.0;
								fKuphi_I17p_trial_6= fTemp_matrix_nudof_x_nchidof;

								fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I17p_trial_7,fShapeDisplGrad);
								scale =(Comp44)*scale_const*(fMaterial_Params[kKappa])*fMaterial_Params[kMu]*fDelgamma*Jp;
								fTemp_matrix_nudof_x_nudof *= scale;
								fKu_I17p_trial_7+= fTemp_matrix_nudof_x_nudof;

								fTemp_matrix_nudof_x_nchidof.MultATBC(fShapeDisplGrad,I17p_trial_8,NCHI);
								scale =(Comp44)*scale_const*(fMaterial_Params[kKappa])*fMaterial_Params[kMu]*fDelgamma*Jp;
								fTemp_matrix_nudof_x_nchidof *= scale;
								fKuphi_I17p_trial_8= fTemp_matrix_nudof_x_nchidof;

								fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I17p_trial_9,fShapeDisplGrad);
								scale =(Comp44)*scale_const*(fMaterial_Params[kNu])*fMaterial_Params[kMu]*fDelgamma*Jp;
								fTemp_matrix_nudof_x_nudof *= scale;
								fKu_I17p_trial_9+= fTemp_matrix_nudof_x_nudof;

								fTemp_matrix_nudof_x_nchidof.MultATBC(fShapeDisplGrad,I17p_trial_10,NCHI);
								scale =(Comp44)*scale_const*(fMaterial_Params[kNu])*fMaterial_Params[kMu]*fDelgamma*Jp;
								fTemp_matrix_nudof_x_nchidof *= scale;
								fKuphi_I17p_trial_10= fTemp_matrix_nudof_x_nchidof;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                }

                                if(PlasticityCondition==3 || PlasticityCondition==4)
                                {

                                fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I2p_11,fShapeDisplGrad);
                                scale =-1*Comp12*scale_const*Jp*fMaterial_Params[kTau]*dFYchidSIGMA_Scol1;
                                fTemp_matrix_nudof_x_nudof *= scale;
                                fKu_I2p_11 += fTemp_matrix_nudof_x_nudof;

                                fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I2p_12,fShapeDisplGrad);
                                scale =-1*Comp12*scale_const*Jp*fMaterial_Params[kSigma_const];
                                fTemp_matrix_nudof_x_nudof *= scale;
                                fKu_I2p_12 += fTemp_matrix_nudof_x_nudof;

                                fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I2p_13,fShapeDisplGrad);
                                scale =-1*Comp12*scale_const*Jp*(fMaterial_Params[kEta]-fMaterial_Params[kTau])*dFYchidSIGMA_Scol1;
                                fTemp_matrix_nudof_x_nudof *= scale;
                                fKu_I2p_13 += fTemp_matrix_nudof_x_nudof;


                                fTemp_matrix_nudof_x_nchidof.MultATBC(fShapeDisplGrad,I2p_14,NCHI);
                                scale =-1*Comp12*scale_const*Jp*(fMaterial_Params[kEta]-fMaterial_Params[kTau])*dFYchidSIGMA_Scol1;
                                fTemp_matrix_nudof_x_nchidof *= scale;
                                fKuphi_I2p_14 += fTemp_matrix_nudof_x_nchidof;


                                fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I2p_15,fShapeDisplGrad);
                                scale =-1*Comp12*scale_const*Jp*(fMaterial_Params[kNu]-fMaterial_Params[kSigma_const]);
                                fTemp_matrix_nudof_x_nudof *= scale;
                                fKu_I2p_15 += fTemp_matrix_nudof_x_nudof;


                                fTemp_matrix_nudof_x_nchidof.MultATBC(fShapeDisplGrad,I2p_16,NCHI);
                                scale =-1*Comp12*scale_const*Jp*(fMaterial_Params[kNu]-fMaterial_Params[kSigma_const]);
                                fTemp_matrix_nudof_x_nchidof *= scale;
                                fKuphi_I2p_16 += fTemp_matrix_nudof_x_nchidof;



                                fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I2p_17,fShapeDisplGrad);
                                scale =-1*Comp12*scale_const*Jp*(fMaterial_Params[kKappa]-fMaterial_Params[kSigma_const]);
                                fTemp_matrix_nudof_x_nudof *= scale;
                                fKu_I2p_17 += fTemp_matrix_nudof_x_nudof;

                                fTemp_matrix_nudof_x_nchidof.MultATBC(fShapeDisplGrad,I2p_18,NCHI);
                                scale =-1*Comp12*scale_const*Jp*(fMaterial_Params[kKappa]-fMaterial_Params[kSigma_const]);
                                fTemp_matrix_nudof_x_nchidof *= scale;
                                fKuphi_I2p_18 += fTemp_matrix_nudof_x_nchidof;


                               }



                                /* Terms realted to Delta(F^e) F^e: Elastic Deformation_Gradient in w(l,A)(F^-1)(A,k) Fe(k,Kbar)delta(S(Kbar,Lbar))Fe(l,Lbar) Jp*/
                                fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I3e_1,fShapeDisplGrad);
                                scale =scale_const*(fMaterial_Params[kLambda]+fMaterial_Params[kTau])*Jp;
                                fTemp_matrix_nudof_x_nudof *= scale;
                                fKu_I3e_1 += fTemp_matrix_nudof_x_nudof;


                                fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I3e_2,fShapeDisplGrad);
                                scale =scale_const*(fMaterial_Params[kMu]+fMaterial_Params[kSigma_const])*Jp;
                                fTemp_matrix_nudof_x_nudof *= scale;
                                fKu_I3e_2 += fTemp_matrix_nudof_x_nudof;

                                fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I3e_3,fShapeDisplGrad);
                                scale =scale_const*(fMaterial_Params[kMu]+fMaterial_Params[kSigma_const])*Jp;
                                fTemp_matrix_nudof_x_nudof *= scale;
                                fKu_I3e_3 += fTemp_matrix_nudof_x_nudof;

                                if(PlasticityCondition==1 || PlasticityCondition==3 || PlasticityCondition==4)//if(MacroPlasticityCondition==1)
                                {
                                fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I3p_4,fShapeDisplGrad);
                                scale=-1*(Comp11)*dFYdScol1*scale_const*Jp*(fMaterial_Params[kLambda]+fMaterial_Params[kTau])
                                *trfA1*(fMaterial_Params[kLambda]+fMaterial_Params[kTau]);
                                fTemp_matrix_nudof_x_nudof *= scale;
                                fKu_I3p_4 += fTemp_matrix_nudof_x_nudof;

                                fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I3p_5,fShapeDisplGrad);
                                scale = -1*(Comp11)*(fMaterial_Params[kLambda]+fMaterial_Params[kTau])*trfA1
                                *(fMaterial_Params[kMu]+fMaterial_Params[kSigma_const])*scale_const*Jp;
                                fTemp_matrix_nudof_x_nudof *= scale;
                                fKu_I3p_5 += fTemp_matrix_nudof_x_nudof;


                                fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I3p_6,fShapeDisplGrad);
                                scale =-1*(Comp11)*(fMaterial_Params[kLambda]+fMaterial_Params[kTau])*trfA1
                                *(fMaterial_Params[kMu]+fMaterial_Params[kSigma_const])*scale_const*Jp;
                                fTemp_matrix_nudof_x_nudof *= scale;
                                fKu_I3p_6 += fTemp_matrix_nudof_x_nudof;

                                fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I3p_7,fShapeDisplGrad);
                                scale =-1*(Comp11)*(fMaterial_Params[kMu]+fMaterial_Params[kSigma_const])
                                *(fMaterial_Params[kLambda]+fMaterial_Params[kTau])*dFYdScol1*scale_const*Jp;
                                fTemp_matrix_nudof_x_nudof *= scale;
                                fKu_I3p_7 += fTemp_matrix_nudof_x_nudof;

                                fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I3p_8,fShapeDisplGrad);
                                scale =-1*(Comp11)*(fMaterial_Params[kMu]+fMaterial_Params[kSigma_const])
                                *(fMaterial_Params[kMu]+fMaterial_Params[kSigma_const])*scale_const*Jp;
                                fTemp_matrix_nudof_x_nudof *= scale;
                                fKu_I3p_8 += fTemp_matrix_nudof_x_nudof;


                                fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I3p_9,fShapeDisplGrad);
                                scale =-1*(Comp11)*(fMaterial_Params[kMu]+fMaterial_Params[kSigma_const])
                                *(fMaterial_Params[kMu]+fMaterial_Params[kSigma_const])*scale_const*Jp;
                                fTemp_matrix_nudof_x_nudof *= scale;
                                fKu_I3p_9 += fTemp_matrix_nudof_x_nudof;


                                fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I3p_10,fShapeDisplGrad);
                                scale =-1*(Comp11)*(fMaterial_Params[kMu]+fMaterial_Params[kSigma_const])
                                *(fMaterial_Params[kLambda]+fMaterial_Params[kTau])*dFYdScol1*scale_const*Jp;
                                fTemp_matrix_nudof_x_nudof *= scale;
                                fKu_I3p_10 += fTemp_matrix_nudof_x_nudof;


                                fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I3p_11,fShapeDisplGrad);
                                scale =-1*(Comp11)*(fMaterial_Params[kMu]+fMaterial_Params[kSigma_const])
                                *(fMaterial_Params[kMu]+fMaterial_Params[kSigma_const])*scale_const*Jp;
                                fTemp_matrix_nudof_x_nudof *= scale;
                                fKu_I3p_11 += fTemp_matrix_nudof_x_nudof;


                                fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I3p_12,fShapeDisplGrad);
                                scale =-1*(Comp11)*(fMaterial_Params[kMu]+fMaterial_Params[kSigma_const])
                                *(fMaterial_Params[kMu]+fMaterial_Params[kSigma_const])*scale_const*Jp;
                                fTemp_matrix_nudof_x_nudof *= scale;
                                fKu_I3p_12 += fTemp_matrix_nudof_x_nudof;
                                }

                                /* micromorphic  terms elastic addition to the macro-scale */

                                fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I3e_13,fShapeDisplGrad);
                                scale =fMaterial_Params[kEta]*scale_const*Jp;
                                fTemp_matrix_nudof_x_nudof *= scale;
                                fKu_I3e_13 += fTemp_matrix_nudof_x_nudof;

                                fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I3e_14,fShapeDisplGrad);
                                scale =fMaterial_Params[kKappa]*scale_const*Jp;
                                fTemp_matrix_nudof_x_nudof *= scale;
                                fKu_I3e_14 += fTemp_matrix_nudof_x_nudof;

                                fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I3e_15,fShapeDisplGrad);
                                scale =fMaterial_Params[kNu]*scale_const*Jp;
                                fTemp_matrix_nudof_x_nudof *= scale;
                                fKu_I3e_15 += fTemp_matrix_nudof_x_nudof;

                                if(PlasticityCondition==1 || PlasticityCondition==3 || PlasticityCondition==4)// if(MacroPlasticityCondition==1)
                                {

                                /* micromorphic  terms plastic addition to the macro-scale */

                                fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I3p_16,fShapeDisplGrad);
                                scale =-1*(Comp11)*dFYdScol1*scale_const*Jp*(fMaterial_Params[kLambda]+fMaterial_Params[kTau])*trfA1
                                *fMaterial_Params[kEta];
                                fTemp_matrix_nudof_x_nudof *= scale;
                                fKu_I3p_16 += fTemp_matrix_nudof_x_nudof;

                                fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I3p_17,fShapeDisplGrad);
                                scale =-1*(Comp11)*(fMaterial_Params[kLambda]+fMaterial_Params[kTau])*trfA1
                                *fMaterial_Params[kKappa]*scale_const*Jp;
                                fTemp_matrix_nudof_x_nudof *= scale;
                                fKu_I3p_17 += fTemp_matrix_nudof_x_nudof;

                                fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I3p_18,fShapeDisplGrad);
                                scale =-1*(Comp11)*trfA1*scale_const*Jp*(fMaterial_Params[kLambda]+fMaterial_Params[kTau])
                                *fMaterial_Params[kNu];
                                fTemp_matrix_nudof_x_nudof *= scale;
                                fKu_I3p_18 += fTemp_matrix_nudof_x_nudof;

                                fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I3p_19,fShapeDisplGrad);
                                scale =-1*(Comp11)*dFYdScol1*scale_const*Jp*(fMaterial_Params[kMu]+fMaterial_Params[kSigma_const])
                                *fMaterial_Params[kEta];
                                fTemp_matrix_nudof_x_nudof *= scale;
                                fKu_I3p_19 += fTemp_matrix_nudof_x_nudof;


                                fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I3p_20,fShapeDisplGrad);
                                scale =-1*(Comp11)*(fMaterial_Params[kMu]+fMaterial_Params[kSigma_const])
                                *fMaterial_Params[kKappa]*scale_const*Jp;
                                fTemp_matrix_nudof_x_nudof *= scale;
                                fKu_I3p_20 += fTemp_matrix_nudof_x_nudof;

                                fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I3p_21,fShapeDisplGrad);
                                scale =-1*(Comp11)*scale_const*Jp*(fMaterial_Params[kMu]+fMaterial_Params[kSigma_const])*fMaterial_Params[kNu];
                                fTemp_matrix_nudof_x_nudof *= scale;
                                fKu_I3p_21 += fTemp_matrix_nudof_x_nudof;


                                fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I3p_22,fShapeDisplGrad);
                                scale =-1*(Comp11)*fMaterial_Params[kEta]*trfN1*dFYdScol1*(fMaterial_Params[kLambda]+fMaterial_Params[kTau])*scale_const*Jp;
                                fTemp_matrix_nudof_x_nudof *= scale;
                                fKu_I3p_22 += fTemp_matrix_nudof_x_nudof;

                                fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I3p_23,fShapeDisplGrad);
                                scale =-1*(Comp11)*fMaterial_Params[kEta]*trfN1*(fMaterial_Params[kMu]+fMaterial_Params[kSigma_const])*scale_const*Jp;
                                fTemp_matrix_nudof_x_nudof *= scale;
                                fKu_I3p_23 += fTemp_matrix_nudof_x_nudof;

                                fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I3p_24,fShapeDisplGrad);
                                scale =-1*(Comp11)*fMaterial_Params[kEta]*trfN1*dFYdScol1*fMaterial_Params[kEta]*scale_const*Jp;
                                fTemp_matrix_nudof_x_nudof *= scale;
                                fKu_I3p_24 += fTemp_matrix_nudof_x_nudof;


                                fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I3p_25,fShapeDisplGrad);
                                scale =-1*(Comp11)*fMaterial_Params[kEta]*trfN1*fMaterial_Params[kKappa]*scale_const*Jp;
                                fTemp_matrix_nudof_x_nudof *= scale;
                                fKu_I3p_25 += fTemp_matrix_nudof_x_nudof;

                                fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I3p_26,fShapeDisplGrad);
                                scale =-1*(Comp11)*trfN1*scale_const*Jp*fMaterial_Params[kEta]*fMaterial_Params[kNu];
                                fTemp_matrix_nudof_x_nudof *= scale;
                                fKu_I3p_26 += fTemp_matrix_nudof_x_nudof;



                                fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I3p_27,fShapeDisplGrad);
                                scale =-1*(Comp11)*fMaterial_Params[kKappa]*(fMaterial_Params[kLambda]+fMaterial_Params[kTau])
                                *dFYdScol1*scale_const*Jp;
                                fTemp_matrix_nudof_x_nudof *= scale;
                                fKu_I3p_27 += fTemp_matrix_nudof_x_nudof;

                                fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I3p_28,fShapeDisplGrad);
                                scale =-1*(Comp11)*fMaterial_Params[kKappa]*(fMaterial_Params[kMu]+fMaterial_Params[kSigma_const])
                                *scale_const*Jp;
                                fTemp_matrix_nudof_x_nudof *= scale;
                                fKu_I3p_28 += fTemp_matrix_nudof_x_nudof;

                                fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I3p_29,fShapeDisplGrad);
                                scale =-1*(Comp11)*fMaterial_Params[kKappa]*fMaterial_Params[kEta]*dFYdScol1*scale_const*Jp;
                                fTemp_matrix_nudof_x_nudof *= scale;
                                fKu_I3p_29 += fTemp_matrix_nudof_x_nudof;

                                fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I3p_30,fShapeDisplGrad);
                                scale =-1*(Comp11)*fMaterial_Params[kKappa]*fMaterial_Params[kKappa]*scale_const*Jp;
                                fTemp_matrix_nudof_x_nudof *= scale;
                                fKu_I3p_30 += fTemp_matrix_nudof_x_nudof;

                                fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I3p_31,fShapeDisplGrad);
                                scale =-1*(Comp11)*scale_const*Jp*fMaterial_Params[kKappa]*fMaterial_Params[kNu];
                                fTemp_matrix_nudof_x_nudof *= scale;
                                fKu_I3p_31 += fTemp_matrix_nudof_x_nudof;


                                fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I3p_32,fShapeDisplGrad);
                                scale =-1*(Comp11)*dFYdScol1*scale_const*Jp*fMaterial_Params[kNu]*(fMaterial_Params[kLambda]+fMaterial_Params[kTau]);
                                fTemp_matrix_nudof_x_nudof *= scale;
                                fKu_I3p_32 += fTemp_matrix_nudof_x_nudof;

                                fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I3p_33,fShapeDisplGrad);
                                scale =-1*(Comp11)*scale_const*Jp*fMaterial_Params[kNu]*(fMaterial_Params[kMu]+fMaterial_Params[kSigma_const]);
                                fTemp_matrix_nudof_x_nudof *= scale;
                                fKu_I3p_33 += fTemp_matrix_nudof_x_nudof;

                                fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I3p_34,fShapeDisplGrad);
                                scale =-1*(Comp11)*dFYdScol1*scale_const*Jp*fMaterial_Params[kNu]*fMaterial_Params[kEta];
                                fTemp_matrix_nudof_x_nudof *= scale;
                                fKu_I3p_34 += fTemp_matrix_nudof_x_nudof;

                                fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I3p_35,fShapeDisplGrad);
                                scale =-1*(Comp11)*scale_const*Jp*fMaterial_Params[kNu]*fMaterial_Params[kKappa];
                                fTemp_matrix_nudof_x_nudof *= scale;
                                fKu_I3p_35 += fTemp_matrix_nudof_x_nudof;

                                fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I3p_36,fShapeDisplGrad);
                                scale =-1*(Comp11)*scale_const*Jp*fMaterial_Params[kNu]*fMaterial_Params[kNu];
                                fTemp_matrix_nudof_x_nudof *= scale;
                                fKu_I3p_36 += fTemp_matrix_nudof_x_nudof;
                                }
                //
                                fTemp_matrix_nudof_x_nchidof.MultATBC(fShapeDisplGrad,I3e_37,NCHI);
                                scale =fMaterial_Params[kEta]*scale_const*Jp;
                                fTemp_matrix_nudof_x_nchidof *= scale;
                                fKuphi_I3e_37 += fTemp_matrix_nudof_x_nchidof;

                                fTemp_matrix_nudof_x_nchidof.MultATBC(fShapeDisplGrad,I3e_38,NCHI);
                                scale =fMaterial_Params[kKappa]*scale_const*Jp;
                                fTemp_matrix_nudof_x_nchidof *= scale;
                                fKuphi_I3e_38 += fTemp_matrix_nudof_x_nchidof;

                                fTemp_matrix_nudof_x_nchidof.MultATBC(fShapeDisplGrad,I3e_39,NCHI);
                                scale =fMaterial_Params[kNu]*scale_const*Jp;
                                fTemp_matrix_nudof_x_nchidof *= scale;
                                fKuphi_I3e_39 += fTemp_matrix_nudof_x_nchidof;

                                if(PlasticityCondition==1 || PlasticityCondition==3 || PlasticityCondition==4)//if(MacroPlasticityCondition==1)
                                {

                                fTemp_matrix_nudof_x_nchidof.MultATBC(fShapeDisplGrad,I3p_40,NCHI);
                                scale =-1*(Comp11)*dFYdScol1*trfA1*(fMaterial_Params[kLambda]+fMaterial_Params[kTau])*fMaterial_Params[kEta]*scale_const*Jp;
                                fTemp_matrix_nudof_x_nchidof *= scale;
                                fKuphi_I3p_40 += fTemp_matrix_nudof_x_nchidof;

                                fTemp_matrix_nudof_x_nchidof.MultATBC(fShapeDisplGrad,I3p_41,NCHI);
                                scale =-1*(Comp11)*(fMaterial_Params[kLambda]+fMaterial_Params[kTau])*trfA1*fMaterial_Params[kKappa]*scale_const*Jp;
                                fTemp_matrix_nudof_x_nchidof *= scale;
                                fKuphi_I3p_41 += fTemp_matrix_nudof_x_nchidof;

                                fTemp_matrix_nudof_x_nchidof.MultATBC(fShapeDisplGrad,I3p_42,NCHI);
                                scale =-1*(Comp11)*trfA1*scale_const*Jp*(fMaterial_Params[kLambda]+fMaterial_Params[kTau])*fMaterial_Params[kNu];
                                fTemp_matrix_nudof_x_nchidof *= scale;
                                fKuphi_I3p_42 += fTemp_matrix_nudof_x_nchidof;

                                fTemp_matrix_nudof_x_nchidof.MultATBC(fShapeDisplGrad,I3p_43,NCHI);
                                scale =-1*(Comp11)*dFYdScol1*(fMaterial_Params[kMu]+fMaterial_Params[kSigma_const])*fMaterial_Params[kEta]*scale_const*Jp;
                                fTemp_matrix_nudof_x_nchidof *= scale;
                                fKuphi_I3p_43 += fTemp_matrix_nudof_x_nchidof;

                                fTemp_matrix_nudof_x_nchidof.MultATBC(fShapeDisplGrad,I3p_44,NCHI);
                                scale =-1*(Comp11)*(fMaterial_Params[kMu]+fMaterial_Params[kSigma_const])*fMaterial_Params[kKappa]*scale_const*Jp;
                                fTemp_matrix_nudof_x_nchidof *= scale;
                                fKuphi_I3p_44 += fTemp_matrix_nudof_x_nchidof;

                                fTemp_matrix_nudof_x_nchidof.MultATBC(fShapeDisplGrad,I3p_45,NCHI);
                                scale =-1*(Comp11)*scale_const*Jp*(fMaterial_Params[kMu]+fMaterial_Params[kSigma_const])*fMaterial_Params[kNu];
                                fTemp_matrix_nudof_x_nchidof *= scale;
                                fKuphi_I3p_45 += fTemp_matrix_nudof_x_nchidof;

                                fTemp_matrix_nudof_x_nchidof.MultATBC(fShapeDisplGrad,I3p_46,NCHI);
                                scale =-1*(Comp11)*dFYdScol1*trfN1*fMaterial_Params[kEta]*fMaterial_Params[kEta]*scale_const*Jp;
                                fTemp_matrix_nudof_x_nchidof *= scale;
                                fKuphi_I3p_46 += fTemp_matrix_nudof_x_nchidof;


                                fTemp_matrix_nudof_x_nchidof.MultATBC(fShapeDisplGrad,I3p_47,NCHI);
                                scale =-1*(Comp11)*trfN1*fMaterial_Params[kEta]*fMaterial_Params[kKappa]*scale_const*Jp;
                                fTemp_matrix_nudof_x_nchidof *= scale;
                                fKuphi_I3p_47 += fTemp_matrix_nudof_x_nchidof;

                                fTemp_matrix_nudof_x_nchidof.MultATBC(fShapeDisplGrad,I3p_48,NCHI);
                                scale =-1*(Comp11)*trfN1*scale_const*Jp*fMaterial_Params[kEta]*fMaterial_Params[kNu];
                                fTemp_matrix_nudof_x_nchidof *= scale;
                                fKuphi_I3p_48 += fTemp_matrix_nudof_x_nchidof;



                                fTemp_matrix_nudof_x_nchidof.MultATBC(fShapeDisplGrad,I3p_49,NCHI);
                                scale =-1*(Comp11)*fMaterial_Params[kKappa]*fMaterial_Params[kEta]*dFYdScol1*scale_const*Jp;
                                fTemp_matrix_nudof_x_nchidof *= scale;
                                fKuphi_I3p_49 += fTemp_matrix_nudof_x_nchidof;


                                fTemp_matrix_nudof_x_nchidof.MultATBC(fShapeDisplGrad,I3p_50,NCHI);
                                scale =-1*(Comp11)*fMaterial_Params[kKappa]*fMaterial_Params[kKappa]*scale_const*Jp;
                                fTemp_matrix_nudof_x_nchidof *= scale;
                                fKuphi_I3p_50 += fTemp_matrix_nudof_x_nchidof;

                                fTemp_matrix_nudof_x_nchidof.MultATBC(fShapeDisplGrad,I3p_51,NCHI);
                                scale =-1*(Comp11)*scale_const*Jp*fMaterial_Params[kKappa]*fMaterial_Params[kNu];
                                fTemp_matrix_nudof_x_nchidof *= scale;
                                fKuphi_I3p_51 += fTemp_matrix_nudof_x_nchidof;

                                fTemp_matrix_nudof_x_nchidof.MultATBC(fShapeDisplGrad,I3p_52,NCHI);
                                scale =-1*(Comp11)*dFYdScol1*scale_const*Jp*fMaterial_Params[kNu]*fMaterial_Params[kEta];
                                fTemp_matrix_nudof_x_nchidof *= scale;
                                fKuphi_I3p_52 += fTemp_matrix_nudof_x_nchidof;

                                fTemp_matrix_nudof_x_nchidof.MultATBC(fShapeDisplGrad,I3p_53,NCHI);
                                scale =-1*(Comp11)*scale_const*Jp*fMaterial_Params[kNu]*fMaterial_Params[kKappa];
                                fTemp_matrix_nudof_x_nchidof *= scale;
                                fKuphi_I3p_53 += fTemp_matrix_nudof_x_nchidof;

                                fTemp_matrix_nudof_x_nchidof.MultATBC(fShapeDisplGrad,I3p_54,NCHI);
                                scale =-1*(Comp11)*scale_const*Jp*fMaterial_Params[kNu]*fMaterial_Params[kNu];
                                fTemp_matrix_nudof_x_nchidof *= scale;
                                fKuphi_I3p_54 += fTemp_matrix_nudof_x_nchidof;

                                }


                                if(PlasticityCondition==2 || PlasticityCondition==3 || PlasticityCondition==4)//if(MicroPlasticityCondition==1)
                                {

                                fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I3p_55,fShapeDisplGrad);
                                scale =-1*(Comp22)*scale_const*Jp*fMaterial_Params[kEta]*trfD1
                                *fMaterial_Params[kTau]*dFYchidSIGMA_Scol1;
                                fTemp_matrix_nudof_x_nudof *= scale;
                                fKu_I3p_55 += fTemp_matrix_nudof_x_nudof;

                                fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I3p_56,fShapeDisplGrad);
                                scale =-1*(Comp22)*scale_const*Jp*fMaterial_Params[kEta]*trfD1
                                *fMaterial_Params[kSigma_const];
                                fTemp_matrix_nudof_x_nudof*= scale;
                                fKu_I3p_56 += fTemp_matrix_nudof_x_nudof;

                                fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I3p_57,fShapeDisplGrad);
                                scale =-1*(Comp22)*scale_const*Jp*fMaterial_Params[kEta]*trfD1
                                *(fMaterial_Params[kEta]-fMaterial_Params[kTau])*dFYchidSIGMA_Scol1;
                                fTemp_matrix_nudof_x_nudof*= scale;
                                fKu_I3p_57 += fTemp_matrix_nudof_x_nudof;


                                fTemp_matrix_nudof_x_nchidof.MultATBC(fShapeDisplGrad,I3p_58,NCHI);
                                scale =-1*(Comp22)*scale_const*Jp*fMaterial_Params[kEta]*trfD1
                                *(fMaterial_Params[kEta]-fMaterial_Params[kTau])*dFYchidSIGMA_Scol1;
                                fTemp_matrix_nudof_x_nchidof *= scale;
                                fKuphi_I3p_58 += fTemp_matrix_nudof_x_nchidof;

                                fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I3p_59,fShapeDisplGrad);
                                scale =-1*(Comp22)*scale_const*Jp*fMaterial_Params[kEta]*trfD1
                                *(fMaterial_Params[kNu]-fMaterial_Params[kSigma_const]);
                                fTemp_matrix_nudof_x_nudof*= scale;
                                fKu_I3p_59 += fTemp_matrix_nudof_x_nudof;

                                fTemp_matrix_nudof_x_nchidof.MultATBC(fShapeDisplGrad,I3p_60,NCHI);
                                scale =-1*(Comp22)*scale_const*Jp*fMaterial_Params[kEta]*trfD1
                                *(fMaterial_Params[kNu]-fMaterial_Params[kSigma_const]);
                                fTemp_matrix_nudof_x_nchidof *= scale;
                                fKuphi_I3p_60 += fTemp_matrix_nudof_x_nchidof;

                                fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I3p_61,fShapeDisplGrad);
                                scale =-1*(Comp22)*scale_const*Jp*fMaterial_Params[kEta]*trfD1
                                *(fMaterial_Params[kKappa]-fMaterial_Params[kSigma_const]);
                                fTemp_matrix_nudof_x_nudof*= scale;
                                fKu_I3p_61 += fTemp_matrix_nudof_x_nudof;

                                fTemp_matrix_nudof_x_nchidof.MultATBC(fShapeDisplGrad,I3p_62,NCHI);
                                scale =-1*(Comp22)*scale_const*Jp*fMaterial_Params[kEta]*trfD1
                                *(fMaterial_Params[kKappa]-fMaterial_Params[kSigma_const]);
                                fTemp_matrix_nudof_x_nchidof *= scale;
                                fKuphi_I3p_62 += fTemp_matrix_nudof_x_nchidof;



                                fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I3p_63,fShapeDisplGrad);
                                scale =-1*(Comp22)*scale_const*Jp*fMaterial_Params[kKappa]
                                *fMaterial_Params[kTau]*dFYchidSIGMA_Scol1;
                                fTemp_matrix_nudof_x_nudof *= scale;
                                fKu_I3p_63 += fTemp_matrix_nudof_x_nudof;

                                fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I3p_64,fShapeDisplGrad);
                                scale =-1*(Comp22)*scale_const*Jp*fMaterial_Params[kKappa]
                                *fMaterial_Params[kSigma_const];
                                fTemp_matrix_nudof_x_nudof*= scale;
                                fKu_I3p_64 += fTemp_matrix_nudof_x_nudof;

                                fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I3p_65,fShapeDisplGrad);
                                scale =-1*(Comp22)*scale_const*Jp*fMaterial_Params[kKappa]
                                *(fMaterial_Params[kEta]-fMaterial_Params[kTau])*dFYchidSIGMA_Scol1;
                                fTemp_matrix_nudof_x_nudof*= scale;
                                fKu_I3p_65 += fTemp_matrix_nudof_x_nudof;


                                fTemp_matrix_nudof_x_nchidof.MultATBC(fShapeDisplGrad,I3p_66,NCHI);
                                scale =-1*(Comp22)*scale_const*Jp*fMaterial_Params[kKappa]
                                *(fMaterial_Params[kEta]-fMaterial_Params[kTau])*dFYchidSIGMA_Scol1;
                                fTemp_matrix_nudof_x_nchidof *= scale;
                                fKuphi_I3p_66 += fTemp_matrix_nudof_x_nchidof;

                                fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I3p_67,fShapeDisplGrad);
                                scale =-1*(Comp22)*scale_const*Jp*fMaterial_Params[kKappa]
                                *(fMaterial_Params[kNu]-fMaterial_Params[kSigma_const]);
                                fTemp_matrix_nudof_x_nudof*= scale;
                                fKu_I3p_67 += fTemp_matrix_nudof_x_nudof;

                                fTemp_matrix_nudof_x_nchidof.MultATBC(fShapeDisplGrad,I3p_68,NCHI);
                                scale =-1*(Comp22)*scale_const*Jp*fMaterial_Params[kKappa]
                                *(fMaterial_Params[kNu]-fMaterial_Params[kSigma_const]);
                                fTemp_matrix_nudof_x_nchidof *= scale;
                                fKuphi_I3p_68 += fTemp_matrix_nudof_x_nchidof;

                                fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I3p_69,fShapeDisplGrad);
                                scale =-1*(Comp22)*scale_const*Jp*fMaterial_Params[kKappa]
                                *(fMaterial_Params[kKappa]-fMaterial_Params[kSigma_const]);
                                fTemp_matrix_nudof_x_nudof*= scale;
                                fKu_I3p_69 += fTemp_matrix_nudof_x_nudof;

                                fTemp_matrix_nudof_x_nchidof.MultATBC(fShapeDisplGrad,I3p_70,NCHI);
                                scale =-1*(Comp22)*scale_const*Jp*fMaterial_Params[kKappa]
                                *(fMaterial_Params[kKappa]-fMaterial_Params[kSigma_const]);
                                fTemp_matrix_nudof_x_nchidof *= scale;
                                fKuphi_I3p_70 += fTemp_matrix_nudof_x_nchidof;



                                fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I3p_71,fShapeDisplGrad);
                                scale =-1*(Comp22)*scale_const*Jp*fMaterial_Params[kNu]
                                *fMaterial_Params[kTau]*dFYchidSIGMA_Scol1;
                                fTemp_matrix_nudof_x_nudof *= scale;
                                fKu_I3p_71 += fTemp_matrix_nudof_x_nudof;

                                fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I3p_72,fShapeDisplGrad);
                                scale =-1*(Comp22)*scale_const*Jp*fMaterial_Params[kNu]
                                *fMaterial_Params[kSigma_const];
                                fTemp_matrix_nudof_x_nudof*= scale;
                                fKu_I3p_72 += fTemp_matrix_nudof_x_nudof;

                                fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I3p_73,fShapeDisplGrad);
                                scale =-1*(Comp22)*scale_const*Jp*fMaterial_Params[kNu]
                                *(fMaterial_Params[kEta]-fMaterial_Params[kTau])*dFYchidSIGMA_Scol1;
                                fTemp_matrix_nudof_x_nudof*= scale;
                                fKu_I3p_73 += fTemp_matrix_nudof_x_nudof;


                                fTemp_matrix_nudof_x_nchidof.MultATBC(fShapeDisplGrad,I3p_74,NCHI);
                                scale =-1*(Comp22)*scale_const*Jp*fMaterial_Params[kNu]
                                *(fMaterial_Params[kEta]-fMaterial_Params[kTau])*dFYchidSIGMA_Scol1;
                                fTemp_matrix_nudof_x_nchidof *= scale;
                                fKuphi_I3p_74 += fTemp_matrix_nudof_x_nchidof;

                                fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I3p_75,fShapeDisplGrad);
                                scale =-1*(Comp22)*scale_const*Jp*fMaterial_Params[kNu]
                                *(fMaterial_Params[kNu]-fMaterial_Params[kSigma_const]);
                                fTemp_matrix_nudof_x_nudof*= scale;
                                fKu_I3p_75 += fTemp_matrix_nudof_x_nudof;

                                fTemp_matrix_nudof_x_nchidof.MultATBC(fShapeDisplGrad,I3p_76,NCHI);
                                scale =-1*(Comp22)*scale_const*Jp*fMaterial_Params[kNu]
                                *(fMaterial_Params[kNu]-fMaterial_Params[kSigma_const]);
                                fTemp_matrix_nudof_x_nchidof *= scale;
                                fKuphi_I3p_76 += fTemp_matrix_nudof_x_nchidof;

                                fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I3p_77,fShapeDisplGrad);
                                scale =-1*(Comp22)*scale_const*Jp*fMaterial_Params[kNu]
                                *(fMaterial_Params[kKappa]-fMaterial_Params[kSigma_const]);
                                fTemp_matrix_nudof_x_nudof*= scale;
                                fKu_I3p_77 += fTemp_matrix_nudof_x_nudof;

                                fTemp_matrix_nudof_x_nchidof.MultATBC(fShapeDisplGrad,I3p_78,NCHI);
                                scale =-1*(Comp22)*scale_const*Jp*fMaterial_Params[kNu]
                                *(fMaterial_Params[kKappa]-fMaterial_Params[kSigma_const]);
                                fTemp_matrix_nudof_x_nchidof *= scale;
                                fKuphi_I3p_78 += fTemp_matrix_nudof_x_nchidof;

                                }

                                if(PlasticityCondition==3 || PlasticityCondition==4)
                                {


                                fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I3p_79,fShapeDisplGrad);
                                scale =-1*(fMaterial_Params[kLambda]+fMaterial_Params[kTau])*trfA1
                                *Comp12*scale_const*Jp*fMaterial_Params[kTau]*dFYchidSIGMA_Scol1;
                                fTemp_matrix_nudof_x_nudof *= scale;
                                fKu_I3p_79 += fTemp_matrix_nudof_x_nudof;

                                fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I3p_80,fShapeDisplGrad);
                                scale =-1*(fMaterial_Params[kLambda]+fMaterial_Params[kTau])*trfA1
                                *Comp12*scale_const*Jp*fMaterial_Params[kSigma_const];
                                fTemp_matrix_nudof_x_nudof *= scale;
                                fKu_I3p_80 += fTemp_matrix_nudof_x_nudof;

                                fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I3p_81,fShapeDisplGrad);
                                scale =-1*(fMaterial_Params[kLambda]+fMaterial_Params[kTau])*trfA1
                                *Comp12*scale_const*Jp*(fMaterial_Params[kEta]-fMaterial_Params[kTau])*dFYchidSIGMA_Scol1;
                                fTemp_matrix_nudof_x_nudof *= scale;
                                fKu_I3p_81 += fTemp_matrix_nudof_x_nudof;


                                fTemp_matrix_nudof_x_nchidof.MultATBC(fShapeDisplGrad,I3p_82,NCHI);
                                scale =-1*(fMaterial_Params[kLambda]+fMaterial_Params[kTau])*trfA1
                                *Comp12*scale_const*Jp*(fMaterial_Params[kEta]-fMaterial_Params[kTau])*dFYchidSIGMA_Scol1;
                                fTemp_matrix_nudof_x_nchidof *= scale;
                                fKuphi_I3p_82 += fTemp_matrix_nudof_x_nchidof;


                                fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I3p_83,fShapeDisplGrad);
                                scale =-1*(fMaterial_Params[kLambda]+fMaterial_Params[kTau])*trfA1
                                *Comp12*scale_const*Jp*(fMaterial_Params[kNu]-fMaterial_Params[kSigma_const]);
                                fTemp_matrix_nudof_x_nudof *= scale;
                                fKu_I3p_83 += fTemp_matrix_nudof_x_nudof;


                                fTemp_matrix_nudof_x_nchidof.MultATBC(fShapeDisplGrad,I3p_84,NCHI);
                                scale =-1*(fMaterial_Params[kLambda]+fMaterial_Params[kTau])*trfA1
                                *Comp12*scale_const*Jp*(fMaterial_Params[kNu]-fMaterial_Params[kSigma_const]);
                                fTemp_matrix_nudof_x_nchidof *= scale;
                                fKuphi_I3p_84 += fTemp_matrix_nudof_x_nchidof;


                                fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I3p_85,fShapeDisplGrad);
                                scale =-1*(fMaterial_Params[kLambda]+fMaterial_Params[kTau])*trfA1
                                *Comp12*scale_const*Jp*(fMaterial_Params[kKappa]-fMaterial_Params[kSigma_const]);
                                fTemp_matrix_nudof_x_nudof *= scale;
                                fKu_I3p_85 += fTemp_matrix_nudof_x_nudof;

                                fTemp_matrix_nudof_x_nchidof.MultATBC(fShapeDisplGrad,I3p_86,NCHI);
                                scale =-1*(fMaterial_Params[kLambda]+fMaterial_Params[kTau])*trfA1
                                *Comp12*scale_const*Jp*(fMaterial_Params[kKappa]-fMaterial_Params[kSigma_const]);
                                fTemp_matrix_nudof_x_nchidof *= scale;
                                fKuphi_I3p_86 += fTemp_matrix_nudof_x_nchidof;


                                //
                                fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I3p_87,fShapeDisplGrad);
                                scale =-1*(fMaterial_Params[kMu]+fMaterial_Params[kSigma_const])
                                *Comp12*scale_const*Jp*fMaterial_Params[kTau]*dFYchidSIGMA_Scol1;
                                fTemp_matrix_nudof_x_nudof *= scale;
                                fKu_I3p_87 += fTemp_matrix_nudof_x_nudof;

                                fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I3p_88,fShapeDisplGrad);
                                scale =-1*(fMaterial_Params[kMu]+fMaterial_Params[kSigma_const])
                                *Comp12*scale_const*Jp*fMaterial_Params[kSigma_const];
                                fTemp_matrix_nudof_x_nudof *= scale;
                                fKu_I3p_88 += fTemp_matrix_nudof_x_nudof;

                                fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I3p_89,fShapeDisplGrad);
                                scale =-1*(fMaterial_Params[kMu]+fMaterial_Params[kSigma_const])
                                *Comp12*scale_const*Jp*(fMaterial_Params[kEta]-fMaterial_Params[kTau])*dFYchidSIGMA_Scol1;
                                fTemp_matrix_nudof_x_nudof *= scale;
                                fKu_I3p_89 += fTemp_matrix_nudof_x_nudof;


                                fTemp_matrix_nudof_x_nchidof.MultATBC(fShapeDisplGrad,I3p_90,NCHI);
                                scale =-1*(fMaterial_Params[kMu]+fMaterial_Params[kSigma_const])
                                *Comp12*scale_const*Jp*(fMaterial_Params[kEta]-fMaterial_Params[kTau])*dFYchidSIGMA_Scol1;
                                fTemp_matrix_nudof_x_nchidof *= scale;
                                fKuphi_I3p_90 += fTemp_matrix_nudof_x_nchidof;


                                fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I3p_91,fShapeDisplGrad);
                                scale =-1*(fMaterial_Params[kMu]+fMaterial_Params[kSigma_const])
                                *Comp12*scale_const*Jp*(fMaterial_Params[kNu]-fMaterial_Params[kSigma_const]);
                                fTemp_matrix_nudof_x_nudof *= scale;
                                fKu_I3p_91 += fTemp_matrix_nudof_x_nudof;


                                fTemp_matrix_nudof_x_nchidof.MultATBC(fShapeDisplGrad,I3p_92,NCHI);
                                scale =-1*(fMaterial_Params[kMu]+fMaterial_Params[kSigma_const])
                                *Comp12*scale_const*Jp*(fMaterial_Params[kNu]-fMaterial_Params[kSigma_const]);
                                fTemp_matrix_nudof_x_nchidof *= scale;
                                fKuphi_I3p_92 += fTemp_matrix_nudof_x_nchidof;



                                fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I3p_93,fShapeDisplGrad);
                                scale =-1*(fMaterial_Params[kMu]+fMaterial_Params[kSigma_const])
                                *Comp12*scale_const*Jp*(fMaterial_Params[kKappa]-fMaterial_Params[kSigma_const]);
                                fTemp_matrix_nudof_x_nudof *= scale;
                                fKu_I3p_93 += fTemp_matrix_nudof_x_nudof;

                                fTemp_matrix_nudof_x_nchidof.MultATBC(fShapeDisplGrad,I3p_94,NCHI);
                                scale =-1*(fMaterial_Params[kMu]+fMaterial_Params[kSigma_const])
                                *Comp12*scale_const*Jp*(fMaterial_Params[kKappa]-fMaterial_Params[kSigma_const]);
                                fTemp_matrix_nudof_x_nchidof *= scale;
                                fKuphi_I3p_94 += fTemp_matrix_nudof_x_nchidof;



                        //
                                fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I3p_95,fShapeDisplGrad);
                                scale =-1*fMaterial_Params[kEta]*trfN1
                                *Comp12*scale_const*Jp*fMaterial_Params[kTau]*dFYchidSIGMA_Scol1;
                                fTemp_matrix_nudof_x_nudof *= scale;
                                fKu_I3p_95 += fTemp_matrix_nudof_x_nudof;

                                fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I3p_96,fShapeDisplGrad);
                                scale =-1*fMaterial_Params[kEta]*trfN1
                                *Comp12*scale_const*Jp*fMaterial_Params[kSigma_const];
                                fTemp_matrix_nudof_x_nudof *= scale;
                                fKu_I3p_96 += fTemp_matrix_nudof_x_nudof;

                                fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I3p_97,fShapeDisplGrad);
                                scale =-1*fMaterial_Params[kEta]*trfN1
                                *Comp12*scale_const*Jp*(fMaterial_Params[kEta]-fMaterial_Params[kTau])*dFYchidSIGMA_Scol1;
                                fTemp_matrix_nudof_x_nudof *= scale;
                                fKu_I3p_97 += fTemp_matrix_nudof_x_nudof;


                                fTemp_matrix_nudof_x_nchidof.MultATBC(fShapeDisplGrad,I3p_98,NCHI);
                                scale =-1*fMaterial_Params[kEta]*trfN1
                                *Comp12*scale_const*Jp*(fMaterial_Params[kEta]-fMaterial_Params[kTau])*dFYchidSIGMA_Scol1;
                                fTemp_matrix_nudof_x_nchidof *= scale;
                                fKuphi_I3p_98 += fTemp_matrix_nudof_x_nchidof;


                                fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I3p_99,fShapeDisplGrad);
                                scale =-1*fMaterial_Params[kEta]*trfN1
                                *Comp12*scale_const*Jp*(fMaterial_Params[kNu]-fMaterial_Params[kSigma_const]);
                                fTemp_matrix_nudof_x_nudof *= scale;
                                fKu_I3p_99 += fTemp_matrix_nudof_x_nudof;


                                fTemp_matrix_nudof_x_nchidof.MultATBC(fShapeDisplGrad,I3p_100,NCHI);
                                scale =-1*fMaterial_Params[kEta]*trfN1
                                *Comp12*scale_const*Jp*(fMaterial_Params[kNu]-fMaterial_Params[kSigma_const]);
                                fTemp_matrix_nudof_x_nchidof *= scale;
                                fKuphi_I3p_100 += fTemp_matrix_nudof_x_nchidof;


                                fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I3p_101,fShapeDisplGrad);
                                scale =-1*fMaterial_Params[kEta]*trfN1
                                *Comp12*scale_const*Jp*(fMaterial_Params[kKappa]-fMaterial_Params[kSigma_const]);
                                fTemp_matrix_nudof_x_nudof *= scale;
                                fKu_I3p_101 += fTemp_matrix_nudof_x_nudof;

                                fTemp_matrix_nudof_x_nchidof.MultATBC(fShapeDisplGrad,I3p_102,NCHI);
                                scale =-1*fMaterial_Params[kEta]*trfN1
                                *Comp12*scale_const*Jp*(fMaterial_Params[kKappa]-fMaterial_Params[kSigma_const]);
                                fTemp_matrix_nudof_x_nchidof *= scale;
                                fKuphi_I3p_102 += fTemp_matrix_nudof_x_nchidof;

                //
                                fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I3p_103,fShapeDisplGrad);
                                scale =-1*Comp21*fMaterial_Params[kEta]*trfD1
                                *(fMaterial_Params[kLambda]+fMaterial_Params[kTau])*dFYdScol1*scale_const*Jp;
                                fTemp_matrix_nudof_x_nudof *= scale;
                                fKu_I3p_103 += fTemp_matrix_nudof_x_nudof;

                                fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I3p_104,fShapeDisplGrad);
                                scale =-1*Comp21*fMaterial_Params[kEta]*trfD1
                                *(fMaterial_Params[kMu]+fMaterial_Params[kSigma_const])*scale_const*Jp;
                                fTemp_matrix_nudof_x_nudof *= scale;
                                fKu_I3p_104 += fTemp_matrix_nudof_x_nudof;


                                fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I3p_105,fShapeDisplGrad);
                                scale =-1*Comp21*fMaterial_Params[kEta]*trfD1
                                *fMaterial_Params[kEta]*dFYdScol1*scale_const*Jp;
                                fTemp_matrix_nudof_x_nudof *= scale;
                                fKu_I3p_105 += fTemp_matrix_nudof_x_nudof;

                                fTemp_matrix_nudof_x_nchidof.MultATBC(fShapeDisplGrad,I3p_106,NCHI);
                                scale =-1*Comp21*fMaterial_Params[kEta]*trfD1
                                *fMaterial_Params[kEta]*dFYdScol1*scale_const*Jp;
                                fTemp_matrix_nudof_x_nchidof *= scale;
                                fKuphi_I3p_106 += fTemp_matrix_nudof_x_nchidof;

                                fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I3p_107,fShapeDisplGrad);
                                scale =-1*Comp21*fMaterial_Params[kEta]*trfD1
                                *fMaterial_Params[kKappa]*scale_const*Jp;
                                fTemp_matrix_nudof_x_nudof *= scale;
                                fKu_I3p_107 += fTemp_matrix_nudof_x_nudof;


                                fTemp_matrix_nudof_x_nchidof.MultATBC(fShapeDisplGrad,I3p_108,NCHI);
                                scale =-1*Comp21*fMaterial_Params[kEta]*trfD1
                                *fMaterial_Params[kKappa]*scale_const*Jp;
                                fTemp_matrix_nudof_x_nchidof *= scale;
                                fKuphi_I3p_108 += fTemp_matrix_nudof_x_nchidof;


                                fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I3p_109,fShapeDisplGrad);
                                scale =-1*Comp21*fMaterial_Params[kEta]*trfD1
                                *fMaterial_Params[kNu]*scale_const*Jp;
                                fTemp_matrix_nudof_x_nudof *= scale;
                                fKu_I3p_109 += fTemp_matrix_nudof_x_nudof;


                                fTemp_matrix_nudof_x_nchidof.MultATBC(fShapeDisplGrad,I3p_110,NCHI);
                                scale =-1*Comp21*fMaterial_Params[kEta]*trfD1
                                *fMaterial_Params[kNu]*scale_const*Jp;
                                fTemp_matrix_nudof_x_nchidof*= scale;
                                fKuphi_I3p_110 += fTemp_matrix_nudof_x_nchidof;


                //
                                fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I3p_111,fShapeDisplGrad);
                                scale =-1*fMaterial_Params[kKappa]
                                *Comp12*scale_const*Jp*fMaterial_Params[kTau]*dFYchidSIGMA_Scol1;
                                fTemp_matrix_nudof_x_nudof *= scale;
                                fKu_I3p_111 += fTemp_matrix_nudof_x_nudof;

                                fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I3p_112,fShapeDisplGrad);
                                scale =-1*fMaterial_Params[kKappa]
                                *Comp12*scale_const*Jp*fMaterial_Params[kSigma_const];
                                fTemp_matrix_nudof_x_nudof *= scale;
                                fKu_I3p_112 += fTemp_matrix_nudof_x_nudof;

                                fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I3p_113,fShapeDisplGrad);
                                scale =-1*fMaterial_Params[kKappa]
                                *Comp12*scale_const*Jp*(fMaterial_Params[kEta]-fMaterial_Params[kTau])*dFYchidSIGMA_Scol1;
                                fTemp_matrix_nudof_x_nudof *= scale;
                                fKu_I3p_113 += fTemp_matrix_nudof_x_nudof;


                                fTemp_matrix_nudof_x_nchidof.MultATBC(fShapeDisplGrad,I3p_114,NCHI);
                                scale =-1*fMaterial_Params[kKappa]
                                *Comp12*scale_const*Jp*(fMaterial_Params[kEta]-fMaterial_Params[kTau])*dFYchidSIGMA_Scol1;
                                fTemp_matrix_nudof_x_nchidof *= scale;
                                fKuphi_I3p_114 += fTemp_matrix_nudof_x_nchidof;


                                fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I3p_115,fShapeDisplGrad);
                                scale =-1*fMaterial_Params[kKappa]
                                *Comp12*scale_const*Jp*(fMaterial_Params[kNu]-fMaterial_Params[kSigma_const]);
                                fTemp_matrix_nudof_x_nudof *= scale;
                                fKu_I3p_115 += fTemp_matrix_nudof_x_nudof;


                                fTemp_matrix_nudof_x_nchidof.MultATBC(fShapeDisplGrad,I3p_116,NCHI);
                                scale =-1*fMaterial_Params[kKappa]
                                *Comp12*scale_const*Jp*(fMaterial_Params[kNu]-fMaterial_Params[kSigma_const]);
                                fTemp_matrix_nudof_x_nchidof *= scale;
                                fKuphi_I3p_116 += fTemp_matrix_nudof_x_nchidof;



                                fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I3p_117,fShapeDisplGrad);
                                scale =-1*fMaterial_Params[kKappa]
                                *Comp12*scale_const*Jp*(fMaterial_Params[kKappa]-fMaterial_Params[kSigma_const]);
                                fTemp_matrix_nudof_x_nudof *= scale;
                                fKu_I3p_117 += fTemp_matrix_nudof_x_nudof;

                                fTemp_matrix_nudof_x_nchidof.MultATBC(fShapeDisplGrad,I3p_118,NCHI);
                                scale =-1*fMaterial_Params[kKappa]
                                *Comp12*scale_const*Jp*(fMaterial_Params[kKappa]-fMaterial_Params[kSigma_const]);
                                fTemp_matrix_nudof_x_nchidof *= scale;
                                fKuphi_I3p_118 += fTemp_matrix_nudof_x_nchidof;

                //
                                fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I3p_119,fShapeDisplGrad);
                                scale =-1*fMaterial_Params[kNu]
                                *Comp12*scale_const*Jp*fMaterial_Params[kTau]*dFYchidSIGMA_Scol1;
                                fTemp_matrix_nudof_x_nudof *= scale;
                                fKu_I3p_119 += fTemp_matrix_nudof_x_nudof;

                                fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I3p_120,fShapeDisplGrad);
                                scale =-1*fMaterial_Params[kNu]
                                *Comp12*scale_const*Jp*fMaterial_Params[kSigma_const];
                                fTemp_matrix_nudof_x_nudof *= scale;
                                fKu_I3p_120 += fTemp_matrix_nudof_x_nudof;

                                fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I3p_121,fShapeDisplGrad);
                                scale =-1*fMaterial_Params[kNu]
                                *Comp12*scale_const*Jp*(fMaterial_Params[kEta]-fMaterial_Params[kTau])*dFYchidSIGMA_Scol1;
                                fTemp_matrix_nudof_x_nudof *= scale;
                                fKu_I3p_121 += fTemp_matrix_nudof_x_nudof;


                                fTemp_matrix_nudof_x_nchidof.MultATBC(fShapeDisplGrad,I3p_122,NCHI);
                                scale =-1*fMaterial_Params[kNu]
                                *Comp12*scale_const*Jp*(fMaterial_Params[kEta]-fMaterial_Params[kTau])*dFYchidSIGMA_Scol1;
                                fTemp_matrix_nudof_x_nchidof *= scale;
                                fKuphi_I3p_122 += fTemp_matrix_nudof_x_nchidof;


                                fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I3p_123,fShapeDisplGrad);
                                scale =-1*fMaterial_Params[kNu]
                                *Comp12*scale_const*Jp*(fMaterial_Params[kNu]-fMaterial_Params[kSigma_const]);
                                fTemp_matrix_nudof_x_nudof *= scale;
                                fKu_I3p_123 += fTemp_matrix_nudof_x_nudof;


                                fTemp_matrix_nudof_x_nchidof.MultATBC(fShapeDisplGrad,I3p_124,NCHI);
                                scale =-1*fMaterial_Params[kNu]
                                *Comp12*scale_const*Jp*(fMaterial_Params[kNu]-fMaterial_Params[kSigma_const]);
                                fTemp_matrix_nudof_x_nchidof *= scale;
                                fKuphi_I3p_124 += fTemp_matrix_nudof_x_nchidof;



                                fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I3p_125,fShapeDisplGrad);
                                scale =-1*fMaterial_Params[kNu]
                                *Comp12*scale_const*Jp*(fMaterial_Params[kKappa]-fMaterial_Params[kSigma_const]);
                                fTemp_matrix_nudof_x_nudof *= scale;
                                fKu_I3p_125 += fTemp_matrix_nudof_x_nudof;

                                fTemp_matrix_nudof_x_nchidof.MultATBC(fShapeDisplGrad,I3p_126,NCHI);
                                scale =-1*fMaterial_Params[kNu]
                                *Comp12*scale_const*Jp*(fMaterial_Params[kKappa]-fMaterial_Params[kSigma_const]);
                                fTemp_matrix_nudof_x_nchidof *= scale;
                                fKuphi_I3p_126 += fTemp_matrix_nudof_x_nchidof;

                //
                                fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I3p_127,fShapeDisplGrad);
                                scale =-1*Comp21*fMaterial_Params[kKappa]
                                *(fMaterial_Params[kLambda]+fMaterial_Params[kTau])*dFYdScol1*scale_const*Jp;
                                fTemp_matrix_nudof_x_nudof *= scale;
                                fKu_I3p_127 += fTemp_matrix_nudof_x_nudof;

                                fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I3p_128,fShapeDisplGrad);
                                scale =-1*Comp21*fMaterial_Params[kKappa]
                                *(fMaterial_Params[kMu]+fMaterial_Params[kSigma_const])*scale_const*Jp;
                                fTemp_matrix_nudof_x_nudof *= scale;
                                fKu_I3p_128 += fTemp_matrix_nudof_x_nudof;


                                fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I3p_129,fShapeDisplGrad);
                                scale =-1*Comp21*fMaterial_Params[kKappa]
                                *fMaterial_Params[kEta]*dFYdScol1*scale_const*Jp;
                                fTemp_matrix_nudof_x_nudof *= scale;
                                fKu_I3p_129 += fTemp_matrix_nudof_x_nudof;

                                fTemp_matrix_nudof_x_nchidof.MultATBC(fShapeDisplGrad,I3p_130,NCHI);
                                scale =-1*Comp21*fMaterial_Params[kKappa]
                                *fMaterial_Params[kEta]*dFYdScol1*scale_const*Jp;
                                fTemp_matrix_nudof_x_nchidof *= scale;
                                fKuphi_I3p_130 += fTemp_matrix_nudof_x_nchidof;

                                fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I3p_131,fShapeDisplGrad);
                                scale =-1*Comp21*fMaterial_Params[kKappa]
                                *fMaterial_Params[kKappa]*scale_const*Jp;
                                fTemp_matrix_nudof_x_nudof *= scale;
                                fKu_I3p_131 += fTemp_matrix_nudof_x_nudof;


                                fTemp_matrix_nudof_x_nchidof.MultATBC(fShapeDisplGrad,I3p_132,NCHI);
                                scale =-1*Comp21*fMaterial_Params[kKappa]
                                *fMaterial_Params[kKappa]*scale_const*Jp;
                                fTemp_matrix_nudof_x_nchidof *= scale;
                                fKuphi_I3p_132 += fTemp_matrix_nudof_x_nchidof;


                                fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I3p_133,fShapeDisplGrad);
                                scale =-1*Comp21*fMaterial_Params[kKappa]
                                *fMaterial_Params[kNu]*scale_const*Jp;
                                fTemp_matrix_nudof_x_nudof *= scale;
                                fKu_I3p_133 += fTemp_matrix_nudof_x_nudof;


                                fTemp_matrix_nudof_x_nchidof.MultATBC(fShapeDisplGrad,I3p_134,NCHI);
                                scale =-1*Comp21*fMaterial_Params[kKappa]
                                *fMaterial_Params[kNu]*scale_const*Jp;
                                fTemp_matrix_nudof_x_nchidof*= scale;
                                fKuphi_I3p_134 += fTemp_matrix_nudof_x_nchidof;


                //
                                fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I3p_135,fShapeDisplGrad);
                                scale =-1*Comp21*fMaterial_Params[kNu]
                                *(fMaterial_Params[kLambda]+fMaterial_Params[kTau])*dFYdScol1*scale_const*Jp;
                                fTemp_matrix_nudof_x_nudof *= scale;
                                fKu_I3p_135 += fTemp_matrix_nudof_x_nudof;

                                fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I3p_136,fShapeDisplGrad);
                                scale =-1*Comp21*fMaterial_Params[kNu]
                                *(fMaterial_Params[kMu]+fMaterial_Params[kSigma_const])*scale_const*Jp;
                                fTemp_matrix_nudof_x_nudof *= scale;
                                fKu_I3p_136 += fTemp_matrix_nudof_x_nudof;


                                fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I3p_137,fShapeDisplGrad);
                                scale =-1*Comp21*fMaterial_Params[kNu]
                                *fMaterial_Params[kEta]*dFYdScol1*scale_const*Jp;
                                fTemp_matrix_nudof_x_nudof *= scale;
                                fKu_I3p_137 += fTemp_matrix_nudof_x_nudof;

                                fTemp_matrix_nudof_x_nchidof.MultATBC(fShapeDisplGrad,I3p_138,NCHI);
                                scale =-1*Comp21*fMaterial_Params[kNu]
                                *fMaterial_Params[kEta]*dFYdScol1*scale_const*Jp;
                                fTemp_matrix_nudof_x_nchidof *= scale;
                                fKuphi_I3p_138 += fTemp_matrix_nudof_x_nchidof;

                                fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I3p_139,fShapeDisplGrad);
                                scale =-1*Comp21*fMaterial_Params[kNu]
                                *fMaterial_Params[kKappa]*scale_const*Jp;
                                fTemp_matrix_nudof_x_nudof *= scale;
                                fKu_I3p_139 += fTemp_matrix_nudof_x_nudof;


                                fTemp_matrix_nudof_x_nchidof.MultATBC(fShapeDisplGrad,I3p_140,NCHI);
                                scale =-1*Comp21*fMaterial_Params[kNu]
                                *fMaterial_Params[kKappa]*scale_const*Jp;
                                fTemp_matrix_nudof_x_nchidof *= scale;
                                fKuphi_I3p_140 += fTemp_matrix_nudof_x_nchidof;


                                fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I3p_141,fShapeDisplGrad);
                                scale =-1*Comp21*fMaterial_Params[kNu]
                                *fMaterial_Params[kNu]*scale_const*Jp;
                                fTemp_matrix_nudof_x_nudof *= scale;
                                fKu_I3p_141 += fTemp_matrix_nudof_x_nudof;


                                fTemp_matrix_nudof_x_nchidof.MultATBC(fShapeDisplGrad,I3p_142,NCHI);
                                scale =-1*Comp21*fMaterial_Params[kNu]
                                *fMaterial_Params[kNu]*scale_const*Jp;
                                fTemp_matrix_nudof_x_nchidof*= scale;
                                fKuphi_I3p_142 += fTemp_matrix_nudof_x_nchidof;

                                }





                                /* Terms realted to Delta(F^e) in w(l,A)(F^-1)(A,k) Fe(k,Kbar)S(Kbar,Lbar)delta(Fe(l,Lbar)) Jp*/

                                fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I4e_1,fShapeDisplGrad);
                                scale =scale_const*Jp;
                                fTemp_matrix_nudof_x_nudof *= scale;
                                fKu_I4e_1 += fTemp_matrix_nudof_x_nudof;

                                if(PlasticityCondition==1 || PlasticityCondition==3 || PlasticityCondition==4)//if(MacroPlasticityCondition==1)
                                {

                                fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I4p_2,fShapeDisplGrad);
                                scale =-1*(Comp11)*(fMaterial_Params[kLambda]+fMaterial_Params[kTau])*dFYdScol1*scale_const*Jp;
                                fTemp_matrix_nudof_x_nudof *= scale;
                                fKu_I4p_2 += fTemp_matrix_nudof_x_nudof;

                                fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I4p_3,fShapeDisplGrad);
                                scale =-1*(Comp11)*(fMaterial_Params[kMu]+fMaterial_Params[kSigma_const])*scale_const*Jp;
                                fTemp_matrix_nudof_x_nudof *= scale;
                                fKu_I4p_3 += fTemp_matrix_nudof_x_nudof;

                                fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I4p_4,fShapeDisplGrad);
                                scale =-1*(Comp11)*(fMaterial_Params[kMu]+fMaterial_Params[kSigma_const])*scale_const*Jp;
                                fTemp_matrix_nudof_x_nudof *= scale;
                                fKu_I4p_4 += fTemp_matrix_nudof_x_nudof;

                                /* Micromorphic addition */
                                fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I4p_5,fShapeDisplGrad);
                                scale =-1*(Comp11)*dFYdScol1*fMaterial_Params[kEta]*scale_const*Jp;
                                fTemp_matrix_nudof_x_nudof *= scale;
                                fKu_I4p_5 += fTemp_matrix_nudof_x_nudof;

                                fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I4p_6,fShapeDisplGrad);
                                scale =-1*(Comp11)*fMaterial_Params[kKappa]*scale_const*Jp;
                                fTemp_matrix_nudof_x_nudof *= scale;
                                fKu_I4p_6 += fTemp_matrix_nudof_x_nudof;

                                fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I4p_7,fShapeDisplGrad);
                                scale =-1*(Comp11)*scale_const*Jp*fMaterial_Params[kNu];
                                fTemp_matrix_nudof_x_nudof *= scale;
                                fKu_I4p_7 += fTemp_matrix_nudof_x_nudof;


                                fTemp_matrix_nudof_x_nchidof.MultATBC(fShapeDisplGrad,I4p_8,NCHI);
                                scale =-1*(Comp11)*dFYdScol1*fMaterial_Params[kEta]*scale_const*Jp;
                                fTemp_matrix_nudof_x_nchidof *= scale;
                                fKuphi_I4p_8 += fTemp_matrix_nudof_x_nchidof;

                                fTemp_matrix_nudof_x_nchidof.MultATBC(fShapeDisplGrad,I4p_9,NCHI);
                                scale =-1*(Comp11)*fMaterial_Params[kKappa]*scale_const*Jp;
                                fTemp_matrix_nudof_x_nchidof *= scale;
                                fKuphi_I4p_9 += fTemp_matrix_nudof_x_nchidof;

                                fTemp_matrix_nudof_x_nchidof.MultATBC(fShapeDisplGrad,I4p_10,NCHI);
                                scale =-1*(Comp11)*scale_const*Jp*fMaterial_Params[kNu];
                                fTemp_matrix_nudof_x_nchidof *= scale;
                                fKuphi_I4p_10 += fTemp_matrix_nudof_x_nchidof;
                                }

                               if(PlasticityCondition==3 || PlasticityCondition==4)
                               {


                                fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I4p_11,fShapeDisplGrad);
                                scale =-1*Comp12*scale_const*Jp*fMaterial_Params[kTau]*dFYchidSIGMA_Scol1;
                                fTemp_matrix_nudof_x_nudof *= scale;
                                fKu_I4p_11 += fTemp_matrix_nudof_x_nudof;

                                fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I4p_12,fShapeDisplGrad);
                                scale =-1*Comp12*scale_const*Jp*fMaterial_Params[kSigma_const];
                                fTemp_matrix_nudof_x_nudof *= scale;
                                fKu_I4p_12 += fTemp_matrix_nudof_x_nudof;

                                fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I4p_13,fShapeDisplGrad);
                                scale =-1*Comp12*scale_const*Jp*(fMaterial_Params[kEta]-fMaterial_Params[kTau])*dFYchidSIGMA_Scol1;
                                fTemp_matrix_nudof_x_nudof *= scale;
                                fKu_I4p_13 += fTemp_matrix_nudof_x_nudof;


                                fTemp_matrix_nudof_x_nchidof.MultATBC(fShapeDisplGrad,I4p_14,NCHI);
                                scale =-1*Comp12*scale_const*Jp*(fMaterial_Params[kEta]-fMaterial_Params[kTau])*dFYchidSIGMA_Scol1;
                                fTemp_matrix_nudof_x_nchidof *= scale;
                                fKuphi_I4p_14 += fTemp_matrix_nudof_x_nchidof;


                                fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I4p_15,fShapeDisplGrad);
                                scale =-1*Comp12*scale_const*Jp*(fMaterial_Params[kNu]-fMaterial_Params[kSigma_const]);
                                fTemp_matrix_nudof_x_nudof *= scale;
                                fKu_I4p_15 += fTemp_matrix_nudof_x_nudof;


                                fTemp_matrix_nudof_x_nchidof.MultATBC(fShapeDisplGrad,I4p_16,NCHI);
                                scale =-1*Comp12*scale_const*Jp*(fMaterial_Params[kNu]-fMaterial_Params[kSigma_const]);
                                fTemp_matrix_nudof_x_nchidof *= scale;
                                fKuphi_I4p_16 += fTemp_matrix_nudof_x_nchidof;


                                fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I4p_17,fShapeDisplGrad);
                                scale =-1*Comp12*scale_const*Jp*(fMaterial_Params[kKappa]-fMaterial_Params[kSigma_const]);
                                fTemp_matrix_nudof_x_nudof *= scale;
                                fKu_I4p_17 += fTemp_matrix_nudof_x_nudof;

                                fTemp_matrix_nudof_x_nchidof.MultATBC(fShapeDisplGrad,I4p_18,NCHI);
                                scale =-1*Comp12*scale_const*Jp*(fMaterial_Params[kKappa]-fMaterial_Params[kSigma_const]);
                                fTemp_matrix_nudof_x_nchidof *= scale;
                                fKuphi_I4p_18 += fTemp_matrix_nudof_x_nchidof;

                                }



                                /*MATRICES FROM THE SECOND BALANCE EQUATION
                        eta(ml)Fe(m Mbar)(S(Mbar Lbar)-SIGMA(MbarLbar))Fe(lLBar)Jp dV
                                Note that what we calculate SIGMA-S so there is no "-" in front of Jp terms
                                delta(Jp)*eta(ml)Fe(m Mbar)(S(Mbar Lbar)-SIGMA(MbarLbar))Fe(lLBar)
                                The terms related to variation of Jp have Jp_ extension i.e. IJp_1 */

                                if(PlasticityCondition==1 || PlasticityCondition==3 || PlasticityCondition==4)//if(MacroPlasticityCondition==1)
                                {
                                fTemp_matrix_nchidof_x_nudof.MultATBC(NCHI,IIJp_1,fShapeDisplGrad);
                                scale = (Comp11)*scale_const*Trace_const*(fMaterial_Params[kLambda]+fMaterial_Params[kTau])*dFYdScol1*Jp;
                                fTemp_matrix_nchidof_x_nudof *= scale;
                                fKphiu_IIJp_1 += fTemp_matrix_nchidof_x_nudof;


                                fTemp_matrix_nchidof_x_nudof.MultATBC(NCHI,IIJp_2,fShapeDisplGrad);
                                scale = (Comp11)*scale_const*Trace_const*(fMaterial_Params[kMu]+fMaterial_Params[kSigma_const])*Jp;
                                fTemp_matrix_nchidof_x_nudof *= scale;
                                fKphiu_IIJp_2 += fTemp_matrix_nchidof_x_nudof;

                                /*Additional terms to delta(Jp) coming by introducing micromorphic tems into macro-scale*/

                                fTemp_matrix_nchidof_x_nudof.MultATBC(NCHI,IIJp_3,fShapeDisplGrad);
                                scale = (Comp11)*dFYdScol1*Trace_const*scale_const*fMaterial_Params[kEta]*Jp;
                                fTemp_matrix_nchidof_x_nudof *= scale;
                                fKphiu_IIJp_3 += fTemp_matrix_nchidof_x_nudof;

                                fTemp_matrix_nchidof_x_nudof.MultATBC(NCHI,IIJp_4,fShapeDisplGrad);
                                scale = (Comp11)*Trace_const*scale_const*fMaterial_Params[kKappa]*Jp;
                                fTemp_matrix_nchidof_x_nudof *= scale;
                                fKphiu_IIJp_4 += fTemp_matrix_nchidof_x_nudof;

                                fTemp_matrix_nchidof_x_nudof.MultATBC(NCHI,IIJp_5,fShapeDisplGrad);
                                scale = (Comp11)*Trace_const*scale_const*Jp*fMaterial_Params[kNu];
                                fTemp_matrix_nchidof_x_nudof *= scale;
                                fKphiu_IIJp_5 += fTemp_matrix_nchidof_x_nudof;


                                fTemp_matrix_nchidof_x_nchidof.MultATBC(NCHI,IIJp_6,NCHI);
                                scale = (Comp11)*Trace_const*fMaterial_Params[kEta]*dFYdScol1*scale_const*Jp;
                                fTemp_matrix_nchidof_x_nchidof *= scale;
                                fKphiphi_IIJp_6 += fTemp_matrix_nchidof_x_nchidof;

                                fTemp_matrix_nchidof_x_nchidof.MultATBC(NCHI,IIJp_7,NCHI);
                                scale = (Comp11)*Trace_const*fMaterial_Params[kKappa]*scale_const*Jp;
                                fTemp_matrix_nchidof_x_nchidof *= scale;
                                fKphiphi_IIJp_7 += fTemp_matrix_nchidof_x_nchidof;


                                fTemp_matrix_nchidof_x_nchidof.MultATBC(NCHI,IIJp_8,NCHI);
                                scale = (Comp11)*Trace_const*scale_const*Jp*fMaterial_Params[kNu];
                                fTemp_matrix_nchidof_x_nchidof *= scale;
                                fKphiphi_IIJp_8 += fTemp_matrix_nchidof_x_nchidof;
                                }

                                if(PlasticityCondition==3 || PlasticityCondition==4)
                                {


                                fTemp_matrix_nchidof_x_nudof.MultATBC(NCHI,IIJp_9,fShapeDisplGrad);
                                scale =Comp12*Trace_const*scale_const*Jp*fMaterial_Params[kTau]*dFYchidSIGMA_Scol1;
                                fTemp_matrix_nchidof_x_nudof *= scale;
                                fKphiu_IIJp_9 += fTemp_matrix_nchidof_x_nudof;

                                fTemp_matrix_nchidof_x_nudof.MultATBC(NCHI,IIJp_10,fShapeDisplGrad);
                                scale =Comp12*Trace_const*scale_const*Jp*fMaterial_Params[kSigma_const];
                                fTemp_matrix_nchidof_x_nudof *= scale;
                                fKphiu_IIJp_10 += fTemp_matrix_nchidof_x_nudof;

                                fTemp_matrix_nchidof_x_nudof.MultATBC(NCHI,IIJp_11,fShapeDisplGrad);
                                scale =Comp12*Trace_const*scale_const*Jp*(fMaterial_Params[kEta]-fMaterial_Params[kTau])*dFYchidSIGMA_Scol1;
                                fTemp_matrix_nchidof_x_nudof *= scale;
                                fKphiu_IIJp_11 += fTemp_matrix_nchidof_x_nudof;


                                fTemp_matrix_nchidof_x_nchidof.MultATBC(NCHI,IIJp_12,NCHI);
                                scale =Comp12*Trace_const*scale_const*Jp*(fMaterial_Params[kEta]-fMaterial_Params[kTau])*dFYchidSIGMA_Scol1;
                                fTemp_matrix_nchidof_x_nchidof *= scale;
                                fKphiphi_IIJp_12 += fTemp_matrix_nchidof_x_nchidof;


                                fTemp_matrix_nchidof_x_nudof.MultATBC(NCHI,IIJp_13,fShapeDisplGrad);
                                scale =Comp12*Trace_const*scale_const*Jp*(fMaterial_Params[kNu]-fMaterial_Params[kSigma_const]);
                                fTemp_matrix_nchidof_x_nudof *= scale;
                                fKphiu_IIJp_13 += fTemp_matrix_nchidof_x_nudof;


                                fTemp_matrix_nchidof_x_nchidof.MultATBC(NCHI,IIJp_14,NCHI);
                                scale =Comp12*Trace_const*scale_const*Jp*(fMaterial_Params[kNu]-fMaterial_Params[kSigma_const]);
                                fTemp_matrix_nchidof_x_nchidof *= scale;
                                fKphiphi_IIJp_14 +=fTemp_matrix_nchidof_x_nchidof;


                                fTemp_matrix_nchidof_x_nudof.MultATBC(NCHI,IIJp_15,fShapeDisplGrad);
                                scale =Comp12*Trace_const*scale_const*Jp*(fMaterial_Params[kKappa]-fMaterial_Params[kSigma_const]);
                                fTemp_matrix_nchidof_x_nudof *= scale;
                                fKphiu_IIJp_15 += fTemp_matrix_nchidof_x_nudof;

                                fTemp_matrix_nchidof_x_nchidof.MultATBC(NCHI,IIJp_16,NCHI);
                                scale =Comp12*Trace_const*scale_const*Jp*(fMaterial_Params[kKappa]-fMaterial_Params[kSigma_const]);
                                fTemp_matrix_nchidof_x_nchidof *= scale;
                                fKphiphi_IIJp_16 += fTemp_matrix_nchidof_x_nchidof;

                                }


                                /* Terms realted to Delta(F) F: Deformation_Gradient F=FeFp used in eta(ml)Fe(k,Kbar)S-SIGMA(Kbar,Lbar)Fe(l,Lbar) Jp
                                 There is no II1 matrice because  no gradient of eta(ml)
                                 II1e_1=0.0 ;*/

                                /* Terms realted to Delta(F) F: Deformation_Gradient F=FeFp used in eta(ml)delta(Fe (m Mbar))(S(Mbar,Lbar)-SIGMA(Mbar,Lbar))Fe(l,Lbar) Jp */

                                fTemp_matrix_nchidof_x_nudof.MultATBC(NCHI,II2e_1,fShapeDisplGrad);
                                scale = scale_const*Jp;
                                fTemp_matrix_nchidof_x_nudof *= scale;
                                fKphiu_II2e_1 += fTemp_matrix_nchidof_x_nudof;

                                if(PlasticityCondition==1 || PlasticityCondition==3 || PlasticityCondition==4)//if(MacroPlasticityCondition==1)
                                {

                                fTemp_matrix_nchidof_x_nudof.MultATBC(NCHI,II2p_2,fShapeDisplGrad);
                                scale =-1*(Comp11)*(fMaterial_Params[kLambda]+fMaterial_Params[kTau])*dFYdScol1*scale_const*Jp;
                                fTemp_matrix_nchidof_x_nudof *= scale;
                                fKphiu_II2p_2 += fTemp_matrix_nchidof_x_nudof;

                                fTemp_matrix_nchidof_x_nudof.MultATBC(NCHI,II2p_3,fShapeDisplGrad);
                                scale =-1*(Comp11)*(fMaterial_Params[kMu]+fMaterial_Params[kSigma_const])*scale_const*Jp;
                                fTemp_matrix_nchidof_x_nudof *= scale;
                                fKphiu_II2p_3 += fTemp_matrix_nchidof_x_nudof;

                                /*Additional terms due to micromorphic terms into macro scale*/

                                fTemp_matrix_nchidof_x_nudof.MultATBC(NCHI,II2p_4,fShapeDisplGrad);
                                scale =-1*(Comp11)*fMaterial_Params[kEta]*dFYdScol1*scale_const*Jp;
                                fTemp_matrix_nchidof_x_nudof *= scale;
                                fKphiu_II2p_4 += fTemp_matrix_nchidof_x_nudof;

                                fTemp_matrix_nchidof_x_nudof.MultATBC(NCHI,II2p_5,fShapeDisplGrad);
                                scale =-1*(Comp11)*fMaterial_Params[kKappa]*scale_const*Jp;
                                fTemp_matrix_nchidof_x_nudof *= scale;
                                fKphiu_II2p_5 += fTemp_matrix_nchidof_x_nudof;

                                fTemp_matrix_nchidof_x_nudof.MultATBC(NCHI,II2p_6,fShapeDisplGrad);
                                scale =-1*(Comp11)*scale_const*Jp*fMaterial_Params[kNu];
                                fTemp_matrix_nchidof_x_nudof *= scale;
                                fKphiu_II2p_6 += fTemp_matrix_nchidof_x_nudof;

                                fTemp_matrix_nchidof_x_nchidof.MultATBC(NCHI,II2p_7,NCHI);
                                scale =-1*(Comp11)*fMaterial_Params[kEta]*dFYdScol1*scale_const*Jp;
                                fTemp_matrix_nchidof_x_nchidof *= scale;
                                fKphiphi_II2p_7 += fTemp_matrix_nchidof_x_nchidof;


                                fTemp_matrix_nchidof_x_nchidof.MultATBC(NCHI,II2p_8,NCHI);
                                scale =-1*(Comp11)*fMaterial_Params[kKappa]*scale_const*Jp;
                                fTemp_matrix_nchidof_x_nchidof *= scale;
                                fKphiphi_II2p_8 += fTemp_matrix_nchidof_x_nchidof;

                                fTemp_matrix_nchidof_x_nchidof.MultATBC(NCHI,II2p_9,NCHI);
                                scale =-1*(Comp11)*scale_const*Jp*fMaterial_Params[kNu];
                                fTemp_matrix_nchidof_x_nchidof *= scale;
                                fKphiphi_II2p_9 += fTemp_matrix_nchidof_x_nchidof;
                                }


                                if(PlasticityCondition==3 || PlasticityCondition==4)
                                {


                                fTemp_matrix_nchidof_x_nudof.MultATBC(NCHI,II2p_10,fShapeDisplGrad);
                                scale =-1*Comp12*scale_const*Jp*fMaterial_Params[kTau]*dFYchidSIGMA_Scol1;
                                fTemp_matrix_nchidof_x_nudof *= scale;
                                fKphiu_II2p_10 += fTemp_matrix_nchidof_x_nudof;

                                fTemp_matrix_nchidof_x_nudof.MultATBC(NCHI,II2p_11,fShapeDisplGrad);
                                scale =-1*Comp12*scale_const*Jp*fMaterial_Params[kSigma_const];
                                fTemp_matrix_nchidof_x_nudof *= scale;
                                fKphiu_II2p_11 += fTemp_matrix_nchidof_x_nudof;

                                fTemp_matrix_nchidof_x_nudof.MultATBC(NCHI,II2p_12,fShapeDisplGrad);
                                scale =-1*Comp12*scale_const*Jp*(fMaterial_Params[kEta]-fMaterial_Params[kTau])*dFYchidSIGMA_Scol1;
                                fTemp_matrix_nchidof_x_nudof *= scale;
                                fKphiu_II2p_12 += fTemp_matrix_nchidof_x_nudof;


                                fTemp_matrix_nchidof_x_nchidof.MultATBC(NCHI,II2p_13,NCHI);
                                scale =-1*Comp12*scale_const*Jp*(fMaterial_Params[kEta]-fMaterial_Params[kTau])*dFYchidSIGMA_Scol1;
                                fTemp_matrix_nchidof_x_nchidof *= scale;
                                fKphiphi_II2p_13 += fTemp_matrix_nchidof_x_nchidof;


                                fTemp_matrix_nchidof_x_nudof.MultATBC(NCHI,II2p_14,fShapeDisplGrad);
                                scale =-1*Comp12*scale_const*Jp*(fMaterial_Params[kNu]-fMaterial_Params[kSigma_const]);
                                fTemp_matrix_nchidof_x_nudof *= scale;
                                fKphiu_II2p_14 += fTemp_matrix_nchidof_x_nudof;


                                fTemp_matrix_nchidof_x_nchidof.MultATBC(NCHI,II2p_15,NCHI);
                                scale =-1*Comp12*scale_const*Jp*(fMaterial_Params[kNu]-fMaterial_Params[kSigma_const]);
                                fTemp_matrix_nchidof_x_nchidof *= scale;
                                fKphiphi_II2p_15 +=fTemp_matrix_nchidof_x_nchidof;


                                fTemp_matrix_nchidof_x_nudof.MultATBC(NCHI,II2p_16,fShapeDisplGrad);
                                scale =-1*Comp12*scale_const*Jp*(fMaterial_Params[kKappa]-fMaterial_Params[kSigma_const]);
                                fTemp_matrix_nchidof_x_nudof *= scale;
                                fKphiu_II2p_16 += fTemp_matrix_nchidof_x_nudof;

                                fTemp_matrix_nchidof_x_nchidof.MultATBC(NCHI,II2p_17,NCHI);
                                scale =-1*Comp12*scale_const*Jp*(fMaterial_Params[kKappa]-fMaterial_Params[kSigma_const]);
                                fTemp_matrix_nchidof_x_nchidof *= scale;
                                fKphiphi_II2p_17 += fTemp_matrix_nchidof_x_nchidof;


                                }



                                /*eta(ml)Fe(m Mbar)delta((SIGMA(Mbar Lbar)-S(MbarLbar)))Fe(lLBar)*/

                                fTemp_matrix_nchidof_x_nudof.MultATBC(NCHI,II3e_1,fShapeDisplGrad);
                                scale =fMaterial_Params[kTau]*scale_const*Jp;
                                fTemp_matrix_nchidof_x_nudof *= scale;
                                fKphiu_II3e_1 += fTemp_matrix_nchidof_x_nudof;

                                fTemp_matrix_nchidof_x_nudof.MultATBC(NCHI,II3e_2,fShapeDisplGrad);
                                scale =fMaterial_Params[kSigma_const]*scale_const*Jp;
                                fTemp_matrix_nchidof_x_nudof *= scale;
                                fKphiu_II3e_2 += fTemp_matrix_nchidof_x_nudof;

                                fTemp_matrix_nchidof_x_nudof.MultATBC(NCHI,II3e_3,fShapeDisplGrad);
                                scale =scale_const*Jp*(fMaterial_Params[kEta]-fMaterial_Params[kTau]);
                                fTemp_matrix_nchidof_x_nudof *= scale;
                                fKphiu_II3e_3 += fTemp_matrix_nchidof_x_nudof;

                                fTemp_matrix_nchidof_x_nudof.MultATBC(NCHI,II3e_4,fShapeDisplGrad);
                                scale =(fMaterial_Params[kNu]-fMaterial_Params[kSigma_const])*scale_const*Jp;
                                fTemp_matrix_nchidof_x_nudof *= scale;
                                fKphiu_II3e_4 += fTemp_matrix_nchidof_x_nudof;

                                fTemp_matrix_nchidof_x_nudof.MultATBC(NCHI,II3e_5,fShapeDisplGrad);
                                scale =(fMaterial_Params[kKappa]-fMaterial_Params[kSigma_const])*scale_const*Jp;
                                fTemp_matrix_nchidof_x_nudof *= scale;
                                fKphiu_II3e_5 += fTemp_matrix_nchidof_x_nudof;


                                if(PlasticityCondition==1 || PlasticityCondition==3 || PlasticityCondition==4)//if(MacroPlasticityCondition==1)
                                {
                                fTemp_matrix_nchidof_x_nudof.MultATBC(NCHI,II3p_6,fShapeDisplGrad);
                                scale =-1*(Comp11)*dFYdScol1*trfA1*scale_const*Jp*fMaterial_Params[kTau]*(fMaterial_Params[kLambda]+fMaterial_Params[kTau]);
                                fTemp_matrix_nchidof_x_nudof *= scale;
                                fKphiu_II3p_6 += fTemp_matrix_nchidof_x_nudof;

                                fTemp_matrix_nchidof_x_nudof.MultATBC(NCHI,II3p_7,fShapeDisplGrad);
                                scale =-1*(Comp11)*trfA1*scale_const*Jp*fMaterial_Params[kTau]*(fMaterial_Params[kMu]+fMaterial_Params[kSigma_const]);
                                fTemp_matrix_nchidof_x_nudof *= scale;
                                fKphiu_II3p_7 += fTemp_matrix_nchidof_x_nudof;

                                fTemp_matrix_nchidof_x_nudof.MultATBC(NCHI,II3p_8,fShapeDisplGrad);
                                scale =-1*(Comp11)*dFYdScol1*trfA1*scale_const*Jp*fMaterial_Params[kTau]*fMaterial_Params[kEta];
                                fTemp_matrix_nchidof_x_nudof *= scale;
                                fKphiu_II3p_8 += fTemp_matrix_nchidof_x_nudof;


                                fTemp_matrix_nchidof_x_nudof.MultATBC(NCHI,II3p_9,fShapeDisplGrad);
                                scale =-1*(Comp11)*trfA1*scale_const*Jp*fMaterial_Params[kTau]*fMaterial_Params[kKappa];
                                fTemp_matrix_nchidof_x_nudof *= scale;
                                fKphiu_II3p_9 += fTemp_matrix_nchidof_x_nudof;

                                fTemp_matrix_nchidof_x_nudof.MultATBC(NCHI,II3p_10,fShapeDisplGrad);
                                scale =-1*(Comp11)*trfA1*scale_const*Jp*fMaterial_Params[kTau]*fMaterial_Params[kNu];
                                fTemp_matrix_nchidof_x_nudof *= scale;
                                fKphiu_II3p_10 += fTemp_matrix_nchidof_x_nudof;



                                fTemp_matrix_nchidof_x_nudof.MultATBC(NCHI,II3p_11,fShapeDisplGrad);
                                scale =-1*(Comp11)*dFYdScol1*scale_const*Jp*fMaterial_Params[kSigma_const]*(fMaterial_Params[kLambda]+fMaterial_Params[kTau]);
                                fTemp_matrix_nchidof_x_nudof *= scale;
                                fKphiu_II3p_11 += fTemp_matrix_nchidof_x_nudof;


                                fTemp_matrix_nchidof_x_nudof.MultATBC(NCHI,II3p_12,fShapeDisplGrad);
                                scale =-1*(Comp11)*scale_const*Jp*fMaterial_Params[kSigma_const]*(fMaterial_Params[kMu]+fMaterial_Params[kSigma_const]);
                                fTemp_matrix_nchidof_x_nudof *= scale;
                                fKphiu_II3p_12 += fTemp_matrix_nchidof_x_nudof;


                                fTemp_matrix_nchidof_x_nudof.MultATBC(NCHI,II3p_13,fShapeDisplGrad);
                                scale =-1*(Comp11)*dFYdScol1*scale_const*Jp*fMaterial_Params[kSigma_const]*fMaterial_Params[kEta];
                                fTemp_matrix_nchidof_x_nudof *= scale;
                                fKphiu_II3p_13 += fTemp_matrix_nchidof_x_nudof;


                                fTemp_matrix_nchidof_x_nudof.MultATBC(NCHI,II3p_14,fShapeDisplGrad);
                                scale =-1*(Comp11)*scale_const*Jp*fMaterial_Params[kSigma_const]*fMaterial_Params[kKappa];
                                fTemp_matrix_nchidof_x_nudof *= scale;
                                fKphiu_II3p_14 += fTemp_matrix_nchidof_x_nudof;


                                fTemp_matrix_nchidof_x_nudof.MultATBC(NCHI,II3p_15,fShapeDisplGrad);
                                scale =-1*(Comp11)*scale_const*Jp*fMaterial_Params[kSigma_const]*fMaterial_Params[kNu];
                                fTemp_matrix_nchidof_x_nudof *= scale;
                                fKphiu_II3p_15 += fTemp_matrix_nchidof_x_nudof;



                                fTemp_matrix_nchidof_x_nudof.MultATBC(NCHI,II3p_16,fShapeDisplGrad);
                                scale =-1*(Comp11)*dFYdScol1*scale_const*Jp*(fMaterial_Params[kEta]-fMaterial_Params[kTau])*trfN1
                                *(fMaterial_Params[kLambda]+fMaterial_Params[kTau]);
                                fTemp_matrix_nchidof_x_nudof *= scale;
                                fKphiu_II3p_16 += fTemp_matrix_nchidof_x_nudof;

                                fTemp_matrix_nchidof_x_nudof.MultATBC(NCHI,II3p_17,fShapeDisplGrad);
                                scale =-1*(Comp11)*scale_const*Jp*(fMaterial_Params[kEta]-fMaterial_Params[kTau])*trfN1
                                *(fMaterial_Params[kMu]+fMaterial_Params[kSigma_const]);
                                fTemp_matrix_nchidof_x_nudof *= scale;
                                fKphiu_II3p_17 += fTemp_matrix_nchidof_x_nudof;

                                fTemp_matrix_nchidof_x_nudof.MultATBC(NCHI,II3p_18,fShapeDisplGrad);
                                scale =-1*(Comp11)*dFYdScol1*scale_const*Jp*(fMaterial_Params[kEta]-fMaterial_Params[kTau])*trfN1
                                *fMaterial_Params[kEta];
                                fTemp_matrix_nchidof_x_nudof *= scale;
                                fKphiu_II3p_18 += fTemp_matrix_nchidof_x_nudof;


                                fTemp_matrix_nchidof_x_nudof.MultATBC(NCHI,II3p_19,fShapeDisplGrad);
                                scale =-1*(Comp11)*scale_const*Jp*(fMaterial_Params[kEta]-fMaterial_Params[kTau])*trfN1
                                *fMaterial_Params[kKappa];
                                fTemp_matrix_nchidof_x_nudof *= scale;
                                fKphiu_II3p_19 += fTemp_matrix_nchidof_x_nudof;

                                fTemp_matrix_nchidof_x_nudof.MultATBC(NCHI,II3p_20,fShapeDisplGrad);
                                scale =-1*(Comp11)*trfN1*scale_const*Jp*(fMaterial_Params[kEta]-fMaterial_Params[kTau])
                                *fMaterial_Params[kNu];
                                fTemp_matrix_nchidof_x_nudof *= scale;
                                fKphiu_II3p_20 += fTemp_matrix_nchidof_x_nudof;


                                fTemp_matrix_nchidof_x_nudof.MultATBC(NCHI,II3p_21,fShapeDisplGrad);
                                scale =-1*(Comp11)*dFYdScol1*scale_const*Jp*(fMaterial_Params[kNu]-fMaterial_Params[kSigma_const])
                                *(fMaterial_Params[kLambda]+fMaterial_Params[kTau]);
                                fTemp_matrix_nchidof_x_nudof *= scale;
                                fKphiu_II3p_21 += fTemp_matrix_nchidof_x_nudof;

                                fTemp_matrix_nchidof_x_nudof.MultATBC(NCHI,II3p_22,fShapeDisplGrad);
                                scale =-1*(Comp11)*scale_const*Jp*(fMaterial_Params[kNu]-fMaterial_Params[kSigma_const])
                                *(fMaterial_Params[kMu]+fMaterial_Params[kSigma_const]);
                                fTemp_matrix_nchidof_x_nudof *= scale;
                                fKphiu_II3p_22 += fTemp_matrix_nchidof_x_nudof;


                                fTemp_matrix_nchidof_x_nudof.MultATBC(NCHI,II3p_23,fShapeDisplGrad);
                                scale =-1*(Comp11)*dFYdScol1*scale_const*Jp*(fMaterial_Params[kNu]-fMaterial_Params[kSigma_const])
                                *fMaterial_Params[kEta];
                                fTemp_matrix_nchidof_x_nudof *= scale;
                                fKphiu_II3p_23 += fTemp_matrix_nchidof_x_nudof;


                                fTemp_matrix_nchidof_x_nudof.MultATBC(NCHI,II3p_24,fShapeDisplGrad);
                                scale =-1*(Comp11)*scale_const*Jp*(fMaterial_Params[kNu]-fMaterial_Params[kSigma_const])
                                *fMaterial_Params[kKappa];
                                fTemp_matrix_nchidof_x_nudof *= scale;
                                fKphiu_II3p_24 += fTemp_matrix_nchidof_x_nudof;


                                fTemp_matrix_nchidof_x_nudof.MultATBC(NCHI,II3p_25,fShapeDisplGrad);
                                scale =-1*(Comp11)*scale_const*Jp*(fMaterial_Params[kNu]-fMaterial_Params[kSigma_const])
                                *fMaterial_Params[kNu];
                                fTemp_matrix_nchidof_x_nudof *= scale;
                                fKphiu_II3p_25 += fTemp_matrix_nchidof_x_nudof;

                                fTemp_matrix_nchidof_x_nudof.MultATBC(NCHI,II3p_26,fShapeDisplGrad);
                                scale =-1*scale_const*Jp*(Comp11)*dFYdScol1*(fMaterial_Params[kKappa]-fMaterial_Params[kSigma_const])
                                *(fMaterial_Params[kLambda]+fMaterial_Params[kTau]);
                                fTemp_matrix_nchidof_x_nudof *= scale;
                                fKphiu_II3p_26 += fTemp_matrix_nchidof_x_nudof;

                                fTemp_matrix_nchidof_x_nudof.MultATBC(NCHI,II3p_27,fShapeDisplGrad);
                                scale =-1*scale_const*Jp*(Comp11)*(fMaterial_Params[kKappa]-fMaterial_Params[kSigma_const])
                                *(fMaterial_Params[kMu]+fMaterial_Params[kSigma_const]);
                                fTemp_matrix_nchidof_x_nudof *= scale;
                                fKphiu_II3p_27 += fTemp_matrix_nchidof_x_nudof;

                                fTemp_matrix_nchidof_x_nudof.MultATBC(NCHI,II3p_28,fShapeDisplGrad);
                                scale =-1*scale_const*Jp*(Comp11)*dFYdScol1*(fMaterial_Params[kKappa]-fMaterial_Params[kSigma_const])
                                *fMaterial_Params[kEta];
                                fTemp_matrix_nchidof_x_nudof *= scale;
                                fKphiu_II3p_28 += fTemp_matrix_nchidof_x_nudof;

                                fTemp_matrix_nchidof_x_nudof.MultATBC(NCHI,II3p_29,fShapeDisplGrad);
                                scale =-1*scale_const*Jp*(Comp11)*(fMaterial_Params[kKappa]-fMaterial_Params[kSigma_const])
                                *fMaterial_Params[kKappa];
                                fTemp_matrix_nchidof_x_nudof *= scale;
                                fKphiu_II3p_29 += fTemp_matrix_nchidof_x_nudof;

                                fTemp_matrix_nchidof_x_nudof.MultATBC(NCHI,II3p_30,fShapeDisplGrad);
                                scale =-1*(Comp11)*scale_const*Jp*(fMaterial_Params[kKappa]-fMaterial_Params[kSigma_const])
                                *fMaterial_Params[kNu];
                                fTemp_matrix_nchidof_x_nudof *= scale;
                                fKphiu_II3p_30 += fTemp_matrix_nchidof_x_nudof;
                                }
                //
                                fTemp_matrix_nchidof_x_nchidof.MultATBC(NCHI,II3e_31,NCHI);
                                scale =scale_const*Jp*(fMaterial_Params[kEta]-fMaterial_Params[kTau]);
                                fTemp_matrix_nchidof_x_nchidof *= scale;
                                fKphiphi_II3e_31 += fTemp_matrix_nchidof_x_nchidof;

                                fTemp_matrix_nchidof_x_nchidof.MultATBC(NCHI,II3e_32,NCHI);
                                scale =scale_const*Jp*(fMaterial_Params[kNu]-fMaterial_Params[kSigma_const]);
                                fTemp_matrix_nchidof_x_nchidof *= scale;
                                fKphiphi_II3e_32 += fTemp_matrix_nchidof_x_nchidof;

                                fTemp_matrix_nchidof_x_nchidof.MultATBC(NCHI,II3e_33,NCHI);
                                scale =scale_const*Jp*(fMaterial_Params[kKappa]-fMaterial_Params[kSigma_const]);
                                fTemp_matrix_nchidof_x_nchidof *= scale;
                                fKphiphi_II3e_33 += fTemp_matrix_nchidof_x_nchidof;

                                if(PlasticityCondition==1 || PlasticityCondition==3 || PlasticityCondition==4)//if(MacroPlasticityCondition==1)
                                {

                                fTemp_matrix_nchidof_x_nchidof.MultATBC(NCHI,II3p_34,NCHI);
                                scale =-1*(Comp11)*dFYdScol1*trfA1*scale_const*Jp*fMaterial_Params[kTau]*fMaterial_Params[kEta];
                                fTemp_matrix_nchidof_x_nchidof *= scale;
                                fKphiphi_II3p_34 += fTemp_matrix_nchidof_x_nchidof;

                                fTemp_matrix_nchidof_x_nchidof.MultATBC(NCHI,II3p_35,NCHI);
                                scale =-1*(Comp11)*trfA1*scale_const*Jp*fMaterial_Params[kTau]*fMaterial_Params[kKappa];
                                fTemp_matrix_nchidof_x_nchidof *= scale;
                                fKphiphi_II3p_35 += fTemp_matrix_nchidof_x_nchidof;

                                fTemp_matrix_nchidof_x_nchidof.MultATBC(NCHI,II3p_36,NCHI);
                                scale =-1*(Comp11)*trfA1*scale_const*Jp*fMaterial_Params[kTau]*fMaterial_Params[kNu];
                                fTemp_matrix_nchidof_x_nchidof *= scale;
                                fKphiphi_II3p_36 += fTemp_matrix_nchidof_x_nchidof;


                                fTemp_matrix_nchidof_x_nchidof.MultATBC(NCHI,II3p_37,NCHI);
                                scale =-1*(Comp11)*dFYdScol1*scale_const*Jp*fMaterial_Params[kSigma_const]*fMaterial_Params[kEta];
                                fTemp_matrix_nchidof_x_nchidof *= scale;
                                fKphiphi_II3p_37 += fTemp_matrix_nchidof_x_nchidof;

                                fTemp_matrix_nchidof_x_nchidof.MultATBC(NCHI,II3p_38,NCHI);
                                scale =-1*(Comp11)*scale_const*Jp*fMaterial_Params[kSigma_const]*fMaterial_Params[kKappa];
                                fTemp_matrix_nchidof_x_nchidof *= scale;
                                fKphiphi_II3p_38 += fTemp_matrix_nchidof_x_nchidof;

                                fTemp_matrix_nchidof_x_nchidof.MultATBC(NCHI,II3p_39,NCHI);
                                scale =-1*(Comp11)*scale_const*Jp*fMaterial_Params[kSigma_const]*fMaterial_Params[kNu];
                                fTemp_matrix_nchidof_x_nchidof *= scale;
                                fKphiphi_II3p_39 += fTemp_matrix_nchidof_x_nchidof;


                                fTemp_matrix_nchidof_x_nchidof.MultATBC(NCHI,II3p_40,NCHI);
                                scale =-1*(Comp11)*dFYdScol1*scale_const*Jp*(fMaterial_Params[kEta]-fMaterial_Params[kTau])*trfN1
                                *fMaterial_Params[kEta];
                                fTemp_matrix_nchidof_x_nchidof *= scale;
                                fKphiphi_II3p_40 += fTemp_matrix_nchidof_x_nchidof;

                                fTemp_matrix_nchidof_x_nchidof.MultATBC(NCHI,II3p_41,NCHI);
                                scale =-1*(Comp11)*scale_const*Jp*(fMaterial_Params[kEta]-fMaterial_Params[kTau])
                                *trfN1*fMaterial_Params[kKappa];
                                fTemp_matrix_nchidof_x_nchidof *= scale;
                                fKphiphi_II3p_41 += fTemp_matrix_nchidof_x_nchidof;

                                fTemp_matrix_nchidof_x_nchidof.MultATBC(NCHI,II3p_42,NCHI);
                                scale =-1*(Comp11)*trfN1*scale_const*Jp*(fMaterial_Params[kEta]-fMaterial_Params[kTau])
                                *fMaterial_Params[kNu];
                                fTemp_matrix_nchidof_x_nchidof *= scale;
                                fKphiphi_II3p_42 += fTemp_matrix_nchidof_x_nchidof;


                                fTemp_matrix_nchidof_x_nchidof.MultATBC(NCHI,II3p_43,NCHI);
                                scale =-1*(Comp11)*dFYdScol1*scale_const*Jp*(fMaterial_Params[kNu]-fMaterial_Params[kSigma_const])*fMaterial_Params[kEta];
                                fTemp_matrix_nchidof_x_nchidof *= scale;
                                fKphiphi_II3p_43 += fTemp_matrix_nchidof_x_nchidof;

                                fTemp_matrix_nchidof_x_nchidof.MultATBC(NCHI,II3p_44,NCHI);
                                scale =-1*(Comp11)*scale_const*Jp*(fMaterial_Params[kNu]-fMaterial_Params[kSigma_const])*fMaterial_Params[kKappa];
                                fTemp_matrix_nchidof_x_nchidof *= scale;
                                fKphiphi_II3p_44 += fTemp_matrix_nchidof_x_nchidof;


                                fTemp_matrix_nchidof_x_nchidof.MultATBC(NCHI,II3p_45,NCHI);
                                scale =-1*(Comp11)*scale_const*Jp*(fMaterial_Params[kNu]-fMaterial_Params[kSigma_const])*fMaterial_Params[kNu];
                                fTemp_matrix_nchidof_x_nchidof *= scale;
                                fKphiphi_II3p_45 += fTemp_matrix_nchidof_x_nchidof;


                                fTemp_matrix_nchidof_x_nchidof.MultATBC(NCHI,II3p_46,NCHI);
                                scale =-1*(Comp11)*dFYdScol1*scale_const*Jp*(fMaterial_Params[kKappa]-fMaterial_Params[kSigma_const])*fMaterial_Params[kEta];
                                fTemp_matrix_nchidof_x_nchidof *= scale;
                                fKphiphi_II3p_46 += fTemp_matrix_nchidof_x_nchidof;

                                fTemp_matrix_nchidof_x_nchidof.MultATBC(NCHI,II3p_47,NCHI);
                                scale =-1*(Comp11)*scale_const*Jp*(fMaterial_Params[kKappa]-fMaterial_Params[kSigma_const])*fMaterial_Params[kKappa];
                                fTemp_matrix_nchidof_x_nchidof *= scale;
                                fKphiphi_II3p_47 += fTemp_matrix_nchidof_x_nchidof;

                                fTemp_matrix_nchidof_x_nchidof.MultATBC(NCHI,II3p_48,NCHI);
                                scale =-1*(Comp11)*scale_const*Jp*(fMaterial_Params[kKappa]-fMaterial_Params[kSigma_const])*fMaterial_Params[kNu];
                                fTemp_matrix_nchidof_x_nchidof *= scale;
                                fKphiphi_II3p_48 += fTemp_matrix_nchidof_x_nchidof;
                                }

                                if( PlasticityCondition==2 || PlasticityCondition==3 || PlasticityCondition==4)//if(MicroPlasticityCondition==1)
                                {

                                fTemp_matrix_nchidof_x_nudof.MultATBC(NCHI,II3p_49,fShapeDisplGrad);
                                scale =-1*(Comp22)*scale_const*Jp*(fMaterial_Params[kEta]-fMaterial_Params[kTau])*trfD1
                                *fMaterial_Params[kTau]*dFYchidSIGMA_Scol1;
                                fTemp_matrix_nchidof_x_nudof *= scale;
                                fKphiu_II3p_49 += fTemp_matrix_nchidof_x_nudof;

                                fTemp_matrix_nchidof_x_nudof.MultATBC(NCHI,II3p_50,fShapeDisplGrad);
                                scale =-1*(Comp22)*scale_const*Jp*(fMaterial_Params[kEta]-fMaterial_Params[kTau])*trfD1
                                *fMaterial_Params[kSigma_const];
                                fTemp_matrix_nchidof_x_nudof *= scale;
                                fKphiu_II3p_50 += fTemp_matrix_nchidof_x_nudof;

                                fTemp_matrix_nchidof_x_nudof.MultATBC(NCHI,II3p_51,fShapeDisplGrad);
                                scale =-1*(Comp22)*scale_const*Jp*(fMaterial_Params[kEta]-fMaterial_Params[kTau])*trfD1
                                *(fMaterial_Params[kEta]-fMaterial_Params[kTau])*dFYchidSIGMA_Scol1;
                                fTemp_matrix_nchidof_x_nudof *= scale;
                                fKphiu_II3p_51 += fTemp_matrix_nchidof_x_nudof;

                                fTemp_matrix_nchidof_x_nchidof.MultATBC(NCHI,II3p_52,NCHI);
                                scale =-1*(Comp22)*scale_const*Jp*(fMaterial_Params[kEta]-fMaterial_Params[kTau])*trfD1
                                *(fMaterial_Params[kEta]-fMaterial_Params[kTau])*dFYchidSIGMA_Scol1;
                                fTemp_matrix_nchidof_x_nchidof *= scale;
                                fKphiphi_II3p_52 += fTemp_matrix_nchidof_x_nchidof;

                                fTemp_matrix_nchidof_x_nudof.MultATBC(NCHI,II3p_53,fShapeDisplGrad);
                                scale =-1*(Comp22)*scale_const*Jp*(fMaterial_Params[kEta]-fMaterial_Params[kTau])*trfD1
                                *(fMaterial_Params[kNu]-fMaterial_Params[kSigma_const]);
                                fTemp_matrix_nchidof_x_nudof *= scale;
                                fKphiu_II3p_53 += fTemp_matrix_nchidof_x_nudof;

                                fTemp_matrix_nchidof_x_nchidof.MultATBC(NCHI,II3p_54,NCHI);
                                scale =-1*(Comp22)*scale_const*Jp*(fMaterial_Params[kEta]-fMaterial_Params[kTau])*trfD1
                                *(fMaterial_Params[kNu]-fMaterial_Params[kSigma_const]);
                                fTemp_matrix_nchidof_x_nchidof *= scale;
                                fKphiphi_II3p_54 += fTemp_matrix_nchidof_x_nchidof;

                                fTemp_matrix_nchidof_x_nudof.MultATBC(NCHI,II3p_55,fShapeDisplGrad);
                                scale =-1*(Comp22)*scale_const*Jp*(fMaterial_Params[kEta]-fMaterial_Params[kTau])*trfD1
                                *(fMaterial_Params[kKappa]-fMaterial_Params[kSigma_const]);
                                fTemp_matrix_nchidof_x_nudof *= scale;
                                fKphiu_II3p_55 += fTemp_matrix_nchidof_x_nudof;

                                fTemp_matrix_nchidof_x_nchidof.MultATBC(NCHI,II3p_56,NCHI);
                                scale =-1*(Comp22)*scale_const*Jp*(fMaterial_Params[kEta]-fMaterial_Params[kTau])*trfD1
                                *(fMaterial_Params[kKappa]-fMaterial_Params[kSigma_const]);
                                fTemp_matrix_nchidof_x_nchidof *= scale;
                                fKphiphi_II3p_56 += fTemp_matrix_nchidof_x_nchidof;

                                //
                                fTemp_matrix_nchidof_x_nudof.MultATBC(NCHI,II3p_57,fShapeDisplGrad);
                                scale =-1*(Comp22)*scale_const*Jp*(fMaterial_Params[kNu]-fMaterial_Params[kSigma_const])
                                *fMaterial_Params[kTau]*dFYchidSIGMA_Scol1;
                                fTemp_matrix_nchidof_x_nudof *= scale;
                                fKphiu_II3p_57 += fTemp_matrix_nchidof_x_nudof;

                                fTemp_matrix_nchidof_x_nudof.MultATBC(NCHI,II3p_58,fShapeDisplGrad);
                                scale =-1*(Comp22)*scale_const*Jp*(fMaterial_Params[kNu]-fMaterial_Params[kSigma_const])
                                *fMaterial_Params[kSigma_const];
                                fTemp_matrix_nchidof_x_nudof *= scale;
                                fKphiu_II3p_58 += fTemp_matrix_nchidof_x_nudof;

                                fTemp_matrix_nchidof_x_nudof.MultATBC(NCHI,II3p_59,fShapeDisplGrad);
                                scale =-1*(Comp22)*scale_const*Jp*(fMaterial_Params[kNu]-fMaterial_Params[kSigma_const])
                                *(fMaterial_Params[kEta]-fMaterial_Params[kTau])*dFYchidSIGMA_Scol1;
                                fTemp_matrix_nchidof_x_nudof *= scale;
                                fKphiu_II3p_59 += fTemp_matrix_nchidof_x_nudof;

                                fTemp_matrix_nchidof_x_nchidof.MultATBC(NCHI,II3p_60,NCHI);
                                scale =-1*(Comp22)*scale_const*Jp*(fMaterial_Params[kNu]-fMaterial_Params[kSigma_const])
                                *(fMaterial_Params[kEta]-fMaterial_Params[kTau])*dFYchidSIGMA_Scol1;
                                fTemp_matrix_nchidof_x_nchidof *= scale;
                                fKphiphi_II3p_60 += fTemp_matrix_nchidof_x_nchidof;

                                fTemp_matrix_nchidof_x_nudof.MultATBC(NCHI,II3p_61,fShapeDisplGrad);
                                scale =-1*(Comp22)*scale_const*Jp*(fMaterial_Params[kNu]-fMaterial_Params[kSigma_const])
                                *(fMaterial_Params[kNu]-fMaterial_Params[kSigma_const]);
                                fTemp_matrix_nchidof_x_nudof *= scale;
                                fKphiu_II3p_61 += fTemp_matrix_nchidof_x_nudof;

                                fTemp_matrix_nchidof_x_nchidof.MultATBC(NCHI,II3p_62,NCHI);
                                scale =-1*(Comp22)*scale_const*Jp*(fMaterial_Params[kNu]-fMaterial_Params[kSigma_const])
                                *(fMaterial_Params[kNu]-fMaterial_Params[kSigma_const]);
                                fTemp_matrix_nchidof_x_nchidof *= scale;
                                fKphiphi_II3p_62 += fTemp_matrix_nchidof_x_nchidof;

                                fTemp_matrix_nchidof_x_nudof.MultATBC(NCHI,II3p_63,fShapeDisplGrad);
                                scale =-1*(Comp22)*scale_const*Jp*(fMaterial_Params[kNu]-fMaterial_Params[kSigma_const])
                                *(fMaterial_Params[kKappa]-fMaterial_Params[kSigma_const]);
                                fTemp_matrix_nchidof_x_nudof *= scale;
                                fKphiu_II3p_63 += fTemp_matrix_nchidof_x_nudof;

                                fTemp_matrix_nchidof_x_nchidof.MultATBC(NCHI,II3p_64,NCHI);
                                scale =-1*(Comp22)*scale_const*Jp*(fMaterial_Params[kNu]-fMaterial_Params[kSigma_const])
                                *(fMaterial_Params[kKappa]-fMaterial_Params[kSigma_const]);
                                fTemp_matrix_nchidof_x_nchidof *= scale;
                                fKphiphi_II3p_64 += fTemp_matrix_nchidof_x_nchidof;


                                //
                                fTemp_matrix_nchidof_x_nudof.MultATBC(NCHI,II3p_65,fShapeDisplGrad);
                                scale =-1*(Comp22)*scale_const*Jp*(fMaterial_Params[kKappa]-fMaterial_Params[kSigma_const])
                                *fMaterial_Params[kTau]*dFYchidSIGMA_Scol1;
                                fTemp_matrix_nchidof_x_nudof *= scale;
                                fKphiu_II3p_65 += fTemp_matrix_nchidof_x_nudof;

                                fTemp_matrix_nchidof_x_nudof.MultATBC(NCHI,II3p_66,fShapeDisplGrad);
                                scale =-1*(Comp22)*scale_const*Jp*(fMaterial_Params[kKappa]-fMaterial_Params[kSigma_const])
                                *fMaterial_Params[kSigma_const];
                                fTemp_matrix_nchidof_x_nudof *= scale;
                                fKphiu_II3p_66 += fTemp_matrix_nchidof_x_nudof;

                                fTemp_matrix_nchidof_x_nudof.MultATBC(NCHI,II3p_67,fShapeDisplGrad);
                                scale =-1*(Comp22)*scale_const*Jp*(fMaterial_Params[kKappa]-fMaterial_Params[kSigma_const])
                                *(fMaterial_Params[kEta]-fMaterial_Params[kTau])*dFYchidSIGMA_Scol1;
                                fTemp_matrix_nchidof_x_nudof *= scale;
                                fKphiu_II3p_67 += fTemp_matrix_nchidof_x_nudof;

                                fTemp_matrix_nchidof_x_nchidof.MultATBC(NCHI,II3p_68,NCHI);
                                scale =-1*(Comp22)*scale_const*Jp*(fMaterial_Params[kKappa]-fMaterial_Params[kSigma_const])
                                *(fMaterial_Params[kEta]-fMaterial_Params[kTau])*dFYchidSIGMA_Scol1;
                                fTemp_matrix_nchidof_x_nchidof *= scale;
                                fKphiphi_II3p_68 += fTemp_matrix_nchidof_x_nchidof;

                                fTemp_matrix_nchidof_x_nudof.MultATBC(NCHI,II3p_69,fShapeDisplGrad);
                                scale =-1*(Comp22)*scale_const*Jp*(fMaterial_Params[kKappa]-fMaterial_Params[kSigma_const])
                                *(fMaterial_Params[kNu]-fMaterial_Params[kSigma_const]);
                                fTemp_matrix_nchidof_x_nudof *= scale;
                                fKphiu_II3p_69 += fTemp_matrix_nchidof_x_nudof;

                                fTemp_matrix_nchidof_x_nchidof.MultATBC(NCHI,II3p_70,NCHI);
                                scale =-1*(Comp22)*scale_const*Jp*(fMaterial_Params[kKappa]-fMaterial_Params[kSigma_const])
                                *(fMaterial_Params[kNu]-fMaterial_Params[kSigma_const]);
                                fTemp_matrix_nchidof_x_nchidof *= scale;
                                fKphiphi_II3p_70 += fTemp_matrix_nchidof_x_nchidof;

                                fTemp_matrix_nchidof_x_nudof.MultATBC(NCHI,II3p_71,fShapeDisplGrad);
                                scale =-1*(Comp22)*scale_const*Jp*(fMaterial_Params[kKappa]-fMaterial_Params[kSigma_const])
                                *(fMaterial_Params[kKappa]-fMaterial_Params[kSigma_const]);
                                fTemp_matrix_nchidof_x_nudof *= scale;
                                fKphiu_II3p_71 += fTemp_matrix_nchidof_x_nudof;

                                fTemp_matrix_nchidof_x_nchidof.MultATBC(NCHI,II3p_72,NCHI);
                                scale =-1*(Comp22)*scale_const*Jp*(fMaterial_Params[kKappa]-fMaterial_Params[kSigma_const])
                                *(fMaterial_Params[kKappa]-fMaterial_Params[kSigma_const]);
                                fTemp_matrix_nchidof_x_nchidof *= scale;
                                fKphiphi_II3p_72 += fTemp_matrix_nchidof_x_nchidof;

                                }


                                if(PlasticityCondition==3 || PlasticityCondition==4)
                                {

                                fTemp_matrix_nchidof_x_nudof.MultATBC(NCHI,II3p_73,fShapeDisplGrad);
                                scale =-1*Comp12*scale_const*Jp*fMaterial_Params[kTau]*trfA1
                                *fMaterial_Params[kTau]*dFYchidSIGMA_Scol1;
                                fTemp_matrix_nchidof_x_nudof *= scale;
                                fKphiu_II3p_73 += fTemp_matrix_nchidof_x_nudof;

                                fTemp_matrix_nchidof_x_nudof.MultATBC(NCHI,II3p_74,fShapeDisplGrad);
                                scale =-1*Comp12*scale_const*Jp*fMaterial_Params[kTau]*trfA1
                                *fMaterial_Params[kSigma_const];
                                fTemp_matrix_nchidof_x_nudof *= scale;
                                fKphiu_II3p_74 += fTemp_matrix_nchidof_x_nudof;

                                fTemp_matrix_nchidof_x_nudof.MultATBC(NCHI,II3p_75,fShapeDisplGrad);
                                scale =-1*Comp12*scale_const*Jp*fMaterial_Params[kTau]*trfA1
                                *(fMaterial_Params[kEta]-fMaterial_Params[kTau])*dFYchidSIGMA_Scol1;
                                fTemp_matrix_nchidof_x_nudof *= scale;
                                fKphiu_II3p_75 += fTemp_matrix_nchidof_x_nudof;


                                fTemp_matrix_nchidof_x_nchidof.MultATBC(NCHI,II3p_76,NCHI);
                                scale =-1*Comp12*scale_const*Jp*fMaterial_Params[kTau]*trfA1
                                *(fMaterial_Params[kEta]-fMaterial_Params[kTau])*dFYchidSIGMA_Scol1;
                                fTemp_matrix_nchidof_x_nchidof *= scale;
                                fKphiphi_II3p_76 += fTemp_matrix_nchidof_x_nchidof;


                                fTemp_matrix_nchidof_x_nudof.MultATBC(NCHI,II3p_77,fShapeDisplGrad);
                                scale =-1*Comp12*scale_const*Jp*fMaterial_Params[kTau]*trfA1
                                *(fMaterial_Params[kNu]-fMaterial_Params[kSigma_const]);
                                fTemp_matrix_nchidof_x_nudof *= scale;
                                fKphiu_II3p_77 += fTemp_matrix_nchidof_x_nudof;


                                fTemp_matrix_nchidof_x_nchidof.MultATBC(NCHI,II3p_78,NCHI);
                                scale =-1*Comp12*scale_const*Jp*fMaterial_Params[kTau]*trfA1
                                *(fMaterial_Params[kNu]-fMaterial_Params[kSigma_const]);
                                fTemp_matrix_nchidof_x_nchidof *= scale;
                                fKphiphi_II3p_78 +=fTemp_matrix_nchidof_x_nchidof;


                                fTemp_matrix_nchidof_x_nudof.MultATBC(NCHI,II3p_79,fShapeDisplGrad);
                                scale =-1*Comp12*scale_const*Jp*fMaterial_Params[kTau]*trfA1
                                *(fMaterial_Params[kKappa]-fMaterial_Params[kSigma_const]);
                                fTemp_matrix_nchidof_x_nudof *= scale;
                                fKphiu_II3p_79 += fTemp_matrix_nchidof_x_nudof;

                                fTemp_matrix_nchidof_x_nchidof.MultATBC(NCHI,II3p_80,NCHI);
                                scale =-1*Comp12*scale_const*Jp*fMaterial_Params[kTau]*trfA1
                                *(fMaterial_Params[kKappa]-fMaterial_Params[kSigma_const]);
                                fTemp_matrix_nchidof_x_nchidof *= scale;
                                fKphiphi_II3p_80 += fTemp_matrix_nchidof_x_nchidof;

                //
                                fTemp_matrix_nchidof_x_nudof.MultATBC(NCHI,II3p_81,fShapeDisplGrad);
                                scale =-1*Comp12*scale_const*Jp*fMaterial_Params[kSigma_const]
                                *fMaterial_Params[kTau]*dFYchidSIGMA_Scol1;
                                fTemp_matrix_nchidof_x_nudof *= scale;
                                fKphiu_II3p_81 += fTemp_matrix_nchidof_x_nudof;

                                fTemp_matrix_nchidof_x_nudof.MultATBC(NCHI,II3p_82,fShapeDisplGrad);
                                scale =-1*Comp12*scale_const*Jp*fMaterial_Params[kSigma_const]
                                *fMaterial_Params[kSigma_const];
                                fTemp_matrix_nchidof_x_nudof *= scale;
                                fKphiu_II3p_82 += fTemp_matrix_nchidof_x_nudof;

                                fTemp_matrix_nchidof_x_nudof.MultATBC(NCHI,II3p_83,fShapeDisplGrad);
                                scale =-1*Comp12*scale_const*Jp*fMaterial_Params[kSigma_const]
                                *(fMaterial_Params[kEta]-fMaterial_Params[kTau])*dFYchidSIGMA_Scol1;
                                fTemp_matrix_nchidof_x_nudof *= scale;
                                fKphiu_II3p_83 += fTemp_matrix_nchidof_x_nudof;


                                fTemp_matrix_nchidof_x_nchidof.MultATBC(NCHI,II3p_84,NCHI);
                                scale =-1*Comp12*scale_const*Jp*fMaterial_Params[kSigma_const]
                                *(fMaterial_Params[kEta]-fMaterial_Params[kTau])*dFYchidSIGMA_Scol1;
                                fTemp_matrix_nchidof_x_nchidof *= scale;
                                fKphiphi_II3p_84 += fTemp_matrix_nchidof_x_nchidof;


                                fTemp_matrix_nchidof_x_nudof.MultATBC(NCHI,II3p_85,fShapeDisplGrad);
                                scale =-1*Comp12*scale_const*Jp*fMaterial_Params[kSigma_const]
                                *(fMaterial_Params[kNu]-fMaterial_Params[kSigma_const]);
                                fTemp_matrix_nchidof_x_nudof *= scale;
                                fKphiu_II3p_85 += fTemp_matrix_nchidof_x_nudof;


                                fTemp_matrix_nchidof_x_nchidof.MultATBC(NCHI,II3p_86,NCHI);
                                scale =-1*Comp12*scale_const*Jp*fMaterial_Params[kSigma_const]
                                *(fMaterial_Params[kNu]-fMaterial_Params[kSigma_const]);
                                fTemp_matrix_nchidof_x_nchidof *= scale;
                                fKphiphi_II3p_86 +=fTemp_matrix_nchidof_x_nchidof;


                                fTemp_matrix_nchidof_x_nudof.MultATBC(NCHI,II3p_87,fShapeDisplGrad);
                                scale =-1*Comp12*scale_const*Jp*fMaterial_Params[kSigma_const]
                                *(fMaterial_Params[kKappa]-fMaterial_Params[kSigma_const]);
                                fTemp_matrix_nchidof_x_nudof *= scale;
                                fKphiu_II3p_87 += fTemp_matrix_nchidof_x_nudof;

                                fTemp_matrix_nchidof_x_nchidof.MultATBC(NCHI,II3p_88,NCHI);
                                scale =-1*Comp12*scale_const*Jp*fMaterial_Params[kSigma_const]
                                *(fMaterial_Params[kKappa]-fMaterial_Params[kSigma_const]);
                                fTemp_matrix_nchidof_x_nchidof *= scale;
                                fKphiphi_II3p_88 += fTemp_matrix_nchidof_x_nchidof;

                //
                                fTemp_matrix_nchidof_x_nudof.MultATBC(NCHI,II3p_89,fShapeDisplGrad);
                                scale =-1*Comp12*scale_const*Jp*(fMaterial_Params[kEta]-fMaterial_Params[kTau])*trfN1
                                *fMaterial_Params[kTau]*dFYchidSIGMA_Scol1;
                                fTemp_matrix_nchidof_x_nudof *= scale;
                                fKphiu_II3p_89 += fTemp_matrix_nchidof_x_nudof;

                                fTemp_matrix_nchidof_x_nudof.MultATBC(NCHI,II3p_90,fShapeDisplGrad);
                                scale =-1*Comp12*scale_const*Jp*(fMaterial_Params[kEta]-fMaterial_Params[kTau])*trfN1
                                *fMaterial_Params[kSigma_const];
                                fTemp_matrix_nchidof_x_nudof *= scale;
                                fKphiu_II3p_90 += fTemp_matrix_nchidof_x_nudof;

                                fTemp_matrix_nchidof_x_nudof.MultATBC(NCHI,II3p_91,fShapeDisplGrad);
                                scale =-1*Comp12*scale_const*Jp*(fMaterial_Params[kEta]-fMaterial_Params[kTau])*trfN1
                                *(fMaterial_Params[kEta]-fMaterial_Params[kTau])*dFYchidSIGMA_Scol1;
                                fTemp_matrix_nchidof_x_nudof *= scale;
                                fKphiu_II3p_91 += fTemp_matrix_nchidof_x_nudof;


                                fTemp_matrix_nchidof_x_nchidof.MultATBC(NCHI,II3p_92,NCHI);
                                scale =-1*Comp12*scale_const*Jp*(fMaterial_Params[kEta]-fMaterial_Params[kTau])*trfN1
                                *(fMaterial_Params[kEta]-fMaterial_Params[kTau])*dFYchidSIGMA_Scol1;
                                fTemp_matrix_nchidof_x_nchidof *= scale;
                                fKphiphi_II3p_92 += fTemp_matrix_nchidof_x_nchidof;


                                fTemp_matrix_nchidof_x_nudof.MultATBC(NCHI,II3p_93,fShapeDisplGrad);
                                scale =-1*Comp12*scale_const*Jp*(fMaterial_Params[kEta]-fMaterial_Params[kTau])*trfN1
                                *(fMaterial_Params[kNu]-fMaterial_Params[kSigma_const]);
                                fTemp_matrix_nchidof_x_nudof *= scale;
                                fKphiu_II3p_93 += fTemp_matrix_nchidof_x_nudof;


                                fTemp_matrix_nchidof_x_nchidof.MultATBC(NCHI,II3p_94,NCHI);
                                scale =-1*Comp12*scale_const*Jp*(fMaterial_Params[kEta]-fMaterial_Params[kTau])*trfN1
                                *(fMaterial_Params[kNu]-fMaterial_Params[kSigma_const]);
                                fTemp_matrix_nchidof_x_nchidof *= scale;
                                fKphiphi_II3p_94 +=fTemp_matrix_nchidof_x_nchidof;


                                fTemp_matrix_nchidof_x_nudof.MultATBC(NCHI,II3p_95,fShapeDisplGrad);
                                scale =-1*Comp12*scale_const*Jp*(fMaterial_Params[kEta]-fMaterial_Params[kTau])*trfN1
                                *(fMaterial_Params[kKappa]-fMaterial_Params[kSigma_const]);
                                fTemp_matrix_nchidof_x_nudof *= scale;
                                fKphiu_II3p_95 += fTemp_matrix_nchidof_x_nudof;

                                fTemp_matrix_nchidof_x_nchidof.MultATBC(NCHI,II3p_96,NCHI);
                                scale =-1*Comp12*scale_const*Jp*(fMaterial_Params[kEta]-fMaterial_Params[kTau])*trfN1
                                *(fMaterial_Params[kKappa]-fMaterial_Params[kSigma_const]);
                                fTemp_matrix_nchidof_x_nchidof *= scale;
                                fKphiphi_II3p_96 += fTemp_matrix_nchidof_x_nchidof;

                                //
                                fTemp_matrix_nchidof_x_nudof.MultATBC(NCHI,II3p_97,fShapeDisplGrad);
                                scale =-1*Comp12*scale_const*Jp*(fMaterial_Params[kNu]-fMaterial_Params[kSigma_const])
                                *fMaterial_Params[kTau]*dFYchidSIGMA_Scol1;
                                fTemp_matrix_nchidof_x_nudof *= scale;
                                fKphiu_II3p_97 += fTemp_matrix_nchidof_x_nudof;

                                fTemp_matrix_nchidof_x_nudof.MultATBC(NCHI,II3p_98,fShapeDisplGrad);
                                scale =-1*Comp12*scale_const*Jp*(fMaterial_Params[kNu]-fMaterial_Params[kSigma_const])
                                *fMaterial_Params[kSigma_const];
                                fTemp_matrix_nchidof_x_nudof *= scale;
                                fKphiu_II3p_98 += fTemp_matrix_nchidof_x_nudof;

                                fTemp_matrix_nchidof_x_nudof.MultATBC(NCHI,II3p_99,fShapeDisplGrad);
                                scale =-1*Comp12*scale_const*Jp*(fMaterial_Params[kNu]-fMaterial_Params[kSigma_const])
                                *(fMaterial_Params[kEta]-fMaterial_Params[kTau])*dFYchidSIGMA_Scol1;
                                fTemp_matrix_nchidof_x_nudof *= scale;
                                fKphiu_II3p_99 += fTemp_matrix_nchidof_x_nudof;


                                fTemp_matrix_nchidof_x_nchidof.MultATBC(NCHI,II3p_100,NCHI);
                                scale =-1*Comp12*scale_const*Jp*(fMaterial_Params[kNu]-fMaterial_Params[kSigma_const])
                                *(fMaterial_Params[kEta]-fMaterial_Params[kTau])*dFYchidSIGMA_Scol1;
                                fTemp_matrix_nchidof_x_nchidof *= scale;
                                fKphiphi_II3p_100 += fTemp_matrix_nchidof_x_nchidof;


                                fTemp_matrix_nchidof_x_nudof.MultATBC(NCHI,II3p_101,fShapeDisplGrad);
                                scale =-1*Comp12*scale_const*Jp*(fMaterial_Params[kNu]-fMaterial_Params[kSigma_const])
                                *(fMaterial_Params[kNu]-fMaterial_Params[kSigma_const]);
                                fTemp_matrix_nchidof_x_nudof *= scale;
                                fKphiu_II3p_101 += fTemp_matrix_nchidof_x_nudof;


                                fTemp_matrix_nchidof_x_nchidof.MultATBC(NCHI,II3p_102,NCHI);
                                scale =-1*Comp12*scale_const*Jp*(fMaterial_Params[kNu]-fMaterial_Params[kSigma_const])
                                *(fMaterial_Params[kNu]-fMaterial_Params[kSigma_const]);
                                fTemp_matrix_nchidof_x_nchidof *= scale;
                                fKphiphi_II3p_102 +=fTemp_matrix_nchidof_x_nchidof;


                                fTemp_matrix_nchidof_x_nudof.MultATBC(NCHI,II3p_103,fShapeDisplGrad);
                                scale =-1*Comp12*scale_const*Jp*(fMaterial_Params[kNu]-fMaterial_Params[kSigma_const])
                                *(fMaterial_Params[kKappa]-fMaterial_Params[kSigma_const]);
                                fTemp_matrix_nchidof_x_nudof *= scale;
                                fKphiu_II3p_103 += fTemp_matrix_nchidof_x_nudof;

                                fTemp_matrix_nchidof_x_nchidof.MultATBC(NCHI,II3p_104,NCHI);
                                scale =-1*Comp12*scale_const*Jp*(fMaterial_Params[kNu]-fMaterial_Params[kSigma_const])
                                *(fMaterial_Params[kKappa]-fMaterial_Params[kSigma_const]);
                                fTemp_matrix_nchidof_x_nchidof *= scale;
                                fKphiphi_II3p_104 += fTemp_matrix_nchidof_x_nchidof;

                                //
                                fTemp_matrix_nchidof_x_nudof.MultATBC(NCHI,II3p_105,fShapeDisplGrad);
                                scale =-1*Comp12*scale_const*Jp*(fMaterial_Params[kKappa]-fMaterial_Params[kSigma_const])
                                *fMaterial_Params[kTau]*dFYchidSIGMA_Scol1;
                                fTemp_matrix_nchidof_x_nudof *= scale;
                                fKphiu_II3p_105 += fTemp_matrix_nchidof_x_nudof;

                                fTemp_matrix_nchidof_x_nudof.MultATBC(NCHI,II3p_106,fShapeDisplGrad);
                                scale =-1*Comp12*scale_const*Jp*(fMaterial_Params[kKappa]-fMaterial_Params[kSigma_const])
                                *fMaterial_Params[kSigma_const];
                                fTemp_matrix_nchidof_x_nudof *= scale;
                                fKphiu_II3p_106 += fTemp_matrix_nchidof_x_nudof;

                                fTemp_matrix_nchidof_x_nudof.MultATBC(NCHI,II3p_107,fShapeDisplGrad);
                                scale =-1*Comp12*scale_const*Jp*(fMaterial_Params[kKappa]-fMaterial_Params[kSigma_const])
                                *(fMaterial_Params[kEta]-fMaterial_Params[kTau])*dFYchidSIGMA_Scol1;
                                fTemp_matrix_nchidof_x_nudof *= scale;
                                fKphiu_II3p_107 += fTemp_matrix_nchidof_x_nudof;


                                fTemp_matrix_nchidof_x_nchidof.MultATBC(NCHI,II3p_108,NCHI);
                                scale =-1*Comp12*scale_const*Jp*(fMaterial_Params[kKappa]-fMaterial_Params[kSigma_const])
                                *(fMaterial_Params[kEta]-fMaterial_Params[kTau])*dFYchidSIGMA_Scol1;
                                fTemp_matrix_nchidof_x_nchidof *= scale;
                                fKphiphi_II3p_108 += fTemp_matrix_nchidof_x_nchidof;


                                fTemp_matrix_nchidof_x_nudof.MultATBC(NCHI,II3p_109,fShapeDisplGrad);
                                scale =-1*Comp12*scale_const*Jp*(fMaterial_Params[kKappa]-fMaterial_Params[kSigma_const])
                                *(fMaterial_Params[kNu]-fMaterial_Params[kSigma_const]);
                                fTemp_matrix_nchidof_x_nudof *= scale;
                                fKphiu_II3p_109 += fTemp_matrix_nchidof_x_nudof;


                                fTemp_matrix_nchidof_x_nchidof.MultATBC(NCHI,II3p_110,NCHI);
                                scale =-1*Comp12*scale_const*Jp*(fMaterial_Params[kKappa]-fMaterial_Params[kSigma_const])
                                *(fMaterial_Params[kNu]-fMaterial_Params[kSigma_const]);
                                fTemp_matrix_nchidof_x_nchidof *= scale;
                                fKphiphi_II3p_110 +=fTemp_matrix_nchidof_x_nchidof;


                                fTemp_matrix_nchidof_x_nudof.MultATBC(NCHI,II3p_111,fShapeDisplGrad);
                                scale =-1*Comp12*scale_const*Jp*(fMaterial_Params[kKappa]-fMaterial_Params[kSigma_const])
                                *(fMaterial_Params[kKappa]-fMaterial_Params[kSigma_const]);
                                fTemp_matrix_nchidof_x_nudof *= scale;
                                fKphiu_II3p_111 += fTemp_matrix_nchidof_x_nudof;

                                fTemp_matrix_nchidof_x_nchidof.MultATBC(NCHI,II3p_112,NCHI);
                                scale =-1*Comp12*scale_const*Jp*(fMaterial_Params[kKappa]-fMaterial_Params[kSigma_const])
                                *(fMaterial_Params[kKappa]-fMaterial_Params[kSigma_const]);
                                fTemp_matrix_nchidof_x_nchidof *= scale;
                                fKphiphi_II3p_112 += fTemp_matrix_nchidof_x_nchidof;

                                //From DelGammachi
                                fTemp_matrix_nchidof_x_nudof.MultATBC(NCHI,II3p_113,fShapeDisplGrad);
                                scale =-1*Comp21*scale_const*Jp*(fMaterial_Params[kEta]-fMaterial_Params[kTau])*trfD1
                                *(fMaterial_Params[kLambda]+fMaterial_Params[kTau])*dFYdScol1;
                                fTemp_matrix_nchidof_x_nudof *= scale;
                                fKphiu_II3p_113 += fTemp_matrix_nchidof_x_nudof;

                                fTemp_matrix_nchidof_x_nudof.MultATBC(NCHI,II3p_114,fShapeDisplGrad);
                                scale =-1*Comp21*scale_const*Jp*(fMaterial_Params[kEta]-fMaterial_Params[kTau])*trfD1
                                *(fMaterial_Params[kMu]+fMaterial_Params[kSigma_const]);
                                fTemp_matrix_nchidof_x_nudof *= scale;
                                fKphiu_II3p_114 += fTemp_matrix_nchidof_x_nudof;

                                fTemp_matrix_nchidof_x_nudof.MultATBC(NCHI,II3p_115,fShapeDisplGrad);
                                scale =-1*Comp21*scale_const*Jp*(fMaterial_Params[kEta]-fMaterial_Params[kTau])*trfD1
                                *fMaterial_Params[kEta]*dFYdScol1;
                                fTemp_matrix_nchidof_x_nudof *= scale;
                                fKphiu_II3p_115 += fTemp_matrix_nchidof_x_nudof;

                                fTemp_matrix_nchidof_x_nchidof.MultATBC(NCHI,II3p_116,NCHI);
                                scale =-1*Comp21*scale_const*Jp*(fMaterial_Params[kEta]-fMaterial_Params[kTau])*trfD1
                                *fMaterial_Params[kEta]*dFYdScol1;
                                fTemp_matrix_nchidof_x_nchidof *= scale;
                                fKphiphi_II3p_116 += fTemp_matrix_nchidof_x_nchidof;

                                fTemp_matrix_nchidof_x_nudof.MultATBC(NCHI,II3p_117,fShapeDisplGrad);
                                scale =-1*Comp21*scale_const*Jp*(fMaterial_Params[kEta]-fMaterial_Params[kTau])*trfD1
                                *fMaterial_Params[kKappa];
                                fTemp_matrix_nchidof_x_nudof *= scale;
                                fKphiu_II3p_117 += fTemp_matrix_nchidof_x_nudof;

                                fTemp_matrix_nchidof_x_nchidof.MultATBC(NCHI,II3p_118,NCHI);
                                scale =-1*Comp21*scale_const*Jp*(fMaterial_Params[kEta]-fMaterial_Params[kTau])*trfD1
                                *fMaterial_Params[kKappa];
                                fTemp_matrix_nchidof_x_nchidof *= scale;
                                fKphiphi_II3p_118 += fTemp_matrix_nchidof_x_nchidof;


                                fTemp_matrix_nchidof_x_nudof.MultATBC(NCHI,II3p_119,fShapeDisplGrad);
                                scale =-1*Comp21*scale_const*Jp*(fMaterial_Params[kEta]-fMaterial_Params[kTau])*trfD1
                                *fMaterial_Params[kNu];
                                fTemp_matrix_nchidof_x_nudof *= scale;
                                fKphiu_II3p_119 += fTemp_matrix_nchidof_x_nudof;

                                fTemp_matrix_nchidof_x_nchidof.MultATBC(NCHI,II3p_120,NCHI);
                                scale =-1*Comp21*scale_const*Jp*(fMaterial_Params[kEta]-fMaterial_Params[kTau])*trfD1
                                *fMaterial_Params[kNu];
                                fTemp_matrix_nchidof_x_nchidof *= scale;
                                fKphiphi_II3p_120 += fTemp_matrix_nchidof_x_nchidof;

                                //

                                fTemp_matrix_nchidof_x_nudof.MultATBC(NCHI,II3p_121,fShapeDisplGrad);
                                scale =-1*Comp21*scale_const*Jp*(fMaterial_Params[kNu]-fMaterial_Params[kSigma_const])
                                *(fMaterial_Params[kLambda]+fMaterial_Params[kTau])*dFYdScol1;
                                fTemp_matrix_nchidof_x_nudof *= scale;
                                fKphiu_II3p_121 += fTemp_matrix_nchidof_x_nudof;

                                fTemp_matrix_nchidof_x_nudof.MultATBC(NCHI,II3p_122,fShapeDisplGrad);
                                scale =-1*Comp21*scale_const*Jp*(fMaterial_Params[kNu]-fMaterial_Params[kSigma_const])
                                *(fMaterial_Params[kMu]+fMaterial_Params[kSigma_const]);
                                fTemp_matrix_nchidof_x_nudof *= scale;
                                fKphiu_II3p_122 += fTemp_matrix_nchidof_x_nudof;

                                fTemp_matrix_nchidof_x_nudof.MultATBC(NCHI,II3p_123,fShapeDisplGrad);
                                scale =-1*Comp21*scale_const*Jp*(fMaterial_Params[kNu]-fMaterial_Params[kSigma_const])
                                *fMaterial_Params[kEta]*dFYdScol1;
                                fTemp_matrix_nchidof_x_nudof *= scale;
                                fKphiu_II3p_123 += fTemp_matrix_nchidof_x_nudof;

                                fTemp_matrix_nchidof_x_nchidof.MultATBC(NCHI,II3p_124,NCHI);
                                scale =-1*Comp21*scale_const*Jp*(fMaterial_Params[kNu]-fMaterial_Params[kSigma_const])
                                *fMaterial_Params[kEta]*dFYdScol1;
                                fTemp_matrix_nchidof_x_nchidof *= scale;
                                fKphiphi_II3p_124 += fTemp_matrix_nchidof_x_nchidof;

                                fTemp_matrix_nchidof_x_nudof.MultATBC(NCHI,II3p_125,fShapeDisplGrad);
                                scale =-1*Comp21*scale_const*Jp*(fMaterial_Params[kNu]-fMaterial_Params[kSigma_const])
                                *fMaterial_Params[kKappa];
                                fTemp_matrix_nchidof_x_nudof *= scale;
                                fKphiu_II3p_125 += fTemp_matrix_nchidof_x_nudof;

                                fTemp_matrix_nchidof_x_nchidof.MultATBC(NCHI,II3p_126,NCHI);
                                scale =-1*Comp21*scale_const*Jp*(fMaterial_Params[kNu]-fMaterial_Params[kSigma_const])
                                *fMaterial_Params[kKappa];
                                fTemp_matrix_nchidof_x_nchidof *= scale;
                                fKphiphi_II3p_126 += fTemp_matrix_nchidof_x_nchidof;


                                fTemp_matrix_nchidof_x_nudof.MultATBC(NCHI,II3p_127,fShapeDisplGrad);
                                scale =-1*Comp21*scale_const*Jp*(fMaterial_Params[kNu]-fMaterial_Params[kSigma_const])
                                *fMaterial_Params[kNu];
                                fTemp_matrix_nchidof_x_nudof *= scale;
                                fKphiu_II3p_127 += fTemp_matrix_nchidof_x_nudof;

                                fTemp_matrix_nchidof_x_nchidof.MultATBC(NCHI,II3p_128,NCHI);
                                scale =-1*Comp21*scale_const*Jp*(fMaterial_Params[kNu]-fMaterial_Params[kSigma_const])
                                *fMaterial_Params[kNu];
                                fTemp_matrix_nchidof_x_nchidof *= scale;
                                fKphiphi_II3p_128 += fTemp_matrix_nchidof_x_nchidof;


                                //
                                fTemp_matrix_nchidof_x_nudof.MultATBC(NCHI,II3p_129,fShapeDisplGrad);
                                scale =-1*Comp21*scale_const*Jp*(fMaterial_Params[kKappa]-fMaterial_Params[kSigma_const])
                                *(fMaterial_Params[kLambda]+fMaterial_Params[kTau])*dFYdScol1;
                                fTemp_matrix_nchidof_x_nudof *= scale;
                                fKphiu_II3p_129 += fTemp_matrix_nchidof_x_nudof;

                                fTemp_matrix_nchidof_x_nudof.MultATBC(NCHI,II3p_130,fShapeDisplGrad);
                                scale =-1*Comp21*scale_const*Jp*(fMaterial_Params[kKappa]-fMaterial_Params[kSigma_const])
                                *(fMaterial_Params[kMu]+fMaterial_Params[kSigma_const]);
                                fTemp_matrix_nchidof_x_nudof *= scale;
                                fKphiu_II3p_130 += fTemp_matrix_nchidof_x_nudof;

                                fTemp_matrix_nchidof_x_nudof.MultATBC(NCHI,II3p_131,fShapeDisplGrad);
                                scale =-1*Comp21*scale_const*Jp*(fMaterial_Params[kKappa]-fMaterial_Params[kSigma_const])
                                *fMaterial_Params[kEta]*dFYdScol1;
                                fTemp_matrix_nchidof_x_nudof *= scale;
                                fKphiu_II3p_131 += fTemp_matrix_nchidof_x_nudof;

                                fTemp_matrix_nchidof_x_nchidof.MultATBC(NCHI,II3p_132,NCHI);
                                scale =-1*Comp21*scale_const*Jp*(fMaterial_Params[kKappa]-fMaterial_Params[kSigma_const])
                                *fMaterial_Params[kEta]*dFYdScol1;
                                fTemp_matrix_nchidof_x_nchidof *= scale;
                                fKphiphi_II3p_132 += fTemp_matrix_nchidof_x_nchidof;

                                fTemp_matrix_nchidof_x_nudof.MultATBC(NCHI,II3p_133,fShapeDisplGrad);
                                scale =-1*Comp21*scale_const*Jp*(fMaterial_Params[kKappa]-fMaterial_Params[kSigma_const])
                                *fMaterial_Params[kKappa];
                                fTemp_matrix_nchidof_x_nudof *= scale;
                                fKphiu_II3p_133 += fTemp_matrix_nchidof_x_nudof;

                                fTemp_matrix_nchidof_x_nchidof.MultATBC(NCHI,II3p_134,NCHI);
                                scale =-1*Comp21*scale_const*Jp*(fMaterial_Params[kKappa]-fMaterial_Params[kSigma_const])
                                *fMaterial_Params[kKappa];
                                fTemp_matrix_nchidof_x_nchidof *= scale;
                                fKphiphi_II3p_134 += fTemp_matrix_nchidof_x_nchidof;


                                fTemp_matrix_nchidof_x_nudof.MultATBC(NCHI,II3p_135,fShapeDisplGrad);
                                scale =-1*Comp21*scale_const*Jp*(fMaterial_Params[kKappa]-fMaterial_Params[kSigma_const])
                                *fMaterial_Params[kNu];
                                fTemp_matrix_nchidof_x_nudof *= scale;
                                fKphiu_II3p_135 += fTemp_matrix_nchidof_x_nudof;

                                fTemp_matrix_nchidof_x_nchidof.MultATBC(NCHI,II3p_136,NCHI);
                                scale =-1*Comp21*scale_const*Jp*(fMaterial_Params[kKappa]-fMaterial_Params[kSigma_const])
                                *fMaterial_Params[kNu];
                                fTemp_matrix_nchidof_x_nchidof *= scale;
                                fKphiphi_II3p_136 += fTemp_matrix_nchidof_x_nchidof;



                                }



                                /*Jp eta(ml) Fe(m,Mbar) (S(Mbar,Lbar)-SIGMA(Mbar,Lbar))delta(Fe(l,Lbar)*/

                                fTemp_matrix_nchidof_x_nudof.MultATBC(NCHI,II4e_1,fShapeDisplGrad);
                                scale =scale_const*Jp;
                                fTemp_matrix_nchidof_x_nudof *= scale;
                                fKphiu_II4e_1 += fTemp_matrix_nchidof_x_nudof;

                                if(PlasticityCondition==1 || PlasticityCondition==3 || PlasticityCondition==4)//if(MacroPlasticityCondition==1)
                                {

                                fTemp_matrix_nchidof_x_nudof.MultATBC(NCHI,II4p_2,fShapeDisplGrad);
                                scale =-1*(Comp11)*dFYdScol1*scale_const*Jp*(fMaterial_Params[kLambda]+fMaterial_Params[kTau]);
                                fTemp_matrix_nchidof_x_nudof *= scale;
                                fKphiu_II4p_2 += fTemp_matrix_nchidof_x_nudof;

                                fTemp_matrix_nchidof_x_nudof.MultATBC(NCHI,II4p_3,fShapeDisplGrad);
                                scale =-1*(Comp11)*scale_const*Jp*(fMaterial_Params[kMu]+fMaterial_Params[kSigma_const]);
                                fTemp_matrix_nchidof_x_nudof *= scale;
                                fKphiu_II4p_3 += fTemp_matrix_nchidof_x_nudof;


                                fTemp_matrix_nchidof_x_nudof.MultATBC(NCHI,II4p_4,fShapeDisplGrad);
                                scale =-1*(Comp11)*dFYdScol1*scale_const*Jp*fMaterial_Params[kEta];
                                fTemp_matrix_nchidof_x_nudof *= scale;
                                fKphiu_II4p_4 += fTemp_matrix_nchidof_x_nudof;


                                fTemp_matrix_nchidof_x_nudof.MultATBC(NCHI,II4p_5,fShapeDisplGrad);
                                scale =-1*scale_const*(Comp11)*Jp*fMaterial_Params[kKappa];
                                fTemp_matrix_nchidof_x_nudof *= scale;
                                fKphiu_II4p_5 += fTemp_matrix_nchidof_x_nudof;

                                fTemp_matrix_nchidof_x_nudof.MultATBC(NCHI,II4p_6,fShapeDisplGrad);
                                scale =-1*(Comp11)*scale_const*Jp*fMaterial_Params[kNu];
                                fTemp_matrix_nchidof_x_nudof *= scale;
                                fKphiu_II4p_6 +=fTemp_matrix_nchidof_x_nudof;

                                fTemp_matrix_nchidof_x_nchidof.MultATBC(NCHI,II4p_7,NCHI);
                                scale =-1*(Comp11)*dFYdScol1*scale_const*Jp*fMaterial_Params[kEta];
                                fTemp_matrix_nchidof_x_nchidof *= scale;
                                fKphiphi_II4p_7 += fTemp_matrix_nchidof_x_nchidof;

                                fTemp_matrix_nchidof_x_nchidof.MultATBC(NCHI,II4p_8,NCHI);
                                scale =-1*(Comp11)*Jp*fMaterial_Params[kKappa]*scale_const;
                                fTemp_matrix_nchidof_x_nchidof *= scale;
                                fKphiphi_II4p_8 += fTemp_matrix_nchidof_x_nchidof;

                                fTemp_matrix_nchidof_x_nchidof.MultATBC(NCHI,II4p_9,NCHI);
                                scale =-1*(Comp11)*scale_const*Jp*fMaterial_Params[kNu];
                                fTemp_matrix_nchidof_x_nchidof *= scale;
                                fKphiphi_II4p_9 += fTemp_matrix_nchidof_x_nchidof;
                                }

                                if(PlasticityCondition==3 || PlasticityCondition==4)
                                {


                                fTemp_matrix_nchidof_x_nudof.MultATBC(NCHI,II4p_10,fShapeDisplGrad);
                                scale =-1*Comp12*scale_const*Jp*fMaterial_Params[kTau]*dFYchidSIGMA_Scol1;
                                fTemp_matrix_nchidof_x_nudof *= scale;
                                fKphiu_II4p_10 += fTemp_matrix_nchidof_x_nudof;

                                fTemp_matrix_nchidof_x_nudof.MultATBC(NCHI,II4p_11,fShapeDisplGrad);
                                scale =-1*Comp12*scale_const*Jp*fMaterial_Params[kSigma_const];
                                fTemp_matrix_nchidof_x_nudof *= scale;
                                fKphiu_II4p_11 += fTemp_matrix_nchidof_x_nudof;

                                fTemp_matrix_nchidof_x_nudof.MultATBC(NCHI,II4p_12,fShapeDisplGrad);
                                scale =-1*Comp12*scale_const*Jp*(fMaterial_Params[kEta]-fMaterial_Params[kTau])*dFYchidSIGMA_Scol1;
                                fTemp_matrix_nchidof_x_nudof *= scale;
                                fKphiu_II4p_12 += fTemp_matrix_nchidof_x_nudof;


                                fTemp_matrix_nchidof_x_nchidof.MultATBC(NCHI,II4p_13,NCHI);
                                scale =-1*Comp12*scale_const*Jp*(fMaterial_Params[kEta]-fMaterial_Params[kTau])*dFYchidSIGMA_Scol1;
                                fTemp_matrix_nchidof_x_nchidof *= scale;
                                fKphiphi_II4p_13 += fTemp_matrix_nchidof_x_nchidof;


                                fTemp_matrix_nchidof_x_nudof.MultATBC(NCHI,II4p_14,fShapeDisplGrad);
                                scale =-1*Comp12*scale_const*Jp*(fMaterial_Params[kNu]-fMaterial_Params[kSigma_const]);
                                fTemp_matrix_nchidof_x_nudof *= scale;
                                fKphiu_II4p_14 += fTemp_matrix_nchidof_x_nudof;


                                fTemp_matrix_nchidof_x_nchidof.MultATBC(NCHI,II4p_15,NCHI);
                                scale =-1*Comp12*scale_const*Jp*(fMaterial_Params[kNu]-fMaterial_Params[kSigma_const]);
                                fTemp_matrix_nchidof_x_nchidof *= scale;
                                fKphiphi_II4p_15 +=fTemp_matrix_nchidof_x_nchidof;


                                fTemp_matrix_nchidof_x_nudof.MultATBC(NCHI,II4p_16,fShapeDisplGrad);
                                scale =-1*Comp12*scale_const*Jp*(fMaterial_Params[kKappa]-fMaterial_Params[kSigma_const]);
                                fTemp_matrix_nchidof_x_nudof *= scale;
                                fKphiu_II4p_16 += fTemp_matrix_nchidof_x_nudof;

                                fTemp_matrix_nchidof_x_nchidof.MultATBC(NCHI,II4p_17,NCHI);
                                scale =-1*Comp12*scale_const*Jp*(fMaterial_Params[kKappa]-fMaterial_Params[kSigma_const]);
                                fTemp_matrix_nchidof_x_nchidof *= scale;
                                fKphiphi_II4p_17 += fTemp_matrix_nchidof_x_nchidof;

                                }


                                /////////////////////////////////////////////////////////////////////////////////////////////////////
                                /* IMPLEMENTATION OF THE TERMS COMING FROM  HIGHER ORDER COUPLE STRESS  TO CONSISTENT TANGENT */
                                /////////////////////////////////////////////////////////////////////////////////////////////////////

                                /* Terms coming from variation of deltaJp Eta(m,l,K)F(k,K) Fe(k,Kbar)Fe(l,Lbar)Me(Kbar,Lbar,Mbar)Xe(m,Mbar) */


                                if(PlasticityCondition==1 || PlasticityCondition==3 || PlasticityCondition==4)//if(MacroPlasticityCondition==1)
                                  {



                                  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II5Jp_1,fShapeDisplGrad);
                                  scale =(Comp11)*Trace_const*dFYdScol1*scale_const*Jp*(fMaterial_Params[kLambda]+fMaterial_Params[kTau]);
                                  fTemp_matrix_nchidof_x_nudof *= scale;
                                  fKMphiu_II5Jp_1 += fTemp_matrix_nchidof_x_nudof;


                                  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II5Jp_2,fShapeDisplGrad);
                                  scale =(Comp11)*Trace_const*scale_const*Jp*(fMaterial_Params[kMu]+fMaterial_Params[kSigma_const]);
                                  fTemp_matrix_nchidof_x_nudof *= scale;
                                  fKMphiu_II5Jp_2 += fTemp_matrix_nchidof_x_nudof;


                                  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II5Jp_3,fShapeDisplGrad);
                                  scale =(Comp11)*Trace_const*dFYdScol1*scale_const*Jp*fMaterial_Params[kEta];
                                  fTemp_matrix_nchidof_x_nudof *= scale;
                                  fKMphiu_II5Jp_3 += fTemp_matrix_nchidof_x_nudof;


                                  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II5Jp_4,fShapeDisplGrad);
                                  scale =(Comp11)*scale_const*Trace_const*Jp*fMaterial_Params[kKappa];
                                  fTemp_matrix_nchidof_x_nudof *= scale;
                                  fKMphiu_II5Jp_4 += fTemp_matrix_nchidof_x_nudof;


                                  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II5Jp_5,fShapeDisplGrad);
                                  scale =(Comp11)*Trace_const*scale_const*Jp*fMaterial_Params[kNu];
                                  fTemp_matrix_nchidof_x_nudof *= scale;
                                  fKMphiu_II5Jp_5 +=fTemp_matrix_nchidof_x_nudof;


                                  fTemp_matrix_nchidof_x_nchidof.MultATBC(GRAD_NCHI,II5Jp_6,NCHI);
                                  scale =(Comp11)*Trace_const*dFYdScol1*scale_const*Jp*fMaterial_Params[kEta];
                                  fTemp_matrix_nchidof_x_nchidof *= scale;
                                  fKMphiphi_II5Jp_6 += fTemp_matrix_nchidof_x_nchidof;



                                  fTemp_matrix_nchidof_x_nchidof.MultATBC(GRAD_NCHI,II5Jp_7,NCHI);
                                  scale =(Comp11)*Trace_const*Jp*fMaterial_Params[kKappa]*scale_const;
                                  fTemp_matrix_nchidof_x_nchidof *= scale;
                                  fKMphiphi_II5Jp_7 += fTemp_matrix_nchidof_x_nchidof;


                                  fTemp_matrix_nchidof_x_nchidof.MultATBC(GRAD_NCHI,II5Jp_8,NCHI);
                                  scale =(Comp11)*Trace_const*scale_const*Jp*fMaterial_Params[kNu];
                                  fTemp_matrix_nchidof_x_nchidof *= scale;
                                  fKMphiphi_II5Jp_8 += fTemp_matrix_nchidof_x_nchidof;


                                  }

                                  if(PlasticityCondition==3 || PlasticityCondition==4)
                                  {



                                  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II5Jp_9,fShapeDisplGrad);
                                  scale =Comp12*Trace_const*scale_const*Jp*fMaterial_Params[kTau]*dFYchidSIGMA_Scol1;
                                  fTemp_matrix_nchidof_x_nudof *= scale;
                                  fKMphiu_II5Jp_9 += fTemp_matrix_nchidof_x_nudof;


                                  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II5Jp_10,fShapeDisplGrad);
                                  scale =Comp12*Trace_const*scale_const*Jp*fMaterial_Params[kSigma_const];
                                  fTemp_matrix_nchidof_x_nudof *= scale;
                                  fKMphiu_II5Jp_10 += fTemp_matrix_nchidof_x_nudof;


                                  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II5Jp_11,fShapeDisplGrad);
                                  scale =Comp12*Trace_const*scale_const*Jp*(fMaterial_Params[kEta]-fMaterial_Params[kTau])*dFYchidSIGMA_Scol1;
                                  fTemp_matrix_nchidof_x_nudof *= scale;
                                  fKMphiu_II5Jp_11 += fTemp_matrix_nchidof_x_nudof;



                                  fTemp_matrix_nchidof_x_nchidof.MultATBC(GRAD_NCHI,II5Jp_12,NCHI);
                                  scale =Comp12*Trace_const*scale_const*Jp*(fMaterial_Params[kEta]-fMaterial_Params[kTau])*dFYchidSIGMA_Scol1;
                                  fTemp_matrix_nchidof_x_nchidof *= scale;
                                  fKMphiphi_II5Jp_12 += fTemp_matrix_nchidof_x_nchidof;




                                  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II5Jp_13,fShapeDisplGrad);
                                  scale =Comp12*Trace_const*scale_const*Jp*(fMaterial_Params[kNu]-fMaterial_Params[kSigma_const]);
                                  fTemp_matrix_nchidof_x_nudof *= scale;
                                  fKMphiu_II5Jp_13 += fTemp_matrix_nchidof_x_nudof;


                                  fTemp_matrix_nchidof_x_nchidof.MultATBC(GRAD_NCHI,II5Jp_14,NCHI);
                                  scale =Comp12*Trace_const*scale_const*Jp*(fMaterial_Params[kNu]-fMaterial_Params[kSigma_const]);
                                  fTemp_matrix_nchidof_x_nchidof *= scale;
                                  fKMphiphi_II5Jp_14 +=fTemp_matrix_nchidof_x_nchidof;


                                  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II5Jp_15,fShapeDisplGrad);
                                  scale =Comp12*Trace_const*scale_const*Jp*(fMaterial_Params[kKappa]-fMaterial_Params[kSigma_const]);
                                  fTemp_matrix_nchidof_x_nudof *= scale;
                                  fKMphiu_II5Jp_15 += fTemp_matrix_nchidof_x_nudof;


                                  fTemp_matrix_nchidof_x_nchidof.MultATBC(GRAD_NCHI,II5Jp_16,NCHI);
                                  scale =Comp12*Trace_const*scale_const*Jp*(fMaterial_Params[kKappa]-fMaterial_Params[kSigma_const]);
                                  fTemp_matrix_nchidof_x_nchidof *= scale;
                                  fKMphiphi_II5Jp_16 += fTemp_matrix_nchidof_x_nchidof;


                                  }

                                  /* Terms coming from variation of Jp Eta(m,l,K) deltaFinv(K,k) Fe(k,Kbar)Fe(l,Lbar)Me(Kbar,Lbar,Mbar)Xe(m,Mbar) */

                                  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II6e_1,fShapeDisplGrad);
                                  scale =-1*scale_const*Jp;
                                  fTemp_matrix_nchidof_x_nudof *= scale;
                                  fKMphiu_II6e_1 += fTemp_matrix_nchidof_x_nudof;

                                  /* Terms coming from variation of Jp Eta(m,l,K) F(k,K) deltaFe(k,Kbar)Fe(l,Lbar)Me(Kbar,Lbar,Mbar)Xe(m,Mbar) */

                                  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II7e_1,fShapeDisplGrad);
                                  scale =scale_const*Jp;
                                  fTemp_matrix_nchidof_x_nudof *= scale;
                                  fKMphiu_II7e_1 += fTemp_matrix_nchidof_x_nudof;

                                  if(PlasticityCondition==1 || PlasticityCondition==3 || PlasticityCondition==4)//if(MacroPlasticityCondition==1)
                                    {



                                    fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II7p_1,fShapeDisplGrad);
                                    scale =-1*(Comp11)*dFYdScol1*scale_const*Jp*(fMaterial_Params[kLambda]+fMaterial_Params[kTau]);
                                    fTemp_matrix_nchidof_x_nudof *= scale;
                                    fKMphiu_II7p_1 += fTemp_matrix_nchidof_x_nudof;

                                    fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II7p_2,fShapeDisplGrad);
                                    scale =-1*(Comp11)*scale_const*Jp*(fMaterial_Params[kMu]+fMaterial_Params[kSigma_const]);
                                    fTemp_matrix_nchidof_x_nudof *= scale;
                                    fKMphiu_II7p_2 += fTemp_matrix_nchidof_x_nudof;


                                    fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II7p_3,fShapeDisplGrad);
                                    scale =-1*(Comp11)*dFYdScol1*scale_const*Jp*fMaterial_Params[kEta];
                                    fTemp_matrix_nchidof_x_nudof *= scale;
                                    fKMphiu_II7p_3 += fTemp_matrix_nchidof_x_nudof;


                                    fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II7p_4,fShapeDisplGrad);
                                    scale =-1*(Comp11)*scale_const*Jp*fMaterial_Params[kKappa];
                                    fTemp_matrix_nchidof_x_nudof *= scale;
                                    fKMphiu_II7p_4 += fTemp_matrix_nchidof_x_nudof;

                                    fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II7p_5,fShapeDisplGrad);
                                    scale =-1*(Comp11)*scale_const*Jp*fMaterial_Params[kNu];
                                    fTemp_matrix_nchidof_x_nudof *= scale;
                                    fKMphiu_II7p_5 +=fTemp_matrix_nchidof_x_nudof;

                                    fTemp_matrix_nchidof_x_nchidof.MultATBC(GRAD_NCHI,II7p_6,NCHI);
                                    scale =-1*(Comp11)*dFYdScol1*scale_const*Jp*fMaterial_Params[kEta];
                                    fTemp_matrix_nchidof_x_nchidof *= scale;
                                    fKMphiphi_II7p_6 += fTemp_matrix_nchidof_x_nchidof;

                                    fTemp_matrix_nchidof_x_nchidof.MultATBC(GRAD_NCHI,II7p_7,NCHI);
                                    scale =-1*(Comp11)*Jp*fMaterial_Params[kKappa]*scale_const;
                                    fTemp_matrix_nchidof_x_nchidof *= scale;
                                    fKMphiphi_II7p_7 += fTemp_matrix_nchidof_x_nchidof;

                                    fTemp_matrix_nchidof_x_nchidof.MultATBC(GRAD_NCHI,II7p_8,NCHI);
                                    scale =-1*(Comp11)*scale_const*Jp*fMaterial_Params[kNu];
                                    fTemp_matrix_nchidof_x_nchidof *= scale;
                                    fKMphiphi_II7p_8 += fTemp_matrix_nchidof_x_nchidof;

                                    }

                                    if(PlasticityCondition==3 || PlasticityCondition==4)
                                    {


                                    fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II7p_9,fShapeDisplGrad);
                                    scale =-1*Comp12*scale_const*Jp*fMaterial_Params[kTau]*dFYchidSIGMA_Scol1;
                                    fTemp_matrix_nchidof_x_nudof *= scale;
                                    fKMphiu_II7p_9 += fTemp_matrix_nchidof_x_nudof;

                                    fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II7p_10,fShapeDisplGrad);
                                    scale =-1*Comp12*scale_const*Jp*fMaterial_Params[kSigma_const];
                                    fTemp_matrix_nchidof_x_nudof *= scale;
                                    fKMphiu_II7p_10 += fTemp_matrix_nchidof_x_nudof;

                                    fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II7p_11,fShapeDisplGrad);
                                    scale =-1*Comp12*scale_const*Jp*(fMaterial_Params[kEta]-fMaterial_Params[kTau])*dFYchidSIGMA_Scol1;
                                    fTemp_matrix_nchidof_x_nudof *= scale;
                                    fKMphiu_II7p_11 += fTemp_matrix_nchidof_x_nudof;


                                    fTemp_matrix_nchidof_x_nchidof.MultATBC(GRAD_NCHI,II7p_12,NCHI);
                                    scale =-1*Comp12*scale_const*Jp*(fMaterial_Params[kEta]-fMaterial_Params[kTau])*dFYchidSIGMA_Scol1;
                                    fTemp_matrix_nchidof_x_nchidof *= scale;
                                    fKMphiphi_II7p_12 += fTemp_matrix_nchidof_x_nchidof;


                                    fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II7p_13,fShapeDisplGrad);
                                    scale =-1*Comp12*scale_const*Jp*(fMaterial_Params[kNu]-fMaterial_Params[kSigma_const]);
                                    fTemp_matrix_nchidof_x_nudof *= scale;
                                    fKMphiu_II7p_13 += fTemp_matrix_nchidof_x_nudof;


                                    fTemp_matrix_nchidof_x_nchidof.MultATBC(GRAD_NCHI,II7p_14,NCHI);
                                    scale =-1*Comp12*scale_const*Jp*(fMaterial_Params[kNu]-fMaterial_Params[kSigma_const]);
                                    fTemp_matrix_nchidof_x_nchidof *= scale;
                                    fKMphiphi_II7p_14 +=fTemp_matrix_nchidof_x_nchidof;


                                    fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II7p_15,fShapeDisplGrad);
                                    scale =-1*Comp12*scale_const*Jp*(fMaterial_Params[kKappa]-fMaterial_Params[kSigma_const]);
                                    fTemp_matrix_nchidof_x_nudof *= scale;
                                    fKMphiu_II7p_15 += fTemp_matrix_nchidof_x_nudof;

                                    fTemp_matrix_nchidof_x_nchidof.MultATBC(GRAD_NCHI,II7p_16,NCHI);
                                    scale =-1*Comp12*scale_const*Jp*(fMaterial_Params[kKappa]-fMaterial_Params[kSigma_const]);
                                    fTemp_matrix_nchidof_x_nchidof *= scale;
                                    fKMphiphi_II7p_16 += fTemp_matrix_nchidof_x_nchidof;

                                    }

                                    /* Terms coming from variation of Jp Eta(m,l,K) F(k,K) Fe(k,Kbar)deltaFe(l,Lbar)Me(Kbar,Lbar,Mbar)Xe(m,Mbar) */

                                  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II8e_1,fShapeDisplGrad);
                                  scale =scale_const*Jp;
                                  fTemp_matrix_nchidof_x_nudof *= scale;
                                  fKMphiu_II8e_1 += fTemp_matrix_nchidof_x_nudof;

                                  if(PlasticityCondition==1 || PlasticityCondition==3 || PlasticityCondition==4)//if(MacroPlasticityCondition==1)
                                  {



                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II8p_1,fShapeDisplGrad);
                                	  scale =-1*(Comp11)*dFYdScol1*scale_const*Jp*(fMaterial_Params[kLambda]+fMaterial_Params[kTau]);
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II8p_1 += fTemp_matrix_nchidof_x_nudof;

                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II8p_2,fShapeDisplGrad);
                                	  scale =-1*(Comp11)*scale_const*Jp*(fMaterial_Params[kMu]+fMaterial_Params[kSigma_const]);
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II8p_2 += fTemp_matrix_nchidof_x_nudof;

                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II8p_3,fShapeDisplGrad);
                                	  scale =-1*(Comp11)*dFYdScol1*scale_const*Jp*fMaterial_Params[kEta];
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II8p_3 += fTemp_matrix_nchidof_x_nudof;


                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II8p_4,fShapeDisplGrad);
                                	  scale =-1*(Comp11)*scale_const*Jp*fMaterial_Params[kKappa];
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II8p_4 += fTemp_matrix_nchidof_x_nudof;

                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II8p_5,fShapeDisplGrad);
                                	  scale =-1*(Comp11)*scale_const*Jp*fMaterial_Params[kNu];
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II8p_5 +=fTemp_matrix_nchidof_x_nudof;

                                	  fTemp_matrix_nchidof_x_nchidof.MultATBC(GRAD_NCHI,II8p_6,NCHI);
                                	  scale =-1*(Comp11)*dFYdScol1*scale_const*Jp*fMaterial_Params[kEta];
                                	  fTemp_matrix_nchidof_x_nchidof *= scale;
                                	  fKMphiphi_II8p_6 += fTemp_matrix_nchidof_x_nchidof;

                                	  fTemp_matrix_nchidof_x_nchidof.MultATBC(GRAD_NCHI,II8p_7,NCHI);
                                	  scale =-1*(Comp11)*Jp*fMaterial_Params[kKappa]*scale_const;
                                	  fTemp_matrix_nchidof_x_nchidof *= scale;
                                	  fKMphiphi_II8p_7 += fTemp_matrix_nchidof_x_nchidof;

                                	  fTemp_matrix_nchidof_x_nchidof.MultATBC(GRAD_NCHI,II8p_8,NCHI);
                                	  scale =-1*(Comp11)*scale_const*Jp*fMaterial_Params[kNu];
                                	  fTemp_matrix_nchidof_x_nchidof *= scale;
                                	  fKMphiphi_II8p_8 += fTemp_matrix_nchidof_x_nchidof;
                                  }

                                  if(PlasticityCondition==3 || PlasticityCondition==4)
                                  {


                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II8p_9,fShapeDisplGrad);
                                	  scale =-1*Comp12*scale_const*Jp*fMaterial_Params[kTau]*dFYchidSIGMA_Scol1;
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II8p_9 += fTemp_matrix_nchidof_x_nudof;

                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II8p_10,fShapeDisplGrad);
                                	  scale =-1*Comp12*scale_const*Jp*fMaterial_Params[kSigma_const];
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II8p_10 += fTemp_matrix_nchidof_x_nudof;

                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II8p_11,fShapeDisplGrad);
                                	  scale =-1*Comp12*scale_const*Jp*(fMaterial_Params[kEta]-fMaterial_Params[kTau])*dFYchidSIGMA_Scol1;
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II8p_11 += fTemp_matrix_nchidof_x_nudof;


                                	  fTemp_matrix_nchidof_x_nchidof.MultATBC(GRAD_NCHI,II8p_12,NCHI);
                                	  scale =-1*Comp12*scale_const*Jp*(fMaterial_Params[kEta]-fMaterial_Params[kTau])*dFYchidSIGMA_Scol1;
                                	  fTemp_matrix_nchidof_x_nchidof *= scale;
                                	  fKMphiphi_II8p_12 += fTemp_matrix_nchidof_x_nchidof;


                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II8p_13,fShapeDisplGrad);
                                	  scale =-1*Comp12*scale_const*Jp*(fMaterial_Params[kNu]-fMaterial_Params[kSigma_const]);
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II8p_13 += fTemp_matrix_nchidof_x_nudof;


                                	  fTemp_matrix_nchidof_x_nchidof.MultATBC(GRAD_NCHI,II8p_14,NCHI);
                                	  scale =-1*Comp12*scale_const*Jp*(fMaterial_Params[kNu]-fMaterial_Params[kSigma_const]);
                                	  fTemp_matrix_nchidof_x_nchidof *= scale;
                                	  fKMphiphi_II8p_14 +=fTemp_matrix_nchidof_x_nchidof;


                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II8p_15,fShapeDisplGrad);
                                	  scale =-1*Comp12*scale_const*Jp*(fMaterial_Params[kKappa]-fMaterial_Params[kSigma_const]);
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II8p_15 += fTemp_matrix_nchidof_x_nudof;

                                	  fTemp_matrix_nchidof_x_nchidof.MultATBC(GRAD_NCHI,II8p_16,NCHI);
                                	  scale =-1*Comp12*scale_const*Jp*(fMaterial_Params[kKappa]-fMaterial_Params[kSigma_const]);
                                	  fTemp_matrix_nchidof_x_nchidof *= scale;
                                	  fKMphiphi_II8p_16 += fTemp_matrix_nchidof_x_nchidof;

                                  }

                                  /* Terms coming from variation of Jp Eta(m,l,K) F(k,K) Fe(k,Kbar)Fe(l,Lbar)deltaFe(i,Kbar)GRADXe(i,Lbar,Mbar)Xe(m,Mbar) */

                                  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II9e_1,fShapeDisplGrad);
                                  scale = scale_const*Jp;
                                  fTemp_matrix_nchidof_x_nudof *= scale;
                                  fKMphiu_II9e_1 += fTemp_matrix_nchidof_x_nudof;

                                  if(PlasticityCondition==1 || PlasticityCondition==3 || PlasticityCondition==4)//if(MacroPlasticityCondition==1)
                                  {


                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II9p_1,fShapeDisplGrad);
                                	  scale =-1*(Comp11)*dFYdScol1*scale_const*Jp*(fMaterial_Params[kLambda]+fMaterial_Params[kTau]);
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II9p_1 += fTemp_matrix_nchidof_x_nudof;

                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II9p_2,fShapeDisplGrad);
                                	  scale =-1*(Comp11)*scale_const*Jp*(fMaterial_Params[kMu]+fMaterial_Params[kSigma_const]);
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II9p_2 += fTemp_matrix_nchidof_x_nudof;

                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II9p_3,fShapeDisplGrad);
                                	  scale =-1*(Comp11)*dFYdScol1*scale_const*Jp*fMaterial_Params[kEta];
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II9p_3 += fTemp_matrix_nchidof_x_nudof;

                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II9p_4,fShapeDisplGrad);
                                	  scale =-1*(Comp11)*scale_const*Jp*fMaterial_Params[kKappa];
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II9p_4 += fTemp_matrix_nchidof_x_nudof;

                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II9p_5,fShapeDisplGrad);
                                	  scale =-1*(Comp11)*scale_const*Jp*fMaterial_Params[kNu];
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II9p_5 +=fTemp_matrix_nchidof_x_nudof;

                                	  fTemp_matrix_nchidof_x_nchidof.MultATBC(GRAD_NCHI,II9p_6,NCHI);
                                	  scale =-1*(Comp11)*dFYdScol1*scale_const*Jp*fMaterial_Params[kEta];
                                	  fTemp_matrix_nchidof_x_nchidof *= scale;
                                	  fKMphiphi_II9p_6 += fTemp_matrix_nchidof_x_nchidof;

                                	  fTemp_matrix_nchidof_x_nchidof.MultATBC(GRAD_NCHI,II9p_7,NCHI);
                                	  scale =-1*(Comp11)*scale_const*Jp*fMaterial_Params[kKappa];
                                	  fTemp_matrix_nchidof_x_nchidof *= scale;
                                	  fKMphiphi_II9p_7 += fTemp_matrix_nchidof_x_nchidof;

                                	  fTemp_matrix_nchidof_x_nchidof.MultATBC(GRAD_NCHI,II9p_8,NCHI);
                                	  scale =-1*(Comp11)*scale_const*Jp*fMaterial_Params[kNu];
                                	  fTemp_matrix_nchidof_x_nchidof *= scale;
                                	  fKMphiphi_II9p_8 += fTemp_matrix_nchidof_x_nchidof;
                                  }

                                  if(PlasticityCondition==3 || PlasticityCondition==4)
                                  {


                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II9p_9,fShapeDisplGrad);
                                	  scale =-1*Comp12*scale_const*Jp*fMaterial_Params[kTau]*dFYchidSIGMA_Scol1;
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II9p_9 += fTemp_matrix_nchidof_x_nudof;

                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II9p_10,fShapeDisplGrad);
                                	  scale =-1*Comp12*scale_const*Jp*fMaterial_Params[kSigma_const];
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II9p_10 += fTemp_matrix_nchidof_x_nudof;

                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II9p_11,fShapeDisplGrad);
                                	  scale =-1*Comp12*scale_const*Jp*(fMaterial_Params[kEta]-fMaterial_Params[kTau])*dFYchidSIGMA_Scol1;
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II9p_11 += fTemp_matrix_nchidof_x_nudof;


                                	  fTemp_matrix_nchidof_x_nchidof.MultATBC(GRAD_NCHI,II9p_12,NCHI);
                                	  scale =-1*Comp12*scale_const*Jp*(fMaterial_Params[kEta]-fMaterial_Params[kTau])*dFYchidSIGMA_Scol1;
                                	  fTemp_matrix_nchidof_x_nchidof *= scale;
                                	  fKMphiphi_II9p_12 += fTemp_matrix_nchidof_x_nchidof;


                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II9p_13,fShapeDisplGrad);
                                	  scale =-1*Comp12*scale_const*Jp*(fMaterial_Params[kNu]-fMaterial_Params[kSigma_const]);
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II9p_13 += fTemp_matrix_nchidof_x_nudof;


                                	  fTemp_matrix_nchidof_x_nchidof.MultATBC(GRAD_NCHI,II9p_14,NCHI);
                                	  scale =-1*Comp12*scale_const*Jp*(fMaterial_Params[kNu]-fMaterial_Params[kSigma_const]);
                                	  fTemp_matrix_nchidof_x_nchidof *= scale;
                                	  fKMphiphi_II9p_14 +=fTemp_matrix_nchidof_x_nchidof;


                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II9p_15,fShapeDisplGrad);
                                	  scale =-1*Comp12*scale_const*Jp*(fMaterial_Params[kKappa]-fMaterial_Params[kSigma_const]);
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II9p_15 += fTemp_matrix_nchidof_x_nudof;

                                	  fTemp_matrix_nchidof_x_nchidof.MultATBC(GRAD_NCHI,II9p_16,NCHI);
                                	  scale =-1*Comp12*scale_const*Jp*(fMaterial_Params[kKappa]-fMaterial_Params[kSigma_const]);
                                	  fTemp_matrix_nchidof_x_nchidof *= scale;
                                	  fKMphiphi_II9p_16 += fTemp_matrix_nchidof_x_nchidof;

                                  }

                                  /* Terms coming from variation of Jp Eta(m,l,K) F(k,K) Fe(k,Kbar)Fe(l,Lbar)Fe(i,Kbar)deltaGRADXe(i,Lbar,Mbar)Xe(m,Mbar) */

                                  fTemp_matrix_nchidof_x_nchidof.MultATBC(GRAD_NCHI,II10e_1,GRAD_NCHI);
                                  scale = scale_const*Jp;
                                  fTemp_matrix_nchidof_x_nchidof *= scale;
                                  fKMphiphi_II10e_1 += fTemp_matrix_nchidof_x_nchidof;

// the following code has already been commented out

                                  if(PlasticityCondition==1 || PlasticityCondition==3 || PlasticityCondition==4)//if(MacroPlasticityCondition==1)
                                  {


                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II10p_1,fShapeDisplGrad);
                                	  scale =-1*(Comp11)*dFYdScol1*scale_const*Jp*(fMaterial_Params[kLambda]+fMaterial_Params[kTau]);
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II10p_1 += fTemp_matrix_nchidof_x_nudof;

                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II10p_2,fShapeDisplGrad);
                                	  scale =-1*(Comp11)*scale_const*Jp*(fMaterial_Params[kMu]+fMaterial_Params[kSigma_const]);
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II10p_2 += fTemp_matrix_nchidof_x_nudof;


                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II10p_3,fShapeDisplGrad);
                                	  scale =-1*(Comp11)*dFYdScol1*scale_const*Jp*fMaterial_Params[kEta];
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II10p_3 += fTemp_matrix_nchidof_x_nudof;


                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II10p_4,fShapeDisplGrad);
                                	  scale =-1*(Comp11)*scale_const*Jp*fMaterial_Params[kKappa];
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II10p_4 += fTemp_matrix_nchidof_x_nudof;

                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II10p_5,fShapeDisplGrad);
                                	  scale =-1*(Comp11)*scale_const*Jp*fMaterial_Params[kNu];
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II10p_5 +=fTemp_matrix_nchidof_x_nudof;

                                	  fTemp_matrix_nchidof_x_nchidof.MultATBC(GRAD_NCHI,II10p_6,NCHI);
                                	  scale =-1*(Comp11)*dFYdScol1*scale_const*Jp*fMaterial_Params[kEta];
                                	  fTemp_matrix_nchidof_x_nchidof *= scale;
                                	  fKMphiphi_II10p_6 += fTemp_matrix_nchidof_x_nchidof;

                                	  fTemp_matrix_nchidof_x_nchidof.MultATBC(GRAD_NCHI,II10p_7,NCHI);
                                	  scale =-1*(Comp11)*Jp*fMaterial_Params[kKappa]*scale_const;
                                	  fTemp_matrix_nchidof_x_nchidof *= scale;
                                	  fKMphiphi_II10p_7 += fTemp_matrix_nchidof_x_nchidof;

                                	  fTemp_matrix_nchidof_x_nchidof.MultATBC(GRAD_NCHI,II10p_8,NCHI);
                                	  scale =-1*(Comp11)*scale_const*Jp*fMaterial_Params[kNu];
                                	  fTemp_matrix_nchidof_x_nchidof *= scale;
                                	  fKMphiphi_II10p_8 += fTemp_matrix_nchidof_x_nchidof;
								  }

                                  if(PlasticityCondition==3 || PlasticityCondition==4)
                                  {



                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II10p_9,fShapeDisplGrad);
                                	  scale =-1*Comp12*scale_const*Jp*fMaterial_Params[kTau]*dFYchidSIGMA_Scol1;
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II10p_9 += fTemp_matrix_nchidof_x_nudof;

                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II10p_10,fShapeDisplGrad);
                                	  scale =-1*Comp12*scale_const*Jp*fMaterial_Params[kSigma_const];
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II10p_10 += fTemp_matrix_nchidof_x_nudof;

                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II10p_11,fShapeDisplGrad);
                                	  scale =-1*Comp12*scale_const*Jp*(fMaterial_Params[kEta]-fMaterial_Params[kTau])*dFYchidSIGMA_Scol1;
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II10p_11 += fTemp_matrix_nchidof_x_nudof;


                                	  fTemp_matrix_nchidof_x_nchidof.MultATBC(GRAD_NCHI,II10p_12,NCHI);
                                	  scale =-1*Comp12*scale_const*Jp*(fMaterial_Params[kEta]-fMaterial_Params[kTau])*dFYchidSIGMA_Scol1;
                                	  fTemp_matrix_nchidof_x_nchidof *= scale;
                                	  fKMphiphi_II10p_12 += fTemp_matrix_nchidof_x_nchidof;


                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II10p_13,fShapeDisplGrad);
                                	  scale =-1*Comp12*scale_const*Jp*(fMaterial_Params[kNu]-fMaterial_Params[kSigma_const]);
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II10p_13 += fTemp_matrix_nchidof_x_nudof;


                                	  fTemp_matrix_nchidof_x_nchidof.MultATBC(GRAD_NCHI,II10p_14,NCHI);
                                	  scale =-1*Comp12*scale_const*Jp*(fMaterial_Params[kNu]-fMaterial_Params[kSigma_const]);
                                	  fTemp_matrix_nchidof_x_nchidof *= scale;
                                	  fKMphiphi_II10p_14 +=fTemp_matrix_nchidof_x_nchidof;


                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II10p_15,fShapeDisplGrad);
                                	  scale =-1*Comp12*scale_const*Jp*(fMaterial_Params[kKappa]-fMaterial_Params[kSigma_const]);
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II10p_15 += fTemp_matrix_nchidof_x_nudof;

                                	  fTemp_matrix_nchidof_x_nchidof.MultATBC(GRAD_NCHI,II10p_16,NCHI);
                                	  scale =-1*Comp12*scale_const*Jp*(fMaterial_Params[kKappa]-fMaterial_Params[kSigma_const]);
                                	  fTemp_matrix_nchidof_x_nchidof *= scale;
                                	  fKMphiphi_II10p_16 += fTemp_matrix_nchidof_x_nchidof;

                                  }

                                  if(PlasticityCondition==1 || PlasticityCondition==3 || PlasticityCondition==4)//if(MacroPlasticityCondition==1)
                                  {



                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II11p_1,fShapeDisplGrad);
                                	  scale =-1*(Comp21)*dFYdScol1*scale_const*Jp*(fMaterial_Params[kLambda]+fMaterial_Params[kTau]);
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II11p_1 += fTemp_matrix_nchidof_x_nudof;

                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II11p_2,fShapeDisplGrad);
                                	  scale =-1*(Comp21)*scale_const*Jp*(fMaterial_Params[kMu]+fMaterial_Params[kSigma_const]);
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II11p_2 += fTemp_matrix_nchidof_x_nudof;


                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II11p_3,fShapeDisplGrad);
                                	  scale =-1*(Comp21)*dFYdScol1*scale_const*Jp*fMaterial_Params[kEta];
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II11p_3 += fTemp_matrix_nchidof_x_nudof;


                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II11p_4,fShapeDisplGrad);
                                	  scale =-1*(Comp21)*scale_const*Jp*fMaterial_Params[kKappa];
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II11p_4 += fTemp_matrix_nchidof_x_nudof;

                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II11p_5,fShapeDisplGrad);
                                	  scale =-1*(Comp21)*scale_const*Jp*fMaterial_Params[kNu];
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II11p_5 +=fTemp_matrix_nchidof_x_nudof;

                                	  fTemp_matrix_nchidof_x_nchidof.MultATBC(GRAD_NCHI,II11p_6,NCHI);
                                	  scale =-1*(Comp21)*dFYdScol1*scale_const*Jp*fMaterial_Params[kEta];
                                	  fTemp_matrix_nchidof_x_nchidof *= scale;
                                	  fKMphiphi_II11p_6 += fTemp_matrix_nchidof_x_nchidof;

                                	  fTemp_matrix_nchidof_x_nchidof.MultATBC(GRAD_NCHI,II11p_7,NCHI);
                                	  scale =-1*(Comp21)*Jp*fMaterial_Params[kKappa]*scale_const;
                                	  fTemp_matrix_nchidof_x_nchidof *= scale;
                                	  fKMphiphi_II11p_7 += fTemp_matrix_nchidof_x_nchidof;

                                	  fTemp_matrix_nchidof_x_nchidof.MultATBC(GRAD_NCHI,II11p_8,NCHI);
                                	  scale =-1*(Comp21)*scale_const*Jp*fMaterial_Params[kNu];
                                	  fTemp_matrix_nchidof_x_nchidof *= scale;
                                	  fKMphiphi_II11p_8 += fTemp_matrix_nchidof_x_nchidof;
                                  }

                                  if(PlasticityCondition==3 || PlasticityCondition==4)
                                  {


                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II11p_9,fShapeDisplGrad);
                                	  scale =-1*Comp22*scale_const*Jp*fMaterial_Params[kTau]*dFYchidSIGMA_Scol1;
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II11p_9 += fTemp_matrix_nchidof_x_nudof;

                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II11p_10,fShapeDisplGrad);
                                	  scale =-1*Comp22*scale_const*Jp*fMaterial_Params[kSigma_const];
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II11p_10 += fTemp_matrix_nchidof_x_nudof;

                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II11p_11,fShapeDisplGrad);
                                	  scale =-1*Comp22*scale_const*Jp*(fMaterial_Params[kEta]-fMaterial_Params[kTau])*dFYchidSIGMA_Scol1;
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II11p_11 += fTemp_matrix_nchidof_x_nudof;


                                	  fTemp_matrix_nchidof_x_nchidof.MultATBC(GRAD_NCHI,II11p_12,NCHI);
                                	  scale =-1*Comp22*scale_const*Jp*(fMaterial_Params[kEta]-fMaterial_Params[kTau])*dFYchidSIGMA_Scol1;
                                	  fTemp_matrix_nchidof_x_nchidof *= scale;
                                	  fKMphiphi_II11p_12 += fTemp_matrix_nchidof_x_nchidof;


                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II11p_13,fShapeDisplGrad);
                                	  scale =-1*Comp22*scale_const*Jp*(fMaterial_Params[kNu]-fMaterial_Params[kSigma_const]);
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II11p_13 += fTemp_matrix_nchidof_x_nudof;


                                	  fTemp_matrix_nchidof_x_nchidof.MultATBC(GRAD_NCHI,II11p_14,NCHI);
                                	  scale =-1*Comp22*scale_const*Jp*(fMaterial_Params[kNu]-fMaterial_Params[kSigma_const]);
                                	  fTemp_matrix_nchidof_x_nchidof *= scale;
                                	  fKMphiphi_II11p_14 +=fTemp_matrix_nchidof_x_nchidof;


                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II11p_15,fShapeDisplGrad);
                                	  scale =-1*Comp22*scale_const*Jp*(fMaterial_Params[kKappa]-fMaterial_Params[kSigma_const]);
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II11p_15 += fTemp_matrix_nchidof_x_nudof;

                                	  fTemp_matrix_nchidof_x_nchidof.MultATBC(GRAD_NCHI,II11p_16,NCHI);
                                	  scale =-1*Comp22*scale_const*Jp*(fMaterial_Params[kKappa]-fMaterial_Params[kSigma_const]);
                                	  fTemp_matrix_nchidof_x_nchidof *= scale;
                                	  fKMphiphi_II11p_16 += fTemp_matrix_nchidof_x_nchidof;
                                  }


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                                  /* Terms coming from variation of Jp Eta(m,l,K) F(k,K) Fe(k,Kbar)Fe(l,Lbar)Me(Kbar,Lbar,Mbar)deltaXe(m,Mbar) */

                                  fTemp_matrix_nchidof_x_nchidof.MultATBC(GRAD_NCHI,II12e_1,NCHI);
                                  scale =scale_const*Jp;
                                  fTemp_matrix_nchidof_x_nchidof *= scale;
                                  fKMphiphi_II12e_1 += fTemp_matrix_nchidof_x_nchidof;

                                  if(PlasticityCondition==1 || PlasticityCondition==3 || PlasticityCondition==4)//if(MacroPlasticityCondition==1)
                                  {


                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II12p_1,fShapeDisplGrad);
                                	  scale =-1*(Comp21)*dFYdScol1*scale_const*Jp*(fMaterial_Params[kLambda]+fMaterial_Params[kTau]);
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II12p_1 += fTemp_matrix_nchidof_x_nudof;

                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II12p_2,fShapeDisplGrad);
                                	  scale =-1*(Comp21)*scale_const*Jp*(fMaterial_Params[kMu]+fMaterial_Params[kSigma_const]);
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II12p_2 += fTemp_matrix_nchidof_x_nudof;


                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II12p_3,fShapeDisplGrad);
                                	  scale =-1*(Comp21)*dFYdScol1*scale_const*Jp*fMaterial_Params[kEta];
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II12p_3 += fTemp_matrix_nchidof_x_nudof;


                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II12p_4,fShapeDisplGrad);
                                	  scale =-1*(Comp21)*scale_const*Jp*fMaterial_Params[kKappa];
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II12p_4 += fTemp_matrix_nchidof_x_nudof;

                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II12p_5,fShapeDisplGrad);
                                	  scale =-1*(Comp21)*scale_const*Jp*fMaterial_Params[kNu];
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II12p_5 +=fTemp_matrix_nchidof_x_nudof;

                                	  fTemp_matrix_nchidof_x_nchidof.MultATBC(GRAD_NCHI,II12p_6,NCHI);
                                	  scale =-1*(Comp21)*dFYdScol1*scale_const*Jp*fMaterial_Params[kEta];
                                	  fTemp_matrix_nchidof_x_nchidof *= scale;
                                	  fKMphiphi_II12p_6 += fTemp_matrix_nchidof_x_nchidof;

                                	  fTemp_matrix_nchidof_x_nchidof.MultATBC(GRAD_NCHI,II12p_7,NCHI);
                                	  scale =-1*(Comp21)*Jp*fMaterial_Params[kKappa]*scale_const;
                                	  fTemp_matrix_nchidof_x_nchidof *= scale;
                                	  fKMphiphi_II12p_7 += fTemp_matrix_nchidof_x_nchidof;

                                	  fTemp_matrix_nchidof_x_nchidof.MultATBC(GRAD_NCHI,II12p_8,NCHI);
                                	  scale =-1*(Comp21)*scale_const*Jp*fMaterial_Params[kNu];
                                	  fTemp_matrix_nchidof_x_nchidof *= scale;
                                	  fKMphiphi_II12p_8 += fTemp_matrix_nchidof_x_nchidof;
                                  }

                                  if(PlasticityCondition==3 || PlasticityCondition==4)
                                  {



                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II12p_9,fShapeDisplGrad);
                                	  scale =-1*Comp22*scale_const*Jp*fMaterial_Params[kTau]*dFYchidSIGMA_Scol1;
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II12p_9 += fTemp_matrix_nchidof_x_nudof;

                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II12p_10,fShapeDisplGrad);
                                	  scale =-1*Comp22*scale_const*Jp*fMaterial_Params[kSigma_const];
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II12p_10 += fTemp_matrix_nchidof_x_nudof;

                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II12p_11,fShapeDisplGrad);
                                	  scale =-1*Comp22*scale_const*Jp*(fMaterial_Params[kEta]-fMaterial_Params[kTau])*dFYchidSIGMA_Scol1;
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II12p_11 += fTemp_matrix_nchidof_x_nudof;


                                	  fTemp_matrix_nchidof_x_nchidof.MultATBC(GRAD_NCHI,II12p_12,NCHI);
                                	  scale =-1*Comp22*scale_const*Jp*(fMaterial_Params[kEta]-fMaterial_Params[kTau])*dFYchidSIGMA_Scol1;
                                	  fTemp_matrix_nchidof_x_nchidof *= scale;
                                	  fKMphiphi_II12p_12 += fTemp_matrix_nchidof_x_nchidof;


                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II12p_13,fShapeDisplGrad);
                                	  scale =-1*Comp22*scale_const*Jp*(fMaterial_Params[kNu]-fMaterial_Params[kSigma_const]);
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II12p_13 += fTemp_matrix_nchidof_x_nudof;


                                	  fTemp_matrix_nchidof_x_nchidof.MultATBC(GRAD_NCHI,II12p_14,NCHI);
                                	  scale =-1*Comp22*scale_const*Jp*(fMaterial_Params[kNu]-fMaterial_Params[kSigma_const]);
                                	  fTemp_matrix_nchidof_x_nchidof *= scale;
                                	  fKMphiphi_II12p_14 +=fTemp_matrix_nchidof_x_nchidof;


                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II12p_15,fShapeDisplGrad);
                                	  scale =-1*Comp22*scale_const*Jp*(fMaterial_Params[kKappa]-fMaterial_Params[kSigma_const]);
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II12p_15 += fTemp_matrix_nchidof_x_nudof;

                                	  fTemp_matrix_nchidof_x_nchidof.MultATBC(GRAD_NCHI,II12p_16,NCHI);
                                	  scale =-1*Comp22*scale_const*Jp*(fMaterial_Params[kKappa]-fMaterial_Params[kSigma_const]);
                                	  fTemp_matrix_nchidof_x_nchidof *= scale;
                                	  fKMphiphi_II12p_16 += fTemp_matrix_nchidof_x_nchidof;
                                  }

                       ////////////////// Micro Gradient Plasticity /////////////////////////////////
                                  if(Micro_gradient_Plasticity_Occurrence == 1)
                                  {

								      //Form_II13e_1();
									  //Form_II14p_1_16();
									  Form_II15e_1();
									  Form_II16p_1_16();
									  Form_II17p_1_16();
									  Form_II18p_1_16();
									  Form_II19p_1_16();
									  Form_II20p_1_16();
									  Form_II21p_1_75();



                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II13e_1,fShapeDisplGrad);
                                	  scale =-1*scale_const*Jp;
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II13e_1 += fTemp_matrix_nchidof_x_nudof;

                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II14p_1,fShapeDisplGrad);
                                	  scale = scale_const*Jp*Comp11*(fMaterial_Params[kLambda]+fMaterial_Params[kTau]);
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II14p_1 += fTemp_matrix_nchidof_x_nudof;

                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II14p_2,fShapeDisplGrad);
                                	  scale = scale_const*Jp*Comp11*(fMaterial_Params[kMu]+fMaterial_Params[kSigma_const]);
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II14p_2 += fTemp_matrix_nchidof_x_nudof;

                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II14p_3,fShapeDisplGrad);
                                	  scale = scale_const*Jp*Comp11*(fMaterial_Params[kEta]);
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II14p_3 += fTemp_matrix_nchidof_x_nudof;

                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II14p_4,fShapeDisplGrad);
                                	  scale = scale_const*Jp*Comp11*(fMaterial_Params[kKappa]);
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II14p_4 += fTemp_matrix_nchidof_x_nudof;

                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II14p_5,fShapeDisplGrad);
                                	  scale = scale_const*Jp*Comp11*(fMaterial_Params[kNu]);
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II14p_5 += fTemp_matrix_nchidof_x_nudof;

                                	  fTemp_matrix_nchidof_x_nchidof.MultATBC(GRAD_NCHI,II14p_6,NCHI);
                                	  scale = scale_const*Jp*Comp11*(fMaterial_Params[kEta]);
                                	  fTemp_matrix_nchidof_x_nchidof *= scale;
                                	  fKMphiphi_II14p_6 += fTemp_matrix_nchidof_x_nchidof;

                                	  fTemp_matrix_nchidof_x_nchidof.MultATBC(GRAD_NCHI,II14p_7,NCHI);
                                	  scale = scale_const*Jp*Comp11*(fMaterial_Params[kKappa]);
                                	  fTemp_matrix_nchidof_x_nchidof *= scale;
                                	  fKMphiphi_II14p_7 += fTemp_matrix_nchidof_x_nchidof;

                                	  fTemp_matrix_nchidof_x_nchidof.MultATBC(GRAD_NCHI,II14p_8,NCHI);
                                	  scale = scale_const*Jp*Comp11*(fMaterial_Params[kNu]);
                                	  fTemp_matrix_nchidof_x_nchidof *= scale;
                                	  fKMphiphi_II14p_8 += fTemp_matrix_nchidof_x_nchidof;

                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II14p_9,fShapeDisplGrad);
                                	  scale = scale_const*Jp*Comp12*fMaterial_Params[kTau];
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II14p_9 += fTemp_matrix_nchidof_x_nudof;

                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II14p_10,fShapeDisplGrad);
                                	  scale = scale_const*Jp*Comp12*fMaterial_Params[kSigma_const];
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II14p_10 += fTemp_matrix_nchidof_x_nudof;

                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II14p_11,fShapeDisplGrad);
                                	  scale = scale_const*Jp*Comp12*(fMaterial_Params[kEta]-fMaterial_Params[kTau]);
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II14p_11 += fTemp_matrix_nchidof_x_nudof;

                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II14p_12,fShapeDisplGrad);
                                	  scale = scale_const*Jp*Comp12*(fMaterial_Params[kNu]-fMaterial_Params[kSigma_const]);
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II14p_12 += fTemp_matrix_nchidof_x_nudof;

                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II14p_13,fShapeDisplGrad);
                                	  scale = scale_const*Jp*Comp12*(fMaterial_Params[kKappa]-fMaterial_Params[kSigma_const]);
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II14p_13 += fTemp_matrix_nchidof_x_nudof;

                                	  fTemp_matrix_nchidof_x_nchidof.MultATBC(GRAD_NCHI,II14p_14,NCHI);
                                	  scale = scale_const*Jp*Comp12*(fMaterial_Params[kEta]-fMaterial_Params[kTau]);
                                	  fTemp_matrix_nchidof_x_nchidof *= scale;
                                	  fKMphiphi_II14p_14 += fTemp_matrix_nchidof_x_nchidof;

                                	  fTemp_matrix_nchidof_x_nchidof.MultATBC(GRAD_NCHI,II14p_15,NCHI);
                                	  scale = scale_const*Jp*Comp12*(fMaterial_Params[kNu]-fMaterial_Params[kSigma_const]);
                                	  fTemp_matrix_nchidof_x_nchidof *= scale;
                                	  fKMphiphi_II14p_15 += fTemp_matrix_nchidof_x_nchidof;

                                	  fTemp_matrix_nchidof_x_nchidof.MultATBC(GRAD_NCHI,II14p_16,NCHI);
                                	  scale = scale_const*Jp*Comp12*(fMaterial_Params[kKappa]-fMaterial_Params[kSigma_const]);
                                	  fTemp_matrix_nchidof_x_nchidof *= scale;
                                	  fKMphiphi_II14p_16 += fTemp_matrix_nchidof_x_nchidof;
                                	  //////////////////////////////////////////////////////
                                	  //////////////////////////////////////////////////////
                                	  fTemp_matrix_nchidof_x_nchidof.MultATBC(GRAD_NCHI,II15e_1,NCHI);
                                	  scale =-1*scale_const*Jp;
                                	  fTemp_matrix_nchidof_x_nchidof *= scale;
                                	  fKMphiphi_II15e_1+= fTemp_matrix_nchidof_x_nchidof;
                                	  ///////////////////////////////////////////////////////
                                	  ///////////////////////////////////////////////////////
                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II16p_1,fShapeDisplGrad);
                                	  scale = scale_const*Jp*Comp21*(fMaterial_Params[kLambda]+fMaterial_Params[kTau]);
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II16p_1 += fTemp_matrix_nchidof_x_nudof;

                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II16p_2,fShapeDisplGrad);
                                	  scale = scale_const*Jp*Comp21*(fMaterial_Params[kMu]+fMaterial_Params[kSigma_const]);
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II16p_2 += fTemp_matrix_nchidof_x_nudof;

                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II16p_3,fShapeDisplGrad);
                                	  scale = scale_const*Jp*Comp21*(fMaterial_Params[kEta]);
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II16p_3 += fTemp_matrix_nchidof_x_nudof;

                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II16p_4,fShapeDisplGrad);
                                	  scale = scale_const*Jp*Comp21*(fMaterial_Params[kKappa]);
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II16p_4 += fTemp_matrix_nchidof_x_nudof;

                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II16p_5,fShapeDisplGrad);
                                	  scale = scale_const*Jp*Comp21*(fMaterial_Params[kNu]);
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II16p_5 += fTemp_matrix_nchidof_x_nudof;

                                	  fTemp_matrix_nchidof_x_nchidof.MultATBC(GRAD_NCHI,II16p_6,NCHI);
                                	  scale = scale_const*Jp*Comp21*(fMaterial_Params[kEta]);
                                	  fTemp_matrix_nchidof_x_nchidof *= scale;
                                	  fKMphiphi_II16p_6 += fTemp_matrix_nchidof_x_nchidof;

                                	  fTemp_matrix_nchidof_x_nchidof.MultATBC(GRAD_NCHI,II16p_7,NCHI);
                                	  scale = scale_const*Jp*Comp21*(fMaterial_Params[kKappa]);
                                	  fTemp_matrix_nchidof_x_nchidof *= scale;
                                	  fKMphiphi_II16p_7 += fTemp_matrix_nchidof_x_nchidof;

                                	  fTemp_matrix_nchidof_x_nchidof.MultATBC(GRAD_NCHI,II16p_8,NCHI);
                                	  scale = scale_const*Jp*Comp21*(fMaterial_Params[kNu]);
                                	  fTemp_matrix_nchidof_x_nchidof *= scale;
                                	  fKMphiphi_II16p_8 += fTemp_matrix_nchidof_x_nchidof;

                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II16p_9,fShapeDisplGrad);
                                	  scale = scale_const*Jp*Comp22*fMaterial_Params[kTau];
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II16p_9 += fTemp_matrix_nchidof_x_nudof;

                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II16p_10,fShapeDisplGrad);
                                	  scale = scale_const*Jp*Comp22*fMaterial_Params[kSigma_const];
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II16p_10 += fTemp_matrix_nchidof_x_nudof;

                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II16p_11,fShapeDisplGrad);
                                	  scale = scale_const*Jp*Comp22*(fMaterial_Params[kEta]-fMaterial_Params[kTau]);
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II16p_11 += fTemp_matrix_nchidof_x_nudof;

                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II16p_12,fShapeDisplGrad);
                                	  scale = scale_const*Jp*Comp22*(fMaterial_Params[kNu]-fMaterial_Params[kSigma_const]);
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II16p_12 += fTemp_matrix_nchidof_x_nudof;

                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II16p_13,fShapeDisplGrad);
                                	  scale = scale_const*Jp*Comp22*(fMaterial_Params[kKappa]-fMaterial_Params[kSigma_const]);
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II16p_13 += fTemp_matrix_nchidof_x_nudof;

                                	  fTemp_matrix_nchidof_x_nchidof.MultATBC(GRAD_NCHI,II16p_14,NCHI);
                                	  scale = scale_const*Jp*Comp22*(fMaterial_Params[kEta]-fMaterial_Params[kTau]);
                                	  fTemp_matrix_nchidof_x_nchidof *= scale;
                                	  fKMphiphi_II16p_14 += fTemp_matrix_nchidof_x_nchidof;

                                	  fTemp_matrix_nchidof_x_nchidof.MultATBC(GRAD_NCHI,II16p_15,NCHI);
                                	  scale = scale_const*Jp*Comp22*(fMaterial_Params[kNu]-fMaterial_Params[kSigma_const]);
                                	  fTemp_matrix_nchidof_x_nchidof *= scale;
                                	  fKMphiphi_II16p_15 += fTemp_matrix_nchidof_x_nchidof;

                                	  fTemp_matrix_nchidof_x_nchidof.MultATBC(GRAD_NCHI,II16p_16,NCHI);
                                	  scale = scale_const*Jp*Comp22*(fMaterial_Params[kKappa]-fMaterial_Params[kSigma_const]);
                                	  fTemp_matrix_nchidof_x_nchidof *= scale;
                                	  fKMphiphi_II16p_16 += fTemp_matrix_nchidof_x_nchidof;
                                	  ///////////////////////////////////////////////////////
                                	  ///////////////////////////////////////////////////////
                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II17p_1,fShapeDisplGrad);
                                	  scale = -1*scale_const*Jp*Comp21*(fMaterial_Params[kLambda]+fMaterial_Params[kTau]);
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II17p_1 += fTemp_matrix_nchidof_x_nudof;

                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II17p_2,fShapeDisplGrad);
                                	  scale = -1*scale_const*Jp*Comp21*(fMaterial_Params[kMu]+fMaterial_Params[kSigma_const]);
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II17p_2 += fTemp_matrix_nchidof_x_nudof;

                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II17p_3,fShapeDisplGrad);
                                	  scale = -1*scale_const*Jp*Comp21*(fMaterial_Params[kEta]);
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II17p_3 += fTemp_matrix_nchidof_x_nudof;

                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II17p_4,fShapeDisplGrad);
                                	  scale = -1*scale_const*Jp*Comp21*(fMaterial_Params[kKappa]);
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II17p_4 += fTemp_matrix_nchidof_x_nudof;

                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II17p_5,fShapeDisplGrad);
                                	  scale = -1*scale_const*Jp*Comp21*(fMaterial_Params[kNu]);
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II17p_5 += fTemp_matrix_nchidof_x_nudof;

                                	  fTemp_matrix_nchidof_x_nchidof.MultATBC(GRAD_NCHI,II17p_6,NCHI);
                                	  scale = -1*scale_const*Jp*Comp21*(fMaterial_Params[kEta]);
                                	  fTemp_matrix_nchidof_x_nchidof *= scale;
                                	  fKMphiphi_II17p_6 += fTemp_matrix_nchidof_x_nchidof;

                                	  fTemp_matrix_nchidof_x_nchidof.MultATBC(GRAD_NCHI,II17p_7,NCHI);
                                	  scale = -1*scale_const*Jp*Comp21*(fMaterial_Params[kKappa]);
                                	  fTemp_matrix_nchidof_x_nchidof *= scale;
                                	  fKMphiphi_II17p_7 += fTemp_matrix_nchidof_x_nchidof;

                                	  fTemp_matrix_nchidof_x_nchidof.MultATBC(GRAD_NCHI,II17p_8,NCHI);
                                	  scale = -1*scale_const*Jp*Comp21*(fMaterial_Params[kNu]);
                                	  fTemp_matrix_nchidof_x_nchidof *= scale;
                                	  fKMphiphi_II17p_8 += fTemp_matrix_nchidof_x_nchidof;

                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II17p_9,fShapeDisplGrad);
                                	  scale = -1*scale_const*Jp*Comp22*fMaterial_Params[kTau];
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II17p_9 += fTemp_matrix_nchidof_x_nudof;

                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II17p_10,fShapeDisplGrad);
                                	  scale = -1*scale_const*Jp*Comp22*fMaterial_Params[kSigma_const];
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II17p_10 += fTemp_matrix_nchidof_x_nudof;

                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II17p_11,fShapeDisplGrad);
                                	  scale = -1*scale_const*Jp*Comp22*(fMaterial_Params[kEta]-fMaterial_Params[kTau]);
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II17p_11 += fTemp_matrix_nchidof_x_nudof;

                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II17p_12,fShapeDisplGrad);
                                	  scale = -1*scale_const*Jp*Comp22*(fMaterial_Params[kNu]-fMaterial_Params[kSigma_const]);
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II17p_12 += fTemp_matrix_nchidof_x_nudof;

                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II17p_13,fShapeDisplGrad);
                                	  scale = -1*scale_const*Jp*Comp22*(fMaterial_Params[kKappa]-fMaterial_Params[kSigma_const]);
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II17p_13 += fTemp_matrix_nchidof_x_nudof;

                                	  fTemp_matrix_nchidof_x_nchidof.MultATBC(GRAD_NCHI,II17p_14,NCHI);
                                	  scale = -1*scale_const*Jp*Comp22*(fMaterial_Params[kEta]-fMaterial_Params[kTau]);
                                	  fTemp_matrix_nchidof_x_nchidof *= scale;
                                	  fKMphiphi_II17p_14 += fTemp_matrix_nchidof_x_nchidof;

                                	  fTemp_matrix_nchidof_x_nchidof.MultATBC(GRAD_NCHI,II17p_15,NCHI);
                                	  scale = -1*scale_const*Jp*Comp22*(fMaterial_Params[kNu]-fMaterial_Params[kSigma_const]);
                                	  fTemp_matrix_nchidof_x_nchidof *= scale;
                                	  fKMphiphi_II17p_15 += fTemp_matrix_nchidof_x_nchidof;

                                	  fTemp_matrix_nchidof_x_nchidof.MultATBC(GRAD_NCHI,II17p_16,NCHI);
                                	  scale = -1*scale_const*Jp*Comp22*(fMaterial_Params[kKappa]-fMaterial_Params[kSigma_const]);
                                	  fTemp_matrix_nchidof_x_nchidof *= scale;
                                	  fKMphiphi_II17p_16 += fTemp_matrix_nchidof_x_nchidof;
                                	  ///////////////////////////////////////////////////////
                                	  ///////////////////////////////////////////////////////
                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II18p_1,fShapeDisplGrad);
                                	  scale = scale_const*Jp*Comp11*(fMaterial_Params[kLambda]+fMaterial_Params[kTau]);
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II18p_1 += fTemp_matrix_nchidof_x_nudof;

                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II18p_2,fShapeDisplGrad);
                                	  scale = scale_const*Jp*Comp11*(fMaterial_Params[kMu]+fMaterial_Params[kSigma_const]);
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II18p_2 += fTemp_matrix_nchidof_x_nudof;

                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II18p_3,fShapeDisplGrad);
                                	  scale = scale_const*Jp*Comp11*(fMaterial_Params[kEta]);
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II18p_3 += fTemp_matrix_nchidof_x_nudof;

                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II18p_4,fShapeDisplGrad);
                                	  scale = scale_const*Jp*Comp11*(fMaterial_Params[kKappa]);
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II18p_4 += fTemp_matrix_nchidof_x_nudof;

                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II18p_5,fShapeDisplGrad);
                                	  scale = scale_const*Jp*Comp11*(fMaterial_Params[kNu]);
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II18p_5 += fTemp_matrix_nchidof_x_nudof;

                                	  fTemp_matrix_nchidof_x_nchidof.MultATBC(GRAD_NCHI,II18p_6,NCHI);
                                	  scale = scale_const*Jp*Comp11*(fMaterial_Params[kEta]);
                                	  fTemp_matrix_nchidof_x_nchidof *= scale;
                                	  fKMphiphi_II18p_6 += fTemp_matrix_nchidof_x_nchidof;

                                	  fTemp_matrix_nchidof_x_nchidof.MultATBC(GRAD_NCHI,II18p_7,NCHI);
                                	  scale = scale_const*Jp*Comp11*(fMaterial_Params[kKappa]);
                                	  fTemp_matrix_nchidof_x_nchidof *= scale;
                                	  fKMphiphi_II18p_7 += fTemp_matrix_nchidof_x_nchidof;

                                	  fTemp_matrix_nchidof_x_nchidof.MultATBC(GRAD_NCHI,II18p_8,NCHI);
                                	  scale = scale_const*Jp*Comp11*(fMaterial_Params[kNu]);
                                	  fTemp_matrix_nchidof_x_nchidof *= scale;
                                	  fKMphiphi_II18p_8 += fTemp_matrix_nchidof_x_nchidof;

                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II18p_9,fShapeDisplGrad);
                                	  scale = scale_const*Jp*Comp12*(fMaterial_Params[kTau]);
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II18p_9 += fTemp_matrix_nchidof_x_nudof;

                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II18p_10,fShapeDisplGrad);
                                	  scale = scale_const*Jp*Comp12*(fMaterial_Params[kSigma_const]);
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II18p_10 += fTemp_matrix_nchidof_x_nudof;

                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II18p_11,fShapeDisplGrad);
                                	  scale = scale_const*Jp*Comp12*(fMaterial_Params[kEta]-fMaterial_Params[kTau]);
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II18p_11 += fTemp_matrix_nchidof_x_nudof;

                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II18p_12,fShapeDisplGrad);
                                	  scale = scale_const*Jp*Comp12*(fMaterial_Params[kNu]-fMaterial_Params[kSigma_const]);
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II18p_12 += fTemp_matrix_nchidof_x_nudof;

                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II18p_13,fShapeDisplGrad);
                                	  scale = scale_const*Jp*Comp12*(fMaterial_Params[kKappa]-fMaterial_Params[kSigma_const]);
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II18p_13 += fTemp_matrix_nchidof_x_nudof;

                                	  fTemp_matrix_nchidof_x_nchidof.MultATBC(GRAD_NCHI,II18p_14,NCHI);
                                	  scale = scale_const*Jp*Comp12*(fMaterial_Params[kEta]-fMaterial_Params[kTau]);
                                	  fTemp_matrix_nchidof_x_nchidof *= scale;
                                	  fKMphiphi_II18p_14 += fTemp_matrix_nchidof_x_nchidof;

                                	  fTemp_matrix_nchidof_x_nchidof.MultATBC(GRAD_NCHI,II18p_15,NCHI);
                                	  scale = scale_const*Jp*Comp12*(fMaterial_Params[kNu]-fMaterial_Params[kSigma_const]);
                                	  fTemp_matrix_nchidof_x_nchidof *= scale;
                                	  fKMphiphi_II18p_15 += fTemp_matrix_nchidof_x_nchidof;

                                	  fTemp_matrix_nchidof_x_nchidof.MultATBC(GRAD_NCHI,II18p_16,NCHI);
                                	  scale = scale_const*Jp*Comp12*(fMaterial_Params[kKappa]-fMaterial_Params[kSigma_const]);
                                	  fTemp_matrix_nchidof_x_nchidof *= scale;
                                	  fKMphiphi_II18p_16 += fTemp_matrix_nchidof_x_nchidof;
                                	  ///////////////////////////////////////////////////////
                                	  ///////////////////////////////////////////////////////
                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II19p_1,fShapeDisplGrad);
                                	  scale = scale_const*Jp*Comp21*(fMaterial_Params[kLambda]+fMaterial_Params[kTau]);
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II19p_1 += fTemp_matrix_nchidof_x_nudof;

                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II19p_2,fShapeDisplGrad);
                                	  scale = scale_const*Jp*Comp21*(fMaterial_Params[kMu]+fMaterial_Params[kSigma_const]);
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II19p_2 += fTemp_matrix_nchidof_x_nudof;

                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II19p_3,fShapeDisplGrad);
                                	  scale = scale_const*Jp*Comp21*(fMaterial_Params[kEta]);
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II19p_3 += fTemp_matrix_nchidof_x_nudof;

                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II19p_4,fShapeDisplGrad);
                                	  scale = scale_const*Jp*Comp21*(fMaterial_Params[kKappa]);
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II19p_4 += fTemp_matrix_nchidof_x_nudof;

                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II19p_5,fShapeDisplGrad);
                                	  scale = scale_const*Jp*Comp21*(fMaterial_Params[kNu]);
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II19p_5 += fTemp_matrix_nchidof_x_nudof;

                                	  fTemp_matrix_nchidof_x_nchidof.MultATBC(GRAD_NCHI,II19p_6,NCHI);
                                	  scale = scale_const*Jp*Comp21*(fMaterial_Params[kEta]);
                                	  fTemp_matrix_nchidof_x_nchidof *= scale;
                                	  fKMphiphi_II19p_6 += fTemp_matrix_nchidof_x_nchidof;

                                	  fTemp_matrix_nchidof_x_nchidof.MultATBC(GRAD_NCHI,II19p_7,NCHI);
                                	  scale = scale_const*Jp*Comp21*(fMaterial_Params[kKappa]);
                                	  fTemp_matrix_nchidof_x_nchidof *= scale;
                                	  fKMphiphi_II19p_7 += fTemp_matrix_nchidof_x_nchidof;

                                	  fTemp_matrix_nchidof_x_nchidof.MultATBC(GRAD_NCHI,II19p_8,NCHI);
                                	  scale = scale_const*Jp*Comp21*(fMaterial_Params[kNu]);
                                	  fTemp_matrix_nchidof_x_nchidof *= scale;
                                	  fKMphiphi_II19p_8 += fTemp_matrix_nchidof_x_nchidof;

                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II19p_9,fShapeDisplGrad);
                                	  scale = scale_const*Jp*Comp22*fMaterial_Params[kTau];
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II19p_9 += fTemp_matrix_nchidof_x_nudof;

                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II19p_10,fShapeDisplGrad);
                                	  scale = scale_const*Jp*Comp22*fMaterial_Params[kSigma_const];
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II19p_10 += fTemp_matrix_nchidof_x_nudof;

                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II19p_11,fShapeDisplGrad);
                                	  scale = scale_const*Jp*Comp22*(fMaterial_Params[kEta]-fMaterial_Params[kTau]);
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II19p_11 += fTemp_matrix_nchidof_x_nudof;

                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II19p_12,fShapeDisplGrad);
                                	  scale = scale_const*Jp*Comp22*(fMaterial_Params[kNu]-fMaterial_Params[kSigma_const]);
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II19p_12 += fTemp_matrix_nchidof_x_nudof;

                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II19p_13,fShapeDisplGrad);
                                	  scale = scale_const*Jp*Comp22*(fMaterial_Params[kKappa]-fMaterial_Params[kSigma_const]);
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II19p_13 += fTemp_matrix_nchidof_x_nudof;

                                	  fTemp_matrix_nchidof_x_nchidof.MultATBC(GRAD_NCHI,II19p_14,NCHI);
                                	  scale = scale_const*Jp*Comp22*(fMaterial_Params[kEta]-fMaterial_Params[kTau]);
                                	  fTemp_matrix_nchidof_x_nchidof *= scale;
                                	  fKMphiphi_II19p_14 += fTemp_matrix_nchidof_x_nchidof;

                                	  fTemp_matrix_nchidof_x_nchidof.MultATBC(GRAD_NCHI,II19p_15,NCHI);
                                	  scale = scale_const*Jp*Comp22*(fMaterial_Params[kNu]-fMaterial_Params[kSigma_const]);
                                	  fTemp_matrix_nchidof_x_nchidof *= scale;
                                	  fKMphiphi_II19p_15 += fTemp_matrix_nchidof_x_nchidof;

                                	  fTemp_matrix_nchidof_x_nchidof.MultATBC(GRAD_NCHI,II19p_16,NCHI);
                                	  scale = scale_const*Jp*Comp22*(fMaterial_Params[kKappa]-fMaterial_Params[kSigma_const]);
                                	  fTemp_matrix_nchidof_x_nchidof *= scale;
                                	  fKMphiphi_II19p_16 += fTemp_matrix_nchidof_x_nchidof;
                                	  ///////////////////////////////////////////////////////
                                	  ///////////////////////////////////////////////////////
                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II20p_1,fShapeDisplGrad);
                                	  scale = -1*scale_const*Jp*Comp21*(fMaterial_Params[kLambda]+fMaterial_Params[kTau]);
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II20p_1 += fTemp_matrix_nchidof_x_nudof;

                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II20p_2,fShapeDisplGrad);
                                	  scale = -1*scale_const*Jp*Comp21*(fMaterial_Params[kMu]+fMaterial_Params[kSigma_const]);
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II20p_2 += fTemp_matrix_nchidof_x_nudof;

                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II20p_3,fShapeDisplGrad);
                                	  scale = -1*scale_const*Jp*Comp21*(fMaterial_Params[kEta]);
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II20p_3 += fTemp_matrix_nchidof_x_nudof;

                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II20p_4,fShapeDisplGrad);
                                	  scale = -1*scale_const*Jp*Comp21*(fMaterial_Params[kKappa]);
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II20p_4 += fTemp_matrix_nchidof_x_nudof;

                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II20p_5,fShapeDisplGrad);
                                	  scale = -1*scale_const*Jp*Comp21*(fMaterial_Params[kNu]);
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II20p_5 += fTemp_matrix_nchidof_x_nudof;

                                	  fTemp_matrix_nchidof_x_nchidof.MultATBC(GRAD_NCHI,II20p_6,NCHI);
                                	  scale = -1*scale_const*Jp*Comp21*(fMaterial_Params[kEta]);
                                	  fTemp_matrix_nchidof_x_nchidof *= scale;
                                	  fKMphiphi_II20p_6 += fTemp_matrix_nchidof_x_nchidof;

                                	  fTemp_matrix_nchidof_x_nchidof.MultATBC(GRAD_NCHI,II20p_7,NCHI);
                                	  scale = -1*scale_const*Jp*Comp21*(fMaterial_Params[kKappa]);
                                	  fTemp_matrix_nchidof_x_nchidof *= scale;
                                	  fKMphiphi_II20p_7 += fTemp_matrix_nchidof_x_nchidof;

                                	  fTemp_matrix_nchidof_x_nchidof.MultATBC(GRAD_NCHI,II20p_8,NCHI);
                                	  scale = -1*scale_const*Jp*Comp21*(fMaterial_Params[kNu]);
                                	  fTemp_matrix_nchidof_x_nchidof *= scale;
                                	  fKMphiphi_II20p_8 += fTemp_matrix_nchidof_x_nchidof;

                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II20p_9,fShapeDisplGrad);
                                	  scale = -1*scale_const*Jp*Comp22*fMaterial_Params[kTau];
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II20p_9 += fTemp_matrix_nchidof_x_nudof;

                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II20p_10,fShapeDisplGrad);
                                	  scale = -1*scale_const*Jp*Comp22*fMaterial_Params[kSigma_const];
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II20p_10 += fTemp_matrix_nchidof_x_nudof;

                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II20p_11,fShapeDisplGrad);
                                	  scale = -1*scale_const*Jp*Comp22*(fMaterial_Params[kEta]-fMaterial_Params[kTau]);
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II20p_11 += fTemp_matrix_nchidof_x_nudof;

                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II20p_12,fShapeDisplGrad);
                                	  scale = -1*scale_const*Jp*Comp22*(fMaterial_Params[kNu]-fMaterial_Params[kSigma_const]);
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II20p_12 += fTemp_matrix_nchidof_x_nudof;

                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II20p_13,fShapeDisplGrad);
                                	  scale = -1*scale_const*Jp*Comp22*(fMaterial_Params[kKappa]-fMaterial_Params[kSigma_const]);
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II20p_13 += fTemp_matrix_nchidof_x_nudof;

                                	  fTemp_matrix_nchidof_x_nchidof.MultATBC(GRAD_NCHI,II20p_14,NCHI);
                                	  scale = -1*scale_const*Jp*Comp22*(fMaterial_Params[kEta]-fMaterial_Params[kTau]);
                                	  fTemp_matrix_nchidof_x_nchidof *= scale;
                                	  fKMphiphi_II20p_14 += fTemp_matrix_nchidof_x_nchidof;

                                	  fTemp_matrix_nchidof_x_nchidof.MultATBC(GRAD_NCHI,II20p_15,NCHI);
                                	  scale = -1*scale_const*Jp*Comp22*(fMaterial_Params[kNu]-fMaterial_Params[kSigma_const]);
                                	  fTemp_matrix_nchidof_x_nchidof *= scale;
                                	  fKMphiphi_II20p_15 += fTemp_matrix_nchidof_x_nchidof;

                                	  fTemp_matrix_nchidof_x_nchidof.MultATBC(GRAD_NCHI,II20p_16,NCHI);
                                	  scale = -1*scale_const*Jp*Comp22*(fMaterial_Params[kKappa]-fMaterial_Params[kSigma_const]);
                                	  fTemp_matrix_nchidof_x_nchidof *= scale;
                                	  fKMphiphi_II20p_16 += fTemp_matrix_nchidof_x_nchidof;
                                	  ///////////////////////////////////////////////////////
                                	  ///////////////////////////////////////////////////////
                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II21e_1,fShapeDisplGrad);
                                	  scale = scale_const*Jp*Coeff_delDelgamma_nablachi*fMaterial_Params[kTau7];
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II21e_1 += fTemp_matrix_nchidof_x_nudof;

                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II21p_1,fShapeDisplGrad);
                                	  scale = -1*scale_const*Jp*Coeff_delDelgamma_nablachi*Comp11*fMaterial_Params[kTau7]*(fMaterial_Params[kLambda]+fMaterial_Params[kTau]);
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II21p_1 += fTemp_matrix_nchidof_x_nudof;

                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II21p_2,fShapeDisplGrad);
                                	  scale = -1*scale_const*Jp*Coeff_delDelgamma_nablachi*Comp11*fMaterial_Params[kTau7]*(fMaterial_Params[kMu]+fMaterial_Params[kSigma_const]);
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II21p_2 += fTemp_matrix_nchidof_x_nudof;

                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II21p_3,fShapeDisplGrad);
                                	  scale = -1*scale_const*Jp*Coeff_delDelgamma_nablachi*Comp11*fMaterial_Params[kTau7]*(fMaterial_Params[kEta]);
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II21p_3 += fTemp_matrix_nchidof_x_nudof;

                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II21p_4,fShapeDisplGrad);
                                	  scale = -1*scale_const*Jp*Coeff_delDelgamma_nablachi*Comp11*fMaterial_Params[kTau7]*(fMaterial_Params[kKappa]);
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II21p_4 += fTemp_matrix_nchidof_x_nudof;

                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II21p_5,fShapeDisplGrad);
                                	  scale = -1*scale_const*Jp*Coeff_delDelgamma_nablachi*Comp11*fMaterial_Params[kTau7]*(fMaterial_Params[kNu]);
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II21p_5 += fTemp_matrix_nchidof_x_nudof;

                                	  fTemp_matrix_nchidof_x_nchidof.MultATBC(GRAD_NCHI,II21p_6,NCHI);
                                	  scale = -1*scale_const*Jp*Coeff_delDelgamma_nablachi*Comp11*fMaterial_Params[kTau7]*(fMaterial_Params[kEta]);
                                	  fTemp_matrix_nchidof_x_nchidof *= scale;
                                	  fKMphiphi_II21p_6 += fTemp_matrix_nchidof_x_nchidof;

                                	  fTemp_matrix_nchidof_x_nchidof.MultATBC(GRAD_NCHI,II21p_7,NCHI);
                                	  scale = -1*scale_const*Jp*Coeff_delDelgamma_nablachi*Comp11*fMaterial_Params[kTau7]*(fMaterial_Params[kKappa]);
                                	  fTemp_matrix_nchidof_x_nchidof *= scale;
                                	  fKMphiphi_II21p_7 += fTemp_matrix_nchidof_x_nchidof;

                                	  fTemp_matrix_nchidof_x_nchidof.MultATBC(GRAD_NCHI,II21p_8,NCHI);
                                	  scale = -1*scale_const*Jp*Coeff_delDelgamma_nablachi*Comp11*fMaterial_Params[kTau7]*(fMaterial_Params[kNu]);
                                	  fTemp_matrix_nchidof_x_nchidof *= scale;
                                	  fKMphiphi_II21p_8 += fTemp_matrix_nchidof_x_nchidof;

                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II21p_1a,fShapeDisplGrad);
                                	  scale = -1*scale_const*Jp*Coeff_delDelgamma_nablachi*Comp12*fMaterial_Params[kTau7]*(fMaterial_Params[kTau]);
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II21p_1a += fTemp_matrix_nchidof_x_nudof;

                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II21p_2a,fShapeDisplGrad);
                                	  scale = -1*scale_const*Jp*Coeff_delDelgamma_nablachi*Comp12*fMaterial_Params[kTau7]*(fMaterial_Params[kSigma_const]);
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II21p_2a += fTemp_matrix_nchidof_x_nudof;

                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II21p_3a,fShapeDisplGrad);
                                	  scale = -1*scale_const*Jp*Coeff_delDelgamma_nablachi*Comp12*fMaterial_Params[kTau7]*(fMaterial_Params[kEta]-fMaterial_Params[kTau]);
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II21p_3a += fTemp_matrix_nchidof_x_nudof;

                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II21p_4a,fShapeDisplGrad);
                                	  scale = -1*scale_const*Jp*Coeff_delDelgamma_nablachi*Comp12*fMaterial_Params[kTau7]*(fMaterial_Params[kNu]-fMaterial_Params[kSigma_const]);
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II21p_4a += fTemp_matrix_nchidof_x_nudof;

                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II21p_5a,fShapeDisplGrad);
                                	  scale = -1*scale_const*Jp*Coeff_delDelgamma_nablachi*Comp12*fMaterial_Params[kTau7]*(fMaterial_Params[kKappa]-fMaterial_Params[kSigma_const]);
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II21p_5a += fTemp_matrix_nchidof_x_nudof;

                                	  fTemp_matrix_nchidof_x_nchidof.MultATBC(GRAD_NCHI,II21p_6a,NCHI);
                                	  scale = -1*scale_const*Jp*Coeff_delDelgamma_nablachi*Comp12*fMaterial_Params[kTau7]*(fMaterial_Params[kEta]-fMaterial_Params[kTau]);
                                	  fTemp_matrix_nchidof_x_nchidof *= scale;
                                	  fKMphiphi_II21p_6a += fTemp_matrix_nchidof_x_nchidof;

                                	  fTemp_matrix_nchidof_x_nchidof.MultATBC(GRAD_NCHI,II21p_7a,NCHI);
                                	  scale = -1*scale_const*Jp*Coeff_delDelgamma_nablachi*Comp12*fMaterial_Params[kTau7]*(fMaterial_Params[kNu]-fMaterial_Params[kSigma_const]);
                                	  fTemp_matrix_nchidof_x_nchidof *= scale;
                                	  fKMphiphi_II21p_7a += fTemp_matrix_nchidof_x_nchidof;

                                	  fTemp_matrix_nchidof_x_nchidof.MultATBC(GRAD_NCHI,II21p_8a,NCHI);
                                	  scale = -1*scale_const*Jp*Coeff_delDelgamma_nablachi*Comp12*fMaterial_Params[kTau7]*(fMaterial_Params[kKappa]-fMaterial_Params[kSigma_const]);
                                	  fTemp_matrix_nchidof_x_nchidof *= scale;
                                	  fKMphiphi_II21p_8a += fTemp_matrix_nchidof_x_nchidof;
                                	  ///////////////////////////////////////////////////////
                                	  ///////////////////////////////////////////////////////
                                	  fTemp_matrix_nchidof_x_nchidof.MultATBC(GRAD_NCHI,II21p_9,GRAD_NCHI);
                                	  scale = scale_const*Jp*Coeff_delDelgamma_nablachi;
                                	  fTemp_matrix_nchidof_x_nchidof *= scale;
                                	  fKMphiphi_II21p_9+= fTemp_matrix_nchidof_x_nchidof;
                                	  ///////////////////////////////////////////////////////
                                	  ///////////////////////////////////////////////////////
                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II21p_10,fShapeDisplGrad);
                                	  scale = -1*scale_const*Jp*Coeff_delDelgamma_nablachi*Comp11*fMaterial_Params[kTau7]*(fMaterial_Params[kLambda]+fMaterial_Params[kTau]);
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II21p_10 += fTemp_matrix_nchidof_x_nudof;

                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II21p_11,fShapeDisplGrad);
                                	  scale = -1*scale_const*Jp*Coeff_delDelgamma_nablachi*Comp11*fMaterial_Params[kTau7]*(fMaterial_Params[kMu]+fMaterial_Params[kSigma_const]);
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II21p_11 += fTemp_matrix_nchidof_x_nudof;

                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II21p_12,fShapeDisplGrad);
                                	  scale = -1*scale_const*Jp*Coeff_delDelgamma_nablachi*Comp11*fMaterial_Params[kTau7]*(fMaterial_Params[kEta]);
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II21p_12 += fTemp_matrix_nchidof_x_nudof;

                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II21p_13,fShapeDisplGrad);
                                	  scale = -1*scale_const*Jp*Coeff_delDelgamma_nablachi*Comp11*fMaterial_Params[kTau7]*(fMaterial_Params[kKappa]);
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II21p_13 += fTemp_matrix_nchidof_x_nudof;

                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II21p_14,fShapeDisplGrad);
                                	  scale = -1*scale_const*Jp*Coeff_delDelgamma_nablachi*Comp11*fMaterial_Params[kTau7]*(fMaterial_Params[kNu]);
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II21p_14 += fTemp_matrix_nchidof_x_nudof;

                                	  fTemp_matrix_nchidof_x_nchidof.MultATBC(GRAD_NCHI,II21p_15,NCHI);
                                	  scale = -1*scale_const*Jp*Coeff_delDelgamma_nablachi*Comp11*fMaterial_Params[kTau7]*(fMaterial_Params[kEta]);
                                	  fTemp_matrix_nchidof_x_nchidof *= scale;
                                	  fKMphiphi_II21p_15 += fTemp_matrix_nchidof_x_nchidof;

                                	  fTemp_matrix_nchidof_x_nchidof.MultATBC(GRAD_NCHI,II21p_16,NCHI);
                                	  scale = -1*scale_const*Jp*Coeff_delDelgamma_nablachi*Comp11*fMaterial_Params[kTau7]*(fMaterial_Params[kKappa]);
                                	  fTemp_matrix_nchidof_x_nchidof *= scale;
                                	  fKMphiphi_II21p_16 += fTemp_matrix_nchidof_x_nchidof;

                                	  fTemp_matrix_nchidof_x_nchidof.MultATBC(GRAD_NCHI,II21p_17,NCHI);
                                	  scale = -1*scale_const*Jp*Coeff_delDelgamma_nablachi*Comp11*fMaterial_Params[kTau7]*(fMaterial_Params[kNu]);
                                	  fTemp_matrix_nchidof_x_nchidof *= scale;
                                	  fKMphiphi_II21p_17 += fTemp_matrix_nchidof_x_nchidof;

                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II21p_10a,fShapeDisplGrad);
                                	  scale = -1*scale_const*Jp*Coeff_delDelgamma_nablachi*Comp12*fMaterial_Params[kTau7]*(fMaterial_Params[kTau]);
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II21p_10a += fTemp_matrix_nchidof_x_nudof;

                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II21p_11a,fShapeDisplGrad);
                                	  scale = -1*scale_const*Jp*Coeff_delDelgamma_nablachi*Comp12*fMaterial_Params[kTau7]*(fMaterial_Params[kSigma_const]);
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II21p_11a += fTemp_matrix_nchidof_x_nudof;

                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II21p_12a,fShapeDisplGrad);
                                	  scale = -1*scale_const*Jp*Coeff_delDelgamma_nablachi*Comp12*fMaterial_Params[kTau7]*(fMaterial_Params[kEta]-fMaterial_Params[kTau]);
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II21p_12a += fTemp_matrix_nchidof_x_nudof;

                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II21p_13a,fShapeDisplGrad);
                                	  scale = -1*scale_const*Jp*Coeff_delDelgamma_nablachi*Comp12*fMaterial_Params[kTau7]*(fMaterial_Params[kNu]-fMaterial_Params[kSigma_const]);
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II21p_13a += fTemp_matrix_nchidof_x_nudof;

                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II21p_14a,fShapeDisplGrad);
                                	  scale = -1*scale_const*Jp*Coeff_delDelgamma_nablachi*Comp12*fMaterial_Params[kTau7]*(fMaterial_Params[kKappa]-fMaterial_Params[kSigma_const]);
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II21p_14a += fTemp_matrix_nchidof_x_nudof;

                                	  fTemp_matrix_nchidof_x_nchidof.MultATBC(GRAD_NCHI,II21p_15a,NCHI);
                                	  scale = -1*scale_const*Jp*Coeff_delDelgamma_nablachi*Comp12*fMaterial_Params[kTau7]*(fMaterial_Params[kEta]-fMaterial_Params[kTau]);
                                	  fTemp_matrix_nchidof_x_nchidof *= scale;
                                	  fKMphiphi_II21p_15a += fTemp_matrix_nchidof_x_nchidof;

                                	  fTemp_matrix_nchidof_x_nchidof.MultATBC(GRAD_NCHI,II21p_16a,NCHI);
                                	  scale = -1*scale_const*Jp*Coeff_delDelgamma_nablachi*Comp12*fMaterial_Params[kTau7]*(fMaterial_Params[kNu]-fMaterial_Params[kSigma_const]);
                                	  fTemp_matrix_nchidof_x_nchidof *= scale;
                                	  fKMphiphi_II21p_16a += fTemp_matrix_nchidof_x_nchidof;

                                	  fTemp_matrix_nchidof_x_nchidof.MultATBC(GRAD_NCHI,II21p_17a,NCHI);
                                	  scale = -1*scale_const*Jp*Coeff_delDelgamma_nablachi*Comp12*fMaterial_Params[kTau7]*(fMaterial_Params[kKappa]-fMaterial_Params[kSigma_const]);
                                	  fTemp_matrix_nchidof_x_nchidof *= scale;
                                	  fKMphiphi_II21p_17a += fTemp_matrix_nchidof_x_nchidof;
                                	  ///////////////////////////////////////////////////////
                                	  ///////////////////////////////////////////////////////
                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II21p_18,fShapeDisplGrad);
                                	  scale = -1*scale_const*Jp*Coeff_delDelgamma_nablachi*Comp21*fMaterial_Params[kTau7]*(fMaterial_Params[kLambda]+fMaterial_Params[kTau]);
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II21p_18 += fTemp_matrix_nchidof_x_nudof;

                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II21p_19,fShapeDisplGrad);
                                	  scale = -1*scale_const*Jp*Coeff_delDelgamma_nablachi*Comp21*fMaterial_Params[kTau7]*(fMaterial_Params[kMu]+fMaterial_Params[kSigma_const]);
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II21p_19 += fTemp_matrix_nchidof_x_nudof;

                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II21p_20,fShapeDisplGrad);
                                	  scale = -1*scale_const*Jp*Coeff_delDelgamma_nablachi*Comp21*fMaterial_Params[kTau7]*(fMaterial_Params[kEta]);
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II21p_20 += fTemp_matrix_nchidof_x_nudof;

                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II21p_21,fShapeDisplGrad);
                                	  scale = -1*scale_const*Jp*Coeff_delDelgamma_nablachi*Comp21*fMaterial_Params[kTau7]*(fMaterial_Params[kKappa]);
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II21p_21 += fTemp_matrix_nchidof_x_nudof;

                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II21p_22,fShapeDisplGrad);
                                	  scale = -1*scale_const*Jp*Coeff_delDelgamma_nablachi*Comp21*fMaterial_Params[kTau7]*(fMaterial_Params[kNu]);
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II21p_22 += fTemp_matrix_nchidof_x_nudof;

                                	  fTemp_matrix_nchidof_x_nchidof.MultATBC(GRAD_NCHI,II21p_23,NCHI);
                                	  scale = -1*scale_const*Jp*Coeff_delDelgamma_nablachi*Comp21*fMaterial_Params[kTau7]*fMaterial_Params[kTau7]*(fMaterial_Params[kEta]);
                                	  fTemp_matrix_nchidof_x_nchidof *= scale;
                                	  fKMphiphi_II21p_23 += fTemp_matrix_nchidof_x_nchidof;

                                	  fTemp_matrix_nchidof_x_nchidof.MultATBC(GRAD_NCHI,II21p_24,NCHI);
                                	  scale = -1*scale_const*Jp*Coeff_delDelgamma_nablachi*Comp21*fMaterial_Params[kTau7]*fMaterial_Params[kTau7]*(fMaterial_Params[kKappa]);
                                	  fTemp_matrix_nchidof_x_nchidof *= scale;
                                	  fKMphiphi_II21p_24 += fTemp_matrix_nchidof_x_nchidof;

                                	  fTemp_matrix_nchidof_x_nchidof.MultATBC(GRAD_NCHI,II21p_25,NCHI);
                                	  scale = -1*scale_const*Jp*Coeff_delDelgamma_nablachi*Comp21*fMaterial_Params[kTau7]*fMaterial_Params[kTau7]*(fMaterial_Params[kNu]);
                                	  fTemp_matrix_nchidof_x_nchidof *= scale;
                                	  fKMphiphi_II21p_25 += fTemp_matrix_nchidof_x_nchidof;

                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II21p_18a,fShapeDisplGrad);
                                	  scale = -1*scale_const*Jp*Coeff_delDelgamma_nablachi*Comp22*fMaterial_Params[kTau7]*fMaterial_Params[kTau7]*fMaterial_Params[kTau];
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II21p_18a += fTemp_matrix_nchidof_x_nudof;

                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II21p_19a,fShapeDisplGrad);
                                	  scale = -1*scale_const*Jp*Coeff_delDelgamma_nablachi*Comp22*fMaterial_Params[kTau7]*fMaterial_Params[kTau7]*fMaterial_Params[kSigma_const];
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II21p_19a += fTemp_matrix_nchidof_x_nudof;

                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II21p_20a,fShapeDisplGrad);
                                	  scale = -1*scale_const*Jp*Coeff_delDelgamma_nablachi*Comp22*fMaterial_Params[kTau7]*fMaterial_Params[kTau7]*(fMaterial_Params[kEta]-fMaterial_Params[kTau]);
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II21p_20a += fTemp_matrix_nchidof_x_nudof;

                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II21p_21a,fShapeDisplGrad);
                                	  scale = -1*scale_const*Jp*Coeff_delDelgamma_nablachi*Comp22*fMaterial_Params[kTau7]*fMaterial_Params[kTau7]*(fMaterial_Params[kNu]-fMaterial_Params[kSigma_const]);
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II21p_21a += fTemp_matrix_nchidof_x_nudof;

                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II21p_22a,fShapeDisplGrad);
                                	  scale = -1*scale_const*Jp*Coeff_delDelgamma_nablachi*Comp22*fMaterial_Params[kTau7]*fMaterial_Params[kTau7]*(fMaterial_Params[kKappa]-fMaterial_Params[kSigma_const]);
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II21p_22a += fTemp_matrix_nchidof_x_nudof;

                                	  fTemp_matrix_nchidof_x_nchidof.MultATBC(GRAD_NCHI,II21p_23a,NCHI);
                                	  scale = -1*scale_const*Jp*Coeff_delDelgamma_nablachi*Comp22*fMaterial_Params[kTau7]*fMaterial_Params[kTau7]*(fMaterial_Params[kEta]-fMaterial_Params[kTau]);
                                	  fTemp_matrix_nchidof_x_nchidof *= scale;
                                	  fKMphiphi_II21p_23a += fTemp_matrix_nchidof_x_nchidof;

                                	  fTemp_matrix_nchidof_x_nchidof.MultATBC(GRAD_NCHI,II21p_24a,NCHI);
                                	  scale = -1*scale_const*Jp*Coeff_delDelgamma_nablachi*Comp22*fMaterial_Params[kTau7]*fMaterial_Params[kTau7]*(fMaterial_Params[kNu]-fMaterial_Params[kSigma_const]);
                                	  fTemp_matrix_nchidof_x_nchidof *= scale;
                                	  fKMphiphi_II21p_24a += fTemp_matrix_nchidof_x_nchidof;

                                	  fTemp_matrix_nchidof_x_nchidof.MultATBC(GRAD_NCHI,II21p_25a,NCHI);
                                	  scale = -1*scale_const*Jp*Coeff_delDelgamma_nablachi*Comp22*fMaterial_Params[kTau7]*fMaterial_Params[kTau7]*(fMaterial_Params[kKappa]-fMaterial_Params[kSigma_const]);
                                	  fTemp_matrix_nchidof_x_nchidof *= scale;
                                	  fKMphiphi_II21p_25a += fTemp_matrix_nchidof_x_nchidof;
                                	  ///////////////////////////////////////////////////////
                                	  ///////////////////////////////////////////////////////
                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II21p_26,fShapeDisplGrad);
                                	  scale = -1*scale_const*Jp*Coeff_delDelgamma_nablachi*fMaterial_Params[kTau7]*fMaterial_Params[kTau7];
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II21p_26+= fTemp_matrix_nchidof_x_nudof;
                                	  ///////////////////////////////////////////////////////
                                	  ///////////////////////////////////////////////////////
                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II21p_27,fShapeDisplGrad);
                                	  scale = scale_const*Jp*Coeff_delDelgamma_nablachi*Comp11*fMaterial_Params[kTau7]*fMaterial_Params[kTau7]*(fMaterial_Params[kLambda]+fMaterial_Params[kTau]);
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II21p_27 += fTemp_matrix_nchidof_x_nudof;

                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II21p_28,fShapeDisplGrad);
                                	  scale = scale_const*Jp*Coeff_delDelgamma_nablachi*Comp11*fMaterial_Params[kTau7]*fMaterial_Params[kTau7]*(fMaterial_Params[kMu]+fMaterial_Params[kSigma_const]);
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II21p_28 += fTemp_matrix_nchidof_x_nudof;

                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II21p_29,fShapeDisplGrad);
                                	  scale = scale_const*Jp*Coeff_delDelgamma_nablachi*Comp11*fMaterial_Params[kTau7]*fMaterial_Params[kTau7]*(fMaterial_Params[kEta]);
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II21p_29 += fTemp_matrix_nchidof_x_nudof;

                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II21p_30,fShapeDisplGrad);
                                	  scale = scale_const*Jp*Coeff_delDelgamma_nablachi*Comp11*fMaterial_Params[kTau7]*fMaterial_Params[kTau7]*(fMaterial_Params[kKappa]);
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II21p_30 += fTemp_matrix_nchidof_x_nudof;

                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II21p_31,fShapeDisplGrad);
                                	  scale = scale_const*Jp*Coeff_delDelgamma_nablachi*Comp11*fMaterial_Params[kTau7]*fMaterial_Params[kTau7]*(fMaterial_Params[kNu]);
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II21p_31 += fTemp_matrix_nchidof_x_nudof;

                                	  fTemp_matrix_nchidof_x_nchidof.MultATBC(GRAD_NCHI,II21p_32,NCHI);
                                	  scale = scale_const*Jp*Coeff_delDelgamma_nablachi*Comp11*fMaterial_Params[kTau7]*fMaterial_Params[kTau7]*(fMaterial_Params[kEta]);
                                	  fTemp_matrix_nchidof_x_nchidof *= scale;
                                	  fKMphiphi_II21p_32 += fTemp_matrix_nchidof_x_nchidof;

                                	  fTemp_matrix_nchidof_x_nchidof.MultATBC(GRAD_NCHI,II21p_33,NCHI);
                                	  scale = scale_const*Jp*Coeff_delDelgamma_nablachi*Comp11*fMaterial_Params[kTau7]*fMaterial_Params[kTau7]*(fMaterial_Params[kKappa]);
                                	  fTemp_matrix_nchidof_x_nchidof *= scale;
                                	  fKMphiphi_II21p_33 += fTemp_matrix_nchidof_x_nchidof;

                                	  fTemp_matrix_nchidof_x_nchidof.MultATBC(GRAD_NCHI,II21p_34,NCHI);
                                	  scale = scale_const*Jp*Coeff_delDelgamma_nablachi*Comp11*fMaterial_Params[kTau7]*fMaterial_Params[kTau7]*(fMaterial_Params[kNu]);
                                	  fTemp_matrix_nchidof_x_nchidof *= scale;
                                	  fKMphiphi_II21p_34 += fTemp_matrix_nchidof_x_nchidof;

                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II21p_27a,fShapeDisplGrad);
                                	  scale = scale_const*Jp*Coeff_delDelgamma_nablachi*Comp12*fMaterial_Params[kTau7]*fMaterial_Params[kTau7]*(fMaterial_Params[kTau]);
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II21p_27a += fTemp_matrix_nchidof_x_nudof;

                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II21p_28a,fShapeDisplGrad);
                                	  scale = scale_const*Jp*Coeff_delDelgamma_nablachi*Comp12*fMaterial_Params[kTau7]*fMaterial_Params[kTau7]*(fMaterial_Params[kSigma_const]);
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II21p_28a += fTemp_matrix_nchidof_x_nudof;

                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II21p_29a,fShapeDisplGrad);
                                	  scale = scale_const*Jp*Coeff_delDelgamma_nablachi*Comp12*fMaterial_Params[kTau7]*fMaterial_Params[kTau7]*(fMaterial_Params[kEta]-fMaterial_Params[kTau]);
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II21p_29a += fTemp_matrix_nchidof_x_nudof;

                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II21p_30a,fShapeDisplGrad);
                                	  scale = scale_const*Jp*Coeff_delDelgamma_nablachi*Comp12*fMaterial_Params[kTau7]*fMaterial_Params[kTau7]*(fMaterial_Params[kNu]-fMaterial_Params[kSigma_const]);
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II21p_30a += fTemp_matrix_nchidof_x_nudof;

                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II21p_31a,fShapeDisplGrad);
                                	  scale = scale_const*Jp*Coeff_delDelgamma_nablachi*Comp12*fMaterial_Params[kTau7]*fMaterial_Params[kTau7]*(fMaterial_Params[kKappa]-fMaterial_Params[kSigma_const]);
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II21p_31a += fTemp_matrix_nchidof_x_nudof;

                                	  fTemp_matrix_nchidof_x_nchidof.MultATBC(GRAD_NCHI,II21p_32a,NCHI);
                                	  scale = scale_const*Jp*Coeff_delDelgamma_nablachi*Comp12*fMaterial_Params[kTau7]*fMaterial_Params[kTau7]*(fMaterial_Params[kEta]-fMaterial_Params[kTau]);
                                	  fTemp_matrix_nchidof_x_nchidof *= scale;
                                	  fKMphiphi_II21p_32a += fTemp_matrix_nchidof_x_nchidof;

                                	  fTemp_matrix_nchidof_x_nchidof.MultATBC(GRAD_NCHI,II21p_33a,NCHI);
                                	  scale = scale_const*Jp*Coeff_delDelgamma_nablachi*Comp12*fMaterial_Params[kTau7]*fMaterial_Params[kTau7]*(fMaterial_Params[kNu]-fMaterial_Params[kSigma_const]);
                                	  fTemp_matrix_nchidof_x_nchidof *= scale;
                                	  fKMphiphi_II21p_33a += fTemp_matrix_nchidof_x_nchidof;

                                	  fTemp_matrix_nchidof_x_nchidof.MultATBC(GRAD_NCHI,II21p_34a,NCHI);
                                	  scale = scale_const*Jp*Coeff_delDelgamma_nablachi*Comp12*fMaterial_Params[kTau7]*fMaterial_Params[kTau7]*(fMaterial_Params[kKappa]-fMaterial_Params[kSigma_const]);
                                	  fTemp_matrix_nchidof_x_nchidof *= scale;
                                	  fKMphiphi_II21p_34a += fTemp_matrix_nchidof_x_nchidof;
                                	  ///////////////////////////////////////////////////////
                                	  ///////////////////////////////////////////////////////
                                	  fTemp_matrix_nchidof_x_nchidof.MultATBC(GRAD_NCHI,II21p_35,NCHI);
                                	  scale = -1*scale_const*Jp*Coeff_delDelgamma_nablachi*fMaterial_Params[kTau7]*fMaterial_Params[kTau7];
                                	  fTemp_matrix_nchidof_x_nchidof *= scale;
                                	  fKMphiphi_II21p_35+= fTemp_matrix_nchidof_x_nchidof;
                                	  ///////////////////////////////////////////////////////
                                	  ///////////////////////////////////////////////////////
                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II21p_36,fShapeDisplGrad);
                                	  scale = scale_const*Jp*Coeff_delDelgamma_nablachi*Comp21*fMaterial_Params[kTau7]*fMaterial_Params[kTau7]*(fMaterial_Params[kLambda]+fMaterial_Params[kTau]);
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II21p_36 += fTemp_matrix_nchidof_x_nudof;

                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II21p_37,fShapeDisplGrad);
                                	  scale = scale_const*Jp*Coeff_delDelgamma_nablachi*Comp21*fMaterial_Params[kTau7]*fMaterial_Params[kTau7]*(fMaterial_Params[kMu]+fMaterial_Params[kSigma_const]);
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II21p_37 += fTemp_matrix_nchidof_x_nudof;

                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II21p_38,fShapeDisplGrad);
                                	  scale = scale_const*Jp*Coeff_delDelgamma_nablachi*Comp21*fMaterial_Params[kTau7]*fMaterial_Params[kTau7]*(fMaterial_Params[kEta]);
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II21p_38 += fTemp_matrix_nchidof_x_nudof;

                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II21p_39,fShapeDisplGrad);
                                	  scale = scale_const*Jp*Coeff_delDelgamma_nablachi*Comp21*fMaterial_Params[kTau7]*fMaterial_Params[kTau7]*(fMaterial_Params[kKappa]);
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II21p_39 += fTemp_matrix_nchidof_x_nudof;

                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II21p_40,fShapeDisplGrad);
                                	  scale = scale_const*Jp*Coeff_delDelgamma_nablachi*Comp21*fMaterial_Params[kTau7]*fMaterial_Params[kTau7]*(fMaterial_Params[kNu]);
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II21p_40 += fTemp_matrix_nchidof_x_nudof;

                                	  fTemp_matrix_nchidof_x_nchidof.MultATBC(GRAD_NCHI,II21p_41,NCHI);
                                	  scale = scale_const*Jp*Coeff_delDelgamma_nablachi*Comp21*fMaterial_Params[kTau7]*fMaterial_Params[kTau7]*(fMaterial_Params[kEta]);
                                	  fTemp_matrix_nchidof_x_nchidof *= scale;
                                	  fKMphiphi_II21p_41 += fTemp_matrix_nchidof_x_nchidof;

                                	  fTemp_matrix_nchidof_x_nchidof.MultATBC(GRAD_NCHI,II21p_42,NCHI);
                                	  scale = scale_const*Jp*Coeff_delDelgamma_nablachi*Comp21*fMaterial_Params[kTau7]*fMaterial_Params[kTau7]*(fMaterial_Params[kKappa]);
                                	  fTemp_matrix_nchidof_x_nchidof *= scale;
                                	  fKMphiphi_II21p_42 += fTemp_matrix_nchidof_x_nchidof;

                                	  fTemp_matrix_nchidof_x_nchidof.MultATBC(GRAD_NCHI,II21p_43,NCHI);
                                	  scale = scale_const*Jp*Coeff_delDelgamma_nablachi*Comp21*fMaterial_Params[kTau7]*fMaterial_Params[kTau7]*(fMaterial_Params[kNu]);
                                	  fTemp_matrix_nchidof_x_nchidof *= scale;
                                	  fKMphiphi_II21p_43 += fTemp_matrix_nchidof_x_nchidof;

                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II21p_36a,fShapeDisplGrad);
                                	  scale = scale_const*Jp*Coeff_delDelgamma_nablachi*Comp22*fMaterial_Params[kTau7]*fMaterial_Params[kTau7]*fMaterial_Params[kTau];
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II21p_36a += fTemp_matrix_nchidof_x_nudof;

                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II21p_37a,fShapeDisplGrad);
                                	  scale = scale_const*Jp*Coeff_delDelgamma_nablachi*Comp22*fMaterial_Params[kTau7]*fMaterial_Params[kTau7]*fMaterial_Params[kSigma_const];
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II21p_37a += fTemp_matrix_nchidof_x_nudof;

                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II21p_38a,fShapeDisplGrad);
                                	  scale = scale_const*Jp*Coeff_delDelgamma_nablachi*Comp22*fMaterial_Params[kTau7]*fMaterial_Params[kTau7]*(fMaterial_Params[kEta]-fMaterial_Params[kTau]);
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II21p_38a += fTemp_matrix_nchidof_x_nudof;

                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II21p_39a,fShapeDisplGrad);
                                	  scale = scale_const*Jp*Coeff_delDelgamma_nablachi*Comp22*fMaterial_Params[kTau7]*fMaterial_Params[kTau7]*(fMaterial_Params[kNu]-fMaterial_Params[kSigma_const]);
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II21p_39a += fTemp_matrix_nchidof_x_nudof;

                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II21p_40a,fShapeDisplGrad);
                                	  scale = scale_const*Jp*Coeff_delDelgamma_nablachi*Comp22*fMaterial_Params[kTau7]*fMaterial_Params[kTau7]*(fMaterial_Params[kKappa]-fMaterial_Params[kSigma_const]);
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II21p_40a += fTemp_matrix_nchidof_x_nudof;

                                	  fTemp_matrix_nchidof_x_nchidof.MultATBC(GRAD_NCHI,II21p_41a,NCHI);
                                	  scale = scale_const*Jp*Coeff_delDelgamma_nablachi*Comp22*fMaterial_Params[kTau7]*fMaterial_Params[kTau7]*(fMaterial_Params[kEta]-fMaterial_Params[kTau]);
                                	  fTemp_matrix_nchidof_x_nchidof *= scale;
                                	  fKMphiphi_II21p_41a += fTemp_matrix_nchidof_x_nchidof;

                                	  fTemp_matrix_nchidof_x_nchidof.MultATBC(GRAD_NCHI,II21p_42a,NCHI);
                                	  scale = scale_const*Jp*Coeff_delDelgamma_nablachi*Comp22*fMaterial_Params[kTau7]*fMaterial_Params[kTau7]*(fMaterial_Params[kNu]-fMaterial_Params[kSigma_const]);
                                	  fTemp_matrix_nchidof_x_nchidof *= scale;
                                	  fKMphiphi_II21p_42a += fTemp_matrix_nchidof_x_nchidof;

                                	  fTemp_matrix_nchidof_x_nchidof.MultATBC(GRAD_NCHI,II21p_43a,NCHI);
                                	  scale = scale_const*Jp*Coeff_delDelgamma_nablachi*Comp22*fMaterial_Params[kTau7]*fMaterial_Params[kTau7]*(fMaterial_Params[kKappa]-fMaterial_Params[kSigma_const]);
                                	  fTemp_matrix_nchidof_x_nchidof *= scale;
                                	  fKMphiphi_II21p_43a += fTemp_matrix_nchidof_x_nchidof;
                                	  ///////////////////////////////////////////////////////
                                	  ///////////////////////////////////////////////////////
                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II21p_44,fShapeDisplGrad);
                                	  scale = scale_const*Jp*Coeff_delDelgamma_nablachi*Comp21*fMaterial_Params[kTau7]*fMaterial_Params[kTau7]*(fMaterial_Params[kLambda]+fMaterial_Params[kTau]);
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II21p_44 += fTemp_matrix_nchidof_x_nudof;

                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II21p_45,fShapeDisplGrad);
                                	  scale = scale_const*Jp*Coeff_delDelgamma_nablachi*Comp21*fMaterial_Params[kTau7]*fMaterial_Params[kTau7]*(fMaterial_Params[kMu]+fMaterial_Params[kSigma_const]);
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II21p_45 += fTemp_matrix_nchidof_x_nudof;

                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II21p_46,fShapeDisplGrad);
                                	  scale = scale_const*Jp*Coeff_delDelgamma_nablachi*Comp21*fMaterial_Params[kTau7]*fMaterial_Params[kTau7]*(fMaterial_Params[kEta]);
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II21p_46 += fTemp_matrix_nchidof_x_nudof;

                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II21p_47,fShapeDisplGrad);
                                	  scale = scale_const*Jp*Coeff_delDelgamma_nablachi*Comp21*fMaterial_Params[kTau7]*fMaterial_Params[kTau7]*(fMaterial_Params[kKappa]);
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II21p_47 += fTemp_matrix_nchidof_x_nudof;

                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II21p_48,fShapeDisplGrad);
                                	  scale = scale_const*Jp*Coeff_delDelgamma_nablachi*Comp21*fMaterial_Params[kTau7]*fMaterial_Params[kTau7]*(fMaterial_Params[kNu]);
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II21p_48 += fTemp_matrix_nchidof_x_nudof;

                                	  fTemp_matrix_nchidof_x_nchidof.MultATBC(GRAD_NCHI,II21p_49,NCHI);
                                	  scale = scale_const*Jp*Coeff_delDelgamma_nablachi*Comp21*fMaterial_Params[kTau7]*fMaterial_Params[kTau7]*(fMaterial_Params[kEta]);
                                	  fTemp_matrix_nchidof_x_nchidof *= scale;
                                	  fKMphiphi_II21p_49 += fTemp_matrix_nchidof_x_nchidof;

                                	  fTemp_matrix_nchidof_x_nchidof.MultATBC(GRAD_NCHI,II21p_50,NCHI);
                                	  scale = scale_const*Jp*Coeff_delDelgamma_nablachi*Comp21*fMaterial_Params[kTau7]*fMaterial_Params[kTau7]*(fMaterial_Params[kKappa]);
                                	  fTemp_matrix_nchidof_x_nchidof *= scale;
                                	  fKMphiphi_II21p_50 += fTemp_matrix_nchidof_x_nchidof;

                                	  fTemp_matrix_nchidof_x_nchidof.MultATBC(GRAD_NCHI,II21p_51,NCHI);
                                	  scale = scale_const*Jp*Coeff_delDelgamma_nablachi*Comp21*fMaterial_Params[kTau7]*fMaterial_Params[kTau7]*(fMaterial_Params[kNu]);
                                	  fTemp_matrix_nchidof_x_nchidof *= scale;
                                	  fKMphiphi_II21p_51 += fTemp_matrix_nchidof_x_nchidof;

                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II21p_44a,fShapeDisplGrad);
                                	  scale = scale_const*Jp*Coeff_delDelgamma_nablachi*Comp22*fMaterial_Params[kTau7]*fMaterial_Params[kTau7]*fMaterial_Params[kTau];
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II21p_44a += fTemp_matrix_nchidof_x_nudof;

                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II21p_45a,fShapeDisplGrad);
                                	  scale = scale_const*Jp*Coeff_delDelgamma_nablachi*Comp22*fMaterial_Params[kTau7]*fMaterial_Params[kTau7]*fMaterial_Params[kSigma_const];
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II21p_45a += fTemp_matrix_nchidof_x_nudof;

                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II21p_46a,fShapeDisplGrad);
                                	  scale = scale_const*Jp*Coeff_delDelgamma_nablachi*Comp22*fMaterial_Params[kTau7]*fMaterial_Params[kTau7]*(fMaterial_Params[kEta]-fMaterial_Params[kTau]);
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II21p_46a += fTemp_matrix_nchidof_x_nudof;

                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II21p_47a,fShapeDisplGrad);
                                	  scale = scale_const*Jp*Coeff_delDelgamma_nablachi*Comp22*fMaterial_Params[kTau7]*fMaterial_Params[kTau7]*(fMaterial_Params[kNu]-fMaterial_Params[kSigma_const]);
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II21p_47a += fTemp_matrix_nchidof_x_nudof;

                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II21p_48a,fShapeDisplGrad);
                                	  scale = scale_const*Jp*Coeff_delDelgamma_nablachi*Comp22*fMaterial_Params[kTau7]*fMaterial_Params[kTau7]*(fMaterial_Params[kKappa]-fMaterial_Params[kSigma_const]);
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II21p_48a += fTemp_matrix_nchidof_x_nudof;

                                	  fTemp_matrix_nchidof_x_nchidof.MultATBC(GRAD_NCHI,II21p_49a,NCHI);
                                	  scale = scale_const*Jp*Coeff_delDelgamma_nablachi*Comp22*fMaterial_Params[kTau7]*fMaterial_Params[kTau7]*(fMaterial_Params[kEta]-fMaterial_Params[kTau]);
                                	  fTemp_matrix_nchidof_x_nchidof *= scale;
                                	  fKMphiphi_II21p_49a += fTemp_matrix_nchidof_x_nchidof;

                                	  fTemp_matrix_nchidof_x_nchidof.MultATBC(GRAD_NCHI,II21p_50a,NCHI);
                                	  scale = scale_const*Jp*Coeff_delDelgamma_nablachi*Comp22*fMaterial_Params[kTau7]*fMaterial_Params[kTau7]*(fMaterial_Params[kNu]-fMaterial_Params[kSigma_const]);
                                	  fTemp_matrix_nchidof_x_nchidof *= scale;
                                	  fKMphiphi_II21p_50a += fTemp_matrix_nchidof_x_nchidof;

                                	  fTemp_matrix_nchidof_x_nchidof.MultATBC(GRAD_NCHI,II21p_51a,NCHI);
                                	  scale = scale_const*Jp*Coeff_delDelgamma_nablachi*Comp22*fMaterial_Params[kTau7]*fMaterial_Params[kTau7]*(fMaterial_Params[kKappa]-fMaterial_Params[kSigma_const]);
                                	  fTemp_matrix_nchidof_x_nchidof *= scale;
                                	  fKMphiphi_II21p_51a += fTemp_matrix_nchidof_x_nchidof;
                                	  ///////////////////////////////////////////////////////
                                	  ///////////////////////////////////////////////////////
                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II21p_52,fShapeDisplGrad);
                                	  scale = -1*scale_const*Jp*Coeff_delDelgamma_nablachi*Comp21*fMaterial_Params[kTau7]*fMaterial_Params[kTau7]*(fMaterial_Params[kLambda]+fMaterial_Params[kTau]);
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II21p_52 += fTemp_matrix_nchidof_x_nudof;

                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II21p_53,fShapeDisplGrad);
                                	  scale = -1*scale_const*Jp*Coeff_delDelgamma_nablachi*Comp21*fMaterial_Params[kTau7]*fMaterial_Params[kTau7]*(fMaterial_Params[kMu]+fMaterial_Params[kSigma_const]);
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II21p_53 += fTemp_matrix_nchidof_x_nudof;

                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II21p_54,fShapeDisplGrad);
                                	  scale = -1*scale_const*Jp*Coeff_delDelgamma_nablachi*Comp21*fMaterial_Params[kTau7]*fMaterial_Params[kTau7]*(fMaterial_Params[kEta]);
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II21p_54 += fTemp_matrix_nchidof_x_nudof;

                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II21p_55,fShapeDisplGrad);
                                	  scale = -1*scale_const*Jp*Coeff_delDelgamma_nablachi*Comp21*fMaterial_Params[kTau7]*fMaterial_Params[kTau7]*(fMaterial_Params[kKappa]);
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II21p_55 += fTemp_matrix_nchidof_x_nudof;

                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II21p_56,fShapeDisplGrad);
                                	  scale = -1*scale_const*Jp*Coeff_delDelgamma_nablachi*Comp21*fMaterial_Params[kTau7]*fMaterial_Params[kTau7]*(fMaterial_Params[kNu]);
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II21p_56 += fTemp_matrix_nchidof_x_nudof;

                                	  fTemp_matrix_nchidof_x_nchidof.MultATBC(GRAD_NCHI,II21p_57,NCHI);
                                	  scale = -1*scale_const*Jp*Coeff_delDelgamma_nablachi*Comp21*fMaterial_Params[kTau7]*fMaterial_Params[kTau7]*(fMaterial_Params[kEta]);
                                	  fTemp_matrix_nchidof_x_nchidof *= scale;
                                	  fKMphiphi_II21p_57 += fTemp_matrix_nchidof_x_nchidof;

                                	  fTemp_matrix_nchidof_x_nchidof.MultATBC(GRAD_NCHI,II21p_58,NCHI);
                                	  scale = -1*scale_const*Jp*Coeff_delDelgamma_nablachi*Comp21*fMaterial_Params[kTau7]*fMaterial_Params[kTau7]*(fMaterial_Params[kKappa]);
                                	  fTemp_matrix_nchidof_x_nchidof *= scale;
                                	  fKMphiphi_II21p_58 += fTemp_matrix_nchidof_x_nchidof;

                                	  fTemp_matrix_nchidof_x_nchidof.MultATBC(GRAD_NCHI,II21p_59,NCHI);
                                	  scale = -1*scale_const*Jp*Coeff_delDelgamma_nablachi*Comp21*fMaterial_Params[kTau7]*fMaterial_Params[kTau7]*(fMaterial_Params[kNu]);
                                	  fTemp_matrix_nchidof_x_nchidof *= scale;
                                	  fKMphiphi_II21p_59 += fTemp_matrix_nchidof_x_nchidof;

                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II21p_52a,fShapeDisplGrad);
                                	  scale = -1*scale_const*Jp*Coeff_delDelgamma_nablachi*Comp22*fMaterial_Params[kTau7]*fMaterial_Params[kTau7]*fMaterial_Params[kTau];
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II21p_52a += fTemp_matrix_nchidof_x_nudof;

                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II21p_53a,fShapeDisplGrad);
                                	  scale = -1*scale_const*Jp*Coeff_delDelgamma_nablachi*Comp22*fMaterial_Params[kTau7]*fMaterial_Params[kTau7]*fMaterial_Params[kSigma_const];
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II21p_53a += fTemp_matrix_nchidof_x_nudof;

                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II21p_54a,fShapeDisplGrad);
                                	  scale = -1*scale_const*Jp*Coeff_delDelgamma_nablachi*Comp22*fMaterial_Params[kTau7]*fMaterial_Params[kTau7]*(fMaterial_Params[kEta]-fMaterial_Params[kTau]);
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II21p_54a += fTemp_matrix_nchidof_x_nudof;

                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II21p_55a,fShapeDisplGrad);
                                	  scale = -1*scale_const*Jp*Coeff_delDelgamma_nablachi*Comp22*fMaterial_Params[kTau7]*fMaterial_Params[kTau7]*(fMaterial_Params[kNu]-fMaterial_Params[kSigma_const]);
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II21p_55a += fTemp_matrix_nchidof_x_nudof;

                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II21p_56a,fShapeDisplGrad);
                                	  scale = -1*scale_const*Jp*Coeff_delDelgamma_nablachi*Comp22*fMaterial_Params[kTau7]*fMaterial_Params[kTau7]*(fMaterial_Params[kKappa]-fMaterial_Params[kSigma_const]);
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II21p_56a += fTemp_matrix_nchidof_x_nudof;

                                	  fTemp_matrix_nchidof_x_nchidof.MultATBC(GRAD_NCHI,II21p_57a,NCHI);
                                	  scale = -1*scale_const*Jp*Coeff_delDelgamma_nablachi*Comp22*fMaterial_Params[kTau7]*fMaterial_Params[kTau7]*(fMaterial_Params[kEta]-fMaterial_Params[kTau]);
                                	  fTemp_matrix_nchidof_x_nchidof *= scale;
                                	  fKMphiphi_II21p_57a += fTemp_matrix_nchidof_x_nchidof;

                                	  fTemp_matrix_nchidof_x_nchidof.MultATBC(GRAD_NCHI,II21p_58a,NCHI);
                                	  scale = -1*scale_const*Jp*Coeff_delDelgamma_nablachi*Comp22*fMaterial_Params[kTau7]*fMaterial_Params[kTau7]*(fMaterial_Params[kNu]-fMaterial_Params[kSigma_const]);
                                	  fTemp_matrix_nchidof_x_nchidof *= scale;
                                	  fKMphiphi_II21p_58a += fTemp_matrix_nchidof_x_nchidof;

                                	  fTemp_matrix_nchidof_x_nchidof.MultATBC(GRAD_NCHI,II21p_59a,NCHI);
                                	  scale = -1*scale_const*Jp*Coeff_delDelgamma_nablachi*Comp22*fMaterial_Params[kTau7]*fMaterial_Params[kTau7]*(fMaterial_Params[kKappa]-fMaterial_Params[kSigma_const]);
                                	  fTemp_matrix_nchidof_x_nchidof *= scale;
                                	  fKMphiphi_II21p_59a += fTemp_matrix_nchidof_x_nchidof;
                                	  ///////////////////////////////////////////////////////
                                	  ///////////////////////////////////////////////////////
                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II21p_60,fShapeDisplGrad);
                                	  scale = scale_const*Jp*Coeff_delDelgamma_nablachi*Comp11*fMaterial_Params[kTau7]*fMaterial_Params[kTau7]*(fMaterial_Params[kLambda]+fMaterial_Params[kTau]);
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II21p_60 += fTemp_matrix_nchidof_x_nudof;

                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II21p_61,fShapeDisplGrad);
                                	  scale = scale_const*Jp*Coeff_delDelgamma_nablachi*Comp11*fMaterial_Params[kTau7]*fMaterial_Params[kTau7]*(fMaterial_Params[kMu]+fMaterial_Params[kSigma_const]);
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II21p_61 += fTemp_matrix_nchidof_x_nudof;

                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II21p_62,fShapeDisplGrad);
                                	  scale = scale_const*Jp*Coeff_delDelgamma_nablachi*Comp11*fMaterial_Params[kTau7]*fMaterial_Params[kTau7]*(fMaterial_Params[kEta]);
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II21p_62 += fTemp_matrix_nchidof_x_nudof;

                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II21p_63,fShapeDisplGrad);
                                	  scale = scale_const*Jp*Coeff_delDelgamma_nablachi*Comp11*fMaterial_Params[kTau7]*fMaterial_Params[kTau7]*(fMaterial_Params[kKappa]);
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II21p_63 += fTemp_matrix_nchidof_x_nudof;

                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II21p_64,fShapeDisplGrad);
                                	  scale = scale_const*Jp*Coeff_delDelgamma_nablachi*Comp11*fMaterial_Params[kTau7]*fMaterial_Params[kTau7]*(fMaterial_Params[kNu]);
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II21p_64 += fTemp_matrix_nchidof_x_nudof;

                                	  fTemp_matrix_nchidof_x_nchidof.MultATBC(GRAD_NCHI,II21p_65,NCHI);
                                	  scale = scale_const*Jp*Coeff_delDelgamma_nablachi*Comp11*fMaterial_Params[kTau7]*fMaterial_Params[kTau7]*(fMaterial_Params[kEta]);
                                	  fTemp_matrix_nchidof_x_nchidof *= scale;
                                	  fKMphiphi_II21p_65 += fTemp_matrix_nchidof_x_nchidof;

                                	  fTemp_matrix_nchidof_x_nchidof.MultATBC(GRAD_NCHI,II21p_66,NCHI);
                                	  scale = scale_const*Jp*Coeff_delDelgamma_nablachi*Comp11*fMaterial_Params[kTau7]*fMaterial_Params[kTau7]*(fMaterial_Params[kKappa]);
                                	  fTemp_matrix_nchidof_x_nchidof *= scale;
                                	  fKMphiphi_II21p_66 += fTemp_matrix_nchidof_x_nchidof;

                                	  fTemp_matrix_nchidof_x_nchidof.MultATBC(GRAD_NCHI,II21p_67,NCHI);
                                	  scale = scale_const*Jp*Coeff_delDelgamma_nablachi*Comp11*fMaterial_Params[kTau7]*fMaterial_Params[kTau7]*(fMaterial_Params[kNu]);
                                	  fTemp_matrix_nchidof_x_nchidof *= scale;
                                	  fKMphiphi_II21p_67 += fTemp_matrix_nchidof_x_nchidof;

                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II21p_60a,fShapeDisplGrad);
                                	  scale = scale_const*Jp*Coeff_delDelgamma_nablachi*Comp12*fMaterial_Params[kTau7]*fMaterial_Params[kTau7]*(fMaterial_Params[kTau]);
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II21p_60a += fTemp_matrix_nchidof_x_nudof;

                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II21p_61a,fShapeDisplGrad);
                                	  scale = scale_const*Jp*Coeff_delDelgamma_nablachi*Comp12*fMaterial_Params[kTau7]*fMaterial_Params[kTau7]*(fMaterial_Params[kSigma_const]);
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II21p_61a += fTemp_matrix_nchidof_x_nudof;

                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II21p_62a,fShapeDisplGrad);
                                	  scale = scale_const*Jp*Coeff_delDelgamma_nablachi*Comp12*fMaterial_Params[kTau7]*fMaterial_Params[kTau7]*(fMaterial_Params[kEta]-fMaterial_Params[kTau]);
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II21p_62a += fTemp_matrix_nchidof_x_nudof;

                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II21p_63a,fShapeDisplGrad);
                                	  scale = scale_const*Jp*Coeff_delDelgamma_nablachi*Comp12*fMaterial_Params[kTau7]*fMaterial_Params[kTau7]*(fMaterial_Params[kNu]-fMaterial_Params[kSigma_const]);
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II21p_63a += fTemp_matrix_nchidof_x_nudof;

                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II21p_64a,fShapeDisplGrad);
                                	  scale = scale_const*Jp*Coeff_delDelgamma_nablachi*Comp12*fMaterial_Params[kTau7]*fMaterial_Params[kTau7]*(fMaterial_Params[kKappa]-fMaterial_Params[kSigma_const]);
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II21p_64a += fTemp_matrix_nchidof_x_nudof;

                                	  fTemp_matrix_nchidof_x_nchidof.MultATBC(GRAD_NCHI,II21p_65a,NCHI);
                                	  scale = scale_const*Jp*Coeff_delDelgamma_nablachi*Comp12*fMaterial_Params[kTau7]*fMaterial_Params[kTau7]*(fMaterial_Params[kEta]-fMaterial_Params[kTau]);
                                	  fTemp_matrix_nchidof_x_nchidof *= scale;
                                	  fKMphiphi_II21p_65a += fTemp_matrix_nchidof_x_nchidof;

                                	  fTemp_matrix_nchidof_x_nchidof.MultATBC(GRAD_NCHI,II21p_66a,NCHI);
                                	  scale = scale_const*Jp*Coeff_delDelgamma_nablachi*Comp12*fMaterial_Params[kTau7]*fMaterial_Params[kTau7]*(fMaterial_Params[kNu]-fMaterial_Params[kSigma_const]);
                                	  fTemp_matrix_nchidof_x_nchidof *= scale;
                                	  fKMphiphi_II21p_66a += fTemp_matrix_nchidof_x_nchidof;

                                	  fTemp_matrix_nchidof_x_nchidof.MultATBC(GRAD_NCHI,II21p_67a,NCHI);
                                	  scale = scale_const*Jp*Coeff_delDelgamma_nablachi*Comp12*fMaterial_Params[kTau7]*fMaterial_Params[kTau7]*(fMaterial_Params[kKappa]-fMaterial_Params[kSigma_const]);
                                	  fTemp_matrix_nchidof_x_nchidof *= scale;
                                	  fKMphiphi_II21p_67a += fTemp_matrix_nchidof_x_nchidof;
                                	  ///////////////////////////////////////////////////////
                                	  ///////////////////////////////////////////////////////
                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II21p_68,fShapeDisplGrad);
                                	  scale = -1*scale_const*Jp*Coeff_delDelgamma_nablachi*Comp21*fMaterial_Params[kTau7]*fMaterial_Params[kTau7]*(fMaterial_Params[kLambda]+fMaterial_Params[kTau]);
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II21p_68 += fTemp_matrix_nchidof_x_nudof;

                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II21p_69,fShapeDisplGrad);
                                	  scale = -1*scale_const*Jp*Coeff_delDelgamma_nablachi*Comp21*fMaterial_Params[kTau7]*fMaterial_Params[kTau7]*(fMaterial_Params[kMu]+fMaterial_Params[kSigma_const]);
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II21p_69 += fTemp_matrix_nchidof_x_nudof;

                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II21p_70,fShapeDisplGrad);
                                	  scale = -1*scale_const*Jp*Coeff_delDelgamma_nablachi*Comp21*fMaterial_Params[kTau7]*fMaterial_Params[kTau7]*(fMaterial_Params[kEta]);
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II21p_70 += fTemp_matrix_nchidof_x_nudof;

                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II21p_71,fShapeDisplGrad);
                                	  scale = -1*scale_const*Jp*Coeff_delDelgamma_nablachi*Comp21*fMaterial_Params[kTau7]*fMaterial_Params[kTau7]*(fMaterial_Params[kKappa]);
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II21p_71 += fTemp_matrix_nchidof_x_nudof;

                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II21p_72,fShapeDisplGrad);
                                	  scale = -1*scale_const*Jp*Coeff_delDelgamma_nablachi*Comp21*fMaterial_Params[kTau7]*fMaterial_Params[kTau7]*(fMaterial_Params[kNu]);
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II21p_72 += fTemp_matrix_nchidof_x_nudof;

                                	  fTemp_matrix_nchidof_x_nchidof.MultATBC(GRAD_NCHI,II21p_73,NCHI);
                                	  scale = -1*scale_const*Jp*Coeff_delDelgamma_nablachi*Comp21*fMaterial_Params[kTau7]*fMaterial_Params[kTau7]*(fMaterial_Params[kEta]);
                                	  fTemp_matrix_nchidof_x_nchidof *= scale;
                                	  fKMphiphi_II21p_73 += fTemp_matrix_nchidof_x_nchidof;

                                	  fTemp_matrix_nchidof_x_nchidof.MultATBC(GRAD_NCHI,II21p_74,NCHI);
                                	  scale = -1*scale_const*Jp*Coeff_delDelgamma_nablachi*Comp21*fMaterial_Params[kTau7]*fMaterial_Params[kTau7]*(fMaterial_Params[kKappa]);
                                	  fTemp_matrix_nchidof_x_nchidof *= scale;
                                	  fKMphiphi_II21p_74 += fTemp_matrix_nchidof_x_nchidof;

                                	  fTemp_matrix_nchidof_x_nchidof.MultATBC(GRAD_NCHI,II21p_75,NCHI);
                                	  scale = -1*scale_const*Jp*Coeff_delDelgamma_nablachi*Comp21*fMaterial_Params[kTau7]*fMaterial_Params[kTau7]*(fMaterial_Params[kNu]);
                                	  fTemp_matrix_nchidof_x_nchidof *= scale;
                                	  fKMphiphi_II21p_75 += fTemp_matrix_nchidof_x_nchidof;

                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II21p_68a,fShapeDisplGrad);
                                	  scale = -1*scale_const*Jp*Coeff_delDelgamma_nablachi*Comp22*fMaterial_Params[kTau7]*fMaterial_Params[kTau7]*fMaterial_Params[kTau];
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II21p_68a += fTemp_matrix_nchidof_x_nudof;

                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II21p_69a,fShapeDisplGrad);
                                	  scale = -1*scale_const*Jp*Coeff_delDelgamma_nablachi*Comp22*fMaterial_Params[kTau7]*fMaterial_Params[kTau7]*fMaterial_Params[kSigma_const];
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II21p_69a += fTemp_matrix_nchidof_x_nudof;

                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II21p_70a,fShapeDisplGrad);
                                	  scale = -1*scale_const*Jp*Coeff_delDelgamma_nablachi*Comp22*fMaterial_Params[kTau7]*fMaterial_Params[kTau7]*(fMaterial_Params[kEta]-fMaterial_Params[kTau]);
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II21p_70a += fTemp_matrix_nchidof_x_nudof;

                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II21p_71a,fShapeDisplGrad);
                                	  scale = -1*scale_const*Jp*Coeff_delDelgamma_nablachi*Comp22*fMaterial_Params[kTau7]*fMaterial_Params[kTau7]*(fMaterial_Params[kNu]-fMaterial_Params[kSigma_const]);
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II21p_71a += fTemp_matrix_nchidof_x_nudof;

                                	  fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,II21p_72a,fShapeDisplGrad);
                                	  scale = -1*scale_const*Jp*Coeff_delDelgamma_nablachi*Comp22*fMaterial_Params[kTau7]*fMaterial_Params[kTau7]*(fMaterial_Params[kKappa]-fMaterial_Params[kSigma_const]);
                                	  fTemp_matrix_nchidof_x_nudof *= scale;
                                	  fKMphiu_II21p_72a += fTemp_matrix_nchidof_x_nudof;

                                	  fTemp_matrix_nchidof_x_nchidof.MultATBC(GRAD_NCHI,II21p_73a,NCHI);
                                	  scale = -1*scale_const*Jp*Coeff_delDelgamma_nablachi*Comp22*fMaterial_Params[kTau7]*fMaterial_Params[kTau7]*(fMaterial_Params[kEta]-fMaterial_Params[kTau]);
                                	  fTemp_matrix_nchidof_x_nchidof *= scale;
                                	  fKMphiphi_II21p_73a += fTemp_matrix_nchidof_x_nchidof;

                                	  fTemp_matrix_nchidof_x_nchidof.MultATBC(GRAD_NCHI,II21p_74a,NCHI);
                                	  scale = -1*scale_const*Jp*Coeff_delDelgamma_nablachi*Comp22*fMaterial_Params[kTau7]*fMaterial_Params[kTau7]*(fMaterial_Params[kNu]-fMaterial_Params[kSigma_const]);
                                	  fTemp_matrix_nchidof_x_nchidof *= scale;
                                	  fKMphiphi_II21p_74a += fTemp_matrix_nchidof_x_nchidof;

                                	  fTemp_matrix_nchidof_x_nchidof.MultATBC(GRAD_NCHI,II21p_75a,NCHI);
                                	  scale = -1*scale_const*Jp*Coeff_delDelgamma_nablachi*Comp22*fMaterial_Params[kTau7]*fMaterial_Params[kTau7]*(fMaterial_Params[kKappa]-fMaterial_Params[kSigma_const]);
                                	  fTemp_matrix_nchidof_x_nchidof *= scale;
                                	  fKMphiphi_II21p_75a += fTemp_matrix_nchidof_x_nchidof;
                                  }

                        }
                        else //(yielding did not occur / elastic step/
                        {

                        		fDelgamma = 0.0;

								fFe=fFe_tr;
                                fChie=fChie_tr;
                                fCchie=fCchie_tr;

                             /* MicroElastic Deformation tensor */ // Since PSI=PSIe is the same and I do not use PSI seperately, so I only update PSIe
                                PSIe.MultATB(fFe,fChie);

                                /* [fElastic_Right_Cauchy_Green_tensor] will be formed */
                                fRight_Elastic_Cauchy_Green_tensor.MultATB(fFe,fFe);

                                if (fRight_Elastic_Cauchy_Green_tensor.Det()==0)
                                        fRight_Elastic_Cauchy_Green_tensor = fIdentity_matrix;

                                /* [fMicro Elastic_Right_Cauchy_Green_tensor] will be formed */
                                fMicroRight_Elastic_Cauchy_Green_tensor.MultATB(fChie,fChie);
                                if (fMicroRight_Elastic_Cauchy_Green_tensor.Det()==0)
                                        fMicroRight_Elastic_Cauchy_Green_tensor = fIdentity_matrix;


                                PSIe_IPs.SetRow(IP,PSIe);
                                fCchie_IPs.SetRow(IP,fCchie);
                                fChip_IPs.SetRow(IP,fChip);

                                Je=fFe.Det();
                                SPK=fSPK_tr;
                                SIGMA_S=SIGMA_S_tr;
                                KirchhoffST.MultABCT(fFe,SPK,fFe);
                                fCauchy_stress_tensor_current_IP.SetToScaled(1.0/Je,KirchhoffST);
                                Pbar=SPK.Trace()/3;//Calculating the pressure term
                                devSPK.SetToScaled(Pbar,fIdentity_matrix);
                                devSPK*=-1;
                                devSPK+=SPK;
                                Temp_inv= devSPK.ScalarProduct();
                                devfSPKinv=sqrt(Temp_inv);

                                Pchibar=Pchibar_tr;//Calculating the pressure term
                                devSIGMA_S=devSIGMA_S_tr;
                                devSIGMA_S_inv = devSIGMA_S_inv_tr;

                                SIGMA=SIGMA_tr;
                                fMeanSIGMA_e=fMeanSIGMA_etr;
                                fdevSIGMA=fdevSIGMA_tr;
                                fNormdevSIGMA=fNormdevSIGMA_tr;

                                /* Current IP values are saved for Fp, and Cen */
                                fTemp_matrix_nsd_x_nsd.Inverse(fFe);
                                fFp.MultAB(fTemp_matrix_nsd_x_nsd,fDeformation_Gradient);
                                fFp_IPs.SetRow(IP,fFp);
                                fCe_IPs.SetRow(IP,fRight_Elastic_Cauchy_Green_tensor);
                                fDeformation_Gradient_IPs.SetRow(IP,fDeformation_Gradient);
                                fCauchy_stress_IPs.SetRow(IP,fCauchy_stress_tensor_current_IP);


                                Form_fV1();
                                fShapeDisplGrad.MultTx(fV1,Vint_1_temp);
                                scale=scale_const;
                                Vint_1_temp*=scale;
                                Vint_1 +=Vint_1_temp;

                                Form_fV2();//gives F.SIGMA_S.F^T = s_sigma *J
                                NCHI.MultTx(fV2,Vint_2_temp);
                                scale=scale_const;
                                Vint_2_temp*=scale;
                                Vint_2 +=Vint_2_temp;

								GAMMAe = GAMMAe_tr;
								GAMMAe_IPs.SetRow(IP,GAMMAe);
                                fMeKLM = fMKLM_tr;
                                Form_Mean_fMeKLM();
    				            Form_fdevMeKLM();
    				            Form_Norm_Mean_fMeKLM();
    				            Form_fNormdevMeKLM();


                                Form_fV3();
                                //fIota_eta_temp_matrix.Multx(fV3,Vint_3_temp);
                                GRAD_NCHI.MultTx(fV3,Vint_3_temp);
                                scale=scale_const;
                                Vint_3_temp*=scale;
                                Vint_3+=Vint_3_temp;

                                Calculate_fmklm();
                                fmklm*=1/Je;


                                /* [fLeft_Cauchy_Green_tensor] will be formed */
                                fLeft_Cauchy_Green_tensor.MultABT(fDeformation_Gradient, fDeformation_Gradient);
                                /* [fLeft_Cauchy_Green_tensor_Inverse] will be formed */
                                if (fLeft_Cauchy_Green_tensor.Det()==0)
                                        fLeft_Cauchy_Green_tensor = fIdentity_matrix;
                                fLeft_Cauchy_Green_tensor_Inverse.Inverse(fLeft_Cauchy_Green_tensor);

                                /* [fEulerian_strain_tensor_current_IP] will be formed */
                                fEulerian_strain_tensor_current_IP = fLeft_Cauchy_Green_tensor_Inverse;
                                fEulerian_strain_tensor_current_IP *= -1;
                                fEulerian_strain_tensor_current_IP += fIdentity_matrix;
                                fEulerian_strain_tensor_current_IP *= 0.5;

                                /* [fRight_Cauchy_Green_tensor] will be formed */
                                fRight_Cauchy_Green_tensor.MultATB(fDeformation_Gradient,fDeformation_Gradient);
                                if (fRight_Cauchy_Green_tensor.Det()==0)
                                        fRight_Cauchy_Green_tensor = fIdentity_matrix;

                               /* [fMicroRight_Cauchy_Green_tensor] will be formed */
                                fMicroRight_Cauchy_Green_tensor.MultATB(ChiM,ChiM);
                                if (fMicroRight_Cauchy_Green_tensor.Det()==0)
                                        fMicroRight_Cauchy_Green_tensor = fIdentity_matrix;



                                /* Total Lagrangian Strain Tensor will be formed */
                                Elastic_LagrangianStn=fIdentity_matrix;
                                Elastic_LagrangianStn*=-1;
                                Elastic_LagrangianStn+=fRight_Cauchy_Green_tensor;
                                Elastic_LagrangianStn*=0.5;


                                //Update Elastic micro strain tenso will be formed in Bbar
                                Elastic_MicroStnTensor = fIdentity_matrix;
                                Elastic_MicroStnTensor *= -1;
                                Elastic_MicroStnTensor += PSIe;

                                fMeKLM_IPs.SetRow(IP,fMeKLM);
                                SPK_IPs.SetRow(IP,SPK);
                                SIGMA_S_IPs.SetRow(IP,SIGMA_S);
                                SIGMA_IPs.SetRow(IP,SIGMA);

                                Elastic_LagrangianStn_IPs.SetRow(IP,Elastic_LagrangianStn);
                                Elastic_MicroStnTensor_IPs.SetRow(IP,Elastic_MicroStnTensor);

                                double Jp=fFp.Det();

    							if(time > 0.0 && global_iteration > -1)
    							{
    								if (fMaterial_Params[kCapped_Model_Flag] == 0)
    								{
                                        if(devfSPKinv==0.0)
                                        {
                                            fdFYdS=0.0;
                                            fdGdS=0.0;
                                        }
                                        else
                                        {
                                            /* calculate stress derivative of yield function */
                                            fdFYdS = 0.0;
                                            fdFYdS.SetToScaled(Bphi*1.0/3.0,fIdentity_matrix);
                                            fTemp_matrix_nsd_x_nsd.SetToScaled(1/devfSPKinv,devSPK);
                                            fdFYdS+=fTemp_matrix_nsd_x_nsd;
                                            fdFYdS_trace = fdFYdS.Trace();
                                            /* calculate stress derivative of plastic potential function */
                                            fdGdS = 0.0;
                                            fdGdS.SetToScaled(Bpsi*1.0/3.0,fIdentity_matrix);
                                            fTemp_matrix_nsd_x_nsd.SetToScaled(1/devfSPKinv,devSPK);
                                            fdGdS+=fTemp_matrix_nsd_x_nsd;
                                            //fdGdS*=0.0001;

                                            Form_dGnablachidMKLM();
                                            Form_dFnablachidMKLM();

                                            fTemp_matrix_nsd_x_nsd.MultABCT(fFe,SPK,fFe);
                                            KirchhoffST.SetToScaled(Jp,fTemp_matrix_nsd_x_nsd);
                                            fCauchy_stress_tensor_current_IP.SetToScaled(1/J,KirchhoffST);
                                        }
                                        if(fNormdevSIGMA==0.0)
                                        {
                                            fdFYchidSIGMA=0.0;
                                            fdGchidSIGMA=0.0;
                                        }
                                        else
                                        {
                                            /* calculate derivative of micro yield function with respect to SIGMA-S */
                                            fdFYchidSIGMA = 0.0;
                                            fdFYchidSIGMA.SetToScaled(Bphi_chi*1.0/3.0,fIdentity_matrix);
                                            fTemp_matrix_nsd_x_nsd.SetToScaled(1/fNormdevSIGMA,fdevSIGMA);
                                            fdFYchidSIGMA+=fTemp_matrix_nsd_x_nsd;
                                            fdFYchidSIGMA_trace = fdFYchidSIGMA.Trace();
                                            /* calculate  derivative of  Micro plastic potential function wrt SIGMA-S */
                                            fdGchidSIGMA= 0.0;
                                            fdGchidSIGMA.SetToScaled(Bpsi_chi*1.0/3.0,fIdentity_matrix);
                                            fTemp_matrix_nsd_x_nsd.SetToScaled(1/fNormdevSIGMA,fdevSIGMA);
                                            fdGchidSIGMA+=fTemp_matrix_nsd_x_nsd;
                                            //fdGchidSIGMA*=0.01;
                                        }
    								}

										if(fMaterial_Params[kCapped_Model_Flag] == 1 && devfSPKinv<=1)
										{
	        								fdGdc=(-1.0/3.0)*fMaterial_Params[kR]*Apsi;
	        								dGdKappa=(1.0/3.0)*fMaterial_Params[kR]*Bpsi;
	        								fdGdS.SetToScaled(-1.0/3.0,fIdentity_matrix);
	        								fdFYdc=(-1.0/3.0)*fMaterial_Params[kR]*Aphi;
	        								dFYdKappa=(1.0/3.0)*fMaterial_Params[kR]*Bphi;
	        								fdFYdS.SetToScaled(-1.0/3.0,fIdentity_matrix);
	            	    					fState_variables_IPs(IP,khKappa) = -1.0*dGdKappa;
	            	    					fState_variables_IPs(IP,khc) = -1.0*fdGdc;
										}
										else
										{
		        	                        Cphi = Cphi_tr;
		        	                        Cphi_chi = Cphi_chi_tr;
		        	                        Cphi_nablachi = Cphi_nablachi_tr;

		        	                        Cpsi = Cpsi_tr;
		        	                        Cpsi_chi = Cpsi_chi_tr;
		        	                        Cpsi_nablachi = Cpsi_nablachi_tr;

		                					Xphi_m=Xphi_m_n;
		                					Xpsi_m=Xpsi_m_n;
		                					fMacfunc=fMacfunc_tr;
		                					fPhiCap=fPhiCap_tr;
		                					fPsiCap=fPsiCap_tr;


		    								Xphi_chi_m=Xphi_chi_m_n;
		    								Xpsi_chi_m=Xpsi_chi_m_n;
		    								fMacfunc_chi=fMacfunc_chi_tr;
		    								fPhiCap_chi=fPhiCap_chi_tr;
		    								fPsiCap_chi=fPsiCap_chi_tr;


	        	    						Xphi_nablachi = Xphi_nablachi_n;
	        	    						Xphi_nablachi_m = Xphi_nablachi_m_n;
	        	    						Xpsi_nablachi_m = Xpsi_nablachi_m_n;
	        	    						fMacfunc_nablachi = 0.5*(fabs(Norm_Kappa_nablachi_n-3*Norm_Mean_fMeKLM)+(Norm_Kappa_nablachi_n-3*Norm_Mean_fMeKLM));
	        	    						fPhiCap_nablachi =  1-fMacfunc_nablachi*(Norm_Kappa_nablachi_n-3*Norm_Mean_fMeKLM)/(Xphi_nablachi_m*Xphi_nablachi_m);
	        	    						fPsiCap_nablachi =  1-fMacfunc_nablachi*(Norm_Kappa_nablachi_n-3*Norm_Mean_fMeKLM)/(Xpsi_nablachi_m*Xpsi_nablachi_m);

	            							if (fMacfunc > 0.0) signMacfunc = 1.0;
	            							else signMacfunc = 0.0;

	            							if (fMacfunc_chi > 0.0) signfMacfunc_chi = 1.0;
	            							else signfMacfunc_chi = 0.0;

	            							if (fMacfunc_nablachi > 0.0) signfMacfunc_nablachi = 1.0;
	            							else signfMacfunc_nablachi = 0.0;

	                                        fdGdc=-1.0*sqrt(fabs(fPsiCap))*Apsi;
	                                        fdGYchidcchi=-1.0*sqrt(fabs(fPsiCap_chi))*Apsi_chi;

	                                        dFpsidKappa = (-1.0*signMacfunc*(fState_variables_n_IPs(IP,Kappa)-3*Pbar)/(Xpsi_m*Xpsi_m))-
	                                        (fMacfunc/(Xpsi_m*Xpsi_m))+(2*fMaterial_Params[kR]*Bpsi*fMacfunc*
	                                        		(fState_variables_n_IPs(IP,Kappa)-3*Pbar))/(Xpsi_m*Xpsi_m*Xpsi_m);

	                                        dGdKappa = -1*dFpsidKappa*(Apsi*fState_variables_n_IPs(IP,kc)-Bpsi*Pbar)/(2.0*sqrt(fabs(fPsiCap)));

	                                        dFpsichidKappachi = (-signfMacfunc_chi*(fState_variables_n_IPs(IP,Kappa_chi)-3*fMeanSIGMA_e)/(Xpsi_chi_m*Xpsi_chi_m))-
	                                        (fMacfunc_chi/(Xpsi_chi_m*Xpsi_chi_m))+(2*fMaterial_Params[kR_chi]*Bpsi_chi*fMacfunc_chi*
	                                        		(fState_variables_n_IPs(IP,Kappa_chi)-3*fMeanSIGMA_e))/(Xpsi_chi_m*Xpsi_chi_m*Xpsi_chi_m);

	                                        dGchidKappachi = -1*dFpsichidKappachi*(Apsi_chi*fState_variables_n_IPs(IP,kc_chi)-Bpsi_chi*fMeanSIGMA_e)/(2.0*sqrt(fabs(fPsiCap_chi)));

	            	    					fState_variables_IPs(IP,khKappa) = -1*dGdKappa;
	            	    					fState_variables_IPs(IP,khc) = -1*fdGdc;

	            	    					fState_variables_IPs(IP,khKappa_chi) = -1*dGchidKappachi;
	            	    					fState_variables_IPs(IP,khc_chi) = -1*fdGYchidcchi;

	                                        fTemp_matrix_one_x_one = (-signfMacfunc_nablachi*(Norm_Kappa_nablachi_n-3*Norm_Mean_fMeKLM)/(Xpsi_nablachi_m*Xpsi_nablachi_m))-
	                                        (fMacfunc_nablachi/(Xpsi_nablachi_m*Xpsi_nablachi_m))+(2*fMaterial_Params[kR_nablachi]*Bpsi_nablachi*fMacfunc_nablachi*
	                                        		(Norm_Kappa_nablachi_n-3*Norm_Mean_fMeKLM))/(Xpsi_nablachi_m*Xpsi_nablachi_m*Xpsi_nablachi_m);
	                                        fTemp_matrix_one_x_one*= ((Apsi_nablachi*Norm_kc_nablachi_n-Bpsi_nablachi*Norm_Mean_fMeKLM)/(2.0*sqrt(fabs(fPsiCap_nablachi))));
	                                        fState_variables_IPs(IP,khKappa_nablachi) = fTemp_matrix_one_x_one;

	                                        fTemp_matrix_one_x_one = -1.0*sqrt(fabs(fPsiCap_nablachi))*Apsi_nablachi;
	                                        fState_variables_IPs(IP,khc_nablachi) = -1*fTemp_matrix_one_x_one;


		        	                        //fs_micromorph3D_out<<"fState_variables_IPs(IP,khKappa)= "<< fState_variables_IPs(IP,khKappa) <<endl;
		        	                        //fs_micromorph3D_out<<"fState_variables_IPs(IP,khc)= "<< fState_variables_IPs(IP,khc) <<endl;


											fdGdS = 0.0;
											fdGdS.SetToScaled(Cpsi,fIdentity_matrix);
											fTemp_matrix_nsd_x_nsd.SetToScaled(1/devfSPKinv,devSPK);
											fdGdS+=fTemp_matrix_nsd_x_nsd;
											fdGdS_transpose.Transpose(fdGdS);



											fdGchidSIGMA= 0.0;
											fdGchidSIGMA.SetToScaled(Cpsi_chi,fIdentity_matrix);
											fTemp_matrix_nsd_x_nsd.SetToScaled(1/fNormdevSIGMA,fdevSIGMA);
											fdGchidSIGMA+=fTemp_matrix_nsd_x_nsd;



											/* calculate stress derivative of yield function */
											fdFYdS = 0.0;
											fdFYdS.SetToScaled(Cphi,fIdentity_matrix);
											fTemp_matrix_nsd_x_nsd.SetToScaled(1/devfSPKinv,devSPK);
											fdFYdS+=fTemp_matrix_nsd_x_nsd;
											fdFYdS_trace = fdFYdS.Trace();

											fTemp_matrix_nsd_x_nsd.MultABCT(fFe,SPK,fFe);
											KirchhoffST.SetToScaled(Jp,fTemp_matrix_nsd_x_nsd);
											fCauchy_stress_tensor_current_IP.SetToScaled(1/J,KirchhoffST);

											/* calculate derivative of micro yield function with respect to SIGMA-S */
											fdFYchidSIGMA = 0.0;
											fdFYchidSIGMA.SetToScaled(Cphi_chi,fIdentity_matrix);
											fTemp_matrix_nsd_x_nsd.SetToScaled(1/fNormdevSIGMA,fdevSIGMA);
											fdFYchidSIGMA+=fTemp_matrix_nsd_x_nsd;
											fdFYchidSIGMA_S_trace = fdFYchidSIGMA.Trace();

                                            Form_dGnablachidMKLM();
                                            Form_dFnablachidMKLM();
										}
    							}

                                fdGdS_IPs.SetRow(IP,fdGdS);
                                fdGchidSIGMA_IPs.SetRow(IP,fdGchidSIGMA);
                                dGnablachidMKLM_IPs.SetRow(IP,fdGnablachidMKLM);
                                fState_variables_IPs(IP,kDelgammanablachi) = 0;
                                fState_variables_IPs(IP,kDelgammachi) = 0;
                                fState_variables_IPs(IP,kDelgamma) = 0;

                                /* Lagrangian Strain is saved as Eulerian Strain tensor for plotting purposes */
                                fEulerian_strain_tensor_current_IP=LagrangianStn;

                                //Extract_nine_values (fEulerian_strain_tensor_current_IP,fTemp_six_values);
                                Extract_six_values_from_symmetric_tensor(fEulerian_strain_tensor_current_IP,fTemp_nine_values);

                                /* Save Eulerian strain tensor of the current IP */
                                fEulerian_strain_IPs.SetRow(IP,fTemp_nine_values);
/*
    				            fs_micromorph3D_out << "Elastic" << endl;
    							fs_micromorph3D_out << "GXp = " << GXp << endl;
    							fs_micromorph3D_out << "GXp_n = " << GXp_n << endl;
    							fs_micromorph3D_out << "GXe = " << GXe << endl;
    							fs_micromorph3D_out << "GAMMAe = " << GAMMAe << endl;
    							fs_micromorph3D_out << "GAMMAe_n = " << GAMMAe_n << endl;
    							fs_micromorph3D_out << "fDeltaLbar_P = " << fDeltaLbar_P << endl;
    							fs_micromorph3D_out << "fDeltaLbarChai_P = " << fDeltaLbarChai_P << endl;

       	                        fs_micromorph3D_out<<"fMeKLM(0,0,0)= "<< fMeKLM(0,0,0) <<endl;
								fs_micromorph3D_out<<"fMeKLM(0,0,1)= "<< fMeKLM(0,0,1) <<endl;
								fs_micromorph3D_out<<"fMeKLM(0,0,2)= "<< fMeKLM(0,0,2) <<endl;
								fs_micromorph3D_out<<"fMeKLM(0,1,0)= "<< fMeKLM(0,1,0) <<endl;
								fs_micromorph3D_out<<"fMeKLM(0,1,1)= "<< fMeKLM(0,1,1) <<endl;
								fs_micromorph3D_out<<"fMeKLM(0,1,2)= "<< fMeKLM(0,1,2) <<endl;
								fs_micromorph3D_out<<"fMeKLM(0,2,0)= "<< fMeKLM(0,2,0) <<endl;
								fs_micromorph3D_out<<"fMeKLM(0,2,1)= "<< fMeKLM(0,2,1) <<endl;
								fs_micromorph3D_out<<"fMeKLM(0,2,2)= "<< fMeKLM(0,2,2) <<endl;
								fs_micromorph3D_out<<"fMeKLM(1,0,0)= "<< fMeKLM(1,0,0) <<endl;
								fs_micromorph3D_out<<"fMeKLM(1,0,1)= "<< fMeKLM(1,0,1) <<endl;
								fs_micromorph3D_out<<"fMeKLM(1,0,2)= "<< fMeKLM(1,0,2) <<endl;
								fs_micromorph3D_out<<"fMeKLM(1,1,0)= "<< fMeKLM(1,1,0) <<endl;
								fs_micromorph3D_out<<"fMeKLM(1,1,1)= "<< fMeKLM(1,1,1) <<endl;
								fs_micromorph3D_out<<"fMeKLM(1,1,2)= "<< fMeKLM(1,1,2) <<endl;
								fs_micromorph3D_out<<"fMeKLM(1,2,0)= "<< fMeKLM(1,2,0) <<endl;
								fs_micromorph3D_out<<"fMeKLM(1,2,1)= "<< fMeKLM(1,2,1) <<endl;
								fs_micromorph3D_out<<"fMeKLM(1,2,2)= "<< fMeKLM(1,2,2) <<endl;
								fs_micromorph3D_out<<"fMeKLM(2,0,0)= "<< fMeKLM(2,0,0) <<endl;
								fs_micromorph3D_out<<"fMeKLM(2,0,1)= "<< fMeKLM(2,0,1) <<endl;
								fs_micromorph3D_out<<"fMeKLM(2,0,2)= "<< fMeKLM(2,0,2) <<endl;
								fs_micromorph3D_out<<"fMeKLM(2,1,0)= "<< fMeKLM(2,1,0) <<endl;
								fs_micromorph3D_out<<"fMeKLM(2,1,1)= "<< fMeKLM(2,1,1) <<endl;
								fs_micromorph3D_out<<"fMeKLM(2,1,2)= "<< fMeKLM(2,1,2) <<endl;
								fs_micromorph3D_out<<"fMeKLM(2,2,0)= "<< fMeKLM(2,2,0) <<endl;
								fs_micromorph3D_out<<"fMeKLM(2,2,1)= "<< fMeKLM(2,2,1) <<endl;
								fs_micromorph3D_out<<"fMeKLM(2,2,2)= "<< fMeKLM(2,2,2) <<endl;

    							fs_micromorph3D_out << "fdevMeKLM = " << fdevMeKLM << endl;
    							fs_micromorph3D_out << "Mean_fMeKLM = " << Mean_fMeKLM << endl;
    							fs_micromorph3D_out << "Norm_Mean_fMeKLM = " << Norm_Mean_fMeKLM << endl;
    							fs_micromorph3D_out << "fNormdevMeKLM = " << fNormdevMeKLM << endl;
    							fs_micromorph3D_out << "Norm_cohesion_nablachi = " << Norm_cohesion_nablachi << endl;
    							fs_micromorph3D_out << "fMicro_gradient_Yield_function = " << fMicro_gradient_Yield_function << endl;
    							fs_micromorph3D_out << "fDelgammanablachi = " << fDelgammanablachi << endl;
    							fs_micromorph3D_out << "fMicro_Yield_function = " << fMicroYield_function << endl;
    							fs_micromorph3D_out << "fDelgammachi = " << fDelgammachi << endl;
    							fs_micromorph3D_out << "fYield_function = " << fYield_function << endl;
    							fs_micromorph3D_out << "fDelgamma = " << fDelgamma << endl;
    							fs_micromorph3D_out << "SPK = " << SPK << endl;
    							fs_micromorph3D_out << "SIGMA_S = " << SIGMA_S << endl;
    							fs_micromorph3D_out << "fState_variables_IPs(IP,kc_nablachi0) = " << fState_variables_IPs(IP,kc_nablachi0) << endl;
    							fs_micromorph3D_out << "fState_variables_IPs(IP,kc_nablachi1) = " << fState_variables_IPs(IP,kc_nablachi1) << endl;
    							fs_micromorph3D_out << "fState_variables_IPs(IP,kc_nablachi2) = " << fState_variables_IPs(IP,kc_nablachi2) << endl;
    							fs_micromorph3D_out << "fState_variables_IPs(IP,kc_chi) = " << fState_variables_IPs(IP,kc_chi) << endl;
    							fs_micromorph3D_out << "fState_variables_IPs(IP,kc) = " << fState_variables_IPs(IP,kc) << endl;
                                fs_micromorph3D_out<< "fCauchy_stress_tensor_current_IP="<< fCauchy_stress_tensor_current_IP<<endl;
                                fs_micromorph3D_out<<"fdGnablachidMKLM= "<< fdGnablachidMKLM<<endl;


    	                        fs_micromorph3D_out<<"fdGnablachidMKLM_n(0,0,0)= "<< fdGnablachidMKLM_n(0,0,0) <<endl;
    	                        fs_micromorph3D_out<<"fdGnablachidMKLM_n(0,0,1)= "<< fdGnablachidMKLM_n(0,0,1) <<endl;
    	                        fs_micromorph3D_out<<"fdGnablachidMKLM_n(0,0,2)= "<< fdGnablachidMKLM_n(0,0,2) <<endl;
    	                        fs_micromorph3D_out<<"fdGnablachidMKLM_n(0,1,0)= "<< fdGnablachidMKLM_n(0,1,0) <<endl;
    	                        fs_micromorph3D_out<<"fdGnablachidMKLM_n(0,1,1)= "<< fdGnablachidMKLM_n(0,1,1) <<endl;
    	                        fs_micromorph3D_out<<"fdGnablachidMKLM_n(0,1,2)= "<< fdGnablachidMKLM_n(0,1,2) <<endl;
    	                        fs_micromorph3D_out<<"fdGnablachidMKLM_n(0,2,0)= "<< fdGnablachidMKLM_n(0,2,0) <<endl;
    	                        fs_micromorph3D_out<<"fdGnablachidMKLM_n(0,2,1)= "<< fdGnablachidMKLM_n(0,2,1) <<endl;
    	                        fs_micromorph3D_out<<"fdGnablachidMKLM_n(0,2,2)= "<< fdGnablachidMKLM_n(0,2,2) <<endl;
    	                        fs_micromorph3D_out<<"fdGnablachidMKLM_n(1,0,0)= "<< fdGnablachidMKLM_n(1,0,0) <<endl;
    	                        fs_micromorph3D_out<<"fdGnablachidMKLM_n(1,0,1)= "<< fdGnablachidMKLM_n(1,0,1) <<endl;
    	                        fs_micromorph3D_out<<"fdGnablachidMKLM_n(1,0,2)= "<< fdGnablachidMKLM_n(1,0,2) <<endl;
    	                        fs_micromorph3D_out<<"fdGnablachidMKLM_n(1,1,0)= "<< fdGnablachidMKLM_n(1,1,0) <<endl;
    	                        fs_micromorph3D_out<<"fdGnablachidMKLM_n(1,1,1)= "<< fdGnablachidMKLM_n(1,1,1) <<endl;
    	                        fs_micromorph3D_out<<"fdGnablachidMKLM_n(1,1,2)= "<< fdGnablachidMKLM_n(1,1,2) <<endl;
    	                        fs_micromorph3D_out<<"fdGnablachidMKLM_n(1,2,0)= "<< fdGnablachidMKLM_n(1,2,0) <<endl;
    	                        fs_micromorph3D_out<<"fdGnablachidMKLM_n(1,2,1)= "<< fdGnablachidMKLM_n(1,2,1) <<endl;
    	                        fs_micromorph3D_out<<"fdGnablachidMKLM_n(1,2,2)= "<< fdGnablachidMKLM_n(1,2,2) <<endl;
    	                        fs_micromorph3D_out<<"fdGnablachidMKLM_n(2,0,0)= "<< fdGnablachidMKLM_n(2,0,0) <<endl;
    	                        fs_micromorph3D_out<<"fdGnablachidMKLM_n(2,0,1)= "<< fdGnablachidMKLM_n(2,0,1) <<endl;
    	                        fs_micromorph3D_out<<"fdGnablachidMKLM_n(2,0,2)= "<< fdGnablachidMKLM_n(2,0,2) <<endl;
    	                        fs_micromorph3D_out<<"fdGnablachidMKLM_n(2,1,0)= "<< fdGnablachidMKLM_n(2,1,0) <<endl;
    	                        fs_micromorph3D_out<<"fdGnablachidMKLM_n(2,1,1)= "<< fdGnablachidMKLM_n(2,1,1) <<endl;
    	                        fs_micromorph3D_out<<"fdGnablachidMKLM_n(2,1,2)= "<< fdGnablachidMKLM_n(2,1,2) <<endl;
    	                        fs_micromorph3D_out<<"fdGnablachidMKLM_n(2,2,0)= "<< fdGnablachidMKLM_n(2,2,0) <<endl;
    	                        fs_micromorph3D_out<<"fdGnablachidMKLM_n(2,2,1)= "<< fdGnablachidMKLM_n(2,2,1) <<endl;
    	                        fs_micromorph3D_out<<"fdGnablachidMKLM_n(2,2,2)= "<< fdGnablachidMKLM_n(2,2,2) <<endl;
*/

                                Form_I1_3();
                                Form_I1_4();
                                Form_I1_5();
                                Form_I1_6();
                                Form_I1_7();
                                Form_I2_1();
                                Form_I1_8();
                                Form_I2_2();
                                Form_I1_9();
                                Form_I2_3();
                                Form_fFJ();
                                Form_fJF();
                                Form_fJ1_1();
                                Form_fJ1_2();
                                Form_fJ1_3();
                                Form_fJ1_4();
                                Form_fJ2_1();
                                Form_fJ1_5();
                                Form_fJ2_2();
                                Form_fJ1_6();
                                Form_fJ2_3();

                                // Form_fFM();
                                Form_fMF();
                                Form_fMchi();
                                Form_fMpu_1_1();
                                Form_fMpu_1_2();
                                Form_fMpp_1_1();
                                Form_fMpp_1_2();
                                Form_fMpu_2_1();
                                Form_fMpu_2_2();
                                Form_fMpp_2_1();
                                Form_fMpp_2_2();
                                Form_fMpu_3();
                                Form_fMpp_3();
                                Form_fMpu_4();
                                Form_fMpp_4();
                                Form_fMpu_5_1();
                                Form_fMpu_5_2();
                                Form_fMpp_5_1();
                                Form_fMpp_5_2();
                                Form_fMpu_6();
                                Form_fMpp_6();
                                Form_fMpu_7();
                                Form_fMpp_7();
                                Form_fMpu_8_1();
                                Form_fMpu_8_2();
                                Form_fMpp_8_1();
                                Form_fMpp_8_2();
                                Form_fMpu_9();
                                Form_fMpp_9();
                                Form_fMpu_10();
                                Form_fMpp_10();
                                Form_fMpu_11();
                                Form_fMpp_11();




                            fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I1_3,fShapeDisplGrad);
                            scale = scale_const;
                            fTemp_matrix_nudof_x_nudof *= scale;
                            fKu_3 += fTemp_matrix_nudof_x_nudof;


                            fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I1_4,fShapeDisplGrad);
                            scale = scale_const*(fMaterial_Params[kLambda]+fMaterial_Params[kTau]);
                            fTemp_matrix_nudof_x_nudof *= scale;
                            fKu_4 += fTemp_matrix_nudof_x_nudof;


                            fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I1_5,fShapeDisplGrad);
                            scale = scale_const*(fMaterial_Params[kMu]+fMaterial_Params[kSigma_const]);
                            fTemp_matrix_nudof_x_nudof *= scale;
                            fKu_5 += fTemp_matrix_nudof_x_nudof;



                            fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I1_6,fShapeDisplGrad);
                            scale = scale_const*(fMaterial_Params[kMu]+fMaterial_Params[kSigma_const]);
                            fTemp_matrix_nudof_x_nudof *= scale;
                            fKu_6 += fTemp_matrix_nudof_x_nudof;

                            fTemp_matrix_nudof_x_nudof.MultABCT(fIota_temp_matrix,I1_7,fIota_temp_matrix);
                            scale = scale_const*fMaterial_Params[kEta];
                            fTemp_matrix_nudof_x_nudof *= scale;
                            // accumulate
                            fKu_7 += fTemp_matrix_nudof_x_nudof;

                            fTemp_matrix_nudof_x_nchidof.MultABC(fIota_temp_matrix,I2_1,NCHI);//ABC not ABCT
                            scale = scale_const*fMaterial_Params[kEta];
                            fTemp_matrix_nudof_x_nchidof *= scale;
                            // accumulate
                            fKuphi_1 += fTemp_matrix_nudof_x_nchidof;

                            fTemp_matrix_nudof_x_nudof.MultABCT(fIota_temp_matrix,I1_8,fIota_temp_matrix);
                            scale = scale_const*fMaterial_Params[kKappa];
                            fTemp_matrix_nudof_x_nudof *= scale;
                            // accumulate
                            fKu_8 += fTemp_matrix_nudof_x_nudof;



                            fTemp_matrix_nudof_x_nchidof.MultABC(fIota_temp_matrix,I2_2,NCHI);//ABC not ABCT
                            scale = scale_const*fMaterial_Params[kKappa];
                            fTemp_matrix_nudof_x_nchidof*= scale;
                            // accumulate
                            fKuphi_2 += fTemp_matrix_nudof_x_nchidof;

                            //fTemp_matrix_nudof_x_nudof.MultABCT(fIota_temp_matrix,I1_9,fIota_temp_matrix);
                            fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I1_9,fShapeDisplGrad);
                            scale = scale_const*fMaterial_Params[kNu];
                            fTemp_matrix_nudof_x_nudof *= scale;
                            // accumulate
                            fKu_9 += fTemp_matrix_nudof_x_nudof;

                            //fTemp_matrix_nudof_x_nchidof.MultABC(fIota_temp_matrix,I2_3,NCHI);//ABC not ABCT
                            fTemp_matrix_nudof_x_nchidof.MultATBC(fShapeDisplGrad,I2_3,NCHI);//ABC not ABCT
                            scale = scale_const*fMaterial_Params[kNu];
                            fTemp_matrix_nudof_x_nchidof *= scale;
                            // accumulate
                            fKuphi_3 += fTemp_matrix_nudof_x_nchidof;

/*******************************************************************************************************/

                            //fTemp_matrix_nchidof_x_nudof.MultABCT(NCHI_Tr,fFJ,fIota_temp_matrix);
                            fTemp_matrix_nchidof_x_nudof.MultATBC(NCHI,fFJ,fShapeDisplGrad);
                            scale =scale_const;
                            fTemp_matrix_nchidof_x_nudof *= scale;
                            // accumulate
                            fKFJu += fTemp_matrix_nchidof_x_nudof;


                            //fTemp_matrix_nchidof_x_nudof.MultABCT(NCHI_Tr,fJF,fIota_temp_matrix);
                            fTemp_matrix_nchidof_x_nudof.MultATBC(NCHI,fJF,fShapeDisplGrad);
                            scale =scale_const;
                            fTemp_matrix_nchidof_x_nudof *= scale;
                            // accumulate
                            fKJFu += fTemp_matrix_nchidof_x_nudof;



                            // fTemp_matrix_nchidof_x_nudof.MultABCT(NCHI_Tr,fJ1_1 ,fIota_temp_matrix);
                            fTemp_matrix_nchidof_x_nudof.MultATBC(NCHI,fJ1_1,fShapeDisplGrad);
                            scale =scale_const*fMaterial_Params[kTau];
                            fTemp_matrix_nchidof_x_nudof *= scale;
                            // accumulate
                            fKphiu_1 += fTemp_matrix_nchidof_x_nudof;

                            fTemp_matrix_nchidof_x_nudof.MultABCT(NCHI_Tr,fJ1_2 ,fIota_temp_matrix);
                            scale =scale_const*fMaterial_Params[kSigma_const];
                            fTemp_matrix_nchidof_x_nudof *= scale;
                            // accumulate
                            fKphiu_2 += fTemp_matrix_nchidof_x_nudof;

                            fTemp_matrix_nchidof_x_nudof.MultABCT(NCHI_Tr,fJ1_3 ,fIota_temp_matrix);
                            scale =scale_const*fMaterial_Params[kSigma_const];
                            fTemp_matrix_nchidof_x_nudof *= scale;
                            // accumulate
                            fKphiu_3 += fTemp_matrix_nchidof_x_nudof;

                            //fTemp_matrix_nchidof_x_nudof.MultABCT(NCHI_Tr,fJ1_4,fIota_temp_matrix);
                            fTemp_matrix_nchidof_x_nudof.MultATBC(NCHI,fJ1_4,fShapeDisplGrad);
                            scale =scale_const*(fMaterial_Params[kEta]-fMaterial_Params[kTau]);
                            fTemp_matrix_nchidof_x_nudof *= scale;
                            // accumulate
                            fKphiu_4 += fTemp_matrix_nchidof_x_nudof;


                            fTemp_matrix_nchidof_x_nchidof.MultABC(NCHI_Tr,fJ2_1,NCHI);
                            scale =scale_const*(fMaterial_Params[kEta]-fMaterial_Params[kTau]);
                            fTemp_matrix_nchidof_x_nchidof *= scale;
                            // accumulate
                            fKphiphi_1 += fTemp_matrix_nchidof_x_nchidof;

                            fTemp_matrix_nchidof_x_nudof.MultABCT(NCHI_Tr,fJ1_5,fIota_temp_matrix);
                            scale =scale_const*(fMaterial_Params[kNu]-fMaterial_Params[kSigma_const]);
                            fTemp_matrix_nchidof_x_nudof *= scale;
                            // accumulate
                            fKphiu_5 += fTemp_matrix_nchidof_x_nudof;

                            fTemp_matrix_nchidof_x_nchidof.MultABC(NCHI_Tr,fJ2_2,NCHI);
                            scale =scale_const*(fMaterial_Params[kNu]-fMaterial_Params[kSigma_const]);
                            fTemp_matrix_nchidof_x_nchidof *= scale;
                            // accumulate
                            fKphiphi_2 += fTemp_matrix_nchidof_x_nchidof;

                            fTemp_matrix_nchidof_x_nudof.MultABCT(NCHI_Tr,fJ1_6,fIota_temp_matrix);
                            scale =scale_const*(fMaterial_Params[kKappa]-fMaterial_Params[kSigma_const]);
                            fTemp_matrix_nchidof_x_nudof *= scale;
                            // accumulate
                            fKphiu_5 += fTemp_matrix_nchidof_x_nudof;

                            fTemp_matrix_nchidof_x_nchidof.MultABC(NCHI_Tr,fJ2_3,NCHI);
                            scale =scale_const*(fMaterial_Params[kKappa]-fMaterial_Params[kSigma_const]);
                            fTemp_matrix_nchidof_x_nchidof *= scale;
                            // accumulate
                            fKphiphi_3 += fTemp_matrix_nchidof_x_nchidof;
/*************************************************************************************************************/

                            //fTemp_matrix_nchidof_x_nudof.MultABCT(fIota_eta_temp_matrix,fMF,fIota_temp_matrix);
                            fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,fMF,fShapeDisplGrad);
                            scale =scale_const;
                            fTemp_matrix_nchidof_x_nudof *= scale;
                            // accumulate
                            fKMFphiu += fTemp_matrix_nchidof_x_nudof;

                            //fTemp_matrix_nchidof_x_nchidof.MultABC(fIota_eta_temp_matrix,fMchi,NCHI);
                            fTemp_matrix_nchidof_x_nchidof.MultATBC(GRAD_NCHI,fMchi,NCHI);
                            scale =scale_const;
                            fTemp_matrix_nchidof_x_nchidof *= scale;
                            // accumulate
                            fKMchiphiphi += fTemp_matrix_nchidof_x_nchidof;


                            fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,fMpu_1_1,fShapeDisplGrad);
                            scale =scale_const*fMaterial_Params[kTau1];
                            fTemp_matrix_nchidof_x_nudof *= scale;
                            // accumulate
                            fKMphiu_1_1 += fTemp_matrix_nchidof_x_nudof;


                            fTemp_matrix_nchidof_x_nchidof.MultATBC(GRAD_NCHI,fMpp_1_1,GRAD_NCHI);
                            scale =scale_const*fMaterial_Params[kTau1];
                            fTemp_matrix_nchidof_x_nchidof *= scale;
                            // accumulate
                            fKMphiphi_1_1 += fTemp_matrix_nchidof_x_nchidof;


                            fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,fMpu_1_2,fShapeDisplGrad);
                            scale =scale_const*fMaterial_Params[kTau1];
                            fTemp_matrix_nchidof_x_nudof *= scale;
                            // accumulate
                            fKMphiu_1_2 += fTemp_matrix_nchidof_x_nudof;


                            fTemp_matrix_nchidof_x_nchidof.MultATBC(GRAD_NCHI,fMpp_1_2,GRAD_NCHI);
                            scale =scale_const*fMaterial_Params[kTau1];
                            fTemp_matrix_nchidof_x_nchidof *= scale;
                            // accumulate
                            fKMphiphi_1_2 += fTemp_matrix_nchidof_x_nchidof;


                            fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,fMpu_2_1,fShapeDisplGrad);
                            scale =scale_const*fMaterial_Params[kTau2];
                            fTemp_matrix_nchidof_x_nudof *= scale;
                            // accumulate
                            fKMphiu_2_1 += fTemp_matrix_nchidof_x_nudof;


                            fTemp_matrix_nchidof_x_nchidof.MultATBC(GRAD_NCHI,fMpp_2_1,GRAD_NCHI);
                            scale =scale_const*fMaterial_Params[kTau2];
                            fTemp_matrix_nchidof_x_nchidof *= scale;
                            // accumulate
                            fKMphiphi_2_1 += fTemp_matrix_nchidof_x_nchidof;


                            fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,fMpu_2_2,fShapeDisplGrad);
                            scale =scale_const*fMaterial_Params[kTau2];
                            fTemp_matrix_nchidof_x_nudof *= scale;
                            // accumulate
                            fKMphiu_2_2 += fTemp_matrix_nchidof_x_nudof;


                            fTemp_matrix_nchidof_x_nchidof.MultATBC(GRAD_NCHI,fMpp_2_2,GRAD_NCHI);
                            scale =scale_const*fMaterial_Params[kTau2];
                            fTemp_matrix_nchidof_x_nchidof *= scale;
                            // accumulate
                            fKMphiphi_2_2 += fTemp_matrix_nchidof_x_nchidof;



                            fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,fMpu_3,fShapeDisplGrad);
                            scale =scale_const*fMaterial_Params[kTau3];
                            fTemp_matrix_nchidof_x_nudof *= scale;
                            // accumulate
                            fKMphiu_3 += fTemp_matrix_nchidof_x_nudof;


                            fTemp_matrix_nchidof_x_nchidof.MultATBC(GRAD_NCHI,fMpp_3,GRAD_NCHI);
                            scale =scale_const*fMaterial_Params[kTau3];
                            fTemp_matrix_nchidof_x_nchidof *= scale;
                            // accumulate
                            fKMphiphi_3 += fTemp_matrix_nchidof_x_nchidof;

                            fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,fMpu_4,fShapeDisplGrad);
                            scale =scale_const*fMaterial_Params[kTau4];
                            fTemp_matrix_nchidof_x_nudof *= scale;
                            // accumulate
                            fKMphiu_4 += fTemp_matrix_nchidof_x_nudof;


                            fTemp_matrix_nchidof_x_nchidof.MultATBC(GRAD_NCHI,fMpp_4,GRAD_NCHI);
                            scale =scale_const*fMaterial_Params[kTau4];
                            fTemp_matrix_nchidof_x_nchidof *= scale;
                            // accumulate
                            fKMphiphi_4 += fTemp_matrix_nchidof_x_nchidof;


                            fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,fMpu_5_1,fShapeDisplGrad);
                            scale =scale_const*fMaterial_Params[kTau5];
                            fTemp_matrix_nchidof_x_nudof *= scale;
                            // accumulate
                            fKMphiu_5_1 += fTemp_matrix_nchidof_x_nudof;


                            fTemp_matrix_nchidof_x_nchidof.MultATBC(GRAD_NCHI,fMpp_5_1,GRAD_NCHI);
                            scale =scale_const*fMaterial_Params[kTau5];
                            fTemp_matrix_nchidof_x_nchidof *= scale;
                            // accumulate
                            fKMphiphi_5_1 += fTemp_matrix_nchidof_x_nchidof;


                            fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,fMpu_5_2,fShapeDisplGrad);
                            scale =scale_const*fMaterial_Params[kTau5];
                            fTemp_matrix_nchidof_x_nudof *= scale;
                            // accumulate
                            fKMphiu_5_2 += fTemp_matrix_nchidof_x_nudof;


                            fTemp_matrix_nchidof_x_nchidof.MultATBC(GRAD_NCHI,fMpp_5_2,GRAD_NCHI);
                            scale =scale_const*fMaterial_Params[kTau5];
                            fTemp_matrix_nchidof_x_nchidof *= scale;
                            // accumulate
                            fKMphiphi_5_2 += fTemp_matrix_nchidof_x_nchidof;


                            fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,fMpu_6,fShapeDisplGrad);
                            scale =scale_const*fMaterial_Params[kTau6];
                            fTemp_matrix_nchidof_x_nudof *= scale;
                            // accumulate
                            fKMphiu_6 += fTemp_matrix_nchidof_x_nudof;

                            fTemp_matrix_nchidof_x_nchidof.MultATBC(GRAD_NCHI,fMpp_6,GRAD_NCHI);
                            scale =scale_const*fMaterial_Params[kTau6];
                            fTemp_matrix_nchidof_x_nchidof *= scale;
                            // accumulate
                            fKMphiphi_6 += fTemp_matrix_nchidof_x_nchidof;

                            // fTemp_matrix_nchidof_x_nudof.MultABCT(fIota_eta_temp_matrix,fMpu_1,fIota_temp_matrix);
                            fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,fMpu_7,fShapeDisplGrad);
                            scale =scale_const*fMaterial_Params[kTau7];
                            fTemp_matrix_nchidof_x_nudof *= scale;
                            // accumulate
                            fKMphiu_7 += fTemp_matrix_nchidof_x_nudof;


                            //fTemp_matrix_nchidof_x_nchidof.MultABC(fIota_eta_temp_matrix,fMpp_1,GRAD_NCHI);
                            fTemp_matrix_nchidof_x_nchidof.MultATBC(GRAD_NCHI,fMpp_7,GRAD_NCHI);
                            scale =scale_const*fMaterial_Params[kTau7];
                            fTemp_matrix_nchidof_x_nchidof *= scale;
                            // accumulate
                            fKMphiphi_7 += fTemp_matrix_nchidof_x_nchidof;


                            fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,fMpu_8_1,fShapeDisplGrad);
                            scale =scale_const*fMaterial_Params[kTau8];
                            fTemp_matrix_nchidof_x_nudof *= scale;
                            // accumulate
                            fKMphiu_8_1 += fTemp_matrix_nchidof_x_nudof;


                            fTemp_matrix_nchidof_x_nchidof.MultATBC(GRAD_NCHI,fMpp_8_1,GRAD_NCHI);
                            scale =scale_const*fMaterial_Params[kTau8];
                            fTemp_matrix_nchidof_x_nchidof *= scale;
                            // accumulate
                            fKMphiphi_8_1 += fTemp_matrix_nchidof_x_nchidof;


                            fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,fMpu_8_2,fShapeDisplGrad);
                            scale =scale_const*fMaterial_Params[kTau8];
                            fTemp_matrix_nchidof_x_nudof *= scale;
                            // accumulate
                            fKMphiu_8_2 += fTemp_matrix_nchidof_x_nudof;


                            fTemp_matrix_nchidof_x_nchidof.MultATBC(GRAD_NCHI,fMpp_8_2,GRAD_NCHI);
                            scale =scale_const*fMaterial_Params[kTau8];
                            fTemp_matrix_nchidof_x_nchidof *= scale;
                            // accumulate
                            fKMphiphi_8_2 += fTemp_matrix_nchidof_x_nchidof;


                            fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,fMpu_9,fShapeDisplGrad);
                            scale =scale_const*fMaterial_Params[kTau9];
                            fTemp_matrix_nchidof_x_nudof *= scale;
                            // accumulate
                            fKMphiu_9 += fTemp_matrix_nchidof_x_nudof;


                            fTemp_matrix_nchidof_x_nchidof.MultATBC(GRAD_NCHI,fMpp_9,GRAD_NCHI);
                            scale =scale_const*fMaterial_Params[kTau9];
                            fTemp_matrix_nchidof_x_nchidof *= scale;
                            // accumulate
                            fKMphiphi_9 += fTemp_matrix_nchidof_x_nchidof;


                            fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,fMpu_10,fShapeDisplGrad);
                            scale =scale_const*fMaterial_Params[kTau10];
                            fTemp_matrix_nchidof_x_nudof *= scale;
                            // accumulate
                            fKMphiu_10 += fTemp_matrix_nchidof_x_nudof;


                            fTemp_matrix_nchidof_x_nchidof.MultATBC(GRAD_NCHI,fMpp_10,GRAD_NCHI);
                            scale =scale_const*fMaterial_Params[kTau10];
                            fTemp_matrix_nchidof_x_nchidof *= scale;
                            // accumulate
                            fKMphiphi_10 += fTemp_matrix_nchidof_x_nchidof;


                            fTemp_matrix_nchidof_x_nudof.MultATBC(GRAD_NCHI,fMpu_11,fShapeDisplGrad);
                            scale =scale_const*fMaterial_Params[kTau11];
                            fTemp_matrix_nchidof_x_nudof *= scale;
                            // accumulate
                            fKMphiu_11 += fTemp_matrix_nchidof_x_nudof;


                            fTemp_matrix_nchidof_x_nchidof.MultATBC(GRAD_NCHI,fMpp_11,GRAD_NCHI);
                            scale =scale_const*fMaterial_Params[kTau11];
                            fTemp_matrix_nchidof_x_nchidof *= scale;
                            // accumulate
                            fKMphiphi_11 += fTemp_matrix_nchidof_x_nchidof;
/*************************************************************************************************************************/

                        }//elastic part ends
                }// constitutive model =3 ends
                if(iConstitutiveModelType==2)
                {


                	////////////////////////////////////////////////////////////////////////////////////////
                	/////////////////MicroMorphic Internal force vectors////////////////////////////////////
                		Form_G1_matrix();//output:G1 vector & Sigma matrix
                        fIota_w_temp_matrix.Multx(G1,Uint_1_temp);
                        scale=-1*scale_const*J;
                        Uint_1_temp*=scale;
                        Uint_1 +=Uint_1_temp;
                        //fShapeDispl.MultTx(fGravity_vector,Uext_1);
                        //Uext_1*=-fMaterial_Params[kRho_0];


                        Form_H1_matrix();//output:H1 vctor & Mnplus1 tensor
                        fIota_eta_temp_matrix.Multx(H1,Pint_1_temp);
                        scale=-1*scale_const*J;
                        Pint_1_temp*=scale;
                        Pint_1+=Pint_1_temp;

                        Form_H2_matrix();//output: H2 vector & s_sigma matrix
                        NCHI.MultTx(H2,Pint_2_temp);
                        scale=scale_const*J;
                        Pint_2_temp*=scale;//the sign is taken into account when forming H2 vector.
                        Pint_2+=Pint_2_temp;

                        Form_H3_matrix();//output H3 vector
                        NCHI.MultTx(H3,Pint_3_temp);
                        scale=scale_const*fMaterial_Params[kRho_0];
                        Pint_3_temp*=scale;
                        Pint_3+=Pint_3_temp;

                        SPK.MultABCT(fDeformation_Gradient_Inverse,Sigma,fDeformation_Gradient_Inverse);
                        SPK*=J;
                        // fCauchy_stress_tensor_current_IP=SPK;
                        fCauchy_stress_tensor_current_IP=Sigma;

                        // extract six values of stress from symmetric cauchy stress tensor
                        Extract_six_values_from_symmetric_tensor(fCauchy_stress_tensor_current_IP,fTemp_nine_values);
                        // Extract_six_values_from_symmetric_tensor(fCauchy_stress_tensor_current_IP,fTemp_six_values);

                        //Save Cauchy effective stress tensor of the current IP
                        //fCauchy_stress_IPs.SetRow(IP,fTemp_six_values);
                        fCauchy_stress_IPs.SetRow(IP,fTemp_nine_values);

   ////////////////////////////////////////////////////////////////////////////////
   /////////////////Micromorphic Internal force vectors finish here////////////////////////
   ///////////////////////////////////////////////////////////////////////////////////////

   ////////////////Micromorphic 3-D Matrices are being formed coming from linearization process//////////////////////////
                        Form_CapitalLambda_matrix();//output:CapitalLambda
                        Form_Var_F_tensor();
                        Form_Tsigma_1_matrix();
                        Form_Tsigma_2_matrix();
                        Form_Tsigma_3_matrix();
                        Form_TFn_1_matrix();
                        Form_TFn_2_matrix();
                        Form_TFn_3_matrix();
                        Form_TFn_4_matrix();
                        Form_TFn_5_matrix();
                        Form_TFn_6_matrix();
                        Form_TChi_1_matrix();
                        Form_TChi_2_matrix();
                        Form_TChi_3_matrix();
                        Form_SigCurr_matrix();
   //////////////////////////////////////////////////////////
                        Form_Etagrad_matrix();
                        Form_Mm_1_matrix();
                        Form_Mm_2_matrix();
                        Form_Mm_3_matrix();
                        Form_Mm_4_matrix();
                        Form_Mm_5_matrix();
                        Form_Mm_6_matrix();
                        Form_Mm_7_matrix();
                        Form_Mm_71_matrix();
                        Form_Mm_72_matrix();
                        Form_Mm_73_matrix();
                        Form_Mm_74_matrix();
                        Form_Mm_75_matrix();
                        Form_Mm_76_matrix();
                        Form_Mm_77_matrix();
                        Form_Mm_78_matrix();
                        Form_Mm_8_matrix();
                        Form_Mm_9_matrix();
                        Form_Mm_10_matrix();
                        Form_Mm_11_matrix();
                        Form_Mm_12_matrix();
                        Form_Mm_13_matrix();
                        Form_Mm_14_matrix();
                        Form_Ru_1_matrix();
                        Form_Ru_2_matrix();
                        Form_Ru_3_matrix();
                        Form_RChi_1_matrix();
                        Form_Ru_4_matrix();
                        Form_RChi_2_matrix();
                        Form_Ru_5_matrix();
                        Form_Ru_6_matrix();
                        Form_Ru_7_matrix();
                        Form_RChi_3_matrix();
                        Form_Ru_8_matrix();
                        Form_Ru_9_matrix();

                        Form_Rs_sigma_matrix();//output:Rs_sigma
                        Form_R_Capital_Lambda_Chi_matrix();//output:R_Capital_Gamma_Chi


   ////////////////////////Finished here///////////////////////////////////////////
   ////////////////////////////////////////////////////////////////////////////////
   ////////////////////////////////////////////////////////////////////////////////
   ////////////////fG1_ matrices are constructed////////////////////////////////////
   ////////////////////////////////////////////////////////////////////////////////

                        fTemp_matrix_nudof_x_nudof.MultABCT(fIota_w_temp_matrix,Tsigma_1,fIota_temp_matrix);
                        scale = scale_const*J;
                        fTemp_matrix_nudof_x_nudof *= scale;
                        // accumulate
                        fG1_1 += fTemp_matrix_nudof_x_nudof;

                        fTemp_matrix_nudof_x_nudof.MultABCT(fIota_w_temp_matrix,Tsigma_2,fIota_temp_matrix);
                        scale =-scale_const*J;
                        fTemp_matrix_nudof_x_nudof *= scale;
                        // accumulate
                        fG1_2 += fTemp_matrix_nudof_x_nudof;

                        fTemp_matrix_nudof_x_nudof.MultABCT(fIota_w_temp_matrix,Tsigma_3,fIota_temp_matrix);
                        scale = -scale_const*J;
                        fTemp_matrix_nudof_x_nudof *= scale;
                        // accumulate
                        fG1_3 += fTemp_matrix_nudof_x_nudof;

                        fTemp_matrix_nudof_x_nudof.MultABCT(fIota_temp_matrix,TFn_1,fIota_temp_matrix);
                        scale = -scale_const*J*(fMaterial_Params[kLambda]+fMaterial_Params[kTau]);
                        fTemp_matrix_nudof_x_nudof *= scale;
                        // accumulate
                        fG1_4 += fTemp_matrix_nudof_x_nudof;


                        fTemp_matrix_nudof_x_nudof.MultABCT(fIota_w_temp_matrix,TFn_2,fIota_temp_matrix);
                        scale = -scale_const*J*(fMaterial_Params[kMu]+fMaterial_Params[kSigma_const]);
                        fTemp_matrix_nudof_x_nudof *= scale;
                        //accumulate
                        fG1_5 += fTemp_matrix_nudof_x_nudof;


                        fTemp_matrix_nudof_x_nudof.MultABCT(fIota_w_temp_matrix,TFn_3,fIota_temp_matrix);
                        scale = -scale_const*J*(fMaterial_Params[kMu]+fMaterial_Params[kSigma_const]);
                        fTemp_matrix_nudof_x_nudof *= scale;
                        // accumulate
                        fG1_6 += fTemp_matrix_nudof_x_nudof;


                        fTemp_matrix_nudof_x_nchidof.MultABC(fIota_w_temp_matrix,TChi_1,NCHI);// ABC not ABCT
                        scale = -scale_const*J*(fMaterial_Params[kEta]);
                        fTemp_matrix_nudof_x_nchidof *= scale;
                        // accumulate
                        fG1_7 += fTemp_matrix_nudof_x_nchidof;


                        fTemp_matrix_nudof_x_nudof.MultABCT(fIota_w_temp_matrix,TFn_4,fIota_temp_matrix);
                        scale = -scale_const*J*(fMaterial_Params[kEta]);
                        fTemp_matrix_nudof_x_nudof *= scale;
                        // accumulate
                        fG1_8 += fTemp_matrix_nudof_x_nudof;


                        fTemp_matrix_nudof_x_nchidof.MultABC(fIota_w_temp_matrix,TChi_2,NCHI);//ABC not ABCT
                        scale = -scale_const*J*(fMaterial_Params[kKappa]);
                        fTemp_matrix_nudof_x_nchidof *= scale;
                        // accumulate
                        fG1_9 += fTemp_matrix_nudof_x_nchidof;

                        fTemp_matrix_nudof_x_nudof.MultABCT(fIota_w_temp_matrix,TFn_5,fIota_temp_matrix);
                        scale = -scale_const*J*(fMaterial_Params[kKappa]);
                        fTemp_matrix_nudof_x_nudof *= scale;
                        // accumulate
                        fG1_10 += fTemp_matrix_nudof_x_nudof;

                        fTemp_matrix_nudof_x_nchidof.MultABC(fIota_w_temp_matrix,TChi_3,NCHI);//ABC not ABCT
                        scale = -scale_const*J*(fMaterial_Params[kNu]);
                        fTemp_matrix_nudof_x_nchidof *= scale;
                        // accumulate
                        fG1_11 += fTemp_matrix_nudof_x_nchidof;

                        fTemp_matrix_nudof_x_nudof.MultABCT(fIota_w_temp_matrix,TFn_6,fIota_temp_matrix);
                        scale = -scale_const*J*(fMaterial_Params[kNu]);
                        fTemp_matrix_nudof_x_nudof *= scale;
                        // accumulate
                        fG1_12 += fTemp_matrix_nudof_x_nudof;

                        fTemp_matrix_nudof_x_nudof.MultABC(fIota_w_temp_matrix,SigCurr,fShapeDisplGrad);//ABC not ABCT
                        //fTemp_matrix_nudof_x_nudof.MultABCT(fIota_w_temp_matrix,SigCurr,fIota_temp_matrix);//ABC
                        scale = -scale_const*J;
                        fTemp_matrix_nudof_x_nudof *= scale;
                        // accumulate
                        fG1_13 += fTemp_matrix_nudof_x_nudof;

                        //TransShapeDisplGrad.Transpose(GRAD_Nuw);//
                        //fTemp_matrix_nudof_x_nudof.MultABCT(TransShapeDisplGrad,Var_F,fIota_temp_matrix);
                        fTemp_matrix_nudof_x_nudof.MultABCT(fIota_w_temp_matrix,Var_F,fIota_temp_matrix);
                        scale= scale_const*J;
                        fTemp_matrix_nudof_x_nudof *= scale;
                        fG1_14 +=fTemp_matrix_nudof_x_nudof;


   ////////////////////////////////////////////////////////////////////////////////
   /////////////////fG1_ matrices finish here//////////////////////////////////////
   ////////////////////////////////////////////////////////////////////////////////

   ////////////////////////////////////////////////////////////////////////////////
   /////////////////fH_ matrices are constructed///////////////////////////////////
   ////////////////////////////////////////////////////////////////////////////////
                        fTemp_matrix_nchidof_x_nudof.MultABCT(fIota_eta_temp_matrix,Etagrad,fIota_temp_matrix);
                        scale =scale_const*J;
                        fTemp_matrix_nchidof_x_nudof *= scale;
                        // accumulate
                        fH1_Etagrad += fTemp_matrix_nchidof_x_nudof;



                        fTemp_matrix_nchidof_x_nudof.MultABCT(fIota_eta_temp_matrix,Mm_1,fIota_temp_matrix);
                        scale = scale_const*J;
                        fTemp_matrix_nchidof_x_nudof *= scale;
                        // accumulate
                        fH1_1 += fTemp_matrix_nchidof_x_nudof;


                        fTemp_matrix_nchidof_x_nudof.MultABCT(fIota_eta_temp_matrix,Mm_2,fIota_temp_matrix);
                        scale = -1*scale_const*J;
                        fTemp_matrix_nchidof_x_nudof *= scale;
                        // accumulate
                        fH1_2 += fTemp_matrix_nchidof_x_nudof;

                        fTemp_matrix_nchidof_x_nudof.MultABCT(fIota_eta_temp_matrix,Mm_3,fIota_temp_matrix);
                        scale = -1*scale_const*J;
                        fTemp_matrix_nchidof_x_nudof *= scale;
                        // accumulate
                        fH1_3 += fTemp_matrix_nchidof_x_nudof;


                        fTemp_matrix_nchidof_x_nchidof.MultABC(fIota_eta_temp_matrix,Mm_4,NCHI);
                        scale =-1*scale_const*J;
                        fTemp_matrix_nchidof_x_nchidof *= scale;
                        // accumulate
                        fH1_4 += fTemp_matrix_nchidof_x_nchidof;

                        fTemp_matrix_nchidof_x_nchidof.MultABC(fIota_eta_temp_matrix,Mm_5,NCHI);
                        scale = -1*scale_const*J;
                        fTemp_matrix_nchidof_x_nchidof *= scale;
                        // accumulate
                        fH1_5 += fTemp_matrix_nchidof_x_nchidof;


                        fTemp_matrix_nchidof_x_nchidof.MultABC(fIota_eta_temp_matrix,Mm_6,NCHI);
                        scale = scale_const*J;
                        fTemp_matrix_nchidof_x_nchidof *= scale;
                        // accumulate
                        fH1_6 += fTemp_matrix_nchidof_x_nchidof;

                        fTemp_matrix_nchidof_x_nchidof.MultABC(fIota_eta_temp_matrix,Mm_7,NCHI);
                        scale =-1*scale_const*J;
                        fTemp_matrix_nchidof_x_nchidof *= scale;
                        // accumulate
                        fH1_7 += fTemp_matrix_nchidof_x_nchidof;

                        fTemp_matrix_nchidof_x_nchidof.MultABC(fIota_eta_temp_matrix,Mm_71,GRAD_NCHI);
                        scale =-1*scale_const*J;
                        fTemp_matrix_nchidof_x_nchidof *= scale;
                        // accumulate
                        fH1_71 += fTemp_matrix_nchidof_x_nchidof;

                        fTemp_matrix_nchidof_x_nudof.MultABCT(fIota_eta_temp_matrix,Mm_72,fIota_temp_matrix);
                        scale =1*scale_const*J;
                        fTemp_matrix_nchidof_x_nudof *= scale;
                        // accumulate
                        fH1_72 += fTemp_matrix_nchidof_x_nudof;

                        fTemp_matrix_nchidof_x_nchidof.MultABC(fIota_eta_temp_matrix,Mm_73,NCHI);
                        scale =-1*scale_const*J;
                        fTemp_matrix_nchidof_x_nchidof *= scale;
                        // accumulate
                        fH1_73 += fTemp_matrix_nchidof_x_nchidof;

                        fTemp_matrix_nchidof_x_nchidof.MultABC(fIota_eta_temp_matrix,Mm_74,NCHI);
                        scale =-1*scale_const*J;
                        fTemp_matrix_nchidof_x_nchidof *= scale;
                        // accumulate
                        fH1_74 += fTemp_matrix_nchidof_x_nchidof;

                        fTemp_matrix_nchidof_x_nchidof.MultABC(fIota_eta_temp_matrix,Mm_75,NCHI);
                        scale =1*scale_const*J;
                        fTemp_matrix_nchidof_x_nchidof *= scale;
                        // accumulate
                        fH1_75 += fTemp_matrix_nchidof_x_nchidof;

                        fTemp_matrix_nchidof_x_nchidof.MultABC(fIota_eta_temp_matrix,Mm_76,GRAD_NCHI);
                        scale =-1*scale_const*J;
                        fTemp_matrix_nchidof_x_nchidof *= scale;
                        // accumulate
                        fH1_76 += fTemp_matrix_nchidof_x_nchidof;

                        fTemp_matrix_nchidof_x_nchidof.MultABC(fIota_eta_temp_matrix,Mm_77,NCHI);
                        scale =1*scale_const*J;
                        fTemp_matrix_nchidof_x_nchidof *= scale;
                        // accumulate
                        fH1_77 += fTemp_matrix_nchidof_x_nchidof;

                        fTemp_matrix_nchidof_x_nudof.MultABCT(fIota_eta_temp_matrix,Mm_78,fIota_temp_matrix);
                        scale =1*scale_const*J;
                        fTemp_matrix_nchidof_x_nudof *= scale;
                        // accumulate
                        fH1_78 += fTemp_matrix_nchidof_x_nudof;


                        fTemp_matrix_nchidof_x_nchidof.MultABC(fIota_eta_temp_matrix,Mm_8,NCHI);
                        scale =scale_const*J;
                        fTemp_matrix_nchidof_x_nchidof *= scale;
                        // accumulate
                        fH1_8 += fTemp_matrix_nchidof_x_nchidof;

                        fTemp_matrix_nchidof_x_nchidof.MultABC(fIota_eta_temp_matrix,Mm_9,GRAD_NCHI);
                        scale = -1*scale_const*J;
                        fTemp_matrix_nchidof_x_nchidof *= scale;
                        // accumulate
                        fH1_9 += fTemp_matrix_nchidof_x_nchidof;


                        fTemp_matrix_nchidof_x_nchidof.MultABC(fIota_eta_temp_matrix,Mm_10,NCHI);
                        scale = -1*scale_const*J;
                        fTemp_matrix_nchidof_x_nchidof *= scale;
                        // accumulate
                        fH1_10 += fTemp_matrix_nchidof_x_nchidof;

                        fTemp_matrix_nchidof_x_nudof.MultABCT(fIota_eta_temp_matrix,Mm_11,fIota_temp_matrix);
                        scale = -1*scale_const*J;
                        fTemp_matrix_nchidof_x_nudof *= scale;
                        // accumulate
                        fH1_11 += fTemp_matrix_nchidof_x_nudof;

                        fTemp_matrix_nchidof_x_nudof.MultABCT(fIota_eta_temp_matrix,Mm_12,fIota_temp_matrix);
                        scale = -1*scale_const*J;
                        fTemp_matrix_nchidof_x_nudof *= scale;
                        // accumulate
                        fH1_12 += fTemp_matrix_nchidof_x_nudof;


                        fTemp_matrix_nchidof_x_nchidof.MultABC(fIota_eta_temp_matrix,Mm_13,NCHI);
                        scale = -1*scale_const*J;
                        fTemp_matrix_nchidof_x_nchidof *= scale;
                        // accumulate
                        fH1_13 += fTemp_matrix_nchidof_x_nchidof;


                        fTemp_matrix_nchidof_x_nudof.MultABC(fIota_eta_temp_matrix,Mm_14,fShapeDisplGrad);
                        scale = -1*scale_const*J;
                        fTemp_matrix_nchidof_x_nudof *= scale;
                        // accumulate
                        fH1_14 += fTemp_matrix_nchidof_x_nudof;

                        fTemp_matrix_nchidof_x_nudof.MultABCT(NCHI_Tr,Ru_1,fIota_temp_matrix);
                        scale = scale_const*J;
                        fTemp_matrix_nchidof_x_nudof *= scale;
                        // accumulate
                        fH2_1 += fTemp_matrix_nchidof_x_nudof;

                        fTemp_matrix_nchidof_x_nudof.MultABCT(NCHI_Tr,Ru_2,fIota_temp_matrix);
                        scale = -scale_const*J;
                        fTemp_matrix_nchidof_x_nudof *= scale;
                        // accumulate
                        fH2_2 += fTemp_matrix_nchidof_x_nudof;

                        fTemp_matrix_nchidof_x_nudof.MultABCT(NCHI_Tr,Ru_3,fIota_temp_matrix);
                        scale = -scale_const*J;
                        fTemp_matrix_nchidof_x_nudof *= scale;
                        // accumulate
                        fH2_3 += fTemp_matrix_nchidof_x_nudof;

                        fTemp_matrix_nchidof_x_nchidof.MultABC(NCHI_Tr,RChi_1,NCHI);
                        scale = -scale_const*J*(fMaterial_Params[kKappa]-fMaterial_Params[kSigma_const]);
                        fTemp_matrix_nchidof_x_nudof *= scale;
                        // accumulate
                        fH2_4 += fTemp_matrix_nchidof_x_nchidof;

                        fTemp_matrix_nchidof_x_nudof.MultABCT(NCHI_Tr,Ru_4,fIota_temp_matrix);
                        scale = -scale_const*J*(fMaterial_Params[kKappa]-fMaterial_Params[kSigma_const]);
                        fTemp_matrix_nchidof_x_nudof *= scale;
                        // accumulate
                        fH2_5 += fTemp_matrix_nchidof_x_nudof;

                        fTemp_matrix_nchidof_x_nchidof.MultABC(NCHI_Tr,RChi_2,NCHI);
                        scale = -scale_const*J*(fMaterial_Params[kNu]-fMaterial_Params[kSigma_const]);
                        fTemp_matrix_nchidof_x_nudof *= scale;
                        // accumulate
                        fH2_6 += fTemp_matrix_nchidof_x_nchidof;

                        fTemp_matrix_nchidof_x_nudof.MultABCT(NCHI_Tr,Ru_5,fIota_temp_matrix);
                        scale = -scale_const*J*(fMaterial_Params[kNu]-fMaterial_Params[kSigma_const]);
                        fTemp_matrix_nchidof_x_nudof *= scale;
                        // accumulate
                        fH2_7 += fTemp_matrix_nchidof_x_nudof;


                        fTemp_matrix_nchidof_x_nudof.MultABCT(NCHI_Tr,Ru_6,fIota_temp_matrix);
                        scale = -1*scale_const*J*fMaterial_Params[kTau];
                        fTemp_matrix_nchidof_x_nudof *= scale;
                        // accumulate
                        fH2_8 += fTemp_matrix_nchidof_x_nudof;


                        fTemp_matrix_nchidof_x_nudof.MultABCT(NCHI_Tr,Ru_7,fIota_temp_matrix);
                        scale = -1*scale_const*J*fMaterial_Params[kSigma_const];
                        fTemp_matrix_nchidof_x_nudof *= scale;
                        // accumulate
                        fH2_9 += fTemp_matrix_nchidof_x_nudof;

                        fTemp_matrix_nchidof_x_nudof.MultABCT(NCHI_Tr,Ru_8,fIota_temp_matrix);
                        scale = -1*scale_const*J*fMaterial_Params[kSigma_const];
                        fTemp_matrix_nchidof_x_nudof *= scale;
                        // accumulate
                        fH2_10 += fTemp_matrix_nchidof_x_nudof;

                        fTemp_matrix_nchidof_x_nchidof.MultABC(NCHI_Tr,RChi_3,NCHI);
                        scale = -scale_const*J*(fMaterial_Params[kEta]-fMaterial_Params[kTau]);
                        fTemp_matrix_nchidof_x_nchidof *= scale;
                        // accumulate
                        fH2_11 += fTemp_matrix_nchidof_x_nchidof;

                        fTemp_matrix_nchidof_x_nudof.MultABCT(NCHI_Tr,Ru_9,fIota_temp_matrix);
                        scale = -scale_const*J*(fMaterial_Params[kEta]-fMaterial_Params[kTau]);
                        fTemp_matrix_nchidof_x_nudof *= scale;
                        // accumulate
                        fH2_12 += fTemp_matrix_nchidof_x_nudof;

                        fTemp_matrix_nchidof_x_nudof.MultABC(NCHI_Tr,Rs_sigma,fShapeDisplGrad);
                        scale = -1*scale_const*J;
                        fTemp_matrix_nchidof_x_nudof *= scale;
                        // accumulate
                        fH2_13 += fTemp_matrix_nchidof_x_nudof;

                        fTemp_matrix_nchidof_x_nchidof.MultABC(NCHI_Tr,R_Capital_Gamma_Chi,NCHI);
                        scale = 1*scale_const*fMaterial_Params[kRho_0];//*J?????
                        fTemp_matrix_nchidof_x_nudof *= scale;
                        // accumulate
                        fH3_1 += fTemp_matrix_nchidof_x_nchidof;


   /////////////////fH_ matrices finish here////////////////////////////////////////



                        /////////////////////saving matrices at Gauss Points////////////

                        Form_deformation_gradient_tensor();
                        Form_micro_deformation_tensor_Chi();
                        Form_GRAD_Chi_matrix();

                        Mapping_double_and_Array(1);
                        GammaN_IPs.SetRow(IP,GammaN_ar);
                        SigN_IPs.SetRow(IP,Sigma);
                        sn_sigman_IPs.SetRow(IP,s_sigma);
                        mn_IPs.SetRow(IP,mn_ar);

                        Form_deformation_tensors_arrays(1);
                        F_ar_IPs.SetRow(IP,fDeformation_Gradient);
                        FInv_ar_IPs.SetRow(IP,fDeformation_Gradient_Inverse);
                        Chi_ar_IPs.SetRow(IP,Chi_ar);
                        GRAD_Chi_ar_IPs.SetRow(IP,GRAD_Chi_ar);
                }//constitutive loop ends here

                Calculate_Cauchy_INV();
                Calculate_stress_diff_INV();
                Calculate_higher_order_tensor_INV();
                Calculate_PHI_GPHI_matrices_INV();
                Calculate_HOST_INV();
                Calculate_relative_strain_INV();

//              fState_variables[0]=Cauchy_inv;
//              fState_variables[1]=Rel_strs_inv;
//              fState_variables[2]=Higher_orderT_inv;
//              fState_variables[3]=trsigma;
//              fState_variables[4]=trs_sigma;
//              fState_variables[5]=trmklm;
                fState_variables_IPs(IP,ktrSigma)=Pbar;
                fState_variables_IPs(IP,kSigma_inv)=Cauchy_inv;
                fState_variables_IPs(IP,ktrRel)=trs_sigma;
                fState_variables_IPs(IP,kRel_inv)=Rel_strs_inv;
                fState_variables_IPs(IP,ktrm)=trmklm;
                fState_variables_IPs(IP,km_inv)=Higher_orderT_inv;
                fState_variables_IPs(IP,ktrS)=trS;
                fState_variables_IPs(IP,kinvdevS)=devfSPKinv;
                fState_variables_IPs(IP,ktrSIGMA)=fMeanSIGMA_e;
                fState_variables_IPs(IP,kinvdevSIGMA)=fNormdevSIGMA;
                fState_variables_IPs(IP,kinvtrM)=Norm_Mean_fMeKLM;
                fState_variables_IPs(IP,kinvdevM)=fNormdevMeKLM;
                fState_variables_IPs(IP,kinvPhi)=invPhi;
                fState_variables_IPs(IP,kinvGPhi)=invGPhi;
                fState_variables_IPs(IP,ktreps)=treps;
                fState_variables_IPs(IP,kdeveps)=deveps;
                fState_variables_IPs(IP,kinvtrgammastn)=invtrgammastn;
                fState_variables_IPs(IP,kinvdevgammastn)=invdevgammastn;

//                fState_variables_IPs(IP,kF11)=fDeformation_Gradient(0,0);
//                fState_variables_IPs(IP,kF12)=fDeformation_Gradient(0,1);
//                fState_variables_IPs(IP,kF13)=fDeformation_Gradient(0,2);
//                fState_variables_IPs(IP,kF21)=fDeformation_Gradient(1,0);
//                fState_variables_IPs(IP,kF22)=fDeformation_Gradient(1,1);
//                fState_variables_IPs(IP,kF23)=fDeformation_Gradient(1,2);
//                fState_variables_IPs(IP,kF31)=fDeformation_Gradient(2,0);
//                fState_variables_IPs(IP,kF32)=fDeformation_Gradient(2,1);
//                fState_variables_IPs(IP,kF33)=fDeformation_Gradient(2,2);
//                fState_variables_IPs(IP,kFe11)=fFe(0,0);
//                fState_variables_IPs(IP,kFe12)=fFe(0,1);
//                fState_variables_IPs(IP,kFe13)=fFe(0,2);
//                fState_variables_IPs(IP,kFe21)=fFe(1,0);
//                fState_variables_IPs(IP,kFe22)=fFe(1,1);
//                fState_variables_IPs(IP,kFe23)=fFe(1,2);
//                fState_variables_IPs(IP,kFe31)=fFe(2,0);
//                fState_variables_IPs(IP,kFe32)=fFe(2,1);
//                fState_variables_IPs(IP,kFe33)=fFe(2,2);
//                fState_variables_IPs(IP,kX11)=ChiM(0,0);
//                fState_variables_IPs(IP,kX12)=ChiM(0,1);
//                fState_variables_IPs(IP,kX13)=ChiM(0,2);
//                fState_variables_IPs(IP,kX21)=ChiM(1,0);
//                fState_variables_IPs(IP,kX22)=ChiM(1,1);
//                fState_variables_IPs(IP,kX23)=ChiM(1,2);
//                fState_variables_IPs(IP,kX31)=ChiM(2,0);
//                fState_variables_IPs(IP,kX32)=ChiM(2,1);
//                fState_variables_IPs(IP,kX33)=ChiM(2,2);
//                fState_variables_IPs(IP,kXe11)=fChie(0,0);
//                fState_variables_IPs(IP,kXe12)=fChie(0,1);
//                fState_variables_IPs(IP,kXe13)=fChie(0,2);
//                fState_variables_IPs(IP,kXe21)=fChie(1,0);
//                fState_variables_IPs(IP,kXe22)=fChie(1,1);
//                fState_variables_IPs(IP,kXe23)=fChie(1,2);
//                fState_variables_IPs(IP,kXe31)=fChie(2,0);
//                fState_variables_IPs(IP,kXe32)=fChie(2,1);
//                fState_variables_IPs(IP,kXe33)=fChie(2,2);


//              fState_variables[6]=LagrangianStn(0,0);//E11
//              fState_variables[7]=LagrangianStn(1,1);//E22
//              fState_variables[8]=LagrangianStn(2,2);//E33
//              fState_variables[9]=LagrangianStn(0,1);//E12
//              fState_variables[10]=LagrangianStn(0,2);//E13
//              fState_variables[11]=LagrangianStn(1,0);//E21
//              fState_variables[12]=LagrangianStn(1,2);//E23
//              fState_variables[13]=LagrangianStn(2,0);//E31
//              fState_variables[14]=LagrangianStn(2,1);//E32
//              fState_variables[15]=MicroStnTensor(0,0);
//              fState_variables[16]=MicroStnTensor(1,1);
//              fState_variables[17]=MicroStnTensor(2,2);
//              fState_variables[18]=MicroStnTensor(0,1);
//              fState_variables[19]=MicroStnTensor(0,2);
//              fState_variables[20]=MicroStnTensor(1,0);
//              fState_variables[21]=MicroStnTensor(1,2);
//              fState_variables[22]=MicroStnTensor(2,0);
//              fState_variables[23]=MicroStnTensor(2,1);
//              fState_variables[24]=fDeformation_Gradient(0,0);//F11
//              fState_variables[25]=fDeformation_Gradient(1,1);//F22
//              fState_variables[26]=fDeformation_Gradient(2,2);//F33
//              fState_variables[27]=fDeformation_Gradient(0,1);//F12
//              fState_variables[28]=fDeformation_Gradient(0,2);//F13
//              fState_variables[29]=fDeformation_Gradient(1,0);//F21
//              fState_variables[30]=fDeformation_Gradient(1,2);//F23
//              fState_variables[31]=fDeformation_Gradient(2,0);//F31
//              fState_variables[32]=fDeformation_Gradient(2,1);//F32
//              fState_variables[33]=GAMMA(0,0,0);//
//              fState_variables[34]=GAMMA(1,0,1);//
//              fState_variables[35]=GAMMA(2,0,2);//
//              fState_variables[36]=GAMMA(0,1,0);//
//              fState_variables[37]=GAMMA(1,1,1);//
//              fState_variables[38]=GAMMA(2,1,2);//
//              fState_variables[39]=GAMMA(0,2,0);//
//              fState_variables[40]=GAMMA(1,2,1);//
//              fState_variables[41]=GAMMA(2,2,2);//
//              fState_variables_IPs.SetRow(IP,fState_variables);
                /* For displacement interpolation */
//              fShapeDispl.Multx(u_vec,u_element);
//              fDisplacement_IPs.SetRow(IP,u_element);
//              fState_variables_IPs.SetRow(IP,fState_variables);

        } //end Gauss integration loop


        /* saving eulerian strain for each IPs of the current element */
        fEulerian_strain_Elements_IPs.SetRow(e,fEulerian_strain_IPs);

        /* saving cauchy stress for each IPs of the current element */
        fCauchy_stress_Elements_IPs.SetRow(e,fCauchy_stress_IPs);

        // saving dGdS for each IP of the current element //
        fdGdS_Elements_IPs.SetRow(e,fdGdS_IPs);

        // saving dGdCauchy Stress for each IP of the current element //
        fdGdCauchy_Stress_Elements_IPs.SetRow(e,fdGdCauchy_Stress_IPs);

        // saving Cauchy Stress for each IP of the current element //
        fDeformation_Gradient_Elements_IPs.SetRow(e,fDeformation_Gradient_IPs);

        // saving dFYdS for each IP of the current element //
        fdFYdS_Elements_IPs.SetRow(e,fdFYdS_IPs);

        // saving fdFYchidSIGMA_S for each IP of the current element //
        fdFYchidSIGMA_Elements_IPs.SetRow(e,fdFYchidSIGMA_IPs);


        // saving fdGchidSIGMA_S for each IP of the current element //
        fdGchidSIGMA_Elements_IPs.SetRow(e,fdGchidSIGMA_IPs);
        dGnablachidMKLM_Element_IPs.SetRow(e,dGnablachidMKLM_IPs);
        GAMMAe_Elements_IPs.SetRow(e,GAMMAe_IPs);
        GXp_Elements_IPs.SetRow(e,GXp_IPs);

        fMeKLM_Elements_IPs.SetRow(e,fMeKLM_IPs);
        SPK_Elements_IPs.SetRow(e,SPK_IPs);
        SIGMA_S_Elements_IPs.SetRow(e,SIGMA_S_IPs);
        SIGMA_Elements_IPs.SetRow(e,SIGMA_IPs);

        Elastic_LagrangianStn_Elements_IPs.SetRow(e,Elastic_LagrangianStn_IPs);
        Elastic_MicroStnTensor_Elements_IPs.SetRow(e,Elastic_MicroStnTensor_IPs);

        // saving Fp for each IP of the current element //
        fFp_Elements_IPs.SetRow(e,fFp_IPs);

        // saving Chip for each IP of the current element //
        fChip_Elements_IPs.SetRow(e,fChip_IPs);

        // saving Ce for each IP of the current element //
        fCe_Elements_IPs.SetRow(e,fCe_IPs);

        // saving PSIe for each IP of the current element //
        PSIe_Elements_IPs.SetRow(e,PSIe_IPs);

        // saving Cchie for each IP of the current element //
        fCchie_Elements_IPs.SetRow(e,fCchie_IPs);

        // saving state variables for each IPs of the current element //
        fState_variables_Elements_IPs.SetRow(e,fState_variables_IPs);

        if(iConstitutiveModelType==2)
        {
            GammaN_IPs_el.SetRow(e,GammaN_IPs);
            SigN_IPs_el.SetRow(e,SigN_IPs);
            sn_sigman_IPs_el.SetRow(e,sn_sigman_IPs);
            mn_IPs_el.SetRow(e,mn_IPs);

            F_ar_IPs_el.SetRow(e,F_ar_IPs);
            FInv_ar_IPs_el.SetRow(e,FInv_ar_IPs);
            Chi_ar_IPs_el.SetRow(e,Chi_ar_IPs);
            GRAD_Chi_ar_IPs_el.SetRow(e,GRAD_Chi_ar_IPs);
        }

        if(iConstitutiveModelType==1)
        {

            //{fFd_int} will be formed
                //fFd_int  = 0.0;
                fFd_int  = Vint_1;
                fFd_int *= -1;

                //Micromorphic case fKdd coming from bal. of linear momentum
                fKdd=0.0;
/*            fKdd  =  fKu_1;
              fKdd +=  fKu_2;*/
                fKdd +=  fKu_3;
                fKdd +=  fKu_4;
                fKdd +=  fKu_5;
                fKdd +=  fKu_6;
                fKdd +=  fKu_7;
                fKdd +=  fKu_8;
                fKdd +=  fKu_9;
                //fKdd +=  KJmat;

                /* [fKdphi] will be formed */

                //fKdphi  = 0.0;
                fKdphi =fKuphi_1;
                fKdphi +=fKuphi_2;
                fKdphi +=fKuphi_3;


                /* [fKphid] will be formed */
            //fKphid = 0.0;
            fKphid =fKphiu_1;
            fKphid+=fKphiu_2;
            fKphid+=fKphiu_3;
            fKphid+=fKphiu_4;
            fKphid+=fKphiu_5;

            fKphid+=fKFJu;
            fKphid+=fKJFu;

            fKphid+=fKMFphiu;
            fKphid+=fKMphiu_7;
            fKphid+=fKMphiu_9;
            fKphid+=fKMphiu_3;
            fKphid+=fKMphiu_4;
            fKphid+=fKMphiu_6;

            /* [fKphiphi] will be formed */

            //fKphiphi = 0.0;
            fKphiphi =fKphiphi_1;
            fKphiphi+=fKphiphi_2;
            fKphiphi+=fKphiphi_3;

            fKphiphi+=fKMchiphiphi;
            fKphiphi+=fKMphiphi_7;
            fKphiphi+=fKMphiphi_9;
            fKphiphi+=fKMphiphi_3;
            fKphiphi+=fKMphiphi_4;
            fKphiphi+=fKMphiphi_6;
            /* {fFphi_int} will be formed */
            //fFphi_int  = 0.0;
            fFphi_int  = Vint_2;
            fFphi_int +=Vint_3;
            fFphi_int *=-1;

        }
        if(iConstitutiveModelType==3 || iConstitutiveModelType==4)
        {

                fFd_int  = Vint_1;


			//Micromorphic case fKdd coming from bal. of linear momentum
                fKdd=0.0;
                fKdd  =  fKu_3;
                fKdd +=  fKu_4;
                fKdd +=  fKu_5;
                fKdd +=  fKu_6;
                fKdd +=  fKu_7;
                fKdd +=  fKu_8;
                fKdd +=  fKu_9;


                /* [fKdphi] will be formed */

                fKdphi  = 0.0;
                fKdphi  =fKuphi_1;
				fKdphi +=fKuphi_2;
				fKdphi +=fKuphi_3;


					/* [fKphid] will be formed */
				fKphid = 0.0;
				fKphid =fKphiu_1;
				fKphid+=fKphiu_2;
				fKphid+=fKphiu_3;
				fKphid+=fKphiu_4;
				fKphid+=fKphiu_5;


				fKphid+=fKFJu;
				fKphid+=fKJFu;

				fKphid+=fKMFphiu;
				fKphid+=fKMphiu_1_1;
				fKphid+=fKMphiu_1_2;
				fKphid+=fKMphiu_2_1;
				fKphid+=fKMphiu_2_1;
				fKphid+=fKMphiu_3;
				fKphid+=fKMphiu_4;
				fKphid+=fKMphiu_5_1;
				fKphid+=fKMphiu_5_2;
				fKphid+=fKMphiu_6;
	            fKphid+=fKMphiu_7;
				fKphid+=fKMphiu_8_1;
				fKphid+=fKMphiu_8_2;
	            fKphid+=fKMphiu_9;
	            fKphid+=fKMphiu_10;
	            fKphid+=fKMphiu_11;


				/* [fKphiphi] will be formed */
				fKphiphi = 0.0;
				fKphiphi =fKphiphi_1;
				fKphiphi+=fKphiphi_2;
				fKphiphi+=fKphiphi_3;

				fKphiphi+=fKMchiphiphi;
				fKphiphi+=fKMphiphi_1_1;
				fKphiphi+=fKMphiphi_1_2;
				fKphiphi+=fKMphiphi_2_1;
				fKphiphi+=fKMphiphi_2_2;
				fKphiphi+=fKMphiphi_3;
				fKphiphi+=fKMphiphi_4;
				fKphiphi+=fKMphiphi_5_1;
				fKphiphi+=fKMphiphi_5_2;
				fKphiphi+=fKMphiphi_6;
	            fKphiphi+=fKMphiphi_7;
				fKphiphi+=fKMphiphi_8_1;
				fKphiphi+=fKMphiphi_8_2;
	            fKphiphi+=fKMphiphi_9;
	            fKphiphi+=fKMphiphi_10;
	            fKphiphi+=fKMphiphi_11;

				/* {fFphi_int} will be formed */
				fFphi_int  = 0.0;
				fFphi_int  = Vint_2;
				fFphi_int += Vint_3;

				/* Plasticity contribution is the further down */




//******************************************************************
//******************************************************************
//******************************************************************

//******************************************************************
//*************Plastic matrices ************************************
//******************************************************************
            fFd_int  += Vintp_1;
            fFd_int *= -1;

            fKdd +=  fKu_IJp_1;
            fKdd +=  fKu_IJp_2;
            fKdd +=  fKu_IJp_3;
            fKdd +=  fKu_IJp_4;
            fKdd +=  fKu_IJp_5;
            fKdd +=  fKu_IJp_6;
            /*Matriced from coupling*/
            fKdd +=  fKu_IJp_10;
            fKdd +=  fKu_IJp_11;
            fKdd +=  fKu_IJp_12;
            fKdd +=  fKu_IJp_14;
            fKdd +=  fKu_IJp_16;



            fKdd +=  fKu_I1e_1;

            fKdd +=  fKu_I2e_1;
            fKdd +=  fKu_I2p_2;
            fKdd +=  fKu_I2p_3;
            fKdd +=  fKu_I2p_4;
            fKdd +=  fKu_I2p_5;
            fKdd +=  fKu_I2p_6;
            fKdd +=  fKu_I2p_7;
            /* Matrices from coupling */
            fKdd +=  fKu_I2p_11;
            fKdd +=  fKu_I2p_12;
            fKdd +=  fKu_I2p_13;
            fKdd +=  fKu_I2p_15;
            fKdd +=  fKu_I2p_17;




            fKdd +=  fKu_I3e_1;
            fKdd +=  fKu_I3e_2;
            fKdd +=  fKu_I3e_3;
            fKdd +=  fKu_I3p_4;
            fKdd +=  fKu_I3p_5;
            fKdd +=  fKu_I3p_6;
            fKdd +=  fKu_I3p_7;
            fKdd +=  fKu_I3p_8;
            fKdd +=  fKu_I3p_9;
            fKdd +=  fKu_I3p_10;
            fKdd +=  fKu_I3p_11;
            fKdd +=  fKu_I3p_12;
            fKdd +=  fKu_I3e_13;

            fKdd +=  fKu_I3e_14;
            fKdd +=  fKu_I3e_15;
            fKdd +=  fKu_I3p_16;
            fKdd +=  fKu_I3p_17;
            fKdd +=  fKu_I3p_18;
            fKdd +=  fKu_I3p_19;
            fKdd +=  fKu_I3p_20;
            fKdd +=  fKu_I3p_21;
            fKdd +=  fKu_I3p_22;
            fKdd +=  fKu_I3p_23;
            fKdd +=  fKu_I3p_24;
            fKdd +=  fKu_I3p_25;
            fKdd +=  fKu_I3p_26;
            fKdd +=  fKu_I3p_27;
            fKdd +=  fKu_I3p_28;
            fKdd +=  fKu_I3p_29;
            fKdd +=  fKu_I3p_30;
            fKdd +=  fKu_I3p_31;
            fKdd +=  fKu_I3p_32;
            fKdd +=  fKu_I3p_33;
            fKdd +=  fKu_I3p_34;
            fKdd +=  fKu_I3p_35;
            fKdd +=  fKu_I3p_36;

            /*Del(delgammachi) contribution  */
            fKdd +=  fKu_I3p_55; //
            fKdd +=  fKu_I3p_56;
            fKdd +=  fKu_I3p_57;
            fKdd +=  fKu_I3p_59;
            fKdd +=  fKu_I3p_61;
            fKdd +=  fKu_I3p_63;
            fKdd +=  fKu_I3p_64;
            fKdd +=  fKu_I3p_65;
            fKdd +=  fKu_I3p_67;
            fKdd +=  fKu_I3p_69;
            fKdd +=  fKu_I3p_71;
            fKdd +=  fKu_I3p_72;
            fKdd +=  fKu_I3p_73;
            fKdd +=  fKu_I3p_75;
            fKdd +=  fKu_I3p_77;

            /* Matrices from coupling */

            fKdd +=  fKu_I3p_79;
            fKdd +=  fKu_I3p_80;
            fKdd +=  fKu_I3p_81;
            fKdd +=  fKu_I3p_83;
            fKdd +=  fKu_I3p_85;
            fKdd +=  fKu_I3p_87;
            fKdd +=  fKu_I3p_88;
            fKdd +=  fKu_I3p_89;
            fKdd +=  fKu_I3p_91;
            fKdd +=  fKu_I3p_93;
            fKdd +=  fKu_I3p_95;
            fKdd +=  fKu_I3p_96;
            fKdd +=  fKu_I3p_97;
            fKdd +=  fKu_I3p_99;
            fKdd +=  fKu_I3p_101;
            fKdd +=  fKu_I3p_103;
            fKdd +=  fKu_I3p_104;
            fKdd +=  fKu_I3p_105;
            fKdd +=  fKu_I3p_107;
            fKdd +=  fKu_I3p_109;
            fKdd +=  fKu_I3p_111;
            fKdd +=  fKu_I3p_112;
            fKdd +=  fKu_I3p_113;
            fKdd +=  fKu_I3p_115;
            fKdd +=  fKu_I3p_117;
            fKdd +=  fKu_I3p_119;
            fKdd +=  fKu_I3p_120;
            fKdd +=  fKu_I3p_121;
            fKdd +=  fKu_I3p_123;
            fKdd +=  fKu_I3p_125;
            fKdd +=  fKu_I3p_127;
            fKdd +=  fKu_I3p_128;
            fKdd +=  fKu_I3p_129;
            fKdd +=  fKu_I3p_131;
            fKdd +=  fKu_I3p_133;
            fKdd +=  fKu_I3p_135;
            fKdd +=  fKu_I3p_136;
            fKdd +=  fKu_I3p_137;
            fKdd +=  fKu_I3p_139;
            fKdd +=  fKu_I3p_141;


            fKdd +=  fKu_I4e_1;
            fKdd +=  fKu_I4p_2;
            fKdd +=  fKu_I4p_3;
            fKdd +=  fKu_I4p_4;
            fKdd +=  fKu_I4p_5;
            fKdd +=  fKu_I4p_6;
            fKdd +=  fKu_I4p_7;
            fKdd +=  fKu_I4p_11;
            fKdd +=  fKu_I4p_12;
            fKdd +=  fKu_I4p_13;
            fKdd +=  fKu_I4p_15;
            fKdd +=  fKu_I4p_17;

////////////////Terms Related to Trial plasticity flow////////////////////
            fKdd +=  fKu_I2p_trial_1;
            fKdd +=  fKu_I2p_trial_2;
            fKdd +=  fKu_I2p_trial_3;
            fKdd +=  fKu_I2p_trial_4;
            fKdd +=  fKu_I2p_trial_5;

            fKdd +=  fKu_I3p_trial_1;
            fKdd +=  fKu_I3p_trial_2;
            fKdd +=  fKu_I3p_trial_3;
            fKdd +=  fKu_I3p_trial_4;
            fKdd +=  fKu_I3p_trial_5;

            fKdd +=  fKu_I4p_trial_1;
            fKdd +=  fKu_I4p_trial_2;
            fKdd +=  fKu_I4p_trial_3;
            fKdd +=  fKu_I4p_trial_4;
            fKdd +=  fKu_I4p_trial_5;
            fKdd +=  fKu_I4p_trial_6;
            fKdd +=  fKu_I4p_trial_7;
            fKdd +=  fKu_I4p_trial_8;
            fKdd +=  fKu_I4p_trial_9;
            fKdd +=  fKu_I4p_trial_10;
            fKdd +=  fKu_I4p_trial_11;
            fKdd +=  fKu_I4p_trial_12;
            fKdd +=  fKu_I4p_trial_13;
            fKdd +=  fKu_I4p_trial_14;
            fKdd +=  fKu_I4p_trial_15;

            fKdd +=  fKu_I5p_trial_1;
            fKdd +=  fKu_I5p_trial_2;
            fKdd +=  fKu_I5p_trial_3;
            fKdd +=  fKu_I5p_trial_4;
            fKdd +=  fKu_I5p_trial_5;

            fKdd +=  fKu_I6p_trial_1;
            fKdd +=  fKu_I6p_trial_2;

            fKdd +=  fKu_I7p_trial_1;
            fKdd +=  fKu_I7p_trial_2;

            fKdd +=  fKu_I8p_trial_1;
            fKdd +=  fKu_I8p_trial_2;

            fKdd +=  fKu_I9p_trial_1;
            fKdd +=  fKu_I9p_trial_2;

            fKdd +=  fKu_I10p_trial_1;
            fKdd +=  fKu_I10p_trial_2;

            fKdd +=  fKu_I11p_trial_1;
            fKdd +=  fKu_I11p_trial_2;

            fKdd +=  fKu_I12p_trial_1;
            fKdd +=  fKu_I12p_trial_3;
            fKdd +=  fKu_I12p_trial_5;
            fKdd +=  fKu_I12p_trial_7;
            fKdd +=  fKu_I12p_trial_9;

            fKdphi +=  fKuphi_I12p_trial_2;
            fKdphi +=  fKuphi_I12p_trial_4;
            fKdphi +=  fKuphi_I12p_trial_6;
            fKdphi +=  fKuphi_I12p_trial_8;
            fKdphi +=  fKuphi_I12p_trial_10;

            fKdd +=  fKu_I13p_trial_1;
            fKdd +=  fKu_I13p_trial_3;
            fKdd +=  fKu_I13p_trial_5;
            fKdd +=  fKu_I13p_trial_7;
            fKdd +=  fKu_I13p_trial_9;

            fKdphi +=  fKuphi_I13p_trial_2;
            fKdphi +=  fKuphi_I13p_trial_4;
            fKdphi +=  fKuphi_I13p_trial_6;
            fKdphi +=  fKuphi_I13p_trial_8;
            fKdphi +=  fKuphi_I13p_trial_10;

            fKdd +=  fKu_I14p_trial_1;
            fKdd +=  fKu_I14p_trial_3;
            fKdd +=  fKu_I14p_trial_5;
            fKdd +=  fKu_I14p_trial_7;
            fKdd +=  fKu_I14p_trial_9;

            fKdphi +=  fKuphi_I14p_trial_2;
            fKdphi +=  fKuphi_I14p_trial_4;
            fKdphi +=  fKuphi_I14p_trial_6;
            fKdphi +=  fKuphi_I14p_trial_8;
            fKdphi +=  fKuphi_I14p_trial_10;

            fKdd +=  fKu_I15p_trial_1;
            fKdd +=  fKu_I15p_trial_3;
            fKdd +=  fKu_I15p_trial_5;
            fKdd +=  fKu_I15p_trial_7;
            fKdd +=  fKu_I15p_trial_9;

            fKdphi +=  fKuphi_I15p_trial_2;
            fKdphi +=  fKuphi_I15p_trial_4;
            fKdphi +=  fKuphi_I15p_trial_6;
            fKdphi +=  fKuphi_I15p_trial_8;
            fKdphi +=  fKuphi_I15p_trial_10;

            fKdd +=  fKu_I16p_trial_1;
            fKdd +=  fKu_I16p_trial_3;
            fKdd +=  fKu_I16p_trial_5;
            fKdd +=  fKu_I16p_trial_7;
            fKdd +=  fKu_I16p_trial_9;

            fKdphi +=  fKuphi_I16p_trial_2;
            fKdphi +=  fKuphi_I16p_trial_4;
            fKdphi +=  fKuphi_I16p_trial_6;
            fKdphi +=  fKuphi_I16p_trial_8;
            fKdphi +=  fKuphi_I16p_trial_10;

            fKdd +=  fKu_I17p_trial_1;
            fKdd +=  fKu_I17p_trial_3;
            fKdd +=  fKu_I17p_trial_5;
            fKdd +=  fKu_I17p_trial_7;
            fKdd +=  fKu_I17p_trial_9;

            fKdphi +=  fKuphi_I17p_trial_2;
            fKdphi +=  fKuphi_I17p_trial_4;
            fKdphi +=  fKuphi_I17p_trial_6;
            fKdphi +=  fKuphi_I17p_trial_8;
            fKdphi +=  fKuphi_I17p_trial_10;


///////////////////////////////////////////////////////////////////////////

            fKdphi+= fKuphi_IJp_7;
            fKdphi+= fKuphi_IJp_8;
            fKdphi+= fKuphi_IJp_9;

        /* Matrices from coupling*/

            fKdphi+= fKuphi_IJp_13;
            fKdphi+= fKuphi_IJp_15;
            fKdphi+= fKuphi_IJp_17;

            fKdphi+= fKuphi_I2p_8;
            fKdphi+= fKuphi_I2p_9;
            fKdphi+= fKuphi_I2p_10;

            /* Matrices from coupling */

            fKdphi+= fKuphi_I2p_14;
            fKdphi+= fKuphi_I2p_16;
            fKdphi+= fKuphi_I2p_18;


            fKdphi+= fKuphi_I3e_37;
            fKdphi+= fKuphi_I3e_38;
            fKdphi+= fKuphi_I3e_39;
            fKdphi+= fKuphi_I3p_40;
            fKdphi+= fKuphi_I3p_41;
            fKdphi+= fKuphi_I3p_42;
            fKdphi+= fKuphi_I3p_43;
            fKdphi+= fKuphi_I3p_44;
            fKdphi+= fKuphi_I3p_45;
            fKdphi+= fKuphi_I3p_46;
            fKdphi+= fKuphi_I3p_47;
            fKdphi+= fKuphi_I3p_48;
            fKdphi+= fKuphi_I3p_49;
            fKdphi+= fKuphi_I3p_50;
            fKdphi+= fKuphi_I3p_51;
            fKdphi+= fKuphi_I3p_52;
            fKdphi+= fKuphi_I3p_53;
            fKdphi+= fKuphi_I3p_54;

            /*Del(delgammachi) contribution  */

            fKdphi+= fKuphi_I3p_58;
            fKdphi+= fKuphi_I3p_60;
            fKdphi+= fKuphi_I3p_62; //
            fKdphi+= fKuphi_I3p_66;
            fKdphi+= fKuphi_I3p_68;
            fKdphi+= fKuphi_I3p_70;
            fKdphi+= fKuphi_I3p_74;
            fKdphi+= fKuphi_I3p_76;
            fKdphi+= fKuphi_I3p_78;

            /* Matrices from coupling*/

            fKdphi+= fKuphi_I3p_82;
            fKdphi+= fKuphi_I3p_84;
            fKdphi+= fKuphi_I3p_86;
            fKdphi+= fKuphi_I3p_90;
            fKdphi+= fKuphi_I3p_92;
            fKdphi+= fKuphi_I3p_94;
            fKdphi+= fKuphi_I3p_98;
            fKdphi+= fKuphi_I3p_100;
            fKdphi+= fKuphi_I3p_102;
            fKdphi+= fKuphi_I3p_106;
            fKdphi+= fKuphi_I3p_108;
            fKdphi+= fKuphi_I3p_110;
            fKdphi+= fKuphi_I3p_114;
            fKdphi+= fKuphi_I3p_116;
            fKdphi+= fKuphi_I3p_118;
            fKdphi+= fKuphi_I3p_122;
            fKdphi+= fKuphi_I3p_124;
            fKdphi+= fKuphi_I3p_126;
            fKdphi+= fKuphi_I3p_130;
            fKdphi+= fKuphi_I3p_132;
            fKdphi+= fKuphi_I3p_134;
            fKdphi+= fKuphi_I3p_138;
            fKdphi+= fKuphi_I3p_140;
            fKdphi+= fKuphi_I3p_142;





            fKdphi+= fKuphi_I4p_8;
            fKdphi+= fKuphi_I4p_9;
            fKdphi+= fKuphi_I4p_10;
            fKdphi+= fKuphi_I4p_14;
            fKdphi+= fKuphi_I4p_16;
            fKdphi+= fKuphi_I4p_18;


            /* Contribution from the second balance equation */

            fKphid+=  fKphiu_IIJp_1;
            fKphid+=  fKphiu_IIJp_2;
            fKphid+=  fKphiu_IIJp_3;
            fKphid+=  fKphiu_IIJp_4;
            fKphid+=  fKphiu_IIJp_5;
            fKphid+=  fKphiu_IIJp_9;
            fKphid+=  fKphiu_IIJp_10;
            fKphid+=  fKphiu_IIJp_11;
            fKphid+=  fKphiu_IIJp_13;
            fKphid+=  fKphiu_IIJp_15;

            fKphid+=  fKphiu_II2e_1;
            fKphid+=  fKphiu_II2p_2;
            fKphid+=  fKphiu_II2p_3;
            fKphid+=  fKphiu_II2p_4;
            fKphid+=  fKphiu_II2p_5;
            fKphid+=  fKphiu_II2p_6;

            /* Matrices from coupling*/

            fKphid+=  fKphiu_II2p_10;
            fKphid+=  fKphiu_II2p_11;
            fKphid+=  fKphiu_II2p_12;
            fKphid+=  fKphiu_II2p_14;
            fKphid+=  fKphiu_II2p_16;



            fKphid+=  fKphiu_II3e_1;
            fKphid+=  fKphiu_II3e_2;
            fKphid+=  fKphiu_II3e_3;
            fKphid+=  fKphiu_II3e_4;
            fKphid+=  fKphiu_II3e_5;

            fKphid+=  fKphiu_II3p_6;
            fKphid+=  fKphiu_II3p_7;
            fKphid+=  fKphiu_II3p_8;
            fKphid+=  fKphiu_II3p_9;
            fKphid+=  fKphiu_II3p_10;
            fKphid+=  fKphiu_II3p_11;
            fKphid+=  fKphiu_II3p_12;
            fKphid+=  fKphiu_II3p_13;
            fKphid+=  fKphiu_II3p_14;
            fKphid+=  fKphiu_II3p_15;
            fKphid+=  fKphiu_II3p_16;
            fKphid+=  fKphiu_II3p_17;
            fKphid+=  fKphiu_II3p_18;
            fKphid+=  fKphiu_II3p_19;
            fKphid+=  fKphiu_II3p_20;
            fKphid+=  fKphiu_II3p_21;
            fKphid+=  fKphiu_II3p_22;
            fKphid+=  fKphiu_II3p_23;
            fKphid+=  fKphiu_II3p_24;
            fKphid+=  fKphiu_II3p_25;
            fKphid+=  fKphiu_II3p_26;
            fKphid+=  fKphiu_II3p_27;
            fKphid+=  fKphiu_II3p_28;
            fKphid+=  fKphiu_II3p_29;
            fKphid+=  fKphiu_II3p_30;

            /* Matrices from Del(delgammachi) */

            fKphid+=  fKphiu_II3p_49;
            fKphid+=  fKphiu_II3p_50;
            fKphid+=  fKphiu_II3p_51;
            fKphid+=  fKphiu_II3p_53;
            fKphid+=  fKphiu_II3p_55;
            fKphid+=  fKphiu_II3p_57;
            fKphid+=  fKphiu_II3p_58;
            fKphid+=  fKphiu_II3p_59;
            fKphid+=  fKphiu_II3p_61;
            fKphid+=  fKphiu_II3p_63;
            fKphid+=  fKphiu_II3p_65;
            fKphid+=  fKphiu_II3p_66;
            fKphid+=  fKphiu_II3p_67;
            fKphid+=  fKphiu_II3p_69;
            fKphid+=  fKphiu_II3p_71;
            fKphid+=  fKphiu_II3p_73;
            fKphid+=  fKphiu_II3p_74;
            fKphid+=  fKphiu_II3p_75;
            fKphid+=  fKphiu_II3p_77;
            fKphid+=  fKphiu_II3p_79;
            fKphid+=  fKphiu_II3p_81;
            fKphid+=  fKphiu_II3p_82;//
            fKphid+=  fKphiu_II3p_83;
            fKphid+=  fKphiu_II3p_85;
            fKphid+=  fKphiu_II3p_87;
            fKphid+=  fKphiu_II3p_89;
            fKphid+=  fKphiu_II3p_90;
            fKphid+=  fKphiu_II3p_91;
            fKphid+=  fKphiu_II3p_93;
            fKphid+=  fKphiu_II3p_95;
            fKphid+=  fKphiu_II3p_97;
            fKphid+=  fKphiu_II3p_98;
            fKphid+=  fKphiu_II3p_99;
            fKphid+=  fKphiu_II3p_101;
            fKphid+=  fKphiu_II3p_103;
            fKphid+=  fKphiu_II3p_105;
            fKphid+=  fKphiu_II3p_106; //?
            fKphid+=  fKphiu_II3p_107;
            fKphid+=  fKphiu_II3p_109;
            fKphid+=  fKphiu_II3p_111;
            fKphid+=  fKphiu_II3p_113;
            fKphid+=  fKphiu_II3p_114;
            fKphid+=  fKphiu_II3p_115;
            fKphid+=  fKphiu_II3p_117;
            fKphid+=  fKphiu_II3p_119;
            fKphid+=  fKphiu_II3p_121;
            fKphid+=  fKphiu_II3p_122;
            fKphid+=  fKphiu_II3p_123;
            fKphid+=  fKphiu_II3p_125;
            fKphid+=  fKphiu_II3p_127;
            fKphid+=  fKphiu_II3p_129;
            fKphid+=  fKphiu_II3p_130;
            fKphid+=  fKphiu_II3p_131;
            fKphid+=  fKphiu_II3p_133;
            fKphid+=  fKphiu_II3p_135;





            fKphid+=  fKphiu_II4e_1;
            fKphid+=  fKphiu_II4p_2;
            fKphid+=  fKphiu_II4p_3;
            fKphid+=  fKphiu_II4p_4;
            fKphid+=  fKphiu_II4p_5;
            fKphid+=  fKphiu_II4p_6;
            fKphid+=  fKphiu_II4p_10;
            fKphid+=  fKphiu_II4p_11;
            fKphid+=  fKphiu_II4p_12;
            fKphid+=  fKphiu_II4p_14;
            fKphid+=  fKphiu_II4p_16;

            /* Matrices from higher orde couple stress tensor*/

            fKphid+= fKMphiu_II5Jp_1;
            fKphid+= fKMphiu_II5Jp_2;
            fKphid+= fKMphiu_II5Jp_3;
            fKphid+= fKMphiu_II5Jp_4;
            fKphid+= fKMphiu_II5Jp_5;
            fKphid+= fKMphiu_II5Jp_9;
            fKphid+= fKMphiu_II5Jp_10;
            fKphid+= fKMphiu_II5Jp_11;
            fKphid+= fKMphiu_II5Jp_13;
            fKphid+= fKMphiu_II5Jp_15;

            fKphid+= fKMphiu_II6e_1;// Only one matrix comes from II6 which is elastic
            fKphid+= fKMphiu_II7e_1;
            fKphid+= fKMphiu_II8e_1;
            fKphid+= fKMphiu_II9e_1;


            fKphid+= fKMphiu_II7p_1;
            fKphid+= fKMphiu_II7p_2;
            fKphid+= fKMphiu_II7p_3;
            fKphid+= fKMphiu_II7p_4;
            fKphid+= fKMphiu_II7p_5;
            fKphid+= fKMphiu_II7p_9;
            fKphid+= fKMphiu_II7p_10;
            fKphid+= fKMphiu_II7p_11;
            fKphid+= fKMphiu_II7p_13;
            fKphid+= fKMphiu_II7p_15;

            fKphid+= fKMphiu_II8p_1;
            fKphid+= fKMphiu_II8p_2;
            fKphid+= fKMphiu_II8p_3;
            fKphid+= fKMphiu_II8p_4;
            fKphid+= fKMphiu_II8p_5;
            fKphid+= fKMphiu_II8p_9;
            fKphid+= fKMphiu_II8p_10;
            fKphid+= fKMphiu_II8p_11;
            fKphid+= fKMphiu_II8p_13;
            fKphid+= fKMphiu_II8p_15;

            fKphid+= fKMphiu_II9p_1;
            fKphid+= fKMphiu_II9p_2;
            fKphid+= fKMphiu_II9p_3;
            fKphid+= fKMphiu_II9p_4;
            fKphid+= fKMphiu_II9p_5;
            fKphid+= fKMphiu_II9p_9;
            fKphid+= fKMphiu_II9p_10;
            fKphid+= fKMphiu_II9p_11;
            fKphid+= fKMphiu_II9p_13;
            fKphid+= fKMphiu_II9p_15;

            fKphid+= fKMphiu_II10p_1;
            fKphid+= fKMphiu_II10p_2;
            fKphid+= fKMphiu_II10p_3;
            fKphid+= fKMphiu_II10p_4;
            fKphid+= fKMphiu_II10p_5;
            fKphid+= fKMphiu_II10p_9;
            fKphid+= fKMphiu_II10p_10;
            fKphid+= fKMphiu_II10p_11;
            fKphid+= fKMphiu_II10p_13;
            fKphid+= fKMphiu_II10p_15;

            fKphid+= fKMphiu_II11p_1;
            fKphid+= fKMphiu_II11p_2;
            fKphid+= fKMphiu_II11p_3;
            fKphid+= fKMphiu_II11p_4;
            fKphid+= fKMphiu_II11p_5;
            fKphid+= fKMphiu_II11p_9;
            fKphid+= fKMphiu_II11p_10;
            fKphid+= fKMphiu_II11p_11;
            fKphid+= fKMphiu_II11p_13;
            fKphid+= fKMphiu_II11p_15;

            fKphid+= fKMphiu_II12p_1;
            fKphid+= fKMphiu_II12p_2;
            fKphid+= fKMphiu_II12p_3;
            fKphid+= fKMphiu_II12p_4;
            fKphid+= fKMphiu_II12p_5;
            fKphid+= fKMphiu_II12p_9;
            fKphid+= fKMphiu_II12p_10;
            fKphid+= fKMphiu_II12p_11;
            fKphid+= fKMphiu_II12p_13;
            fKphid+= fKMphiu_II12p_15;


            fKphiphi+= fKphiphi_IIJp_6;
            fKphiphi+= fKphiphi_IIJp_7;
            fKphiphi+= fKphiphi_IIJp_8;
            fKphiphi+= fKphiphi_IIJp_12;
            fKphiphi+= fKphiphi_IIJp_14;
            fKphiphi+= fKphiphi_IIJp_16;


            fKphiphi+= fKphiphi_II2p_7;
            fKphiphi+= fKphiphi_II2p_8;
            fKphiphi+= fKphiphi_II2p_9;

            /* Matrices from coupling*/

            fKphiphi+= fKphiphi_II2p_13;
            fKphiphi+= fKphiphi_II2p_15;
            fKphiphi+= fKphiphi_II2p_17;


            fKphiphi+= fKphiphi_II3e_31;
            fKphiphi+= fKphiphi_II3e_32;
            fKphiphi+= fKphiphi_II3e_33;
            fKphiphi+= fKphiphi_II3p_34;
            fKphiphi+= fKphiphi_II3p_35;
            fKphiphi+= fKphiphi_II3p_36;
            fKphiphi+= fKphiphi_II3p_37;
            fKphiphi+= fKphiphi_II3p_38;
            fKphiphi+= fKphiphi_II3p_39;
            fKphiphi+= fKphiphi_II3p_40;
            fKphiphi+= fKphiphi_II3p_41;
            fKphiphi+= fKphiphi_II3p_42;
            fKphiphi+= fKphiphi_II3p_43;
            fKphiphi+= fKphiphi_II3p_44;
            fKphiphi+= fKphiphi_II3p_45;
            fKphiphi+= fKphiphi_II3p_46;
            fKphiphi+= fKphiphi_II3p_47;
            fKphiphi+= fKphiphi_II3p_48;

            /* Matrices from Del(delgammachi) */

            fKphiphi+= fKphiphi_II3p_52;
            fKphiphi+= fKphiphi_II3p_54;
            fKphiphi+= fKphiphi_II3p_56;
            fKphiphi+= fKphiphi_II3p_60;
            fKphiphi+= fKphiphi_II3p_62;
            fKphiphi+= fKphiphi_II3p_64;
            fKphiphi+= fKphiphi_II3p_68;
            fKphiphi+= fKphiphi_II3p_70;
            fKphiphi+= fKphiphi_II3p_72;
            fKphiphi+= fKphiphi_II3p_76;
            fKphiphi+= fKphiphi_II3p_78;
            fKphiphi+= fKphiphi_II3p_80;
            fKphiphi+= fKphiphi_II3p_84;
            fKphiphi+= fKphiphi_II3p_86;
            fKphiphi+= fKphiphi_II3p_88;
            fKphiphi+= fKphiphi_II3p_92;
            fKphiphi+= fKphiphi_II3p_94;
            fKphiphi+= fKphiphi_II3p_96;
            fKphiphi+= fKphiphi_II3p_100;
            fKphiphi+= fKphiphi_II3p_102;
            fKphiphi+= fKphiphi_II3p_104;
            fKphiphi+= fKphiphi_II3p_108;
            fKphiphi+= fKphiphi_II3p_110;
            fKphiphi+= fKphiphi_II3p_112;
            fKphiphi+= fKphiphi_II3p_116;
            fKphiphi+= fKphiphi_II3p_118;
            fKphiphi+= fKphiphi_II3p_120;
            fKphiphi+= fKphiphi_II3p_124;
            fKphiphi+= fKphiphi_II3p_126;
            fKphiphi+= fKphiphi_II3p_128;
            fKphiphi+= fKphiphi_II3p_132;
            fKphiphi+= fKphiphi_II3p_134;
            fKphiphi+= fKphiphi_II3p_136;





            fKphiphi+= fKphiphi_II4p_7;
            fKphiphi+= fKphiphi_II4p_8;
            fKphiphi+= fKphiphi_II4p_9;
            fKphiphi+= fKphiphi_II4p_13;
            fKphiphi+= fKphiphi_II4p_15;
            fKphiphi+= fKphiphi_II4p_17;

            fKphiphi+=fKMphiphi_II5Jp_6;
            fKphiphi+=fKMphiphi_II5Jp_7;
            fKphiphi+=fKMphiphi_II5Jp_8;
            fKphiphi+=fKMphiphi_II5Jp_12;
            fKphiphi+=fKMphiphi_II5Jp_14;
            fKphiphi+=fKMphiphi_II5Jp_16;

            fKphiphi+=fKMphiphi_II7p_6;
            fKphiphi+=fKMphiphi_II7p_7;
            fKphiphi+=fKMphiphi_II7p_8;
            fKphiphi+=fKMphiphi_II7p_12;
            fKphiphi+=fKMphiphi_II7p_14;
            fKphiphi+=fKMphiphi_II7p_16;

            fKphiphi+=fKMphiphi_II8p_6;
            fKphiphi+=fKMphiphi_II8p_7;
            fKphiphi+=fKMphiphi_II8p_8;
            fKphiphi+=fKMphiphi_II8p_12;
            fKphiphi+=fKMphiphi_II8p_14;
            fKphiphi+=fKMphiphi_II8p_16;

            fKphiphi+=fKMphiphi_II9p_6;
            fKphiphi+=fKMphiphi_II9p_7;
            fKphiphi+=fKMphiphi_II9p_8;
            fKphiphi+=fKMphiphi_II9p_12;
            fKphiphi+=fKMphiphi_II9p_14;
            fKphiphi+=fKMphiphi_II9p_16;


            fKphiphi+=fKMphiphi_II10e_1;
            fKphiphi+=fKMphiphi_II12e_1;


            fKphiphi+=fKMphiphi_II10p_6;
            fKphiphi+=fKMphiphi_II10p_7;
            fKphiphi+=fKMphiphi_II10p_8;
            fKphiphi+=fKMphiphi_II10p_12;
            fKphiphi+=fKMphiphi_II10p_14;
            fKphiphi+=fKMphiphi_II10p_16;

            fKphiphi+=fKMphiphi_II11p_6;
            fKphiphi+=fKMphiphi_II11p_7;
            fKphiphi+=fKMphiphi_II11p_8;
            fKphiphi+=fKMphiphi_II11p_12;
            fKphiphi+=fKMphiphi_II11p_14;
            fKphiphi+=fKMphiphi_II11p_16;

            fKphiphi+=fKMphiphi_II12p_6;
            fKphiphi+=fKMphiphi_II12p_7;
            fKphiphi+=fKMphiphi_II12p_8;
            fKphiphi+=fKMphiphi_II12p_12;
            fKphiphi+=fKMphiphi_II12p_14;
            fKphiphi+=fKMphiphi_II12p_16;


            ///// Micro Gradient Plasticity //////

            //////////////////////////////////////
			fKphid+= fKMphiu_II13e_1;


			fKphid+= fKMphiu_II14p_1;
			fKphid+= fKMphiu_II14p_2;
			fKphid+= fKMphiu_II14p_3;
			fKphid+= fKMphiu_II14p_4;
			fKphid+= fKMphiu_II14p_5;
			fKphiphi+= fKMphiphi_II14p_6;
			fKphiphi+= fKMphiphi_II14p_7;
			fKphiphi+= fKMphiphi_II14p_8;
			fKphid+= fKMphiu_II14p_9;
			fKphid+= fKMphiu_II14p_10;
			fKphid+= fKMphiu_II14p_11;
			fKphid+= fKMphiu_II14p_12;
			fKphid+= fKMphiu_II14p_13;
			fKphiphi+= fKMphiphi_II14p_14;
			fKphiphi+= fKMphiphi_II14p_15;
			fKphiphi+= fKMphiphi_II14p_16;

			fKphiphi+= fKMphiphi_II15e_1;

			fKphid+= fKMphiu_II16p_1;
			fKphid+= fKMphiu_II16p_2;
			fKphid+= fKMphiu_II16p_3;
			fKphid+= fKMphiu_II16p_4;
			fKphid+= fKMphiu_II16p_5;
			fKphiphi+= fKMphiphi_II16p_6;
			fKphiphi+= fKMphiphi_II16p_7;
			fKphiphi+= fKMphiphi_II16p_8;
			fKphid+= fKMphiu_II16p_9;
			fKphid+= fKMphiu_II16p_10;
			fKphid+= fKMphiu_II16p_11;
			fKphid+= fKMphiu_II16p_12;
			fKphid+= fKMphiu_II16p_13;
			fKphiphi+= fKMphiphi_II16p_14;
			fKphiphi+= fKMphiphi_II16p_15;
			fKphiphi+= fKMphiphi_II16p_16;


			fKphid+= fKMphiu_II17p_1;
			fKphid+= fKMphiu_II17p_2;
			fKphid+= fKMphiu_II17p_3;
			fKphid+= fKMphiu_II17p_4;
			fKphid+= fKMphiu_II17p_5;
			fKphiphi+= fKMphiphi_II17p_6;
			fKphiphi+= fKMphiphi_II17p_7;
			fKphiphi+= fKMphiphi_II17p_8;
			fKphid+= fKMphiu_II17p_9;
			fKphid+= fKMphiu_II17p_10;
			fKphid+= fKMphiu_II17p_11;
			fKphid+= fKMphiu_II17p_12;
			fKphid+= fKMphiu_II17p_13;
			fKphiphi+= fKMphiphi_II17p_14;
			fKphiphi+= fKMphiphi_II17p_15;
			fKphiphi+= fKMphiphi_II17p_16;


			fKphid+= fKMphiu_II18p_1;
			fKphid+= fKMphiu_II18p_2;
			fKphid+= fKMphiu_II18p_3;
			fKphid+= fKMphiu_II18p_4;
			fKphid+= fKMphiu_II18p_5;
			fKphiphi+= fKMphiphi_II18p_6;
			fKphiphi+= fKMphiphi_II18p_7;
			fKphiphi+= fKMphiphi_II18p_8;
			fKphid+= fKMphiu_II18p_9;
			fKphid+= fKMphiu_II18p_10;
			fKphid+= fKMphiu_II18p_11;
			fKphid+= fKMphiu_II18p_12;
			fKphid+= fKMphiu_II18p_13;
			fKphiphi+= fKMphiphi_II18p_14;
			fKphiphi+= fKMphiphi_II18p_15;
			fKphiphi+= fKMphiphi_II18p_16;


			fKphid+= fKMphiu_II19p_1;
			fKphid+= fKMphiu_II19p_2;
			fKphid+= fKMphiu_II19p_3;
			fKphid+= fKMphiu_II19p_4;
			fKphid+= fKMphiu_II19p_5;
			fKphiphi+= fKMphiphi_II19p_6;
			fKphiphi+= fKMphiphi_II19p_7;
			fKphiphi+= fKMphiphi_II19p_8;
			fKphid+= fKMphiu_II19p_9;
			fKphid+= fKMphiu_II19p_10;
			fKphid+= fKMphiu_II19p_11;
			fKphid+= fKMphiu_II19p_12;
			fKphid+= fKMphiu_II19p_13;
			fKphiphi+= fKMphiphi_II19p_14;
			fKphiphi+= fKMphiphi_II19p_15;
			fKphiphi+= fKMphiphi_II19p_16;



			fKphid+= fKMphiu_II20p_1;
			fKphid+= fKMphiu_II20p_2;
			fKphid+= fKMphiu_II20p_3;
			fKphid+= fKMphiu_II20p_4;
			fKphid+= fKMphiu_II20p_5;
			fKphiphi+= fKMphiphi_II20p_6;
			fKphiphi+= fKMphiphi_II20p_7;
			fKphiphi+= fKMphiphi_II20p_8;
			fKphid+= fKMphiu_II20p_9;
			fKphid+= fKMphiu_II20p_10;
			fKphid+= fKMphiu_II20p_11;
			fKphid+= fKMphiu_II20p_12;
			fKphid+= fKMphiu_II20p_13;
			fKphiphi+= fKMphiphi_II20p_14;
			fKphiphi+= fKMphiphi_II20p_15;
			fKphiphi+= fKMphiphi_II20p_16;



			fKphid+= fKMphiu_II21e_1;
			fKphid+= fKMphiu_II21p_1;
			fKphid+= fKMphiu_II21p_2;
			fKphid+= fKMphiu_II21p_3;
			fKphid+= fKMphiu_II21p_4;
			fKphid+= fKMphiu_II21p_5;
			fKphiphi+= fKMphiphi_II21p_6;
			fKphiphi+= fKMphiphi_II21p_7;
			fKphiphi+= fKMphiphi_II21p_8;
			fKphid+= fKMphiu_II21p_1a;
			fKphid+= fKMphiu_II21p_2a;
			fKphid+= fKMphiu_II21p_3a;
			fKphid+= fKMphiu_II21p_4a;
			fKphid+= fKMphiu_II21p_5a;
			fKphiphi+= fKMphiphi_II21p_6a;
			fKphiphi+= fKMphiphi_II21p_7a;
			fKphiphi+= fKMphiphi_II21p_8a;
			fKphiphi+= fKMphiphi_II21p_9;



			fKphid+= fKMphiu_II21p_10;
			fKphid+= fKMphiu_II21p_11;
			fKphid+= fKMphiu_II21p_12;
			fKphid+= fKMphiu_II21p_13;
			fKphid+= fKMphiu_II21p_14;
			fKphiphi+= fKMphiphi_II21p_15;
			fKphiphi+= fKMphiphi_II21p_16;
			fKphiphi+= fKMphiphi_II21p_17;
			fKphid+= fKMphiu_II21p_10a;
			fKphid+= fKMphiu_II21p_11a;
			fKphid+= fKMphiu_II21p_12a;
			fKphid+= fKMphiu_II21p_13a;
			fKphid+= fKMphiu_II21p_14a;
			fKphiphi+= fKMphiphi_II21p_15a;
			fKphiphi+= fKMphiphi_II21p_16a;
			fKphiphi+= fKMphiphi_II21p_17a;


			fKphid+= fKMphiu_II21p_18;
			fKphid+= fKMphiu_II21p_19;
			fKphid+= fKMphiu_II21p_20;
			fKphid+= fKMphiu_II21p_21;
			fKphid+= fKMphiu_II21p_22;
			fKphiphi+= fKMphiphi_II21p_23;
			fKphiphi+= fKMphiphi_II21p_24;
			fKphiphi+= fKMphiphi_II21p_25;
			fKphid+= fKMphiu_II21p_18a;
			fKphid+= fKMphiu_II21p_19a;
			fKphid+= fKMphiu_II21p_20a;
			fKphid+= fKMphiu_II21p_21a;
			fKphid+= fKMphiu_II21p_22a;
			fKphiphi+= fKMphiphi_II21p_23a;
			fKphiphi+= fKMphiphi_II21p_24a;
			fKphiphi+= fKMphiphi_II21p_25a;

			fKphid+= fKMphiu_II21p_26;

			fKphid+= fKMphiu_II21p_27;
			fKphid+= fKMphiu_II21p_28;
			fKphid+= fKMphiu_II21p_29;
			fKphid+= fKMphiu_II21p_30;
			fKphid+= fKMphiu_II21p_31;
			fKphiphi+= fKMphiphi_II21p_32;
			fKphiphi+= fKMphiphi_II21p_33;
			fKphiphi+= fKMphiphi_II21p_34;
			fKphid+= fKMphiu_II21p_27a;
			fKphid+= fKMphiu_II21p_28a;
			fKphid+= fKMphiu_II21p_29a;
			fKphid+= fKMphiu_II21p_30a;
			fKphid+= fKMphiu_II21p_31a;
			fKphiphi+= fKMphiphi_II21p_32a;
			fKphiphi+= fKMphiphi_II21p_33a;
			fKphiphi+= fKMphiphi_II21p_34a;

			fKphiphi+= fKMphiphi_II21p_35;


			fKphid+= fKMphiu_II21p_36;
			fKphid+= fKMphiu_II21p_37;
			fKphid+= fKMphiu_II21p_38;
			fKphid+= fKMphiu_II21p_39;
			fKphid+= fKMphiu_II21p_40;
			fKphiphi+= fKMphiphi_II21p_41;
			fKphiphi+= fKMphiphi_II21p_42;
			fKphiphi+= fKMphiphi_II21p_43;
			fKphid+= fKMphiu_II21p_36a;
			fKphid+= fKMphiu_II21p_37a;
			fKphid+= fKMphiu_II21p_38a;
			fKphid+= fKMphiu_II21p_39a;
			fKphid+= fKMphiu_II21p_40a;
			fKphiphi+= fKMphiphi_II21p_41a;
			fKphiphi+= fKMphiphi_II21p_42a;
			fKphiphi+= fKMphiphi_II21p_43a;



			fKphid+= fKMphiu_II21p_44;
			fKphid+= fKMphiu_II21p_45;
			fKphid+= fKMphiu_II21p_46;
			fKphid+= fKMphiu_II21p_47;
			fKphid+= fKMphiu_II21p_48;
			fKphiphi+= fKMphiphi_II21p_49;
			fKphiphi+= fKMphiphi_II21p_50;
			fKphiphi+= fKMphiphi_II21p_51;
			fKphid+= fKMphiu_II21p_44a;
			fKphid+= fKMphiu_II21p_45a;
			fKphid+= fKMphiu_II21p_46a;
			fKphid+= fKMphiu_II21p_47a;
			fKphid+= fKMphiu_II21p_48a;
			fKphiphi+= fKMphiphi_II21p_49a;
			fKphiphi+= fKMphiphi_II21p_50a;
			fKphiphi+= fKMphiphi_II21p_51a;



			fKphid+= fKMphiu_II21p_52;
			fKphid+= fKMphiu_II21p_53;
			fKphid+= fKMphiu_II21p_54;
			fKphid+= fKMphiu_II21p_55;
			fKphid+= fKMphiu_II21p_56;
			fKphiphi+= fKMphiphi_II21p_57;
			fKphiphi+= fKMphiphi_II21p_58;
			fKphiphi+= fKMphiphi_II21p_59;
			fKphid+= fKMphiu_II21p_52a;
			fKphid+= fKMphiu_II21p_53a;
			fKphid+= fKMphiu_II21p_54a;
			fKphid+= fKMphiu_II21p_55a;
			fKphid+= fKMphiu_II21p_56a;
			fKphiphi+= fKMphiphi_II21p_57a;
			fKphiphi+= fKMphiphi_II21p_58a;
			fKphiphi+= fKMphiphi_II21p_59a;



			fKphid+= fKMphiu_II21p_60;
			fKphid+= fKMphiu_II21p_61;
			fKphid+= fKMphiu_II21p_62;
			fKphid+= fKMphiu_II21p_63;
			fKphid+= fKMphiu_II21p_64;
			fKphiphi+= fKMphiphi_II21p_65;
			fKphiphi+= fKMphiphi_II21p_66;
			fKphiphi+= fKMphiphi_II21p_67;
			fKphid+= fKMphiu_II21p_60a;
			fKphid+= fKMphiu_II21p_61a;
			fKphid+= fKMphiu_II21p_62a;
			fKphid+= fKMphiu_II21p_63a;
			fKphid+= fKMphiu_II21p_64a;
			fKphiphi+= fKMphiphi_II21p_65a;
			fKphiphi+= fKMphiphi_II21p_66a;
			fKphiphi+= fKMphiphi_II21p_67a;



			fKphid+= fKMphiu_II21p_68;
			fKphid+= fKMphiu_II21p_69;
			fKphid+= fKMphiu_II21p_70;
			fKphid+= fKMphiu_II21p_71;
			fKphid+= fKMphiu_II21p_72;
			fKphiphi+= fKMphiphi_II21p_73;
			fKphiphi+= fKMphiphi_II21p_74;
			fKphiphi+= fKMphiphi_II21p_75;
			fKphid+= fKMphiu_II21p_68a;
			fKphid+= fKMphiu_II21p_69a;
			fKphid+= fKMphiu_II21p_70a;
			fKphid+= fKMphiu_II21p_71a;
			fKphid+= fKMphiu_II21p_72a;
			fKphiphi+= fKMphiphi_II21p_73a;
			fKphiphi+= fKMphiphi_II21p_74a;
			fKphiphi+= fKMphiphi_II21p_75a;

			/////////////////////////////////////

            /* Plasticity contribution */

            fFphi_int+=Vintp_2;
            fFphi_int+=Vintp_3;

            fFphi_int *=-1;


        }
        if(iConstitutiveModelType==2)
        {

                //{fFd_int} will be formed
                fFd_int  = 0.0;
                fFd_int  = Uint_1;
                //fFd_ext =-Uext_1; //no external traction is assumed
                fFd_int *= -1;
                //Micromorphic case fKdd coming from bal. of linear momentum

            fKdd  =  fG1_1;
            fKdd +=  fG1_2;
            fKdd +=  fG1_3;
            fKdd +=  fG1_4;
            fKdd +=  fG1_5;
            fKdd +=  fG1_6;
            fKdd +=  fG1_8;
            fKdd +=  fG1_10;
            fKdd +=  fG1_12;
            fKdd +=  fG1_13;
            fKdd +=  fG1_14;


            //[fKdphi] will be formed

            //fKdphi = 0.0;
            //Micromorphic case fKdPhi  from coming from bal. of linear momentum

            fKdphi  = fG1_7 ;
            fKdphi += fG1_9 ;
            fKdphi += fG1_11;

            //[fKphid] will be formed
            //fKphid = 0.0;

            fKphid = fH1_Etagrad;
            fKphid += fH1_1;
            fKphid += fH1_2;
            fKphid += fH1_3;
            fKphid += fH1_11;
            fKphid += fH1_12;
            fKphid += fH1_14;
            fKphid += fH1_72;
            fKphid += fH1_78;

            fKphid += fH2_1;
            fKphid += fH2_2;
            fKphid += fH2_3;
            fKphid += fH2_5;
            fKphid += fH2_7;
            fKphid += fH2_8;
            fKphid += fH2_9;
            fKphid += fH2_10;
            fKphid += fH2_12;
            fKphid += fH2_13;


            //[fKphiphi] will be formed
            //fKphiphi = 0.0;

            fKphiphi  = fH1_4;
            fKphiphi += fH1_5;
            fKphiphi += fH1_6;
            fKphiphi += fH1_71;
            fKphiphi += fH1_73;
            fKphiphi += fH1_74;
            fKphiphi += fH1_75;
            fKphiphi += fH1_76;
            fKphiphi += fH1_77;
            fKphiphi += fH1_7;
            fKphiphi += fH1_8;
            fKphiphi += fH1_9;
            fKphiphi += fH1_10;
            fKphiphi += fH1_13;

            fKphiphi += fH2_4;
            fKphiphi += fH2_6;
            fKphiphi += fH2_11;

            fKphiphi += fH3_1;



            // {fFphi_int} will be formed
            //fFphi_int  = 0.0;
            fFphi_int  =Pint_1;
            fFphi_int +=Pint_2;
            fFphi_int +=Pint_3;//no external traction is assumed Pext=0
            fFphi_int *= -1;
        }

/******************************************************************************/
/******************************************************************************/
/********* This part is for Eigenvalue analysis that I will look at again *****/
/******************************************************************************/
/******************************************************************************/
//      for (int i=0; i<81; i++)
//      {
//              for (int j=0; j<81; j++)
//              {
//
//                      //      fs_micromorph3D_out<<"fKdd"<< "("<<i<<","<<j<<")"<< " :  " ;
//                      fs_micromorph3D_out << fKdd(i,j) <<"\t";
//                      fs_micromorph3D_out << endl;
//              }
//      }
//      for (int i=0; i<81; i++)
//      {
//              for(int k=0; k<72; k++)
//              {
//                      //     fs_micromorph3D_out<<"fKdphi"<< "("<<i<<","<<k<<")"<< " :  " ;
//                      fs_micromorph3D_out << fKdphi(i,k) <<"\t";
//                      fs_micromorph3D_out << endl;
//              }
//      }

//      for (int i=0; i<72; i++)
//      {
//              for(int k=0; k<81; k++)
//              {
//                      //        fs_micromorph3D_out<<"fKphid"<< "("<<i<<","<<k<<")"<< " :  " ;
//                      fs_micromorph3D_out << fKphid(i,k) <<"\t";
//                      fs_micromorph3D_out << endl;
//              }
//      }

//      for (int i=0; i<72; i++)
//      {
//              for(int k=0; k<72; k++)
//              {
//               //     fs_micromorph3D_out<<"fKphiphi"<< "("<<i<<","<<k<<")"<< " :  " ;
//                      fs_micromorph3D_out << fKphiphi(i,k) <<"\t";
//                      fs_micromorph3D_out << endl;
//              }
//      }

/******************************************************************************/
/******************************************************************************/
/******************************************************************************/
/******************************************************************************/

        /* equations numbers */
        const iArrayT& displ_eq = fElementCards_displ[e].Equations();
        const iArrayT& micro_eq = fElementCards_micro[e].Equations();

        /* assemble residuals */
        ElementSupport().AssembleRHS(curr_group, fFd_int, displ_eq);
        ElementSupport().AssembleRHS(curr_group, fFphi_int, micro_eq);

        /* assemble components of the tangent */
        ElementSupport().AssembleLHS(curr_group, fKdd, displ_eq);
        ElementSupport().AssembleLHS(curr_group, fKphiphi, micro_eq);
        ElementSupport().AssembleLHS(curr_group, fKdphi, displ_eq, micro_eq);
        ElementSupport().AssembleLHS(curr_group, fKphid, micro_eq, displ_eq);


        }
    }
}



/* form global shape function derivatives */
void FSMicromorphic2_3DT::SetGlobalShape(void)
{
    //          cout<<"CHECK POINT-21"<<endl;
    /* fetch (initial) coordinates */
    SetLocalX(fLocInitCoords);

    /* compute shape function derivatives */
    //fShapes_displ->SetDerivatives_DN_DDN(); Commented out for Q8P8
    fShapes_displ->SetDerivatives();
    fShapes_micro->SetDerivatives();
}



/* describe the parameters needed by the interface */
void FSMicromorphic2_3DT::DefineParameters(ParameterListT& list) const
{
     //           cout<<"CHECK POINT-22"<<endl;
    /* inherited */
    ElementBaseT::DefineParameters(list);

    /* displacement field */
    //already done in ElementBaseT
    //list.AddParameter(ParameterT::Word, "displ_field_name");

    /* micro-displacement-gradient field */
    list.AddParameter(ParameterT::Word, "micro_field_name");

    list.AddParameter(fGeometryCode_displ_int, "GeometryCode_displ");
 //   list.AddParameter(fGeometryCode_micro_int, "GeometryCode_micro");
    list.AddParameter(fNumIP_displ, "NumIP_displ");
    list.AddParameter(fGeometryCodeSurf_displ_int, "GeometryCodeSurf_displ");
    list.AddParameter(fNumIPSurf_displ, "NumIPSurf_displ");
    list.AddParameter(n_en_displ, "n_en_displ");
    list.AddParameter(n_en_micro, "n_en_micro");
    list.AddParameter(ndof_per_nd_micro, "ndof_per_nd_micro");

    list.AddParameter(iConstitutiveModelType, "constitutive_mod_type");
    list.AddParameter(iPlasticityCheck, "plasticity_check");

  //  list.AddParameter(iplasticity, "plasticity");
    list.AddParameter(iIterationMax, "max_local_iterations");
    double shearMu, sLambda, Rho_0, gravity_g, gravity_g1, gravity_g2, gravity_g3;
    double Kappa, Nu, Sigma_const, Tau, Eta;
    double Tau1,Tau2,Tau3,Tau4,Tau5,Tau6,Tau7,Tau8,Tau9,Tau10,Tau11;
    double c0,Hc,Fphi,Dpsi;
    double c0_chi,Hc_chi,Fphi_chi,Dpsi_chi;
    double c0_nablachi,c1_nablachi,c2_nablachi,Hc_nablachi,Fphi_nablachi,Dpsi_nablachi;
    double Kappa0,Kappa0_chi,Kappa0_nablachi,Kappa1_nablachi,Kappa2_nablachi,Hkappa,HKappa_chi;
    double HKappa_nablachi,R,R_chi,R_nablachi,Alpha,Alpha_chi,Alpha_nablachi,Capped_Model_Flag;



    // solid elasticity
    list.AddParameter(shearMu, "mu");
    list.AddParameter(sLambda, "lambda");
    // plasticity
    list.AddParameter(c0,"c0");
    list.AddParameter(Hc,"Hc");
    list.AddParameter(Fphi,"Fphi");
    list.AddParameter(Dpsi,"Dpsi");
    // Micro-scale plasticity
    list.AddParameter(c0_chi,"c0_chi");
    list.AddParameter(Hc_chi,"Hc_chi");
    list.AddParameter(Fphi_chi,"Fphi_chi");
    list.AddParameter(Dpsi_chi,"Dpsi_chi");

    // Micro Scale Gradient plasticity
    list.AddParameter(c0_nablachi,"c0_nablachi");
    list.AddParameter(c1_nablachi,"c1_nablachi");
    list.AddParameter(c2_nablachi,"c2_nablachi");
    list.AddParameter(Hc_nablachi,"Hc_nablachi");
    list.AddParameter(Fphi_nablachi,"Fphi_nablachi");
    list.AddParameter(Dpsi_nablachi,"Dpsi_nablachi");


    // tolerance for yield check
    list.AddParameter(dYieldTrialTol, "local_yield_tr_tol");

    // convergence tolerances for local Newton-Raphson iteration
    list.AddParameter(dAbsTol, "local_tol_absolute");
    list.AddParameter(dRelTol, "local_tol_relative");
    //Material Parameter
    list.AddParameter(Kappa, "Kappa");
    list.AddParameter(Nu, "Nu");
    list.AddParameter(Sigma_const, "Sigma_const");
    list.AddParameter(Tau, "Tau");
    list.AddParameter(Eta, "Eta");
    list.AddParameter(Tau1, "Tau1");
    list.AddParameter(Tau2, "Tau2");
    list.AddParameter(Tau3, "Tau3");
    list.AddParameter(Tau4, "Tau4");
    list.AddParameter(Tau5, "Tau5");
    list.AddParameter(Tau6, "Tau6");
    list.AddParameter(Tau7, "Tau7");
    list.AddParameter(Tau8, "Tau8");
    list.AddParameter(Tau9, "Tau9");
    list.AddParameter(Tau10, "Tau10");
    list.AddParameter(Tau11, "Tau11");


    // gravity
    list.AddParameter(gravity_g, "g");

    // gravity in each direction (depends on the coordinate system which we have chosen for the problem)
    list.AddParameter(gravity_g1, "g1");
    list.AddParameter(gravity_g2, "g2");
    list.AddParameter(gravity_g3, "g3");

    // reference mass density
    list.AddParameter(Rho_0, "rho_0");
/////////// Capped Model Parameters
    list.AddParameter(Kappa0,"Kappa0");
    list.AddParameter(Kappa0_chi,"Kappa0_chi");
    list.AddParameter(Kappa0_nablachi,"Kappa0_nablachi");
    list.AddParameter(Kappa1_nablachi,"Kappa1_nablachi");
    list.AddParameter(Kappa2_nablachi,"Kappa2_nablachi");
    list.AddParameter(Hkappa,"Hkappa");
    list.AddParameter(HKappa_chi,"HKappa_chi");
    list.AddParameter(HKappa_nablachi,"HKappa_nablachi");
    list.AddParameter(R,"R");
    list.AddParameter(R_chi,"R_chi");
    list.AddParameter(R_nablachi,"R_nablachi");
    list.AddParameter(Alpha,"Alpha");
    list.AddParameter(Alpha_chi,"Alpha_chi");
    list.AddParameter(Alpha_nablachi,"Alpha_nablachi");
    list.AddParameter(Capped_Model_Flag,"Capped_Model_Flag");

    // Newmark time integration parameters
//    list.AddParameter(newBeta, "beta");
//    list.AddParameter(newGamma, "gamma");

}


/* accept parameter list */
void FSMicromorphic2_3DT::TakeParameterList(const ParameterListT& list)
{
  //              cout<<"CHECK POINT-23"<<endl;
    const char caller[] = "FSMicromorphic2_3DT::TakeParameterList";

    /* inherited */
    ElementBaseT::TakeParameterList(list);

    /* get form of tangent */
    GlobalT::SystemTypeT type = TangentType();

    /* set form of element stiffness matrix */
    if (type == GlobalT::kSymmetric)
    fLHS.SetFormat(ElementMatrixT::kSymmetricUpper);
    else if (type == GlobalT::kNonSymmetric)
    fLHS.SetFormat(ElementMatrixT::kNonSymmetric);
    else if (type == GlobalT::kDiagonal)
    fLHS.SetFormat(ElementMatrixT::kDiagonal);

    /* get displacement field */
    /*
      const StringT& displ_field_name = list.GetParameter("displ_field_name");
      fDispl = ElementSupport().Field(displ_field_name);
      if (!fDispl)
      ExceptionT::GeneralFail(caller, "could not resolve \"%s\" displ_field",
      displ_field_name.Pointer());
    */
    const StringT& displ_field_name = list.GetParameter("field_name");
    fDispl = ElementSupport().Field(displ_field_name);
    if (!fDispl)
    ExceptionT::GeneralFail(caller, "could not resolve \"%s\" displ_field",
                displ_field_name.Pointer());

    /* get micro-displacement-gradient field */

    const StringT& micro_field_name = list.GetParameter("micro_field_name");
    fMicro = ElementSupport().Field(micro_field_name);
    if (!fMicro)
    ExceptionT::GeneralFail(caller, "could not resolve \"%s\" micro_field",
                micro_field_name.Pointer());

    fGeometryCode_displ_int = list.GetParameter("GeometryCode_displ");
    fGeometryCode_displ = GeometryT::int2CodeT(fGeometryCode_displ_int);
 //   fGeometryCode_micro_int=list.GetParameter("GeometryCode_micro");
 //   fGeometryCode_micro= GeometryT::int2CodeT(fGeometryCode_micro_int);

    fNumIP_displ = list.GetParameter("NumIP_displ");
    fGeometryCodeSurf_displ_int = list.GetParameter("GeometryCodeSurf_displ");
    fGeometryCodeSurf_displ = GeometryT::int2CodeT(fGeometryCodeSurf_displ_int);
    fNumIPSurf_displ = list.GetParameter("NumIPSurf_displ");
    n_en_displ = list.GetParameter("n_en_displ");
    n_en_micro = list.GetParameter("n_en_micro");
    ndof_per_nd_micro = list.GetParameter("ndof_per_nd_micro");

    //kAnalysisType = list.GetParameter("type_of_analysis_1consolidation_2dynamic");
    //kInitialConditionType = list.GetParameter("initial_condition_1geostatic_2displ_vel_press");

    fGeometryCode_micro = fGeometryCode_displ;
    fNumIP_micro = fNumIP_displ;
    fGeometryCodeSurf_micro = fGeometryCodeSurf_displ;
    fNumIPSurf_micro = fNumIPSurf_displ;

    iConstitutiveModelType = list.GetParameter("constitutive_mod_type");
    iPlasticityCheck=list.GetParameter("plasticity_check");
    //  iplasticity = list.GetParameter("plasticity");
    iIterationMax = list.GetParameter("max_local_iterations");

    dAbsTol = list.GetParameter("local_tol_absolute");
    dRelTol = list.GetParameter("local_tol_relative");
    dYieldTrialTol = list.GetParameter("local_yield_tr_tol");

    fMaterial_Params.Dimension ( kNUM_FMATERIAL_TERMS );
//    fIntegration_Params.Dimension ( kNUM_FINTEGRATE_TERMS );

    fMaterial_Params[kMu] = list.GetParameter("mu");
    fMaterial_Params[kLambda] = list.GetParameter("lambda");
    fMaterial_Params[kKappa] = list.GetParameter("Kappa");
    fMaterial_Params[kNu] = list.GetParameter("Nu");
    fMaterial_Params[kSigma_const] = list.GetParameter("Sigma_const");
    fMaterial_Params[kTau] = list.GetParameter("Tau");
    fMaterial_Params[kEta] = list.GetParameter("Eta");
    fMaterial_Params[kTau1] = list.GetParameter("Tau1");
    fMaterial_Params[kTau2] = list.GetParameter("Tau2");
    fMaterial_Params[kTau3] = list.GetParameter("Tau3");
    fMaterial_Params[kTau4] = list.GetParameter("Tau4");
    fMaterial_Params[kTau5] = list.GetParameter("Tau5");
    fMaterial_Params[kTau6] = list.GetParameter("Tau6");
    fMaterial_Params[kTau7] = list.GetParameter("Tau7");
    fMaterial_Params[kTau8] = list.GetParameter("Tau8");
    fMaterial_Params[kTau9] = list.GetParameter("Tau9");
    fMaterial_Params[kTau10] = list.GetParameter("Tau10");
    fMaterial_Params[kTau11] = list.GetParameter("Tau11");
    fMaterial_Params[kc0] = list.GetParameter("c0");
    fMaterial_Params[kHc] = list.GetParameter("Hc");
    fMaterial_Params[kc0_chi] = list.GetParameter("c0_chi");
    fMaterial_Params[kHc_chi] = list.GetParameter("Hc_chi");
    fMaterial_Params[kc0_nablachi] = list.GetParameter("c0_nablachi");
    fMaterial_Params[kc1_nablachi] = list.GetParameter("c1_nablachi");
    fMaterial_Params[kc2_nablachi] = list.GetParameter("c2_nablachi");
    fMaterial_Params[kHc_nablachi] = list.GetParameter("Hc_nablachi");

    fMaterial_Params[kKappa0] = list.GetParameter("Kappa0");
    fMaterial_Params[kHkappa] = list.GetParameter("Hkappa");
    fMaterial_Params[kKappa0_chi] = list.GetParameter("Kappa0_chi");
    fMaterial_Params[kHKappa_chi] = list.GetParameter("HKappa_chi");
    fMaterial_Params[kKappa0_nablachi] = list.GetParameter("Kappa0_nablachi");
    fMaterial_Params[kKappa1_nablachi] = list.GetParameter("Kappa1_nablachi");
    fMaterial_Params[kKappa2_nablachi] = list.GetParameter("Kappa2_nablachi");
    fMaterial_Params[kHKappa_nablachi] = list.GetParameter("HKappa_nablachi");
    fMaterial_Params[kR] = list.GetParameter("R");
    fMaterial_Params[kR_chi] = list.GetParameter("R_chi");
    fMaterial_Params[kR_nablachi] = list.GetParameter("R_nablachi");
    fMaterial_Params[kAlpha] = list.GetParameter("Alpha");
    fMaterial_Params[kAlpha_chi] = list.GetParameter("Alpha_chi");
    fMaterial_Params[kAlpha_nablachi] = list.GetParameter("Alpha_nablachi");
    fMaterial_Params[kCapped_Model_Flag] = list.GetParameter("Capped_Model_Flag");


    //fMaterial_Params[kZ0c] =0.0;
    fMaterial_Params[kFphi] = list.GetParameter("Fphi");
    fMaterial_Params[kDpsi] = list.GetParameter("Dpsi");
    fMaterial_Params[kFphi_chi] = list.GetParameter("Fphi_chi");
    fMaterial_Params[kDpsi_chi] = list.GetParameter("Dpsi_chi");
    fMaterial_Params[kFphi_nablachi] = list.GetParameter("Fphi_nablachi");
    fMaterial_Params[kDpsi_nablachi] = list.GetParameter("Dpsi_nablachi");
//    fMaterial_Params[kFGphi_chi] = list.GetParameter("FGphi_chi");
//    fMaterial_Params[kDGpsi_chi] = list.GetParameter("DGpsi_chi");
    fMaterial_Params[kg] = list.GetParameter("g");
    fMaterial_Params[kg1] = list.GetParameter("g1");
    fMaterial_Params[kg2] = list.GetParameter("g2");
    fMaterial_Params[kg3] = list.GetParameter("g3");
    fMaterial_Params[kRho_0] = list.GetParameter("rho_0");
    fs_micromorph3D_out  << "fMaterial_Params = " << fMaterial_Params << endl;
//    fIntegration_Params[kBeta] = list.GetParameter("beta");
//    fIntegration_Params[kGamma] = list.GetParameter("gamma");

    Echo_Input_Data();
    //if(iConstitutiveModelType==3)
    //{
    //knum_d_state=17;//before micro scale plasticity
    //knum_d_state=20;//with micro scale plasticity
    knum_d_state=37;//with extra strain measures
    //knum_d_state=56;//20+F,Fe,X,Xe=56
    //knum_d_state=25;// Micro scale gradient parameters
    //}
    // else
   // {
    //need to change for appropriate number of ISVs for micromorphic model
  //  knum_d_state = 42; // #? internal state variables
 //   }
    knum_i_state = 0; // int's needed per ip, state variables

    //need to change these for non-symmetric stress, and higher order couple stress output
    knumstrain = 27; // number of strain outputs
    knumstress = 54; // number of stress outputs + higher order = ??

/*    knumstrain = 6; // number of strain outputs
    knumstress = 6; // number of stress outputs + higher order = ??
*/

  //  knumdispl=3;

    output = "out";

    /* dimensions (notation as per Hughes' Book) */
    int& n_ip_displ = fNumIP_displ;
    int& n_ip_micro = fNumIP_micro;
    n_sd = NumSD();
    int nen = NumElementNodes(); /* number of nodes/element in the mesh */

    /* initialize connectivities */
    fConnectivities_displ.Alias(fConnectivities);
    fConnectivities_micro.Alias(fConnectivities);

    /* pick element interpolations based on available number of element nodes
     * and the specified number of integration points */
    // only implemented for 3D, quadratic hexs
    //if (n_sd == 2 && n_en_micro != n_en_displ && fGeometryCode_displ == GeometryT::kQuadrilateral)
    if (n_sd == 3 && n_en_micro != n_en_displ && fGeometryCode_displ == GeometryT::kHexahedron)
    {
        // don't expect reduced integration for both fields
        // if (n_ip_displ == 4 && n_ip_micro == 4)
        //        ExceptionT::GeneralFail(caller, "not expecting 4 ips for both fields");
        //else if (n_ip_displ == 4 || n_ip_micro == 4) // create reduced connectivities
        //{
        // reduce the number of element nodes based on the number ip's
        int& nen_red = (n_ip_displ == 8) ? n_en_displ : n_en_micro;
        nen_red = 8;
        ArrayT<const iArray2DT*>& connects_red = (n_ip_displ == 8) ?
            fConnectivities_displ :
            fConnectivities_micro;

        //create reduced connectivities
        connects_red.Dimension(0);
        connects_red.Dimension(fConnectivities.Length());
        fConnectivities_reduced.Dimension(fConnectivities.Length());
        for (int i = 0; i < fConnectivities_reduced.Length(); i++) {
            iArray2DT& connects_red_store = fConnectivities_reduced[i];
            const iArray2DT& connects = *(fConnectivities[i]);
            connects_red_store.Dimension(connects.MajorDim(), nen_red);
            connects_red[i] = &connects_red_store;

            //take 1st eight element nodes (columns)
            for (int j = 0; j < nen_red; j++)
            connects_red_store.ColumnCopy(j, connects, j);
        }
        //}
    }


    n_el = NumElements();
    n_sd_surf = n_sd;


    /* set shape functions */
    // u
    fInitCoords_displ.Dimension(n_en_displ, n_sd);
    ElementSupport().RegisterCoordinates(fInitCoords_displ);
    fCurrCoords_displ.Dimension(n_en_displ, n_sd);
    fShapes_displ = new ShapeFunctionT(fGeometryCode_displ, fNumIP_displ, fCurrCoords_displ,1);


    //fShapes_displ->Initialize();
    // phi
    fInitCoords_micro.Dimension(n_en_micro, n_sd);
    ElementSupport().RegisterCoordinates(fInitCoords_micro);
    fCurrCoords_micro.Dimension(n_en_micro, n_sd);
    fShapes_micro = new ShapeFunctionT(fGeometryCode_micro, fNumIP_micro, fCurrCoords_micro);
    //fShapes_micro = new ShapeFunctionT(fGeometryCode_micro, fNumIP_micro, fCurrCoords_displ);
    //fShapes_micro->Initialize();

    /* set local arrays for displacement field */
    u.Dimension (n_en_displ, n_sd);
    u_dot.Dimension (n_en_displ, n_sd);
    u_dot_n.Dimension (n_en_displ, n_sd);
    u_dotdot_n.Dimension (n_en_displ, n_sd);
    u_dotdot.Dimension (n_en_displ, n_sd);
    u_n.Dimension (n_en_displ, n_sd);
    del_u.Dimension (n_en_displ, n_sd);
    n_en_displ_x_n_sd = n_en_displ*n_sd;
    n_sd_x_n_sd_x_n_sd = n_sd*n_sd*n_sd;
    n_sd_x_n_sd = n_sd*n_sd;
    n_en_micro_x_n_sd = n_en_micro*n_sd;
    n_en_micro_x_n_sd_x_n_sd = n_en_micro*n_sd_x_n_sd;
    del_u_vec.Dimension (n_en_displ_x_n_sd);
    u_vec.Dimension (n_en_displ_x_n_sd);
    u_dot_vec.Dimension (n_en_displ_x_n_sd);
    u_dotdot_vec.Dimension (n_en_displ_x_n_sd);
    //ElementSupport().RegisterCoordinates(fInitCoords_displ);
    fDispl->RegisterLocal(u);
    fDispl->RegisterLocal(u_n);


    if (fIntegrator->Order() == 1)
    {
        fDispl->RegisterLocal(u_dot);
        fDispl->RegisterLocal(u_dot_n);
    }

    if (fIntegrator->Order() == 2)
    {
        fDispl->RegisterLocal(u_dot);
        fDispl->RegisterLocal(u_dot_n);
        fDispl->RegisterLocal(u_dotdot);
        fDispl->RegisterLocal(u_dotdot_n);
    }

    /* set local arrays for micro-displacement-gradient field */
    Phi.Dimension (n_en_micro, ndof_per_nd_micro);
    Phi_dot.Dimension (n_en_micro, ndof_per_nd_micro);
    Phi_dot_n.Dimension (n_en_micro, ndof_per_nd_micro);
    Phi_dotdot.Dimension (n_en_micro, ndof_per_nd_micro);
    Phi_dotdot_n.Dimension (n_en_micro, ndof_per_nd_micro);
    Phi_n.Dimension (n_en_micro, ndof_per_nd_micro);
    del_Phi.Dimension (n_en_micro, ndof_per_nd_micro);
    n_en_micro_x_ndof_per_nd_micro = n_en_micro*ndof_per_nd_micro;
    ndof_per_nd_micro_x_n_sd=ndof_per_nd_micro*n_sd;
    del_Phi_vec.Dimension (n_en_micro_x_ndof_per_nd_micro);
    Phi_vec.Dimension (n_en_micro_x_ndof_per_nd_micro);
    Phi_dot_vec.Dimension (n_en_micro_x_ndof_per_nd_micro);
    Phi_dotdot_vec.Dimension (n_en_micro_x_ndof_per_nd_micro);
    //ElementSupport().RegisterCoordinates(fInitCoords_micro);

    fMicro->RegisterLocal(Phi);
    fMicro->RegisterLocal(Phi_n);

    if (fIntegrator->Order() == 1)
    {
        fMicro->RegisterLocal(Phi_dot);
        fMicro->RegisterLocal(Phi_dot_n);
    }

    if (fIntegrator->Order() == 2)
    {
        fMicro->RegisterLocal(Phi_dot);
        fMicro->RegisterLocal(Phi_dot_n);
        fMicro->RegisterLocal(Phi_dotdot);
        fMicro->RegisterLocal(Phi_dotdot_n);
    }


    /* allocate state variable storage */
    // state variables are calculated at IPs for displacement field
    int num_ip = fNumIP_displ;
    //int num_ip = fNumIP_micro;
    fdState_new.Dimension(n_el, num_ip*knum_d_state);
    fdState.Dimension(n_el, num_ip*knum_d_state);
    fiState_new.Dimension(n_el, num_ip*knum_i_state);
    fiState.Dimension(n_el, num_ip*knum_i_state);

    /* initialize equations */
    fEqnos_displ.Alias(fEqnos_displ);
    fEqnos_micro.Dimension(fConnectivities_micro.Length());

    /* initialize state variables */
    fdState = 0;
    fdState_new = 0;
    fiState = 0;
    fiState_new = 0;

    /* initialize element cards */
    fElementCards_displ.Alias(fElementCards);
    fElementCards_micro.Dimension(fElementCards.Length());

    /* set cards to data in array - NOT NEEDED IF YOU'RE NOT
     * GOING TO USE THE ElementCardT ARRAY? */
    for (int i= 0; i < fElementCards.Length(); i++)
    fElementCards[i].Set(fiState.MinorDim(), fiState(i), fdState.MinorDim(), fdState(i));

    fKdd.Dimension          ( n_en_displ_x_n_sd, n_en_displ_x_n_sd );
    fKdphi.Dimension        ( n_en_displ_x_n_sd, n_en_micro_x_ndof_per_nd_micro );
    fKphid.Dimension        ( n_en_micro_x_ndof_per_nd_micro, n_en_displ_x_n_sd );
    fKphiphi.Dimension      ( n_en_micro_x_ndof_per_nd_micro, n_en_micro_x_ndof_per_nd_micro );

    fFd_int.Dimension       ( n_en_displ_x_n_sd );
    fFd_ext.Dimension       ( n_en_displ_x_n_sd );
    fFphi_int.Dimension     ( n_en_micro_x_ndof_per_nd_micro );
    fFphi_ext.Dimension     ( n_en_micro_x_ndof_per_nd_micro );

    /* workspace matricies */
    fShapeDispl.Dimension (n_sd, n_en_displ_x_n_sd);
    fShapeDispl_Tr.Dimension (n_en_displ_x_n_sd,n_sd);
    fShapeMicro.Dimension (ndof_per_nd_micro, n_en_micro_x_ndof_per_nd_micro);
    n_sd_x_n_sd = n_sd*n_sd;
    n_sd_x_n_sd_x_n_sd = n_sd*n_sd*n_sd;
    fShapeDisplGrad_temp.Dimension (n_sd, n_en_displ);
    fShapeDisplGrad.Dimension (n_sd_x_n_sd, n_en_displ_x_n_sd);
    fShapeDisplGrad_t.Dimension (n_sd_x_n_sd, n_en_displ_x_n_sd);
    fShapeDisplGradGrad.Dimension (n_sd*2 , n_en_displ);
   // ndof_per_nd_micro_x_n_sd_x_n_sd = ndof_per_nd_micro*n_sd*n_sd;
    fShapeMicroGrad_temp.Dimension(n_sd,n_en_micro);
    fShapeMicroGrad.Dimension (ndof_per_nd_micro*n_sd, n_en_micro*ndof_per_nd_micro);
//   fDeformation_Gradient.Dimension (n_sd,n_sd);
    fGrad_disp_vector.Dimension (n_sd_x_n_sd);
    fGrad_disp_matrix.Dimension (n_sd,n_sd);
    fDeformation_Gradient_Inverse.Dimension (n_sd,n_sd);
    fDeformation_Gradient_Transpose.Dimension (n_sd,n_sd);

    fDefGradInv_Grad_grad.Dimension (n_sd_x_n_sd, n_sd_x_n_sd);

    fRight_Cauchy_Green_tensor.Dimension (n_sd,n_sd);
    fRight_Cauchy_Green_tensor_Inverse.Dimension (n_sd,n_sd);
    fRight_Elastic_Cauchy_Green_tensor.Dimension (n_sd,n_sd);
    fRight_Elastic_Cauchy_Green_tensor_tr.Dimension (n_sd,n_sd);

    fMicroRight_Cauchy_Green_tensor.Dimension (n_sd,n_sd);
    fMicroRight_Cauchy_Green_tensor_tr.Dimension (n_sd,n_sd);

    fMicroRight_Elastic_Cauchy_Green_tensor.Dimension (n_sd,n_sd);
    fMicroRight_Elastic_Cauchy_Green_tensor_tr.Dimension (n_sd,n_sd);

//////////////////////////////////////////////////////////////////////////////////////////////
    ///////////////////////////////////////////////////////////////////////////////////
    SIGMA_tr.Dimension (n_sd,n_sd);
    fdevSIGMA_tr.Dimension (n_sd,n_sd);
    fdGchidSIGMA_tr.Dimension (n_sd,n_sd);
    fdGchidSIGMA_tr_transpose.Dimension (n_sd,n_sd);
    fdGchidSIGMA_n.Dimension (n_sd,n_sd);
    fdGchidSIGMA_n_transpose.Dimension (n_sd,n_sd);
    SIGMA.Dimension (n_sd,n_sd);
    fdevSIGMA.Dimension (n_sd,n_sd);
    Symm_Elastic_MicroStnTensor_tr.Dimension (n_sd,n_sd);
    Symm_Elastic_MicroStnTensor.Dimension (n_sd,n_sd);
    DeltaLbarchiP.Dimension (n_sd,n_sd);
    dDeltaLbarchiPdDelgammachi.Dimension (n_sd,n_sd);
    dFpdDelgammachi.Dimension (n_sd,n_sd);
    dFedDelgammachi.Dimension (n_sd,n_sd);
    dEedDelgammachi.Dimension (n_sd,n_sd);
    symdEpsilonedDelgammachi.Dimension (n_sd,n_sd);
    dSIGMAdDelgammachi.Dimension (n_sd,n_sd);
    ddevSIGMAdDelgammachi.Dimension (n_sd,n_sd);
    Elastic_MicroStnTensor_tr_transpose.Dimension (n_sd,n_sd);
    Elastic_MicroStnTensor_transpose.Dimension (n_sd,n_sd);
    dEpsilonedDelgamma_transpose.Dimension (n_sd,n_sd);
    dEpsilonedDelgammachi_transpose.Dimension (n_sd,n_sd);
    symdEpsilonedDelgamma.Dimension (n_sd,n_sd);
    dSIGMAdDelgamma.Dimension (n_sd,n_sd);
    ddevSIGMAdDelgamma.Dimension (n_sd,n_sd);
    fdFYchidSIGMA.Dimension (n_sd,n_sd);
    fdGchidSIGMA.Dimension (n_sd,n_sd);
    VardeltaLbarchiP.Dimension (n_sd,n_sd);
    Term1.Dimension (n_sd,n_sd);
    Term1_transpose.Dimension (n_sd,n_sd);
    Term2.Dimension (n_sd,n_sd);
    Term2_transpose.Dimension (n_sd,n_sd);
    ///////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////




    fLeft_Cauchy_Green_tensor.Dimension (n_sd,n_sd);
    fIdentity_matrix.Dimension (n_sd,n_sd);
    fTemp_matrix_nsd_x_nsd.Dimension (n_sd,n_sd);
    fTemp_matrix_nsd_x_nsd2.Dimension (n_sd,n_sd);
    fTemp_matrix_nsd_x_nsd3.Dimension (n_sd,n_sd);
    fTemp_matrix_nsd_x_nsd4.Dimension (n_sd,n_sd);
    fTemp_matrix_nsd_x_nsd5.Dimension (n_sd,n_sd);
    fTemp_matrix_nsd_x_nsd6.Dimension (n_sd,n_sd);
    fTemp_matrix_nsd_x_nsd7.Dimension (n_sd,n_sd);
    fTemp_matrix_nsd_x_nsd8.Dimension (n_sd,n_sd);
    fTemp_matrix_nsd_x_nsd9.Dimension (n_sd,n_sd);
    fIota_temp_matrix.Dimension (n_en_displ_x_n_sd,n_sd_x_n_sd);

    fTemp_matrix_nsd_x_nsd = 0.0;
    fTemp_matrix_nsd_x_nsd2 = 0.0;
    fTemp_matrix_nsd_x_nsd3 = 0.0;
    fTemp_matrix_nsd_x_nsd4 = 0.0;
    fTemp_matrix_nsd_x_nsd5 = 0.0;
    fTemp_matrix_nsd_x_nsd6 = 0.0;
    fTemp_matrix_nsd_x_nsd7 = 0.0;
    fTemp_matrix_nsd_x_nsd8 = 0.0;
    fTemp_matrix_nsd_x_nsd9 = 0.0;
    ///////////////////////////////////////////////////////////////////////////
    /////////////DIMENSIONALIZE MICROMORPHIC MATRICES FOR 3D CASE//////////////
    ///////////////////////////////////////////////////////////////////////////
    fIota_w_temp_matrix.Dimension(n_en_displ_x_n_sd,n_sd_x_n_sd);
    fIota_eta_temp_matrix.Dimension(n_en_micro*n_sd_x_n_sd,n_sd_x_n_sd_x_n_sd);

    SigN_m.Dimension(n_sd,n_sd);
    Fn_m.Dimension(n_sd,n_sd);
    Finv_m.Dimension(n_sd,n_sd);
    deltaL.Dimension(n_sd,n_sd);
    deltaL_Tr.Dimension(n_sd,n_sd);
    deltad.Dimension(n_sd,n_sd);
    tempSig.Dimension(n_sd,n_sd);

    deltaEp.Dimension(n_sd,n_sd);
    deltaNu.Dimension(n_sd,n_sd);
    ChiN_m.Dimension(n_sd,n_sd);
    Chi_vec.Dimension(n_sd_x_n_sd);
    GRAD_Nuw.Dimension(n_sd_x_n_sd,n_en_displ_x_n_sd);
    GRAD_Chi_vec.Dimension(n_sd_x_n_sd_x_n_sd);
    NCHI.Dimension(n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    NCHI_Tr.Dimension(n_en_micro*n_sd_x_n_sd,n_sd_x_n_sd);
//    NCHI_eta.Dimension(n_sd_x_n_sd,n_en_micro_x_n_sd);same with the one above no need!

    fTemp_matrix_nudof_x_nudof.Dimension (n_en_displ_x_n_sd,n_en_displ_x_n_sd);
    fTemp_matrix_nudof_x_nchidof.Dimension (n_en_displ_x_n_sd,n_en_micro*n_sd_x_n_sd);
    fTemp_matrix_nchidof_x_nchidof.Dimension (n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    fTemp_matrix_nchidof_x_nudof.Dimension (n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);


    Sigma.Dimension(n_sd,n_sd);
    SigN_ar.Dimension(n_sd,n_sd);
    SigN_ar=0.0;
    SigN_IPs.Dimension(fNumIP_displ,n_sd_x_n_sd);
    SigN_IPs_n.Dimension(fNumIP_displ,n_sd_x_n_sd);
    SigN_IPs_n=0.0;
    Sig_IPs.Dimension(fNumIP_displ,n_sd_x_n_sd);
    SigN_IPs_el.Dimension(n_el,n_sd_x_n_sd*fNumIP_displ);
    Sig_IPs_el.Dimension(n_el,n_sd_x_n_sd*fNumIP_displ);
    SigN_IPs_el_n.Dimension(n_el,n_sd_x_n_sd*fNumIP_displ);
    SigN_IPs_el=0.0;
    SigN_IPs_el_n=0.0;

 //   Counter.Dimension(1);
/*    Counter_IPs_el_n.Dimension(n_el,fNumIP_displ);
    Counter_IPs_el_n=0.0;
    Counter_IPs_el.Dimension(n_el,fNumIP_displ);
    Counter_IPs.Dimension(fNumIP_displ);*/

    TransShapeDisplGrad.Dimension(n_en_displ_x_n_sd,n_sd_x_n_sd);
    Var_F.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    Finv_w.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    Tsigma_1.Dimension (n_sd_x_n_sd,n_sd_x_n_sd);
    fG1_1.Dimension (n_en_displ_x_n_sd ,n_en_displ_x_n_sd );
    Tsigma_2.Dimension (n_sd_x_n_sd,n_sd_x_n_sd);
    fG1_2.Dimension (n_en_displ_x_n_sd ,n_en_displ_x_n_sd );
    Tsigma_3.Dimension (n_sd_x_n_sd,n_sd_x_n_sd);
    fG1_3.Dimension (n_en_displ_x_n_sd ,n_en_displ_x_n_sd );
    TFn_1.Dimension (n_sd_x_n_sd,n_sd_x_n_sd);
    fG1_4.Dimension (n_en_displ_x_n_sd ,n_en_displ_x_n_sd );
    TFn_2.Dimension (n_sd_x_n_sd,n_sd_x_n_sd);
    fG1_5.Dimension (n_en_displ_x_n_sd ,n_en_displ_x_n_sd );
    TFn_3.Dimension (n_sd_x_n_sd,n_sd_x_n_sd);
    fG1_6.Dimension (n_en_displ_x_n_sd ,n_en_displ_x_n_sd );
    TChi_1.Dimension (n_sd_x_n_sd,n_sd_x_n_sd);
    fG1_7.Dimension (n_en_displ_x_n_sd ,n_en_micro*n_sd_x_n_sd );
    TFn_4.Dimension (n_sd_x_n_sd,n_sd_x_n_sd);
    fG1_8.Dimension (n_en_displ_x_n_sd ,n_en_displ_x_n_sd);
    TChi_2.Dimension (n_sd_x_n_sd,n_sd_x_n_sd);
    fG1_9.Dimension (n_en_displ_x_n_sd ,n_en_micro*n_sd_x_n_sd);
    TFn_5.Dimension (n_sd_x_n_sd,n_sd_x_n_sd);
    fG1_10.Dimension (n_en_displ_x_n_sd ,n_en_displ_x_n_sd);
    TChi_3.Dimension (n_sd_x_n_sd,n_sd_x_n_sd);
    fG1_11.Dimension (n_en_displ_x_n_sd ,n_en_micro*n_sd_x_n_sd);
    TFn_6.Dimension (n_sd_x_n_sd,n_sd_x_n_sd);
    fG1_12.Dimension (n_en_displ_x_n_sd ,n_en_displ_x_n_sd);
    SigCurr.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fG1_13.Dimension (n_en_displ_x_n_sd ,n_en_displ_x_n_sd);
    fG1_14.Dimension (n_en_displ_x_n_sd ,n_en_displ_x_n_sd);

    //Bal. of linear Mom of Momtm
    Etagrad.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    Mm_1.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    Mm_2.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    Mm_3.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    Mm_4.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    Mm_5.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    Mm_6.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    Mm_7.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    Mm_71.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd_x_n_sd);
    Mm_72.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    Mm_73.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    Mm_74.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    Mm_75.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    Mm_76.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd_x_n_sd);
    Mm_77.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    Mm_78.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    Mm_8.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    Mm_9.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd_x_n_sd);
    Mm_10.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    Mm_11.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    Mm_12.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    Mm_13.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    Mm_14.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    Ru_1.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    Ru_2.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    Ru_3.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    Ru_4.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    Ru_5.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    Ru_6.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    Ru_7.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    Ru_8.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    Ru_9.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    RChi_1.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    RChi_2.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    RChi_3.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    Rs_sigma.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    R_Capital_Gamma_Chi.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    CapitalLambda.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);

    mn_ar.Dimension(n_sd_x_n_sd_x_n_sd);
    mn_ar=0.0;
    mn_IPs.Dimension(fNumIP_displ,n_sd_x_n_sd_x_n_sd);
    mn_IPs=0.0;
    mn_IPs_n.Dimension(fNumIP_displ,n_sd_x_n_sd_x_n_sd);
    mn_IPs_n=0.0;
    mn_IPs_el.Dimension(n_el,n_sd_x_n_sd_x_n_sd*fNumIP_displ);
    mn_IPs_el=0.0;
    mn_IPs_el_n.Dimension(n_el,n_sd_x_n_sd_x_n_sd*fNumIP_displ);
    mn_IPs_el=0.0;
    mn_IPs_el_n=0.0;
    GammaN_ar.Dimension(n_sd_x_n_sd_x_n_sd);
    GammaN_ar=0.0;
    GammaN_IPs.Dimension(fNumIP_displ,n_sd_x_n_sd_x_n_sd);
    GammaN_IPs=0.0;
    GammaN_IPs_n.Dimension(fNumIP_displ,n_sd_x_n_sd_x_n_sd);
    GammaN_IPs_n=0.0;
    GammaN_IPs_el.Dimension(n_el,n_sd_x_n_sd_x_n_sd*fNumIP_displ);
    GammaN_IPs_el=0.0;
    GammaN_IPs_el_n.Dimension(n_el,n_sd_x_n_sd_x_n_sd*fNumIP_displ);
    GammaN_IPs_el=0.0;
    GammaN_IPs_el_n=0.0;

    sn_sigman.Dimension(n_sd,n_sd);
    sn_sigman=0.0;
    sn_sigman_IPs.Dimension(fNumIP_displ,n_sd_x_n_sd);
    sn_sigman_IPs=0.0;
    sn_sigman_IPs_n.Dimension(fNumIP_displ,n_sd_x_n_sd);
    SigN_IPs_n=0.0;
    sn_sigman_IPs_el.Dimension(n_el,fNumIP_displ*n_sd_x_n_sd);
    sn_sigman_IPs_el=0.0;
    sn_sigman_IPs_el_n.Dimension(n_el,fNumIP_displ*n_sd_x_n_sd);
    sn_sigman_IPs_el_n=0.0;
    s_sigma.Dimension(n_sd,n_sd);
    s_sigma=0.0;

    GRAD_NCHI.Dimension(n_sd_x_n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
 //   GRAD_NCHI_Phi.Dimension(n_sd_x_n_sd_x_n_sd,n_en_micro_x_n_sd_x_n_sd);
    Finv_eta.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd_x_n_sd);
    fH1_Etagrad.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    fH1_1.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    fH1_2.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    fH1_3.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    fH1_4.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    fH1_5.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    fH1_6.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    fH1_7.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    fH1_71.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    fH1_72.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    fH1_73.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    fH1_74.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    fH1_75.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    fH1_76.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    fH1_77.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    fH1_78.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    fH1_8.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    fH1_9.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    fH1_10.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    fH1_11.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    fH1_12.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    fH1_13.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    fH1_14.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);

    fH2_1.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    fH2_2.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    fH2_3.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    fH2_4.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    fH2_5.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    fH2_6.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    fH2_7.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    fH2_8.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    fH2_9.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    fH2_10.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    fH2_11.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    fH2_12.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    fH2_13.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    fH3_1.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);



    dMatrixT s_sigma;



    G1.Dimension(n_sd_x_n_sd);
    Uint_1.Dimension(n_en_displ_x_n_sd);
    Uint_1_temp.Dimension(n_en_displ_x_n_sd);
    Uext_1.Dimension(n_en_displ_x_n_sd);
    Gext.Dimension(n_en_displ_x_n_sd);

    H1.Dimension(n_sd_x_n_sd_x_n_sd);
    H2.Dimension(n_sd_x_n_sd);
    H3.Dimension(n_sd_x_n_sd);
    Pint_1.Dimension(n_en_micro*n_sd_x_n_sd);
    Pint_1_temp.Dimension(n_en_micro*n_sd_x_n_sd);
    Pint_2.Dimension(n_en_micro*n_sd_x_n_sd);
    Pint_2_temp.Dimension(n_en_micro*n_sd_x_n_sd);
    Pint_3.Dimension(n_en_micro*n_sd_x_n_sd);
    Pint_3_temp.Dimension(n_en_micro*n_sd_x_n_sd);
    Hext.Dimension(n_en_micro*n_sd_x_n_sd);

    Lambda.Dimension(n_sd,n_sd);//small lambda
    Lambda=0.0;//10^8
    Omega.Dimension(n_sd,n_sd);//small omega
    Omega=0.0;

    Fn_ar.Dimension(n_sd,n_sd);
    Fn_ar=0.0;
    Fn_ar_IPs.Dimension(fNumIP_displ,n_sd_x_n_sd);
    Fn_ar_IPs=0.0;
    F_ar_IPs.Dimension(fNumIP_displ,n_sd_x_n_sd);
    F_ar_IPs=0.0;
    Fn_ar_IPs_el.Dimension(n_el,fNumIP_displ*n_sd_x_n_sd);
    F_ar_IPs_el.Dimension(n_el,fNumIP_displ*n_sd_x_n_sd);

    FnInv_ar.Dimension(n_sd,n_sd);
    FnInv_ar=0.0;
    FnInv_ar_IPs.Dimension(fNumIP_displ,n_sd_x_n_sd);
    FnInv_ar_IPs=0.0;
    FInv_ar_IPs.Dimension(fNumIP_displ,n_sd_x_n_sd);
    FInv_ar_IPs=0.0;
  //  FInv_ar_IPs_n.Dimension(fNumIP_displ,n_sd_x_n_sd);
    FnInv_ar_IPs_el.Dimension(n_el,fNumIP_displ*n_sd_x_n_sd);
    FnInv_ar_IPs_el=0.0;
    FInv_ar_IPs_el.Dimension(n_el,fNumIP_displ*n_sd_x_n_sd);
    FInv_ar_IPs_el=0.0;

    Chi_m.Dimension(n_sd,n_sd);
    ChiInv_m.Dimension(n_sd,n_sd);
    ChiN_ar.Dimension(n_sd,n_sd);
    ChiN_ar=0.0;
    Chi_ar.Dimension(n_sd,n_sd);
    Chi_ar=0.0;
    ChiN_ar_IPs.Dimension(fNumIP_displ,n_sd_x_n_sd);
    ChiN_ar_IPs=0.0;
    Chi_ar_IPs.Dimension(fNumIP_displ,n_sd_x_n_sd);
    Chi_ar_IPs=0.0;
    ChiN_ar_IPs_n.Dimension(fNumIP_displ,n_sd_x_n_sd);
    ChiN_ar_IPs_n=0.0;
    ChiN_ar_IPs_el.Dimension(n_el,fNumIP_displ*n_sd_x_n_sd);
    ChiN_ar_IPs_el=0.0;
    Chi_ar_IPs_el.Dimension(n_el,fNumIP_displ*n_sd_x_n_sd);
    Chi_ar_IPs_el=0.0;
    ChiN_ar_IPs_el_n.Dimension(n_el,fNumIP_displ*n_sd_x_n_sd);
    ChiN_ar_IPs_el_n=0.0;

    GRAD_Chi_ar.Dimension(n_sd_x_n_sd_x_n_sd);
    GRAD_Chi_ar=0.0;
    GRAD_ChiN_ar.Dimension(n_sd_x_n_sd_x_n_sd);
    GRAD_Chi_ar.Dimension(n_sd_x_n_sd_x_n_sd);
    GRAD_Chi_ar=0.0;
    GRAD_ChiN_ar_IPs.Dimension(fNumIP_displ,n_sd_x_n_sd_x_n_sd);
    GRAD_Chi_ar_IPs.Dimension(fNumIP_displ,n_sd_x_n_sd_x_n_sd);
    GRAD_ChiN_ar_IPs=0.0;
    GRAD_ChiN_ar_IPs_n.Dimension(fNumIP_displ,n_sd_x_n_sd_x_n_sd);
    GRAD_ChiN_ar_IPs_el.Dimension(n_el,fNumIP_displ*n_sd_x_n_sd_x_n_sd);
    GRAD_ChiN_ar_IPs_el=0.0;
    GRAD_Chi_ar_IPs_el.Dimension(n_el,fNumIP_displ*n_sd_x_n_sd_x_n_sd);
    GRAD_Chi_ar_IPs_el=0.0;
    GRAD_ChiN_ar_IPs_el_n.Dimension(n_el,fNumIP_displ*n_sd_x_n_sd_x_n_sd);
    GRAD_ChiN_ar_IPs_el_n=0.0;
    fIdentity_matrix=0.0;
    Temp_Identity_array.Dimension(9);
    for (int i=0; i<9; i++) Temp_Identity_array[i] = 0.0;
    Temp_Identity_array[0]=1.0;
    Temp_Identity_array[4]=1.0;
    Temp_Identity_array[8]=1.0;


    /////////////////////////////////////////////////////////////
    /////////////FINITE STRAIN ELASTICITY MATRICES///////////////
    /////////////////////////////////////////////////////////////
    KirchhoffST.Dimension(n_sd,n_sd);
    SPK.Dimension(n_sd,n_sd);
    Temp_SPK.Dimension(n_sd,n_sd);
   // FSF.Dimension(n_sd,n_sd);
    LagrangianStn.Dimension(n_sd,n_sd);
    Elastic_LagrangianStn.Dimension(n_sd,n_sd);
    Elastic_LagrangianStn_tr.Dimension(n_sd,n_sd);

    MicroStnTensor.Dimension(n_sd,n_sd);
    ChiM.Dimension(n_sd,n_sd);
    ChiM_Inverse.Dimension(n_sd,n_sd);
    PSI.Dimension(n_sd,n_sd);
    I1_1.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    I1_2.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    I1_3.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    I1_4.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    I1_5.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    I1_6.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    I1_7.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    I2_1.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    I1_8.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    I2_2.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    I1_9.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    I2_3.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKu_1.Dimension(n_en_displ_x_n_sd ,n_en_displ_x_n_sd );
    fKu_2.Dimension(n_en_displ_x_n_sd ,n_en_displ_x_n_sd );
    fKu_3.Dimension(n_en_displ_x_n_sd ,n_en_displ_x_n_sd );
    fKu_4.Dimension(n_en_displ_x_n_sd ,n_en_displ_x_n_sd );
    fKu_5.Dimension(n_en_displ_x_n_sd ,n_en_displ_x_n_sd );
    fKu_6.Dimension(n_en_displ_x_n_sd ,n_en_displ_x_n_sd );
    fKu_7.Dimension(n_en_displ_x_n_sd ,n_en_displ_x_n_sd );
    fKuphi_1.Dimension (n_en_displ_x_n_sd,n_en_micro*n_sd_x_n_sd);
    fKu_8.Dimension(n_en_displ_x_n_sd ,n_en_displ_x_n_sd );
    fKuphi_2.Dimension (n_en_displ_x_n_sd,n_en_micro*n_sd_x_n_sd);
    fKu_9.Dimension(n_en_displ_x_n_sd ,n_en_displ_x_n_sd );
    fKuphi_3.Dimension (n_en_displ_x_n_sd,n_en_micro*n_sd_x_n_sd);
    Vint_1.Dimension(n_en_displ_x_n_sd);
    Vint_2.Dimension(n_en_micro*n_sd_x_n_sd);
    Vint_3.Dimension(n_en_micro*n_sd_x_n_sd);
    fV1.Dimension(n_sd_x_n_sd);
    fV2.Dimension(n_sd_x_n_sd);
    fV3.Dimension(n_sd_x_n_sd_x_n_sd);
    Vint_1_temp.Dimension(n_en_displ_x_n_sd);
    Vint_2_temp.Dimension(n_en_micro*n_sd_x_n_sd);
    Vint_3_temp.Dimension(n_en_micro*n_sd_x_n_sd);
    SIGMA_S.Dimension(n_sd,n_sd);
    devSIGMA_S.Dimension(n_sd,n_sd);
    fMKLM.Dimension(n_sd,n_sd,n_sd);
    fdevMKLM.Dimension(n_sd,n_sd,n_sd);
    PHIMATRIX.Dimension(n_sd,n_sd);
    GPHIMATRIX.Dimension(n_sd,n_sd,n_sd);//SAME with GRAD_CHIM
    devMeKLM.Dimension(n_sd,n_sd,n_sd);
    fmeklm.Dimension(n_sd,n_sd,n_sd);
    devMeKLM_tr.Dimension(n_sd,n_sd,n_sd);

    fMeKLM_tr.Dimension(n_sd,n_sd,n_sd);

    gammastn.Dimension(n_sd,n_sd,n_sd);
    trgammastn.Dimension(n_sd);
    devgammastn.Dimension(n_sd,n_sd,n_sd);

    GAMMA.Dimension(n_sd,n_sd,n_sd);
    GRAD_CHIM.Dimension(n_sd,n_sd,n_sd);
    fTemp_tensor_n_sd_x_n_sd_x_n_sd.Dimension(n_sd,n_sd,n_sd);
    fTemp_tensor_n_sd_x_n_sd_x_n_sd1.Dimension(n_sd,n_sd,n_sd);
    fTemp_tensor_n_sd_x_n_sd_x_n_sd2.Dimension(n_sd,n_sd,n_sd);


    GXe_tr.Dimension(n_sd,n_sd,n_sd);
    GXe.Dimension(n_sd,n_sd,n_sd);
    GXe_IPs.Dimension(fNumIP_displ,n_sd_x_n_sd_x_n_sd);
    GXe_Elements_IPs.Dimension(NumElements(),fNumIP_displ*n_sd_x_n_sd_x_n_sd);
    GXe_Elements_IPs=0.0;

    GXp.Dimension(n_sd,n_sd,n_sd);
    GXp_IPs.Dimension(fNumIP_displ,n_sd_x_n_sd_x_n_sd);
    GXp_Elements_IPs.Dimension(NumElements(),fNumIP_displ*n_sd_x_n_sd_x_n_sd);
    GXp_Elements_IPs=0.0;

    GXp_n.Dimension(n_sd,n_sd,n_sd);
    GXp_n_IPs.Dimension(fNumIP_displ,n_sd_x_n_sd_x_n_sd);
    GXp_n_Elements_IPs.Dimension(NumElements(),fNumIP_displ*n_sd_x_n_sd_x_n_sd);
    GXp_n_Elements_IPs=0.0;

    GAMMAe_tr.Dimension(n_sd,n_sd,n_sd);
    GAMMAe.Dimension(n_sd,n_sd,n_sd);
    GAMMAe_IPs.Dimension(fNumIP_displ,n_sd_x_n_sd_x_n_sd);
    GAMMAe_Elements_IPs.Dimension(NumElements(),fNumIP_displ*n_sd_x_n_sd_x_n_sd);
    GAMMAe_Elements_IPs=0.0;

    GAMMAe_n.Dimension(n_sd,n_sd,n_sd);
    GAMMAe_n_IPs.Dimension(fNumIP_displ,n_sd_x_n_sd_x_n_sd);
    GAMMAe_n_Elements_IPs.Dimension(NumElements(),fNumIP_displ*n_sd_x_n_sd_x_n_sd);
    GAMMAe_n_Elements_IPs=0.0;

    fMeKLM_n.Dimension(n_sd,n_sd,n_sd);
    fMeKLM_n_Elements_IPs.Dimension(NumElements(),fNumIP_displ*n_sd_x_n_sd_x_n_sd);
    fMeKLM_Elements_IPs.Dimension(NumElements(),fNumIP_displ*n_sd_x_n_sd_x_n_sd);
    fMeKLM_n_IPs.Dimension(fNumIP_displ,n_sd_x_n_sd_x_n_sd);
    fMeKLM_IPs.Dimension(fNumIP_displ,n_sd_x_n_sd_x_n_sd);

    SPK_n.Dimension(n_sd,n_sd);
    SPK_n_Elements_IPs.Dimension(NumElements(),fNumIP_displ*n_sd_x_n_sd);
    SPK_Elements_IPs.Dimension(NumElements(),fNumIP_displ*n_sd_x_n_sd);
    SPK_n_IPs.Dimension(fNumIP_displ,n_sd_x_n_sd);
    SPK_IPs.Dimension(fNumIP_displ,n_sd_x_n_sd);

    SIGMA_S_n.Dimension(n_sd,n_sd);
    SIGMA_S_n_Elements_IPs.Dimension(NumElements(),fNumIP_displ*n_sd_x_n_sd);
    SIGMA_S_Elements_IPs.Dimension(NumElements(),fNumIP_displ*n_sd_x_n_sd);
    SIGMA_S_n_IPs.Dimension(fNumIP_displ,n_sd_x_n_sd);
    SIGMA_S_IPs.Dimension(fNumIP_displ,n_sd_x_n_sd);

    SIGMA_n.Dimension(n_sd,n_sd);
    SIGMA_n_Elements_IPs.Dimension(NumElements(),fNumIP_displ*n_sd_x_n_sd);
    SIGMA_Elements_IPs.Dimension(NumElements(),fNumIP_displ*n_sd_x_n_sd);
    SIGMA_n_IPs.Dimension(fNumIP_displ,n_sd_x_n_sd);
    SIGMA_IPs.Dimension(fNumIP_displ,n_sd_x_n_sd);

    Elastic_LagrangianStn_n.Dimension(n_sd,n_sd);
    Elastic_LagrangianStn_n_Elements_IPs.Dimension(NumElements(),fNumIP_displ*n_sd_x_n_sd);
    Elastic_LagrangianStn_Elements_IPs.Dimension(NumElements(),fNumIP_displ*n_sd_x_n_sd);
    Elastic_LagrangianStn_n_IPs.Dimension(fNumIP_displ,n_sd_x_n_sd);
    Elastic_LagrangianStn_IPs.Dimension(fNumIP_displ,n_sd_x_n_sd);

    Elastic_MicroStnTensor_n.Dimension(n_sd,n_sd);
    Elastic_MicroStnTensor_n_Elements_IPs.Dimension(NumElements(),fNumIP_displ*n_sd_x_n_sd);
    Elastic_MicroStnTensor_Elements_IPs.Dimension(NumElements(),fNumIP_displ*n_sd_x_n_sd);
    Elastic_MicroStnTensor_n_IPs.Dimension(fNumIP_displ,n_sd_x_n_sd);
    Elastic_MicroStnTensor_IPs.Dimension(fNumIP_displ,n_sd_x_n_sd);

    fMKLM_tr.Dimension(n_sd,n_sd,n_sd);
    Mean_fMKLM_tr.Dimension(n_sd,1);
    fdevMKLM_tr.Dimension(n_sd,n_sd,n_sd);
    fMeKLM.Dimension(n_sd,n_sd,n_sd);
    Mean_fMeKLM.Dimension(n_sd,1);
    fdevMeKLM.Dimension(n_sd,n_sd,n_sd);
    fdGnablachidMKLM_tr.Dimension(n_sd,n_sd,n_sd);
    fdGnablachidMKLM_n.Dimension(n_sd,n_sd,n_sd);
    fdGnablachidMKLM.Dimension(n_sd,n_sd,n_sd);
    fdFnablachidMKLM.Dimension(n_sd,n_sd,n_sd);
    dGnablachidMKLM_IPs.Dimension(fNumIP_displ,n_sd_x_n_sd_x_n_sd);
    dGnablachidMKLM_Element_IPs.Dimension(NumElements(),fNumIP_displ*n_sd_x_n_sd_x_n_sd);
    dGnablachidMKLM_n_IPs.Dimension(fNumIP_displ,n_sd_x_n_sd_x_n_sd);
    dGnablachidMKLM_Element_n_IPs.Dimension(NumElements(),fNumIP_displ*n_sd_x_n_sd_x_n_sd);

    dfMKLMdDelgammanablachi.Dimension(n_sd,n_sd,n_sd);
    dmeanfMKLMdDelgammanablachi.Dimension(n_sd,1);
    dfdevMKLMdDelgammanablachi.Dimension(n_sd,n_sd,n_sd);
    kc_nablachi_n.Dimension(n_sd,1);
    dfkc_nablachidDelgammanablachi.Dimension(n_sd,1);
    fDelkc_nablachi.Dimension(n_sd,1);
    cohesion_nablachi.Dimension(n_sd,1);
    fdfnablachidcohesion_nablachi.Dimension(n_sd,1);
    fDeltaLbar_P.Dimension(n_sd,n_sd);
    fDeltaLbarChai_P.Dimension(n_sd,n_sd);



    fKFJu.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    fKJFu.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);

    fKphiu_1.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    fKphiu_2.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    fKphiu_3.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    fKphiu_4.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    fKphiphi_1.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    fKphiu_5.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    fKphiphi_2.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    fKphiphi_3.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);

    fKMFphiu.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    fKMchiphiphi.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    fKMphiu_1_1.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    fKMphiphi_1_1.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    fKMphiu_1_2.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    fKMphiphi_1_2.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    fKMphiu_2_1.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    fKMphiphi_2_1.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    fKMphiu_2_2.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    fKMphiphi_2_2.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    fKMphiu_3.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    fKMphiphi_3.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    fKMphiu_4.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    fKMphiphi_4.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    fKMphiu_5_1.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    fKMphiphi_5_1.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    fKMphiu_5_2.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    fKMphiphi_5_2.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    fKMphiu_6.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    fKMphiphi_6.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    fKMphiu_7.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    fKMphiphi_7.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    fKMphiu_8_1.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    fKMphiphi_8_1.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    fKMphiu_8_2.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    fKMphiphi_8_2.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    fKMphiu_9.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    fKMphiphi_9.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    fKMphiu_10.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    fKMphiphi_10.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    fKMphiu_11.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    fKMphiphi_11.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);



    fFJ.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fJF.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fJ1_1.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fJ1_2.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fJ1_3.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fJ1_4.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fJ2_1.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fJ1_5.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fJ1_6.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fJ2_2.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fJ2_3.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);

    fEtaM.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fFM.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fMF.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fMchi.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fMpu_1_1.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fMpp_1_1.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd_x_n_sd);
    fMpu_1_2.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fMpp_1_2.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd_x_n_sd);

    fMpu_2_1.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fMpp_2_1.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd_x_n_sd);
    fMpu_2_2.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fMpp_2_2.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd_x_n_sd);

    fMpu_3.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fMpp_3.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd_x_n_sd);

    fMpu_4.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fMpp_4.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd_x_n_sd);

    fMpu_5_1.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fMpp_5_1.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd_x_n_sd);
    fMpu_5_2.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fMpp_5_2.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd_x_n_sd);

    fMpu_6.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fMpp_6.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd_x_n_sd);

    fMpu_7.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fMpp_7.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd_x_n_sd);

    fMpu_8_1.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fMpp_8_1.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd_x_n_sd);
    fMpu_8_2.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fMpp_8_2.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd_x_n_sd);

    fMpu_9.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fMpp_9.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd_x_n_sd);

    fMpu_10.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fMpp_10.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd_x_n_sd);

    fMpu_11.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fMpp_11.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd_x_n_sd);



    Jmat.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    KJmat.Dimension(n_en_displ_x_n_sd ,n_en_displ_x_n_sd );


    ////////////////stress measures/////////////////

    devsigma.Dimension(n_sd,n_sd);
    devRelsts.Dimension(n_sd,n_sd);
    s_sigma_temp.Dimension(n_sd,n_sd);
    fmklm.Dimension(n_sd,n_sd,n_sd);
    devmklm.Dimension(n_sd,n_sd,n_sd);
    trvecmklm.Dimension(n_sd);

    ///////////////////////////////////////

    //u_el.Dimension(4,n_sd);
    //u_element.Dimension(n_sd);
    //ftemp_u_element.Dimension(n_sd);
    //////////////////////////////////////////////////////////////
    /////////////////////////////////////////////////////////////
    ////////////////////////////////////////////////////////////



    Vintp_1.Dimension(n_en_displ_x_n_sd);
    Vintp_2.Dimension(n_en_micro*n_sd_x_n_sd);
    Vintp_3.Dimension(n_en_micro*n_sd_x_n_sd);
    fV1p.Dimension(n_sd_x_n_sd);
    fV2p.Dimension(n_sd_x_n_sd);
    fV3p.Dimension(n_sd_x_n_sd_x_n_sd);
    Vintp_1_temp.Dimension(n_en_displ_x_n_sd);
    Vintp_2_temp.Dimension(n_en_micro*n_sd_x_n_sd);
    Vintp_3_temp.Dimension(n_en_micro*n_sd_x_n_sd);


    IJp_1.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKu_IJp_1.Dimension(n_en_displ_x_n_sd ,n_en_displ_x_n_sd );
    IJp_2.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKu_IJp_2.Dimension(n_en_displ_x_n_sd ,n_en_displ_x_n_sd );
    IJp_3.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKu_IJp_3.Dimension(n_en_displ_x_n_sd ,n_en_displ_x_n_sd );
    IJp_4.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKu_IJp_4.Dimension(n_en_displ_x_n_sd ,n_en_displ_x_n_sd );
    IJp_5.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKu_IJp_5.Dimension(n_en_displ_x_n_sd ,n_en_displ_x_n_sd );
    IJp_6.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKu_IJp_6.Dimension(n_en_displ_x_n_sd ,n_en_displ_x_n_sd );
    IJp_7.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKuphi_IJp_7.Dimension(n_en_displ_x_n_sd ,n_en_micro*n_sd_x_n_sd);
    IJp_8.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKuphi_IJp_8.Dimension(n_en_displ_x_n_sd ,n_en_micro*n_sd_x_n_sd);
    IJp_9.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKuphi_IJp_9.Dimension(n_en_displ_x_n_sd ,n_en_micro*n_sd_x_n_sd);
    /* Matrices from coupling */
    IJp_10.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKu_IJp_10.Dimension(n_en_displ_x_n_sd ,n_en_displ_x_n_sd );
    IJp_11.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKu_IJp_11.Dimension(n_en_displ_x_n_sd ,n_en_displ_x_n_sd );
    IJp_12.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKu_IJp_12.Dimension(n_en_displ_x_n_sd ,n_en_displ_x_n_sd );
    IJp_13.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKuphi_IJp_13.Dimension(n_en_displ_x_n_sd ,n_en_micro*n_sd_x_n_sd);
    IJp_14.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKu_IJp_14.Dimension(n_en_displ_x_n_sd ,n_en_displ_x_n_sd );
    IJp_15.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKuphi_IJp_15.Dimension(n_en_displ_x_n_sd ,n_en_micro*n_sd_x_n_sd);
    IJp_16.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKu_IJp_16.Dimension(n_en_displ_x_n_sd ,n_en_displ_x_n_sd );
    IJp_17.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKuphi_IJp_17.Dimension(n_en_displ_x_n_sd ,n_en_micro*n_sd_x_n_sd);

    I1e_1.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKu_I1e_1.Dimension(n_en_displ_x_n_sd ,n_en_displ_x_n_sd );
    I2e_1.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKu_I2e_1.Dimension(n_en_displ_x_n_sd ,n_en_displ_x_n_sd );

    I2p_2.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKu_I2p_2.Dimension(n_en_displ_x_n_sd ,n_en_displ_x_n_sd );
    I2p_3.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKu_I2p_3.Dimension(n_en_displ_x_n_sd ,n_en_displ_x_n_sd );
    I2p_4.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKu_I2p_4.Dimension(n_en_displ_x_n_sd ,n_en_displ_x_n_sd );
    I2p_5.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKu_I2p_5.Dimension(n_en_displ_x_n_sd ,n_en_displ_x_n_sd );
    I2p_6.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKu_I2p_6.Dimension(n_en_displ_x_n_sd ,n_en_displ_x_n_sd );
    I2p_7.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKu_I2p_7.Dimension(n_en_displ_x_n_sd ,n_en_displ_x_n_sd );
    I2p_8.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKuphi_I2p_8.Dimension(n_en_displ_x_n_sd ,n_en_micro*n_sd_x_n_sd );
    I2p_9.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKuphi_I2p_9.Dimension(n_en_displ_x_n_sd ,n_en_micro*n_sd_x_n_sd );
    I2p_10.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKuphi_I2p_10.Dimension(n_en_displ_x_n_sd ,n_en_micro*n_sd_x_n_sd );
    /* Matrices from coupling */
    I2p_11.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKu_I2p_11.Dimension(n_en_displ_x_n_sd ,n_en_displ_x_n_sd );
    I2p_12.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKu_I2p_12.Dimension(n_en_displ_x_n_sd ,n_en_displ_x_n_sd );
    I2p_13.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKu_I2p_13.Dimension(n_en_displ_x_n_sd ,n_en_displ_x_n_sd );
    I2p_14.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKuphi_I2p_14.Dimension(n_en_displ_x_n_sd ,n_en_micro*n_sd_x_n_sd );
    I2p_15.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKu_I2p_15.Dimension(n_en_displ_x_n_sd ,n_en_displ_x_n_sd );
    I2p_16.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKuphi_I2p_16.Dimension(n_en_displ_x_n_sd ,n_en_micro*n_sd_x_n_sd );
    I2p_17.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKu_I2p_17.Dimension(n_en_displ_x_n_sd ,n_en_displ_x_n_sd );
    I2p_18.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKuphi_I2p_18.Dimension(n_en_displ_x_n_sd ,n_en_micro*n_sd_x_n_sd );



    I3e_1.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKu_I3e_1.Dimension(n_en_displ_x_n_sd ,n_en_displ_x_n_sd );
    I3e_2.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKu_I3e_2.Dimension(n_en_displ_x_n_sd ,n_en_displ_x_n_sd );

    I3e_3.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKu_I3e_3.Dimension(n_en_displ_x_n_sd ,n_en_displ_x_n_sd );
    I3p_4.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKu_I3p_4.Dimension(n_en_displ_x_n_sd ,n_en_displ_x_n_sd );
    I3p_5.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKu_I3p_5.Dimension(n_en_displ_x_n_sd ,n_en_displ_x_n_sd );
    I3p_6.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKu_I3p_6.Dimension(n_en_displ_x_n_sd ,n_en_displ_x_n_sd );
    I3p_7.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKu_I3p_7.Dimension(n_en_displ_x_n_sd ,n_en_displ_x_n_sd );
    I3p_8.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKu_I3p_8.Dimension(n_en_displ_x_n_sd ,n_en_displ_x_n_sd );
    I3p_9.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKu_I3p_9.Dimension(n_en_displ_x_n_sd ,n_en_displ_x_n_sd );
    I3p_10.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKu_I3p_10.Dimension(n_en_displ_x_n_sd ,n_en_displ_x_n_sd );
    I3p_11.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKu_I3p_11.Dimension(n_en_displ_x_n_sd ,n_en_displ_x_n_sd );
    I3p_12.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKu_I3p_12.Dimension(n_en_displ_x_n_sd ,n_en_displ_x_n_sd );
    I3e_13.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKu_I3e_13.Dimension(n_en_displ_x_n_sd ,n_en_displ_x_n_sd );
    I3e_14.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKu_I3e_14.Dimension(n_en_displ_x_n_sd ,n_en_displ_x_n_sd );
    I3e_15.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKu_I3e_15.Dimension(n_en_displ_x_n_sd ,n_en_displ_x_n_sd );
    I3p_16.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKu_I3p_16.Dimension(n_en_displ_x_n_sd ,n_en_displ_x_n_sd );
    I3p_17.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKu_I3p_17.Dimension(n_en_displ_x_n_sd ,n_en_displ_x_n_sd );
    I3p_18.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKu_I3p_18.Dimension(n_en_displ_x_n_sd ,n_en_displ_x_n_sd );
    I3p_19.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKu_I3p_19.Dimension(n_en_displ_x_n_sd ,n_en_displ_x_n_sd );
    I3p_20.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKu_I3p_20.Dimension(n_en_displ_x_n_sd ,n_en_displ_x_n_sd );
    I3p_21.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKu_I3p_21.Dimension(n_en_displ_x_n_sd ,n_en_displ_x_n_sd );
    I3p_22.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKu_I3p_22.Dimension(n_en_displ_x_n_sd ,n_en_displ_x_n_sd );
    I3p_23.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKu_I3p_23.Dimension(n_en_displ_x_n_sd ,n_en_displ_x_n_sd );
    I3p_24.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKu_I3p_24.Dimension(n_en_displ_x_n_sd ,n_en_displ_x_n_sd );
    I3p_25.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKu_I3p_25.Dimension(n_en_displ_x_n_sd ,n_en_displ_x_n_sd );
    I3p_26.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKu_I3p_26.Dimension(n_en_displ_x_n_sd ,n_en_displ_x_n_sd );
    I3p_27.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKu_I3p_27.Dimension(n_en_displ_x_n_sd ,n_en_displ_x_n_sd );
    I3p_28.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKu_I3p_28.Dimension(n_en_displ_x_n_sd ,n_en_displ_x_n_sd );
    I3p_29.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKu_I3p_29.Dimension(n_en_displ_x_n_sd ,n_en_displ_x_n_sd );
    I3p_30.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKu_I3p_30.Dimension(n_en_displ_x_n_sd ,n_en_displ_x_n_sd );
    I3p_31.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKu_I3p_31.Dimension(n_en_displ_x_n_sd ,n_en_displ_x_n_sd );
    I3p_32.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKu_I3p_32.Dimension(n_en_displ_x_n_sd ,n_en_displ_x_n_sd );
    I3p_33.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKu_I3p_33.Dimension(n_en_displ_x_n_sd ,n_en_displ_x_n_sd );
    I3p_34.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKu_I3p_34.Dimension(n_en_displ_x_n_sd ,n_en_displ_x_n_sd );
    I3p_35.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKu_I3p_35.Dimension(n_en_displ_x_n_sd ,n_en_displ_x_n_sd );
    I3p_36.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKu_I3p_36.Dimension(n_en_displ_x_n_sd ,n_en_displ_x_n_sd );
    I3e_37.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKuphi_I3e_37.Dimension(n_en_displ_x_n_sd ,n_en_micro*n_sd_x_n_sd  );
    I3e_38.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKuphi_I3e_38.Dimension(n_en_displ_x_n_sd ,n_en_micro*n_sd_x_n_sd  );
    I3e_39.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKuphi_I3e_39.Dimension(n_en_displ_x_n_sd ,n_en_micro*n_sd_x_n_sd  );
    I3p_40.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKuphi_I3p_40.Dimension(n_en_displ_x_n_sd ,n_en_micro*n_sd_x_n_sd  );
    I3p_41.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKuphi_I3p_41.Dimension(n_en_displ_x_n_sd ,n_en_micro*n_sd_x_n_sd  );
    I3p_42.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKuphi_I3p_42.Dimension(n_en_displ_x_n_sd ,n_en_micro*n_sd_x_n_sd  );
    I3p_43.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKuphi_I3p_43.Dimension(n_en_displ_x_n_sd ,n_en_micro*n_sd_x_n_sd  );
    I3p_44.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKuphi_I3p_44.Dimension(n_en_displ_x_n_sd ,n_en_micro*n_sd_x_n_sd  );
    I3p_45.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKuphi_I3p_45.Dimension(n_en_displ_x_n_sd ,n_en_micro*n_sd_x_n_sd  );
    I3p_46.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKuphi_I3p_46.Dimension(n_en_displ_x_n_sd ,n_en_micro*n_sd_x_n_sd  );
    I3p_47.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKuphi_I3p_47.Dimension(n_en_displ_x_n_sd ,n_en_micro*n_sd_x_n_sd  );
    I3p_48.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKuphi_I3p_48.Dimension(n_en_displ_x_n_sd ,n_en_micro*n_sd_x_n_sd  );
    I3p_49.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKuphi_I3p_49.Dimension(n_en_displ_x_n_sd ,n_en_micro*n_sd_x_n_sd  );
    I3p_50.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKuphi_I3p_50.Dimension(n_en_displ_x_n_sd ,n_en_micro*n_sd_x_n_sd  );
    I3p_51.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKuphi_I3p_51.Dimension(n_en_displ_x_n_sd ,n_en_micro*n_sd_x_n_sd  );
    I3p_52.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKuphi_I3p_52.Dimension(n_en_displ_x_n_sd ,n_en_micro*n_sd_x_n_sd  );
    I3p_53.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKuphi_I3p_53.Dimension(n_en_displ_x_n_sd ,n_en_micro*n_sd_x_n_sd  );
    I3p_54.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKuphi_I3p_54.Dimension(n_en_displ_x_n_sd ,n_en_micro*n_sd_x_n_sd  );
    /* Matrices for Del(delgammachi) */
    I3p_55.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKu_I3p_55.Dimension(n_en_displ_x_n_sd ,n_en_displ_x_n_sd );
    I3p_56.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKu_I3p_56.Dimension(n_en_displ_x_n_sd ,n_en_displ_x_n_sd );
    I3p_57.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKu_I3p_57.Dimension(n_en_displ_x_n_sd ,n_en_displ_x_n_sd );
    I3p_58.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKuphi_I3p_58.Dimension(n_en_displ_x_n_sd ,n_en_micro*n_sd_x_n_sd  );
    I3p_59.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKu_I3p_59.Dimension(n_en_displ_x_n_sd ,n_en_displ_x_n_sd );
    I3p_60.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKuphi_I3p_60.Dimension(n_en_displ_x_n_sd ,n_en_micro*n_sd_x_n_sd  );
    I3p_61.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKu_I3p_61.Dimension(n_en_displ_x_n_sd ,n_en_displ_x_n_sd );
    I3p_62.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKuphi_I3p_62.Dimension(n_en_displ_x_n_sd ,n_en_micro*n_sd_x_n_sd  );
    I3p_63.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKu_I3p_63.Dimension(n_en_displ_x_n_sd ,n_en_displ_x_n_sd );
    I3p_64.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKu_I3p_64.Dimension(n_en_displ_x_n_sd ,n_en_displ_x_n_sd );
    I3p_65.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKu_I3p_65.Dimension(n_en_displ_x_n_sd ,n_en_displ_x_n_sd );
    I3p_66.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKuphi_I3p_66.Dimension(n_en_displ_x_n_sd ,n_en_micro*n_sd_x_n_sd  );
    I3p_67.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKu_I3p_67.Dimension(n_en_displ_x_n_sd ,n_en_displ_x_n_sd );
    I3p_68.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKuphi_I3p_68.Dimension(n_en_displ_x_n_sd ,n_en_micro*n_sd_x_n_sd  );
    I3p_69.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKu_I3p_69.Dimension(n_en_displ_x_n_sd ,n_en_displ_x_n_sd );
    I3p_70.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKuphi_I3p_70.Dimension(n_en_displ_x_n_sd ,n_en_micro*n_sd_x_n_sd  );
    I3p_71.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKu_I3p_71.Dimension(n_en_displ_x_n_sd ,n_en_displ_x_n_sd );
    I3p_72.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKu_I3p_72.Dimension(n_en_displ_x_n_sd ,n_en_displ_x_n_sd );
    I3p_73.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKu_I3p_73.Dimension(n_en_displ_x_n_sd ,n_en_displ_x_n_sd );
    I3p_74.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKuphi_I3p_74.Dimension(n_en_displ_x_n_sd ,n_en_micro*n_sd_x_n_sd  );
    I3p_75.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKu_I3p_75.Dimension(n_en_displ_x_n_sd ,n_en_displ_x_n_sd );
    I3p_76.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKuphi_I3p_76.Dimension(n_en_displ_x_n_sd ,n_en_micro*n_sd_x_n_sd  );
    I3p_77.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKu_I3p_77.Dimension(n_en_displ_x_n_sd ,n_en_displ_x_n_sd );
    I3p_78.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKuphi_I3p_78.Dimension(n_en_displ_x_n_sd ,n_en_micro*n_sd_x_n_sd  );
    /* Matrices from coupling*/
    I3p_79.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKu_I3p_79.Dimension(n_en_displ_x_n_sd ,n_en_displ_x_n_sd );
    I3p_80.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKu_I3p_80.Dimension(n_en_displ_x_n_sd ,n_en_displ_x_n_sd );
    I3p_81.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKu_I3p_81.Dimension(n_en_displ_x_n_sd ,n_en_displ_x_n_sd );
    I3p_82.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKuphi_I3p_82.Dimension(n_en_displ_x_n_sd ,n_en_micro*n_sd_x_n_sd  );
    I3p_83.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKu_I3p_83.Dimension(n_en_displ_x_n_sd ,n_en_displ_x_n_sd );
    I3p_84.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKuphi_I3p_84.Dimension(n_en_displ_x_n_sd ,n_en_micro*n_sd_x_n_sd  );
    I3p_85.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKu_I3p_85.Dimension(n_en_displ_x_n_sd ,n_en_displ_x_n_sd );
    I3p_86.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKuphi_I3p_86.Dimension(n_en_displ_x_n_sd ,n_en_micro*n_sd_x_n_sd  );
    I3p_87.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKu_I3p_87.Dimension(n_en_displ_x_n_sd ,n_en_displ_x_n_sd );
    I3p_88.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKu_I3p_88.Dimension(n_en_displ_x_n_sd ,n_en_displ_x_n_sd );
    I3p_89.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKu_I3p_89.Dimension(n_en_displ_x_n_sd ,n_en_displ_x_n_sd );
    I3p_90.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKuphi_I3p_90.Dimension(n_en_displ_x_n_sd ,n_en_micro*n_sd_x_n_sd  );
    I3p_91.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKu_I3p_91.Dimension(n_en_displ_x_n_sd ,n_en_displ_x_n_sd );
    I3p_92.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKuphi_I3p_92.Dimension(n_en_displ_x_n_sd ,n_en_micro*n_sd_x_n_sd  );
    I3p_93.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKu_I3p_93.Dimension(n_en_displ_x_n_sd ,n_en_displ_x_n_sd );
    I3p_94.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKuphi_I3p_94.Dimension(n_en_displ_x_n_sd ,n_en_micro*n_sd_x_n_sd  );
    I3p_95.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKu_I3p_95.Dimension(n_en_displ_x_n_sd ,n_en_displ_x_n_sd );
    I3p_96.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKu_I3p_96.Dimension(n_en_displ_x_n_sd ,n_en_displ_x_n_sd );
    I3p_97.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKu_I3p_97.Dimension(n_en_displ_x_n_sd ,n_en_displ_x_n_sd );
    I3p_98.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKuphi_I3p_98.Dimension(n_en_displ_x_n_sd ,n_en_micro*n_sd_x_n_sd  );
    I3p_99.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKu_I3p_99.Dimension(n_en_displ_x_n_sd ,n_en_displ_x_n_sd );
    I3p_100.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKuphi_I3p_100.Dimension(n_en_displ_x_n_sd ,n_en_micro*n_sd_x_n_sd  );
    I3p_101.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKu_I3p_101.Dimension(n_en_displ_x_n_sd ,n_en_displ_x_n_sd );
    I3p_102.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKuphi_I3p_102.Dimension(n_en_displ_x_n_sd ,n_en_micro*n_sd_x_n_sd  );
    I3p_103.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKu_I3p_103.Dimension(n_en_displ_x_n_sd ,n_en_displ_x_n_sd );
    I3p_104.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKu_I3p_104.Dimension(n_en_displ_x_n_sd ,n_en_displ_x_n_sd );
    I3p_105.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKu_I3p_105.Dimension(n_en_displ_x_n_sd ,n_en_displ_x_n_sd );
    I3p_106.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKuphi_I3p_106.Dimension(n_en_displ_x_n_sd ,n_en_micro*n_sd_x_n_sd  );
    I3p_107.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKu_I3p_107.Dimension(n_en_displ_x_n_sd ,n_en_displ_x_n_sd );
    I3p_108.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKuphi_I3p_108.Dimension(n_en_displ_x_n_sd ,n_en_micro*n_sd_x_n_sd  );
    I3p_109.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKu_I3p_109.Dimension(n_en_displ_x_n_sd ,n_en_displ_x_n_sd );
    I3p_110.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKuphi_I3p_110.Dimension(n_en_displ_x_n_sd ,n_en_micro*n_sd_x_n_sd  );
    I3p_111.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKu_I3p_111.Dimension(n_en_displ_x_n_sd ,n_en_displ_x_n_sd );
    I3p_112.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKu_I3p_112.Dimension(n_en_displ_x_n_sd ,n_en_displ_x_n_sd );
    I3p_113.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKu_I3p_113.Dimension(n_en_displ_x_n_sd ,n_en_displ_x_n_sd );
    I3p_114.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKuphi_I3p_114.Dimension(n_en_displ_x_n_sd ,n_en_micro*n_sd_x_n_sd  );
    I3p_115.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKu_I3p_115.Dimension(n_en_displ_x_n_sd ,n_en_displ_x_n_sd );
    I3p_116.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKuphi_I3p_116.Dimension(n_en_displ_x_n_sd ,n_en_micro*n_sd_x_n_sd  );
    I3p_117.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKu_I3p_117.Dimension(n_en_displ_x_n_sd ,n_en_displ_x_n_sd );
    I3p_118.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKuphi_I3p_118.Dimension(n_en_displ_x_n_sd ,n_en_micro*n_sd_x_n_sd  );
    I3p_119.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKu_I3p_119.Dimension(n_en_displ_x_n_sd ,n_en_displ_x_n_sd );
    I3p_120.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKu_I3p_120.Dimension(n_en_displ_x_n_sd ,n_en_displ_x_n_sd );
    I3p_121.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKu_I3p_121.Dimension(n_en_displ_x_n_sd ,n_en_displ_x_n_sd );
    I3p_122.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKuphi_I3p_122.Dimension(n_en_displ_x_n_sd ,n_en_micro*n_sd_x_n_sd  );
    I3p_123.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKu_I3p_123.Dimension(n_en_displ_x_n_sd ,n_en_displ_x_n_sd );
    I3p_124.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKuphi_I3p_124.Dimension(n_en_displ_x_n_sd ,n_en_micro*n_sd_x_n_sd  );
    I3p_125.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKu_I3p_125.Dimension(n_en_displ_x_n_sd ,n_en_displ_x_n_sd );
    I3p_126.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKuphi_I3p_126.Dimension(n_en_displ_x_n_sd ,n_en_micro*n_sd_x_n_sd  );
    I3p_127.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKu_I3p_127.Dimension(n_en_displ_x_n_sd ,n_en_displ_x_n_sd );
    I3p_128.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKu_I3p_128.Dimension(n_en_displ_x_n_sd ,n_en_displ_x_n_sd );
    I3p_129.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKu_I3p_129.Dimension(n_en_displ_x_n_sd ,n_en_displ_x_n_sd );
    I3p_130.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKuphi_I3p_130.Dimension(n_en_displ_x_n_sd ,n_en_micro*n_sd_x_n_sd  );
    I3p_131.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKu_I3p_131.Dimension(n_en_displ_x_n_sd ,n_en_displ_x_n_sd );
    I3p_132.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKuphi_I3p_132.Dimension(n_en_displ_x_n_sd ,n_en_micro*n_sd_x_n_sd  );
    I3p_133.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKu_I3p_133.Dimension(n_en_displ_x_n_sd ,n_en_displ_x_n_sd );
    I3p_134.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKuphi_I3p_134.Dimension(n_en_displ_x_n_sd ,n_en_micro*n_sd_x_n_sd  );
    I3p_135.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKu_I3p_135.Dimension(n_en_displ_x_n_sd ,n_en_displ_x_n_sd );
    I3p_136.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKu_I3p_136.Dimension(n_en_displ_x_n_sd ,n_en_displ_x_n_sd );
    I3p_137.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKu_I3p_137.Dimension(n_en_displ_x_n_sd ,n_en_displ_x_n_sd );
    I3p_138.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKuphi_I3p_138.Dimension(n_en_displ_x_n_sd ,n_en_micro*n_sd_x_n_sd  );
    I3p_139.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKu_I3p_139.Dimension(n_en_displ_x_n_sd ,n_en_displ_x_n_sd );
    I3p_140.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKuphi_I3p_140.Dimension(n_en_displ_x_n_sd ,n_en_micro*n_sd_x_n_sd  );
    I3p_141.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKu_I3p_141.Dimension(n_en_displ_x_n_sd ,n_en_displ_x_n_sd );
    I3p_142.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKuphi_I3p_142.Dimension(n_en_displ_x_n_sd ,n_en_micro*n_sd_x_n_sd  );


    I4e_1.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKu_I4e_1.Dimension(n_en_displ_x_n_sd ,n_en_displ_x_n_sd );
    I4p_2.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKu_I4p_2.Dimension(n_en_displ_x_n_sd ,n_en_displ_x_n_sd );
    I4p_3.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKu_I4p_3.Dimension(n_en_displ_x_n_sd ,n_en_displ_x_n_sd );
    I4p_4.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKu_I4p_4.Dimension(n_en_displ_x_n_sd ,n_en_displ_x_n_sd );
    I4p_5.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKu_I4p_5.Dimension(n_en_displ_x_n_sd ,n_en_displ_x_n_sd );
    I4p_6.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKu_I4p_6.Dimension(n_en_displ_x_n_sd ,n_en_displ_x_n_sd );
    I4p_7.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKu_I4p_7.Dimension(n_en_displ_x_n_sd ,n_en_displ_x_n_sd );
    I4p_8.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKuphi_I4p_8.Dimension(n_en_displ_x_n_sd ,n_en_micro*n_sd_x_n_sd  );
    I4p_9.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKuphi_I4p_9.Dimension(n_en_displ_x_n_sd ,n_en_micro*n_sd_x_n_sd  );
    I4p_10.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKuphi_I4p_10.Dimension(n_en_displ_x_n_sd ,n_en_micro*n_sd_x_n_sd  );
    I4p_11.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKu_I4p_11.Dimension(n_en_displ_x_n_sd ,n_en_displ_x_n_sd );
    I4p_12.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKu_I4p_12.Dimension(n_en_displ_x_n_sd ,n_en_displ_x_n_sd );
    I4p_13.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKu_I4p_13.Dimension(n_en_displ_x_n_sd ,n_en_displ_x_n_sd );
    I4p_14.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKuphi_I4p_14.Dimension(n_en_displ_x_n_sd ,n_en_micro*n_sd_x_n_sd  );
    I4p_15.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKu_I4p_15.Dimension(n_en_displ_x_n_sd ,n_en_displ_x_n_sd );
    I4p_16.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKuphi_I4p_16.Dimension(n_en_displ_x_n_sd ,n_en_micro*n_sd_x_n_sd  );
    I4p_17.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKu_I4p_17.Dimension(n_en_displ_x_n_sd ,n_en_displ_x_n_sd );
    I4p_18.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKuphi_I4p_18.Dimension(n_en_displ_x_n_sd ,n_en_micro*n_sd_x_n_sd  );


    IIJp_1.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKphiu_IIJp_1.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    IIJp_2.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKphiu_IIJp_2.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    IIJp_3.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKphiu_IIJp_3.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    IIJp_4.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKphiu_IIJp_4.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    IIJp_5.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKphiu_IIJp_5.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    IIJp_6.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKphiphi_IIJp_6.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    IIJp_7.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKphiphi_IIJp_7.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    IIJp_8.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKphiphi_IIJp_8.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    IIJp_9.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKphiu_IIJp_9.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    IIJp_10.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKphiu_IIJp_10.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    IIJp_11.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKphiu_IIJp_11.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    IIJp_12.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKphiphi_IIJp_12.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    IIJp_13.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKphiu_IIJp_13.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    IIJp_14.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKphiphi_IIJp_14.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    IIJp_15.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKphiu_IIJp_15.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    IIJp_16.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKphiphi_IIJp_16.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);

    II2e_1.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKphiu_II2e_1.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);

    II2p_2.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKphiu_II2p_2.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II2p_3.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKphiu_II2p_3.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II2p_4.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKphiu_II2p_4.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II2p_5.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKphiu_II2p_5.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II2p_6.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKphiu_II2p_6.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II2p_7.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKphiphi_II2p_7.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    II2p_8.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKphiphi_II2p_8.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    II2p_9.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKphiphi_II2p_9.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);

    /* Matrices from coupling*/

    II2p_10.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKphiu_II2p_10.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II2p_11.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKphiu_II2p_11.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II2p_12.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKphiu_II2p_12.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II2p_13.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKphiphi_II2p_13.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    II2p_14.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKphiu_II2p_14.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II2p_15.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKphiphi_II2p_15.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    II2p_16.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKphiu_II2p_16.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II2p_17.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKphiphi_II2p_17.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);


    II3e_1.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKphiu_II3e_1.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II3e_2.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKphiu_II3e_2.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II3e_3.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKphiu_II3e_3.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II3e_4.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKphiu_II3e_4.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II3e_5.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKphiu_II3e_5.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II3p_6.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKphiu_II3p_6.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II3p_7.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKphiu_II3p_7.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II3p_8.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKphiu_II3p_8.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II3p_9.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKphiu_II3p_9.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II3p_10.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKphiu_II3p_10.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II3p_11.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKphiu_II3p_11.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II3p_12.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKphiu_II3p_12.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II3p_13.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKphiu_II3p_13.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II3p_14.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKphiu_II3p_14.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II3p_15.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKphiu_II3p_15.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II3p_16.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKphiu_II3p_16.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II3p_17.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKphiu_II3p_17.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II3p_18.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKphiu_II3p_18.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II3p_19.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKphiu_II3p_19.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II3p_20.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKphiu_II3p_20.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II3p_21.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKphiu_II3p_21.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II3p_22.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKphiu_II3p_22.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II3p_23.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKphiu_II3p_23.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II3p_24.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKphiu_II3p_24.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II3p_25.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKphiu_II3p_25.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II3p_26.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKphiu_II3p_26.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II3p_27.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKphiu_II3p_27.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II3p_28.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKphiu_II3p_28.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II3p_29.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKphiu_II3p_29.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II3p_30.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKphiu_II3p_30.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II3e_31.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKphiphi_II3e_31.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    II3e_32.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKphiphi_II3e_32.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    II3e_33.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKphiphi_II3e_33.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    II3p_34.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKphiphi_II3p_34.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    II3p_35.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKphiphi_II3p_35.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    II3p_36.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKphiphi_II3p_36.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    II3p_37.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKphiphi_II3p_37.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    II3p_38.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKphiphi_II3p_38.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    II3p_39.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKphiphi_II3p_39.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    II3p_40.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKphiphi_II3p_40.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    II3p_41.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKphiphi_II3p_41.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    II3p_42.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKphiphi_II3p_42.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    II3p_43.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKphiphi_II3p_43.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    II3p_44.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKphiphi_II3p_44.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    II3p_45.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKphiphi_II3p_45.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    II3p_46.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKphiphi_II3p_46.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    II3p_47.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKphiphi_II3p_47.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    II3p_48.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKphiphi_II3p_48.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);

    /* Matrices from Del(delgammachi)*/

    II3p_49.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKphiu_II3p_49.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II3p_50.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKphiu_II3p_50.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II3p_51.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKphiu_II3p_51.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II3p_52.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKphiphi_II3p_52.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    II3p_53.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKphiu_II3p_53.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II3p_54.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKphiphi_II3p_54.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    II3p_55.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKphiu_II3p_55.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II3p_56.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKphiphi_II3p_56.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    II3p_57.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKphiu_II3p_57.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II3p_58.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKphiu_II3p_58.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II3p_59.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKphiu_II3p_59.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II3p_60.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKphiphi_II3p_60.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    II3p_61.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKphiu_II3p_61.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II3p_62.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKphiphi_II3p_62.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    II3p_63.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKphiu_II3p_63.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II3p_64.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKphiphi_II3p_64.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    II3p_65.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKphiu_II3p_65.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II3p_66.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKphiu_II3p_66.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II3p_67.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKphiu_II3p_67.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II3p_68.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKphiphi_II3p_68.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    II3p_69.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKphiu_II3p_69.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II3p_70.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKphiphi_II3p_70.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    II3p_71.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKphiu_II3p_71.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II3p_72.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKphiphi_II3p_72.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);

    /* Matrices from coupling */

    II3p_73.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKphiu_II3p_73.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II3p_74.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKphiu_II3p_74.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II3p_75.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKphiu_II3p_75.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II3p_76.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKphiphi_II3p_76.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    II3p_77.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKphiu_II3p_77.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II3p_78.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKphiphi_II3p_78.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    II3p_79.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKphiu_II3p_79.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II3p_80.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKphiphi_II3p_80.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    II3p_81.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKphiu_II3p_81.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II3p_82.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKphiu_II3p_82.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II3p_83.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKphiu_II3p_83.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II3p_84.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKphiphi_II3p_84.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    II3p_85.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKphiu_II3p_85.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II3p_86.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKphiphi_II3p_86.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    II3p_87.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKphiu_II3p_87.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II3p_88.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKphiphi_II3p_88.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    II3p_89.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKphiu_II3p_89.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II3p_90.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKphiu_II3p_90.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II3p_91.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKphiu_II3p_91.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II3p_92.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKphiphi_II3p_92.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    II3p_93.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKphiu_II3p_93.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II3p_94.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKphiphi_II3p_94.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    II3p_95.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKphiu_II3p_95.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II3p_96.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKphiphi_II3p_96.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    II3p_97.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKphiu_II3p_97.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II3p_98.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKphiu_II3p_98.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II3p_99.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKphiu_II3p_99.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II3p_100.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKphiphi_II3p_100.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    II3p_101.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKphiu_II3p_101.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II3p_102.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKphiphi_II3p_102.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    II3p_103.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKphiu_II3p_103.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II3p_104.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKphiphi_II3p_104.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    II3p_105.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKphiu_II3p_105.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II3p_106.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKphiu_II3p_106.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II3p_107.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKphiu_II3p_107.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II3p_108.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKphiphi_II3p_108.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    II3p_109.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKphiu_II3p_109.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II3p_110.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKphiphi_II3p_110.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    II3p_111.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKphiu_II3p_111.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II3p_112.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKphiphi_II3p_112.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    //
    II3p_113.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKphiu_II3p_113.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II3p_114.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKphiu_II3p_114.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II3p_115.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKphiu_II3p_115.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II3p_116.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKphiphi_II3p_116.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    II3p_117.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKphiu_II3p_117.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II3p_118.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKphiphi_II3p_118.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    II3p_119.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKphiu_II3p_119.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II3p_120.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKphiphi_II3p_120.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    //
    II3p_121.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKphiu_II3p_121.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II3p_122.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKphiu_II3p_122.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II3p_123.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKphiu_II3p_123.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II3p_124.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKphiphi_II3p_124.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    II3p_125.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKphiu_II3p_125.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II3p_126.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKphiphi_II3p_126.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    II3p_127.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKphiu_II3p_127.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II3p_128.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKphiphi_II3p_128.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    //
    II3p_129.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKphiu_II3p_129.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II3p_130.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKphiu_II3p_130.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II3p_131.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKphiu_II3p_131.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II3p_132.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKphiphi_II3p_132.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    II3p_133.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKphiu_II3p_133.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II3p_134.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKphiphi_II3p_134.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    II3p_135.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKphiu_II3p_135.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II3p_136.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKphiphi_II3p_136.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    //


    II4e_1.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKphiu_II4e_1.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II4p_2.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKphiu_II4p_2.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II4p_3.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKphiu_II4p_3.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II4p_4.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKphiu_II4p_4.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II4p_5.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKphiu_II4p_5.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II4p_6.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKphiu_II4p_6.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II4p_7.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKphiphi_II4p_7.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    II4p_8.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKphiphi_II4p_8.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    II4p_9.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKphiphi_II4p_9.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);

    /* Matrices from coupling*/

    II4p_10.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKphiu_II4p_10.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II4p_11.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKphiu_II4p_11.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II4p_12.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKphiu_II4p_12.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II4p_13.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKphiphi_II4p_13.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    II4p_14.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKphiu_II4p_14.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II4p_15.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKphiphi_II4p_15.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    II4p_16.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKphiu_II4p_16.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II4p_17.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    fKphiphi_II4p_17.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);



    /* Matrices from higher order couple stress tensor related terms */

    II5Jp_1.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II5Jp_1.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II5Jp_2.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II5Jp_2.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II5Jp_3.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II5Jp_3.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II5Jp_4.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II5Jp_4.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II5Jp_5.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II5Jp_5.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II5Jp_6.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiphi_II5Jp_6.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    II5Jp_7.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiphi_II5Jp_7.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    II5Jp_8.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiphi_II5Jp_8.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    II5Jp_9.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II5Jp_9.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II5Jp_10.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II5Jp_10.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II5Jp_11.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II5Jp_11.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II5Jp_12.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiphi_II5Jp_12.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    II5Jp_13.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II5Jp_13.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II5Jp_14.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiphi_II5Jp_14.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    II5Jp_15.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II5Jp_15.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II5Jp_16.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiphi_II5Jp_16.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);


    II6e_1.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II6e_1.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);

    II7e_1.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II7e_1.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);



    II7p_1.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II7p_1.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II7p_2.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II7p_2.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II7p_3.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II7p_3.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II7p_4.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II7p_4.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II7p_5.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II7p_5.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II7p_6.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiphi_II7p_6.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    II7p_7.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiphi_II7p_7.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    II7p_8.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiphi_II7p_8.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    II7p_9.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II7p_9.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II7p_10.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II7p_10.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II7p_11.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II7p_11.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II7p_12.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiphi_II7p_12.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    II7p_13.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II7p_13.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II7p_14.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiphi_II7p_14.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    II7p_15.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II7p_15.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II7p_16.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiphi_II7p_16.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);



    II8e_1.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II8e_1.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);



    II8p_1.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II8p_1.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II8p_2.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II8p_2.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II8p_3.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II8p_3.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II8p_4.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II8p_4.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II8p_5.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II8p_5.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II8p_6.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiphi_II8p_6.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    II8p_7.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiphi_II8p_7.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    II8p_8.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiphi_II8p_8.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    II8p_9.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II8p_9.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II8p_10.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II8p_10.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II8p_11.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II8p_11.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II8p_12.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiphi_II8p_12.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    II8p_13.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II8p_13.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II8p_14.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiphi_II8p_14.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    II8p_15.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II8p_15.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II8p_16.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiphi_II8p_16.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);


    /* Terms coming from Tau7 */

    II9e_1.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II9e_1.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);



    II9p_1.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II9p_1.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II9p_2.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II9p_2.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II9p_3.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II9p_3.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II9p_4.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II9p_4.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II9p_5.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II9p_5.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II9p_6.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiphi_II9p_6.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    II9p_7.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiphi_II9p_7.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    II9p_8.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiphi_II9p_8.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    II9p_9.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II9p_9.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II9p_10.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II9p_10.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II9p_11.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II9p_11.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II9p_12.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiphi_II9p_12.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    II9p_13.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II9p_13.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II9p_14.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiphi_II9p_14.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    II9p_15.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II9p_15.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II9p_16.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiphi_II9p_16.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);



    II10e_1.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd_x_n_sd);
    fKMphiphi_II10e_1.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);

    II10p_1.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II10p_1.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II10p_2.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II10p_2.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II10p_3.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II10p_3.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II10p_4.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II10p_4.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II10p_5.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II10p_5.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II10p_6.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiphi_II10p_6.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    II10p_7.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiphi_II10p_7.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    II10p_8.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiphi_II10p_8.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    II10p_9.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II10p_9.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II10p_10.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II10p_10.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II10p_11.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II10p_11.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II10p_12.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiphi_II10p_12.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    II10p_13.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II10p_13.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II10p_14.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiphi_II10p_14.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    II10p_15.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II10p_15.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II10p_16.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiphi_II10p_16.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);


    II11p_1.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II11p_1.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II11p_2.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II11p_2.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II11p_3.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II11p_3.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II11p_4.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II11p_4.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II11p_5.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II11p_5.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II11p_6.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiphi_II11p_6.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    II11p_7.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiphi_II11p_7.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    II11p_8.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiphi_II11p_8.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    II11p_9.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II11p_9.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II11p_10.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II11p_10.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II11p_11.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II11p_11.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II11p_12.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiphi_II11p_12.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    II11p_13.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II11p_13.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II11p_14.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiphi_II11p_14.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    II11p_15.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II11p_15.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II11p_16.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiphi_II11p_16.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);



    II12e_1.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiphi_II12e_1.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);

    II12p_1.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II12p_1.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II12p_2.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II12p_2.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II12p_3.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II12p_3.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II12p_4.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II12p_4.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II12p_5.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II12p_5.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II12p_6.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiphi_II12p_6.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    II12p_7.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiphi_II12p_7.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    II12p_8.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiphi_II12p_8.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    II12p_9.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II12p_9.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II12p_10.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II12p_10.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II12p_11.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II12p_11.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II12p_12.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiphi_II12p_12.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    II12p_13.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II12p_13.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II12p_14.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiphi_II12p_14.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    II12p_15.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II12p_15.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II12p_16.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiphi_II12p_16.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);

    II13e_1.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II13e_1.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    Temp_II14p.Dimension(n_sd,n_sd,n_sd);
    II14p_1.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II14p_1.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II14p_2.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II14p_2.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II14p_3.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II14p_3.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II14p_4.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II14p_4.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II14p_5.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II14p_5.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II14p_6.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiphi_II14p_6.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    II14p_7.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiphi_II14p_7.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    II14p_8.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiphi_II14p_8.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    II14p_9.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II14p_9.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II14p_10.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II14p_10.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II14p_11.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II14p_11.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II14p_12.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II14p_12.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II14p_13.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II14p_13.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II14p_14.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiphi_II14p_14.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    II14p_15.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiphi_II14p_15.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    II14p_16.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiphi_II14p_16.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);

    II15e_1.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiphi_II15e_1.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);

    Temp_II16p.Dimension(n_sd,n_sd,n_sd);
    II16p_1.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II16p_1.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II16p_2.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II16p_2.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II16p_3.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II16p_3.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II16p_4.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II16p_4.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II16p_5.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II16p_5.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II16p_6.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiphi_II16p_6.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    II16p_7.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiphi_II16p_7.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    II16p_8.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiphi_II16p_8.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    II16p_9.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II16p_9.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II16p_10.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II16p_10.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II16p_11.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II16p_11.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II16p_12.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II16p_12.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II16p_13.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II16p_13.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II16p_14.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiphi_II16p_14.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    II16p_15.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiphi_II16p_15.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    II16p_16.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiphi_II16p_16.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);

    Temp_II17p.Dimension(n_sd,n_sd,n_sd);
    II17p_1.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II17p_1.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II17p_2.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II17p_2.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II17p_3.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II17p_3.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II17p_4.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II17p_4.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II17p_5.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II17p_5.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II17p_6.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiphi_II17p_6.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    II17p_7.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiphi_II17p_7.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    II17p_8.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiphi_II17p_8.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    II17p_9.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II17p_9.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II17p_10.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II17p_10.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II17p_11.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II17p_11.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II17p_12.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II17p_12.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II17p_13.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II17p_13.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II17p_14.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiphi_II17p_14.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    II17p_15.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiphi_II17p_15.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    II17p_16.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiphi_II17p_16.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);

    Temp_II18p.Dimension(n_sd,n_sd,n_sd);
    II18p_1.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II18p_1.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II18p_2.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II18p_2.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II18p_3.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II18p_3.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II18p_4.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II18p_4.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II18p_5.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II18p_5.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II18p_6.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiphi_II18p_6.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    II18p_7.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiphi_II18p_7.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    II18p_8.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiphi_II18p_8.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    II18p_9.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II18p_9.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II18p_10.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II18p_10.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II18p_11.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II18p_11.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II18p_12.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II18p_12.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II18p_13.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II18p_13.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II18p_14.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiphi_II18p_14.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    II18p_15.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiphi_II18p_15.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    II18p_16.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiphi_II18p_16.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);

    Temp_II19p.Dimension(n_sd,n_sd,n_sd);
    II19p_1.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II19p_1.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II19p_2.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II19p_2.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II19p_3.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II19p_3.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II19p_4.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II19p_4.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II19p_5.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II19p_5.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II19p_6.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiphi_II19p_6.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    II19p_7.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiphi_II19p_7.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    II19p_8.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiphi_II19p_8.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    II19p_9.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II19p_9.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II19p_10.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II19p_10.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II19p_11.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II19p_11.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II19p_12.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II19p_12.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II19p_13.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II19p_13.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II19p_14.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiphi_II19p_14.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    II19p_15.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiphi_II19p_15.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    II19p_16.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiphi_II19p_16.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);

    Temp_II20p.Dimension(n_sd,n_sd,n_sd);
    II20p_1.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II20p_1.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II20p_2.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II20p_2.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II20p_3.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II20p_3.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II20p_4.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II20p_4.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II20p_5.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II20p_5.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II20p_6.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiphi_II20p_6.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    II20p_7.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiphi_II20p_7.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    II20p_8.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiphi_II20p_8.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    II20p_9.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II20p_9.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II20p_10.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II20p_10.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II20p_11.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II20p_11.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II20p_12.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II20p_12.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II20p_13.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II20p_13.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II20p_14.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiphi_II20p_14.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    II20p_15.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiphi_II20p_15.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    II20p_16.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiphi_II20p_16.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);


    Temp_II21p.Dimension(n_sd,n_sd,n_sd);
    II21e_1.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II21e_1.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II21p_1.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II21p_1.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II21p_2.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II21p_2.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II21p_3.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II21p_3.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II21p_4.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II21p_4.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II21p_5.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II21p_5.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II21p_6.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiphi_II21p_6.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    II21p_7.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiphi_II21p_7.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    II21p_8.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiphi_II21p_8.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    II21p_1a.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II21p_1a.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II21p_2a.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II21p_2a.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II21p_3a.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II21p_3a.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II21p_4a.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II21p_4a.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II21p_5a.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II21p_5a.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II21p_6a.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiphi_II21p_6a.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    II21p_7a.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiphi_II21p_7a.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    II21p_8a.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiphi_II21p_8a.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    II21p_9.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd_x_n_sd);
    fKMphiphi_II21p_9.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);


    II21p_10.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II21p_10.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II21p_11.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II21p_11.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II21p_12.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II21p_12.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II21p_13.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II21p_13.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II21p_14.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II21p_14.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II21p_15.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiphi_II21p_15.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    II21p_16.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiphi_II21p_16.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    II21p_17.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiphi_II21p_17.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    II21p_10a.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II21p_10a.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II21p_11a.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II21p_11a.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II21p_12a.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II21p_12a.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II21p_13a.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II21p_13a.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II21p_14a.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II21p_14a.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II21p_15a.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiphi_II21p_15a.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    II21p_16a.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiphi_II21p_16a.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    II21p_17a.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiphi_II21p_17a.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);

    II21p_18.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II21p_18.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II21p_19.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II21p_19.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II21p_20.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II21p_20.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II21p_21.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II21p_21.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II21p_22.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II21p_22.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II21p_23.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiphi_II21p_23.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    II21p_24.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiphi_II21p_24.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    II21p_25.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiphi_II21p_25.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    II21p_18a.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II21p_18a.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II21p_19a.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II21p_19a.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II21p_20a.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II21p_20a.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II21p_21a.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II21p_21a.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II21p_22a.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II21p_22a.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II21p_23a.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiphi_II21p_23a.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    II21p_24a.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiphi_II21p_24a.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    II21p_25a.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiphi_II21p_25a.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    II21p_26.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II21p_26.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);

    II21p_27.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II21p_27.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II21p_28.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II21p_28.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II21p_29.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II21p_29.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II21p_30.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II21p_30.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II21p_31.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II21p_31.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II21p_32.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiphi_II21p_32.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    II21p_33.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiphi_II21p_33.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    II21p_34.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiphi_II21p_34.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    II21p_27a.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
	fKMphiu_II21p_27a.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
	II21p_28a.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
	fKMphiu_II21p_28a.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
	II21p_29a.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
	fKMphiu_II21p_29a.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
	II21p_30a.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
	fKMphiu_II21p_30a.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
	II21p_31a.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
	fKMphiu_II21p_31a.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
	II21p_32a.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
	fKMphiphi_II21p_32a.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
	II21p_33a.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
	fKMphiphi_II21p_33a.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
	II21p_34a.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
	fKMphiphi_II21p_34a.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);

    II21p_35.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiphi_II21p_35.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);

    II21p_36.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II21p_36.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II21p_37.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II21p_37.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II21p_38.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II21p_38.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II21p_39.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II21p_39.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II21p_40.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II21p_40.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II21p_41.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiphi_II21p_41.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    II21p_42.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiphi_II21p_42.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    II21p_43.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiphi_II21p_43.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    II21p_36a.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II21p_36a.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II21p_37a.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II21p_37a.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II21p_38a.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II21p_38a.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II21p_39a.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II21p_39a.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II21p_40a.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II21p_40a.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II21p_41a.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiphi_II21p_41a.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    II21p_42a.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiphi_II21p_42a.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    II21p_43a.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiphi_II21p_43a.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);


    II21p_44.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II21p_44.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II21p_45.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II21p_45.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II21p_46.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II21p_46.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II21p_47.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II21p_47.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II21p_48.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II21p_48.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II21p_49.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiphi_II21p_49.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    II21p_50.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiphi_II21p_50.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    II21p_51.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiphi_II21p_51.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    II21p_44a.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II21p_44a.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II21p_45a.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II21p_45a.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II21p_46a.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II21p_46a.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II21p_47a.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II21p_47a.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II21p_48a.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II21p_48a.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II21p_49a.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiphi_II21p_49a.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    II21p_50a.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiphi_II21p_50a.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    II21p_51a.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiphi_II21p_51a.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);


    II21p_52.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II21p_52.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II21p_53.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II21p_53.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II21p_54.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II21p_54.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II21p_55.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II21p_55.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II21p_56.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II21p_56.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II21p_57.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiphi_II21p_57.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    II21p_58.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiphi_II21p_58.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    II21p_59.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiphi_II21p_59.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    II21p_52a.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II21p_52a.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II21p_53a.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II21p_53a.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II21p_54a.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II21p_54a.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II21p_55a.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II21p_55a.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II21p_56a.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II21p_56a.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II21p_57a.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiphi_II21p_57a.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    II21p_58a.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiphi_II21p_58a.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    II21p_59a.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiphi_II21p_59a.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);


    II21p_60.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II21p_60.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II21p_61.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II21p_61.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II21p_62.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II21p_62.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II21p_63.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II21p_63.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II21p_64.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II21p_64.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II21p_65.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiphi_II21p_65.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    II21p_66.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiphi_II21p_66.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    II21p_67.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiphi_II21p_67.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    II21p_60a.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II21p_60a.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II21p_61a.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II21p_61a.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II21p_62a.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II21p_62a.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II21p_63a.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II21p_63a.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II21p_64a.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II21p_64a.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II21p_65a.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiphi_II21p_65a.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    II21p_66a.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiphi_II21p_66a.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    II21p_67a.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiphi_II21p_67a.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);


    II21p_68.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II21p_68.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II21p_69.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II21p_69.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II21p_70.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II21p_70.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II21p_71.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II21p_71.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II21p_72.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II21p_72.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II21p_73.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiphi_II21p_73.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    II21p_74.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiphi_II21p_74.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    II21p_75.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiphi_II21p_75.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    II21p_68a.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II21p_68a.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II21p_69a.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II21p_69a.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II21p_70a.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II21p_70a.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II21p_71a.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II21p_71a.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II21p_72a.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiu_II21p_72a.Dimension(n_en_micro*n_sd_x_n_sd,n_en_displ_x_n_sd);
    II21p_73a.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiphi_II21p_73a.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    II21p_74a.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiphi_II21p_74a.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);
    II21p_75a.Dimension(n_sd_x_n_sd_x_n_sd,n_sd_x_n_sd);
    fKMphiphi_II21p_75a.Dimension(n_en_micro*n_sd_x_n_sd,n_en_micro*n_sd_x_n_sd);



    fCn1.Dimension(n_sd,n_sd);
    fCn1_inv.Dimension(n_sd,n_sd);
    fdGdS_n1.Dimension(n_sd,n_sd);
    Predictor.Dimension(n_sd,n_sd);
    fFp_tr.Dimension(n_sd,n_sd);

    fFp.Dimension(n_sd,n_sd);
    fFp_n.Dimension(n_sd,n_sd);
    fFp_n_inverse.Dimension(n_sd,n_sd);
    fFe.Dimension(n_sd,n_sd);
    fFe_tr.Dimension(n_sd,n_sd);

    /* Micromorphic additions */
    fChie_tr.Dimension(n_sd,n_sd);
    fChie.Dimension(n_sd,n_sd);
    fChip.Dimension(n_sd,n_sd);
    fChip_inverse.Dimension(n_sd,n_sd);
    fChip_n.Dimension(n_sd,n_sd);
    fChip_n_inverse.Dimension(n_sd,n_sd);

    Elastic_MicroStnTensor_tr.Dimension(n_sd,n_sd);
    Elastic_MicroStnTensor.Dimension(n_sd,n_sd);
    PSIe_tr.Dimension(n_sd,n_sd);
    PSIe.Dimension(n_sd,n_sd);



    //SPK.Dimension(n_sd,n_sd);//changed from fSPK to SPK no need this anymore!
    devSPK.Dimension(n_sd,n_sd);
    dSdDelgamma.Dimension(n_sd,n_sd);
    dSdDelgammachi.Dimension(n_sd,n_sd);
    ddevSdDelgammachi.Dimension(n_sd,n_sd);
    ddevSdDelgamma.Dimension(n_sd,n_sd);
    dEedDelgamma.Dimension(n_sd,n_sd);
    dEpsilonedDelgamma.Dimension(n_sd,n_sd);

    // For line search algortihm
    dSds.Dimension(n_sd,n_sd);
    ddevSds.Dimension(n_sd,n_sd);
    dEeds.Dimension(n_sd,n_sd);
    dEpsiloneds.Dimension(n_sd,n_sd);
    dFeds.Dimension(n_sd,n_sd);
    // For line search algortihm for combined plasticity
    dChipds.Dimension(n_sd,n_sd);
    dChieds.Dimension(n_sd,n_sd);
    dSIGMA_Sds.Dimension(n_sd,n_sd);
    ddevSIGMA_Sds.Dimension(n_sd,n_sd);



    //////////////////////////

    fA1.Dimension(n_sd,n_sd);
    fA2.Dimension(n_sd,n_sd);
    fA4.Dimension(n_sd,n_sd);
    fN1.Dimension(n_sd,n_sd);
    fD1.Dimension(n_sd,n_sd);


    fFp_IPs.Dimension (fNumIP_displ,n_sd_x_n_sd);
    fFp_Elements_IPs.Dimension (NumElements(),fNumIP_displ*n_sd_x_n_sd);
    fFp_Elements_IPs=0.0;
  /*  fFp_Elements_IPs(0,0)=1.0;
    fFp_Elements_IPs(1,1)=1.0;
    fFp_Elements_IPs(2,2)=1.0;*/
    fFp_n_IPs.Dimension (fNumIP_displ,n_sd_x_n_sd);
    fFp_n_Elements_IPs.Dimension (NumElements(),fNumIP_displ*n_sd_x_n_sd);
    fFp_n_Elements_IPs=0.0;

    fFeT.Dimension(n_sd,n_sd);
    fFeT=0.0;


    fChip_IPs.Dimension (fNumIP_displ,n_sd_x_n_sd);
    fChip_Elements_IPs.Dimension (NumElements(),fNumIP_displ*n_sd_x_n_sd);
    fChip_Elements_IPs=0.0;
    fChip_n_IPs.Dimension (fNumIP_displ,n_sd_x_n_sd);
    fChip_n_Elements_IPs.Dimension (NumElements(),fNumIP_displ*n_sd_x_n_sd);
    fChip_n_Elements_IPs=0.0;



    dFedDelgamma.Dimension(n_sd,n_sd);

    fdGdS_transpose.Dimension(n_sd,n_sd);
    fdGdS.Dimension(n_sd,n_sd);
    fdGdS_IPs.Dimension(fNumIP_displ,n_sd_x_n_sd);
    fdGdS_Elements_IPs.Dimension(NumElements(),fNumIP_displ*n_sd_x_n_sd);
    fdGdS_Elements_IPs=0.0;

    fdGdS_tr_transpose.Dimension(n_sd,n_sd);
    fdGdS_tr_transpose = 0.0;


    fdGdS_n.Dimension(n_sd,n_sd);
    fdGdS_n_transpose.Dimension(n_sd,n_sd);
    fdGdS_n_IPs.Dimension(fNumIP_displ,n_sd_x_n_sd);
    fdGdS_n_Elements_IPs.Dimension (NumElements(),fNumIP_displ*n_sd_x_n_sd);
    fdGdS_n_Elements_IPs=0.0;

    fdGchidSIGMA_tr.Dimension(n_sd,n_sd);
    fdGchidSIGMA_tr_transpose.Dimension(n_sd,n_sd);
    fdGchidSIGMA_tr= 0.0;
    fdGchidSIGMA_tr_transpose = 0.0;

    fdGdS_n.Dimension(n_sd,n_sd);
   	fdGdS_n_transpose.Dimension(n_sd,n_sd);
  	fdGdS_n_IPs.Dimension(fNumIP_displ,n_sd_x_n_sd);
   	fdGdS_n_Elements_IPs.Dimension (NumElements(),fNumIP_displ*n_sd_x_n_sd);
  	fdGdS_n_Elements_IPs=0.0;

 ///////////////////////Used For the current Configuration Plasticity/////////////////////////
    fdGdCauchy_Stress.Dimension(n_sd,n_sd);
    fdGdCauchy_Stress_IPs.Dimension(fNumIP_displ,n_sd_x_n_sd);
    fdGdCauchy_Stress_Elements_IPs.Dimension(NumElements(),fNumIP_displ*n_sd_x_n_sd);
    fdGdCauchy_Stress_Elements_IPs = 0.0;
    fdGdCauchy_Stress = 0.0;

    fdGdCauchy_Stress_n.Dimension(n_sd,n_sd);
    fdGdCauchy_Stress_n_IPs.Dimension(fNumIP_displ,n_sd_x_n_sd);
    fdGdCauchy_Stress_n_Elements_IPs.Dimension(NumElements(),fNumIP_displ*n_sd_x_n_sd);
    fdGdCauchy_Stress_n_Elements_IPs = 0.0;
    fdGdCauchy_Stress_n = 0.0;

    fCauchy_stress_tensor_current_IP.Dimension(n_sd,n_sd);
    fCauchy_stress_IPs.Dimension(fNumIP_displ,n_sd_x_n_sd);
    fCauchy_stress_Elements_IPs.Dimension(NumElements(),fNumIP_displ*n_sd_x_n_sd);
    fCauchy_stress_Elements_IPs = 0.0;
    fCauchy_stress_tensor_current_IP = 0.0;

    fCauchy_stress_tensor_current_IP_tr.Dimension(n_sd,n_sd);
    fCauchy_stress_tensor_current_IP_tr = 0.0;


    dev_Cauchy_stress_tr.Dimension(n_sd,n_sd);
    fdGdCauchy_Stress_tr.Dimension(n_sd,n_sd);
    fdGdS_tr.Dimension(n_sd,n_sd);
    fFe_Inverse.Dimension(n_sd,n_sd);

    dev_Cauchy_stress_n.Dimension(n_sd,n_sd);
    Predictor_stress_terms.Dimension(n_sd,n_sd);
    Corrector_stress_terms.Dimension(n_sd,n_sd);
    fdGdCauchy_Stress_tr_transpose.Dimension(n_sd,n_sd);
    mean_Cauchy_stress_tr = 0.0;
    dev_Cauchy_stress_tr = 0.0;
    Cauchy_Stress_Norm_tr = 0.0;
    fdGdCauchy_Stress_tr = 0.0;
    fdGdS_tr = 0.0;
    mean_Cauchy_stress_n = 0.0;
    dev_Cauchy_stress_n = 0.0;
    Predictor_stress_terms = 0.0;
    Corrector_stress_terms = 0.0;
    fdGdCauchy_Stress_tr_transpose = 0.0;
    Predictor_mean_stress_terms = 0.0;
    Corrector_mean_stress_terms = 0.0;
    fTemp_matrix_one_x_one = 0.0;
    fFe_Inverse = 0.0;

    fCauchy_stress_tensor_current_n_IP.Dimension(n_sd,n_sd);
    fdev_Cauchy_stress_tensor_current_IP.Dimension(n_sd,n_sd);
    fCauchy_stress_n_IPs.Dimension(fNumIP_displ,n_sd_x_n_sd);
    fCauchy_stress_Elements_n_IPs.Dimension(NumElements(),fNumIP_displ*n_sd_x_n_sd);
    fCauchy_stress_Elements_n_IPs = 0.0;
    fCauchy_stress_tensor_current_n_IP = 0.0;
    fdev_Cauchy_stress_tensor_current_IP = 0.0;

    fDeformation_Gradient.Dimension(n_sd,n_sd);
    fDeformation_Gradient_IPs.Dimension(fNumIP_displ,n_sd_x_n_sd);
    fDeformation_Gradient_Elements_IPs.Dimension(NumElements(),fNumIP_displ*n_sd_x_n_sd);


    fDeformation_Gradient_n.Dimension(n_sd,n_sd);
    fDeformation_Gradient_n_IPs.Dimension(fNumIP_displ,n_sd_x_n_sd);
    fDeformation_Gradient_n_Elements_IPs.Dimension(NumElements(),fNumIP_displ*n_sd_x_n_sd);
    fDeformation_Gradient_n_Elements_IPs = 0.0;

    fVelocity_Gradient_current_IP.Dimension(n_sd,n_sd);
    fVelocity_Gradient_current_IP_transpose.Dimension(n_sd,n_sd);
    fVelocity_Gradient_current_IP = 0.0;



    fTemp_Runge_Kutta_K1_nsd_x_nsd.Dimension(n_sd,n_sd);
    fTemp_Runge_Kutta_K2_nsd_x_nsd.Dimension(n_sd,n_sd);
    fTemp_Runge_Kutta_K3_nsd_x_nsd.Dimension(n_sd,n_sd);
    fTemp_Runge_Kutta_K4_nsd_x_nsd.Dimension(n_sd,n_sd);

    fTemp_Runge_Kutta_K1_nsd_x_nsd = 0.0;
    fTemp_Runge_Kutta_K2_nsd_x_nsd = 0.0;
    fTemp_Runge_Kutta_K3_nsd_x_nsd = 0.0;
    fTemp_Runge_Kutta_K4_nsd_x_nsd = 0.0;

    fCauchy_stress_tensor_current_IP_from_piola_stress.Dimension(n_sd,n_sd);
    fCauchy_stress_tensor_current_IP_from_piola_stress = 0.0;

    fLeft_Cauchy_Green_tensor_current_IP.Dimension(n_sd,n_sd);
    fLeft_Cauchy_Green_tensor_current_IP_transpose.Dimension(n_sd,n_sd);
    fLeft_Cauchy_Green_tensor_current_IP_Inverse.Dimension(n_sd,n_sd);


    fLeft_Cauchy_Green_tensor_current_IP = 0.0;
    fLeft_Cauchy_Green_tensor_current_IP_transpose = 0.0;
    fLeft_Cauchy_Green_tensor_current_IP_Trace = 0.0;
    fLeft_Cauchy_Green_tensor_current_IP_Inverse = 0.0;

    fRight_Elastic_Cauchy_Green_tensor_Inverse.Dimension(n_sd,n_sd);
    fRight_Elastic_Cauchy_Green_tensor_Inverse = 0.0;


///////////////////////////////////////////////////////////////////////////////////////////////
    fdFYdS.Dimension(n_sd,n_sd);
    fdFYdS_n.Dimension(n_sd,n_sd);
    fdFYdS_IPs.Dimension(fNumIP_displ,n_sd_x_n_sd);
    fdFYdS_n_IPs.Dimension(fNumIP_displ,n_sd_x_n_sd);


    fdFYdS_Elements_IPs.Dimension(NumElements(),fNumIP_displ*n_sd_x_n_sd);
    fdFYdS_n_Elements_IPs.Dimension(NumElements(),fNumIP_displ*n_sd_x_n_sd);
    fdFYdS_Elements_IPs=0.0;
    fdFYdS_n_Elements_IPs=0.0;

    fCe_IPs.Dimension(fNumIP_displ,n_sd_x_n_sd);
    fCe_Elements_IPs.Dimension(NumElements(),fNumIP_displ*n_sd_x_n_sd);


    fCe_inverse.Dimension(n_sd,n_sd);

    fCe.Dimension(n_sd,n_sd);
    fCe_n.Dimension(n_sd,n_sd);
    fCe_n_inverse.Dimension(n_sd,n_sd);
    fCe_n_IPs.Dimension (fNumIP_displ,n_sd_x_n_sd);
    fCe_n_Elements_IPs.Dimension (NumElements(),fNumIP_displ*n_sd_x_n_sd);



    /***************************************************/
    /*****Micro-scale plasticity matrices **************/
    /***************************************************/
    devSIGMA_S_tr.Dimension(n_sd,n_sd);

    dChipdDelgamma.Dimension(n_sd,n_sd);
    dChiedDelgamma.Dimension(n_sd,n_sd);
    dChipdDelgammachi.Dimension(n_sd,n_sd);
    dChiedDelgammachi.Dimension(n_sd,n_sd);
    dEpsilonedDelgammachi.Dimension(n_sd,n_sd);
    LocalConsistentTangent.Dimension(2,2);
    LocalConsistentTangentInverse.Dimension(2,2);
    LocalRHSVector.Dimension(2);
    fdelDelgammaVector.Dimension(2);
    Temp_vec1.Dimension(2);
    Temp_vec2.Dimension(2);
    Temp_vec3.Dimension(2);
    Temp_vec4.Dimension(2);


    fCchie.Dimension(n_sd,n_sd);
    fCchie_tr.Dimension(n_sd,n_sd);
    //fCchie_inverse.Dimension(n_sd,n_sd);
    fCchie_IPs.Dimension (fNumIP_displ,n_sd_x_n_sd);
    fCchie_Elements_IPs.Dimension (NumElements(),fNumIP_displ*n_sd_x_n_sd);
    fCchie_Elements_IPs=0.0;

    fCchie_n.Dimension(n_sd,n_sd);
    fCchie_n_inverse.Dimension(n_sd,n_sd);
    fCchie_n_IPs.Dimension (fNumIP_displ,n_sd_x_n_sd);
    fCchie_n_Elements_IPs.Dimension (NumElements(),fNumIP_displ*n_sd_x_n_sd);
    fCchie_n_Elements_IPs=0.0;


    PSIe.Dimension(n_sd,n_sd);
    PSIe_tr.Dimension(n_sd,n_sd);
    PSIe_inverse.Dimension(n_sd,n_sd);
    PSIe_IPs.Dimension (fNumIP_displ,n_sd_x_n_sd);
    PSIe_Elements_IPs.Dimension (NumElements(),fNumIP_displ*n_sd_x_n_sd);
    PSIe_Elements_IPs=0.0;


    PSIe.Dimension(n_sd,n_sd);
/*    PSIe_tr.Dimension(n_sd,n_sd);
    PSIe_inverse.Dimension(n_sd,n_sd);
    PSIe_IPs.Dimension (fNumIP_displ,n_sd_x_n_sd);
    PSIe_Elements_IPs.Dimension (NumElements(),fNumIP_displ*n_sd_x_n_sd);
    PSIe_Elements_IPs=0.0;
*/
    PSIe_n_inverseT.Dimension(n_sd,n_sd);
    PSIe_n.Dimension(n_sd,n_sd);
    PSIe_n_inverse.Dimension(n_sd,n_sd);
    PSIe_n_IPs.Dimension (fNumIP_displ,n_sd_x_n_sd);
    PSIe_n_Elements_IPs.Dimension (NumElements(),fNumIP_displ*n_sd_x_n_sd);
    PSIe_n_Elements_IPs=0.0;


    psi.Dimension(n_sd,n_sd);
    eps.Dimension(n_sd,n_sd);



    fdFYchidSIGMA.Dimension(n_sd,n_sd);
    fdFYchidSIGMA_n_IPs.Dimension(n_sd,n_sd);
    fdFYchidSIGMA_IPs.Dimension(fNumIP_displ,n_sd_x_n_sd);
    fdFYchidSIGMA_n_IPs.Dimension(fNumIP_displ,n_sd_x_n_sd);
    fdFYchidSIGMA_Elements_IPs.Dimension(NumElements(),fNumIP_displ*n_sd_x_n_sd);
    fdFYchidSIGMA_n_Elements_IPs.Dimension(NumElements(),fNumIP_displ*n_sd_x_n_sd);
    fdFYchidSIGMA_n_Elements_IPs=0.0;

    fdGchidSIGMA.Dimension(n_sd,n_sd);
    fdGchidSIGMA_IPs.Dimension(fNumIP_displ,n_sd_x_n_sd);
    fdGchidSIGMA_Elements_IPs.Dimension(NumElements(),fNumIP_displ*n_sd_x_n_sd);
    fdGchidSIGMA_Elements_IPs=0.0;


    fdGchidSIGMA_n.Dimension(n_sd,n_sd);
    fdGchidSIGMA_n_IPs.Dimension (fNumIP_displ,n_sd_x_n_sd);
    fdGchidSIGMA_n_Elements_IPs.Dimension (NumElements(),fNumIP_displ*n_sd_x_n_sd);
    fdGchidSIGMA_n_Elements_IPs=0.0;



    fcG_chi.Dimension(n_sd);
    fcG_chi_n.Dimension(n_sd);
    PGchivar.Dimension(n_sd);
    PGchivar_tr.Dimension(n_sd);
    dPGchivardDelgammaGchi.Dimension(n_sd);
    dcGchidDelgammaGchi.Dimension(n_sd);
    DLXp.Dimension(n_sd,n_sd);
    DLp.Dimension(n_sd,n_sd);



    dGGchidMKLM.Dimension(n_sd,n_sd,n_sd);
    dGGchidMKLM=0.0;
    dGGchidMKLM_IPs.Dimension(fNumIP_displ,n_sd_x_n_sd_x_n_sd);
    dGGchidMKLM_Element_IPs.Dimension(NumElements(),fNumIP_displ*n_sd_x_n_sd_x_n_sd);
    dGGchidMKLM_Element_IPs=0.0;


    dGGchidMKLM_n.Dimension(n_sd,n_sd,n_sd);
    dGGchidMKLM_n_IPs.Dimension(fNumIP_displ,n_sd_x_n_sd_x_n_sd);
    dGGchidMKLM_n_Element_IPs.Dimension(NumElements(),fNumIP_displ*n_sd_x_n_sd_x_n_sd);
    dGGchidMKLM_n=0.0;
    dGGchidMKLM_n_IPs=0.0;


    dGXpdDelgammaGchi.Dimension(n_sd,n_sd,n_sd);
    dGXedDelgammaGchi.Dimension(n_sd,n_sd,n_sd);
    dGammaedDelgammaGchi.Dimension(n_sd,n_sd,n_sd);
    dMKLMdDelgammaGchi.Dimension(n_sd,n_sd,n_sd);
    ddevMKLMdDelgammaGchi.Dimension(n_sd,n_sd,n_sd);





    ///////////////////Dimensionalizing the Matrices for the trial directional plasticity/////////////////////
    I2p_trial_1.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    I2p_trial_2.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    I2p_trial_3.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    I2p_trial_4.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    I2p_trial_5.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);

    I3p_trial_1.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    I3p_trial_2.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    I3p_trial_3.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    I3p_trial_4.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    I3p_trial_5.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);


    I4p_trial_1.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    I4p_trial_2.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    I4p_trial_3.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    I4p_trial_4.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    I4p_trial_5.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    I4p_trial_6.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    I4p_trial_7.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    I4p_trial_8.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    I4p_trial_9.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    I4p_trial_10.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    I4p_trial_11.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    I4p_trial_12.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    I4p_trial_13.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    I4p_trial_14.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    I4p_trial_15.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);

    I5p_trial_1.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    I5p_trial_2.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    I5p_trial_3.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    I5p_trial_4.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    I5p_trial_5.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);

    I6p_trial_1.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    I6p_trial_2.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    I7p_trial_1.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    I7p_trial_2.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    I8p_trial_1.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    I8p_trial_2.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    I9p_trial_1.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    I9p_trial_2.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    I10p_trial_1.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    I10p_trial_2.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    I11p_trial_1.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    I11p_trial_2.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);

    I12p_trial_1.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    I12p_trial_2.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    I12p_trial_3.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    I12p_trial_4.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    I12p_trial_5.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    I12p_trial_6.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    I12p_trial_7.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    I12p_trial_8.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    I12p_trial_9.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    I12p_trial_10.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);


    I13p_trial_1.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    I13p_trial_2.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    I13p_trial_3.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    I13p_trial_4.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    I13p_trial_5.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    I13p_trial_6.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    I13p_trial_7.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    I13p_trial_8.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    I13p_trial_9.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    I13p_trial_10.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);


    I14p_trial_1.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    I14p_trial_2.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    I14p_trial_3.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    I14p_trial_4.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    I14p_trial_5.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    I14p_trial_6.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    I14p_trial_7.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    I14p_trial_8.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    I14p_trial_9.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    I14p_trial_10.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);


    I15p_trial_1.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    I15p_trial_2.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    I15p_trial_3.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    I15p_trial_4.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    I15p_trial_5.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    I15p_trial_6.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    I15p_trial_7.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    I15p_trial_8.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    I15p_trial_9.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    I15p_trial_10.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);


    I16p_trial_1.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    I16p_trial_2.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    I16p_trial_3.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    I16p_trial_4.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    I16p_trial_5.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    I16p_trial_6.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    I16p_trial_7.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    I16p_trial_8.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    I16p_trial_9.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    I16p_trial_10.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);


    I17p_trial_1.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    I17p_trial_2.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    I17p_trial_3.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    I17p_trial_4.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    I17p_trial_5.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    I17p_trial_6.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    I17p_trial_7.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    I17p_trial_8.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    I17p_trial_9.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);
    I17p_trial_10.Dimension(n_sd_x_n_sd,n_sd_x_n_sd);


    fKu_I2p_trial_1.Dimension(n_en_displ_x_n_sd,n_en_displ_x_n_sd);
    fKu_I2p_trial_2.Dimension(n_en_displ_x_n_sd,n_en_displ_x_n_sd);
    fKu_I2p_trial_3.Dimension(n_en_displ_x_n_sd,n_en_displ_x_n_sd);
    fKu_I2p_trial_4.Dimension(n_en_displ_x_n_sd,n_en_displ_x_n_sd);
    fKu_I2p_trial_5.Dimension(n_en_displ_x_n_sd,n_en_displ_x_n_sd);

    fKu_I3p_trial_1.Dimension(n_en_displ_x_n_sd,n_en_displ_x_n_sd);
    fKu_I3p_trial_2.Dimension(n_en_displ_x_n_sd,n_en_displ_x_n_sd);
    fKu_I3p_trial_3.Dimension(n_en_displ_x_n_sd,n_en_displ_x_n_sd);
    fKu_I3p_trial_4.Dimension(n_en_displ_x_n_sd,n_en_displ_x_n_sd);
    fKu_I3p_trial_5.Dimension(n_en_displ_x_n_sd,n_en_displ_x_n_sd);

    fKu_I4p_trial_1.Dimension(n_en_displ_x_n_sd,n_en_displ_x_n_sd);
    fKu_I4p_trial_2.Dimension(n_en_displ_x_n_sd,n_en_displ_x_n_sd);
    fKu_I4p_trial_3.Dimension(n_en_displ_x_n_sd,n_en_displ_x_n_sd);
    fKu_I4p_trial_4.Dimension(n_en_displ_x_n_sd,n_en_displ_x_n_sd);
    fKu_I4p_trial_5.Dimension(n_en_displ_x_n_sd,n_en_displ_x_n_sd);
    fKu_I4p_trial_6.Dimension(n_en_displ_x_n_sd,n_en_displ_x_n_sd);
    fKu_I4p_trial_7.Dimension(n_en_displ_x_n_sd,n_en_displ_x_n_sd);
    fKu_I4p_trial_8.Dimension(n_en_displ_x_n_sd,n_en_displ_x_n_sd);
    fKu_I4p_trial_9.Dimension(n_en_displ_x_n_sd,n_en_displ_x_n_sd);
    fKu_I4p_trial_10.Dimension(n_en_displ_x_n_sd,n_en_displ_x_n_sd);
    fKu_I4p_trial_11.Dimension(n_en_displ_x_n_sd,n_en_displ_x_n_sd);
    fKu_I4p_trial_12.Dimension(n_en_displ_x_n_sd,n_en_displ_x_n_sd);
    fKu_I4p_trial_13.Dimension(n_en_displ_x_n_sd,n_en_displ_x_n_sd);
    fKu_I4p_trial_14.Dimension(n_en_displ_x_n_sd,n_en_displ_x_n_sd);
    fKu_I4p_trial_15.Dimension(n_en_displ_x_n_sd,n_en_displ_x_n_sd);

    fKu_I5p_trial_1.Dimension(n_en_displ_x_n_sd,n_en_displ_x_n_sd);
    fKu_I5p_trial_2.Dimension(n_en_displ_x_n_sd,n_en_displ_x_n_sd);
    fKu_I5p_trial_3.Dimension(n_en_displ_x_n_sd,n_en_displ_x_n_sd);
    fKu_I5p_trial_4.Dimension(n_en_displ_x_n_sd,n_en_displ_x_n_sd);
    fKu_I5p_trial_5.Dimension(n_en_displ_x_n_sd,n_en_displ_x_n_sd);

    fKu_I6p_trial_1.Dimension(n_en_displ_x_n_sd,n_en_displ_x_n_sd);
    fKu_I6p_trial_2.Dimension(n_en_displ_x_n_sd,n_en_displ_x_n_sd);
    fKu_I7p_trial_1.Dimension(n_en_displ_x_n_sd,n_en_displ_x_n_sd);
    fKu_I7p_trial_2.Dimension(n_en_displ_x_n_sd,n_en_displ_x_n_sd);
    fKu_I8p_trial_1.Dimension(n_en_displ_x_n_sd,n_en_displ_x_n_sd);
    fKu_I8p_trial_2.Dimension(n_en_displ_x_n_sd,n_en_displ_x_n_sd);
    fKu_I9p_trial_1.Dimension(n_en_displ_x_n_sd,n_en_displ_x_n_sd);
    fKu_I9p_trial_2.Dimension(n_en_displ_x_n_sd,n_en_displ_x_n_sd);
    fKu_I10p_trial_1.Dimension(n_en_displ_x_n_sd,n_en_displ_x_n_sd);
    fKu_I10p_trial_2.Dimension(n_en_displ_x_n_sd,n_en_displ_x_n_sd);
    fKu_I11p_trial_1.Dimension(n_en_displ_x_n_sd,n_en_displ_x_n_sd);
    fKu_I11p_trial_2.Dimension(n_en_displ_x_n_sd,n_en_displ_x_n_sd);

    I_temp_DelGamma_dGdStrial_1.Dimension(n_sd,n_sd);
    I_temp_DelGamma_dGdStrial_2.Dimension(n_sd,n_sd);

    fKu_I12p_trial_1.Dimension(n_en_displ_x_n_sd,n_en_displ_x_n_sd);
     fKuphi_I12p_trial_2.Dimension(n_en_displ_x_n_sd ,n_en_micro*n_sd_x_n_sd);
     fKu_I12p_trial_3.Dimension(n_en_displ_x_n_sd,n_en_displ_x_n_sd);
     fKuphi_I12p_trial_4.Dimension(n_en_displ_x_n_sd ,n_en_micro*n_sd_x_n_sd);
     fKu_I12p_trial_5.Dimension(n_en_displ_x_n_sd,n_en_displ_x_n_sd);
     fKuphi_I12p_trial_6.Dimension(n_en_displ_x_n_sd ,n_en_micro*n_sd_x_n_sd);
     fKu_I12p_trial_7.Dimension(n_en_displ_x_n_sd,n_en_displ_x_n_sd);
     fKuphi_I12p_trial_8.Dimension(n_en_displ_x_n_sd ,n_en_micro*n_sd_x_n_sd);
     fKu_I12p_trial_9.Dimension(n_en_displ_x_n_sd,n_en_displ_x_n_sd);
     fKuphi_I12p_trial_10.Dimension(n_en_displ_x_n_sd ,n_en_micro*n_sd_x_n_sd);

     fKu_I13p_trial_1.Dimension(n_en_displ_x_n_sd,n_en_displ_x_n_sd);
     fKuphi_I13p_trial_2.Dimension(n_en_displ_x_n_sd ,n_en_micro*n_sd_x_n_sd);
     fKu_I13p_trial_3.Dimension(n_en_displ_x_n_sd,n_en_displ_x_n_sd);
     fKuphi_I13p_trial_4.Dimension(n_en_displ_x_n_sd ,n_en_micro*n_sd_x_n_sd);
     fKu_I13p_trial_5.Dimension(n_en_displ_x_n_sd,n_en_displ_x_n_sd);
     fKuphi_I13p_trial_6.Dimension(n_en_displ_x_n_sd ,n_en_micro*n_sd_x_n_sd);
     fKu_I13p_trial_7.Dimension(n_en_displ_x_n_sd,n_en_displ_x_n_sd);
     fKuphi_I13p_trial_8.Dimension(n_en_displ_x_n_sd ,n_en_micro*n_sd_x_n_sd);
     fKu_I13p_trial_9.Dimension(n_en_displ_x_n_sd,n_en_displ_x_n_sd);
     fKuphi_I13p_trial_10.Dimension(n_en_displ_x_n_sd ,n_en_micro*n_sd_x_n_sd);


     fKu_I14p_trial_1.Dimension(n_en_displ_x_n_sd,n_en_displ_x_n_sd);
     fKuphi_I14p_trial_2.Dimension(n_en_displ_x_n_sd ,n_en_micro*n_sd_x_n_sd);
     fKu_I14p_trial_3.Dimension(n_en_displ_x_n_sd,n_en_displ_x_n_sd);
     fKuphi_I14p_trial_4.Dimension(n_en_displ_x_n_sd ,n_en_micro*n_sd_x_n_sd);
     fKu_I14p_trial_5.Dimension(n_en_displ_x_n_sd,n_en_displ_x_n_sd);
     fKuphi_I14p_trial_6.Dimension(n_en_displ_x_n_sd ,n_en_micro*n_sd_x_n_sd);
     fKu_I14p_trial_7.Dimension(n_en_displ_x_n_sd,n_en_displ_x_n_sd);
     fKuphi_I14p_trial_8.Dimension(n_en_displ_x_n_sd ,n_en_micro*n_sd_x_n_sd);
     fKu_I14p_trial_9.Dimension(n_en_displ_x_n_sd,n_en_displ_x_n_sd);
     fKuphi_I14p_trial_10.Dimension(n_en_displ_x_n_sd ,n_en_micro*n_sd_x_n_sd);

     fKu_I15p_trial_1.Dimension(n_en_displ_x_n_sd,n_en_displ_x_n_sd);
     fKuphi_I15p_trial_2.Dimension(n_en_displ_x_n_sd ,n_en_micro*n_sd_x_n_sd);
     fKu_I15p_trial_3.Dimension(n_en_displ_x_n_sd,n_en_displ_x_n_sd);
     fKuphi_I15p_trial_4.Dimension(n_en_displ_x_n_sd ,n_en_micro*n_sd_x_n_sd);
     fKu_I15p_trial_5.Dimension(n_en_displ_x_n_sd,n_en_displ_x_n_sd);
     fKuphi_I15p_trial_6.Dimension(n_en_displ_x_n_sd ,n_en_micro*n_sd_x_n_sd);
     fKu_I15p_trial_7.Dimension(n_en_displ_x_n_sd,n_en_displ_x_n_sd);
     fKuphi_I15p_trial_8.Dimension(n_en_displ_x_n_sd ,n_en_micro*n_sd_x_n_sd);
     fKu_I15p_trial_9.Dimension(n_en_displ_x_n_sd,n_en_displ_x_n_sd);
     fKuphi_I15p_trial_10.Dimension(n_en_displ_x_n_sd ,n_en_micro*n_sd_x_n_sd);

     fKu_I16p_trial_1.Dimension(n_en_displ_x_n_sd,n_en_displ_x_n_sd);
     fKuphi_I16p_trial_2.Dimension(n_en_displ_x_n_sd ,n_en_micro*n_sd_x_n_sd);
     fKu_I16p_trial_3.Dimension(n_en_displ_x_n_sd,n_en_displ_x_n_sd);
     fKuphi_I16p_trial_4.Dimension(n_en_displ_x_n_sd ,n_en_micro*n_sd_x_n_sd);
     fKu_I16p_trial_5.Dimension(n_en_displ_x_n_sd,n_en_displ_x_n_sd);
     fKuphi_I16p_trial_6.Dimension(n_en_displ_x_n_sd ,n_en_micro*n_sd_x_n_sd);
     fKu_I16p_trial_7.Dimension(n_en_displ_x_n_sd,n_en_displ_x_n_sd);
     fKuphi_I16p_trial_8.Dimension(n_en_displ_x_n_sd ,n_en_micro*n_sd_x_n_sd);
     fKu_I16p_trial_9.Dimension(n_en_displ_x_n_sd,n_en_displ_x_n_sd);
     fKuphi_I16p_trial_10.Dimension(n_en_displ_x_n_sd ,n_en_micro*n_sd_x_n_sd);

     fKu_I17p_trial_1.Dimension(n_en_displ_x_n_sd,n_en_displ_x_n_sd);
     fKuphi_I17p_trial_2.Dimension(n_en_displ_x_n_sd ,n_en_micro*n_sd_x_n_sd);
     fKu_I17p_trial_3.Dimension(n_en_displ_x_n_sd,n_en_displ_x_n_sd);
     fKuphi_I17p_trial_4.Dimension(n_en_displ_x_n_sd ,n_en_micro*n_sd_x_n_sd);
     fKu_I17p_trial_5.Dimension(n_en_displ_x_n_sd,n_en_displ_x_n_sd);
     fKuphi_I17p_trial_6.Dimension(n_en_displ_x_n_sd ,n_en_micro*n_sd_x_n_sd);
     fKu_I17p_trial_7.Dimension(n_en_displ_x_n_sd,n_en_displ_x_n_sd);
     fKuphi_I17p_trial_8.Dimension(n_en_displ_x_n_sd ,n_en_micro*n_sd_x_n_sd);
     fKu_I17p_trial_9.Dimension(n_en_displ_x_n_sd,n_en_displ_x_n_sd);
     fKuphi_I17p_trial_10.Dimension(n_en_displ_x_n_sd ,n_en_micro*n_sd_x_n_sd);

    //////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////// Cap Model Dimensionalization //////////////////
     Kappa_nablachi_n.Dimension(n_sd,1);
     dfKappa_nablachidDelgammanablachi.Dimension(n_sd,1);
     Kappa_nablachi.Dimension(n_sd,1);
     dFphinablachidKappanablachi.Dimension(n_sd,1);
     dFYnablachidKappanablachi.Dimension(n_sd,1);

     dFpsinablachidKappanablachi.Dimension(n_sd,1);
     dGnablachidKappanablachi.Dimension(n_sd,1);
     dGnablachidcohesion_nablachi.Dimension(n_sd,1);
     fDelKappa_nablachi.Dimension(n_sd,1);


//////////////////////////////////////////////////////////////////////

    /***************************************************/
    /***************************************************/
    /***************************************************/

    dArrayT fTemp2_ArrayT_values;
    fTemp2_ArrayT_values.Dimension(9);
    for (int i=0; i<9; i++) fTemp2_ArrayT_values[i] = 0;
    fTemp2_ArrayT_values[0]=1.0;
    fTemp2_ArrayT_values[4]=1.0;
    fTemp2_ArrayT_values[8]=1.0;

    fRight_Cauchy_Green_tensor_tr.Dimension(n_sd,n_sd);
    fSPK_tr.Dimension(n_sd,n_sd);
    fdevSPK_tr.Dimension(n_sd,n_sd);
    //SIGMA_S.Dimension(n_sd,n_sd);//no need this anymore because fSIGMA_S is changed to SIGMA_S
    SIGMA_S_tr.Dimension(n_sd,n_sd);



    flocalnewTangent.Dimension(11,11);
    flocalnewTangentInverse.Dimension(11,11);
    flocalRHS.Dimension(11);
    flocalSol.Dimension(11);

/*    int row=0;
    for(int i=0;i<3;i++)
    {
        fIdentity_matrix(i,i)=1.0;
        for(int j=0;j<3;j++)
            {
                //Fn_ar[row]=fIdentity_matrix(i,j);
                //FnInv_ar[row]=fIdentity_matrix(i,j);
                //ChiN_ar[row]=fIdentity_matrix(i,j);
                row++;
            }
    }*/
    if(iConstitutiveModelType==2)
    {
    while (NextElement())
    {
        int e,l;
        e = CurrElementNumber();
        for (l=0; l < fNumIP_displ; l++)
        {
            Fn_ar_IPs.SetRow(l,Temp_Identity_array);
            FnInv_ar_IPs.SetRow(l,Temp_Identity_array);
            ChiN_ar_IPs.SetRow(l,Temp_Identity_array);
        }
        Fn_ar_IPs_el.SetRow(e,Fn_ar_IPs);
        FnInv_ar_IPs_el.SetRow(e,FnInv_ar_IPs);
        ChiN_ar_IPs_el_n.SetRow(e,ChiN_ar_IPs);
     }
   }
/*    ChiN_ar_IPs_el= ChiN_ar_IPs_el_n;
    FInv_ar_IPs_el=FnInv_ar_IPs_el_n;
    F_ar_IPs_el=Fn_ar_IPs_el_n;*///no need for this because this is initializing and _el parts are cal_ed in gauss loop
//here is take parameter list function

    fShapeDisplGrad_t_Transpose.Dimension (n_en_displ_x_n_sd, n_sd_x_n_sd);
    fShapeMicro_row_matrix.Dimension (1,n_en_micro);


    fEulerian_strain_tensor_current_IP.Dimension (n_sd,n_sd);
    fCauchy_stress_tensor_current_IP.Dimension (n_sd,n_sd);
    //
    fDisplacements_current_IPs.Dimension(n_sd);
    fEulerian_strain_IPs.Dimension (fNumIP_displ,n_sd_x_n_sd);


   //
 //   fDisplacement_IPs.Dimension(fNumIP_displ,knumdispl);
    fTemp_nine_values.Dimension(9);
    fTemp_six_values.Dimension(6);
    fEulerian_strain_Elements_IPs.Dimension (NumElements(),fNumIP_displ*n_sd_x_n_sd);




   // if(iConstitutiveModelType==1 && iConstitutiveModelType==2 )
   // {
   // fState_variables_IPs.Dimension (fNumIP_displ,knum_d_state);
   // fState_variables.Dimension (knum_d_state);
   // fState_variables_Elements_IPs.Dimension (NumElements(),fNumIP_displ*knum_d_state);
   // }
   // fDisplacement_Element_IPs.Dimension(NumElements(),fNumIP_displ*knumdispl);



    // if(iConstitutiveModelType==3)
    // {
     fState_variables_IPs.Dimension (fNumIP_displ,kNUM_FMATERIAL_STATE_TERMS);
     fState_variables_IPs=0.0;
     fState_variables_Elements_IPs.Dimension (NumElements(),fNumIP_displ*kNUM_FMATERIAL_STATE_TERMS);
     fState_variables_Elements_IPs=0.0;
     fState_variables_n_IPs.Dimension (fNumIP_displ,kNUM_FMATERIAL_STATE_TERMS);
     fState_variables_n_IPs=0.0;
     fState_variables_n_Elements_IPs.Dimension (NumElements(),fNumIP_displ*kNUM_FMATERIAL_STATE_TERMS);
     fState_variables_n_Elements_IPs=0.0;
    //}

    fIdentity_matrix=0.0;
    fIdentity_matrix(0,0)=1.0;
    fIdentity_matrix(1,1)=1.0;
    fIdentity_matrix(2,2)=1.0;
   // fCe_n=fIdentity_matrix;
     Beta=-1.0;
     Aphi=2*sqrt(6)*cos(fMaterial_Params[kFphi])/(3+Beta*sin(fMaterial_Params[kFphi]));
     Bphi=2*sqrt(6)*sin(fMaterial_Params[kFphi])/(3+Beta*sin(fMaterial_Params[kFphi]));
     Apsi=2*sqrt(6)*cos(fMaterial_Params[kDpsi])/(3+Beta*sin(fMaterial_Params[kDpsi]));
     Bpsi=2*sqrt(6)*sin(fMaterial_Params[kDpsi])/(3+Beta*sin(fMaterial_Params[kDpsi]));


    //fdGdS_n.SetToScaled(Bpsi*1/3,fIdentity_matrix);// When I turned this on, it caused non-homogenous stress and gamma results in column example.
     fdGdS_n=0.0;

     Aphi_chi=2*sqrt(6)*cos(fMaterial_Params[kFphi_chi])/(3+Beta*sin(fMaterial_Params[kFphi_chi]));
     Bphi_chi=2*sqrt(6)*sin(fMaterial_Params[kFphi_chi])/(3+Beta*sin(fMaterial_Params[kFphi_chi]));
     Apsi_chi=2*sqrt(6)*cos(fMaterial_Params[kDpsi_chi])/(3+Beta*sin(fMaterial_Params[kDpsi_chi]));
     Bpsi_chi=2*sqrt(6)*sin(fMaterial_Params[kDpsi_chi])/(3+Beta*sin(fMaterial_Params[kDpsi_chi]));

     Aphi_nablachi=2*sqrt(6)*cos(fMaterial_Params[kFphi_nablachi])/(3+Beta*sin(fMaterial_Params[kFphi_nablachi]));
     Bphi_nablachi=2*sqrt(6)*sin(fMaterial_Params[kFphi_nablachi])/(3+Beta*sin(fMaterial_Params[kFphi_nablachi]));
     // Form the cohesion and dilation angle related terms in Plastic potential function
     Apsi_nablachi=2*sqrt(6)*cos(fMaterial_Params[kDpsi_nablachi])/(3+Beta*sin(fMaterial_Params[kDpsi_nablachi] ));
     Bpsi_nablachi=2*sqrt(6)*sin(fMaterial_Params[kDpsi_nablachi])/(3+Beta*sin(fMaterial_Params[kDpsi_nablachi] ));

     fdGnablachidMKLM_n = 0.0;
     //AGphi_chi=2*sqrt(6)*cos(fMaterial_Params[kFGphi_chi])/(3+Beta*sin(fMaterial_Params[kFGphi_chi]));
     //BGphi_chi=2*sqrt(6)*sin(fMaterial_Params[kFGphi_chi])/(3+Beta*sin(fMaterial_Params[kFGphi_chi]));
     //AGpsi_chi=2*sqrt(6)*cos(fMaterial_Params[kDGpsi_chi])/(3+Beta*sin(fMaterial_Params[kDGpsi_chi]));
     //BGpsi_chi=2*sqrt(6)*sin(fMaterial_Params[kDGpsi_chi])/(3+Beta*sin(fMaterial_Params[kDGpsi_chi]));




//    if(iConstitutiveModelType==3)
 //   {

     Top();

     while (NextElement())
     {

         int e,l;
         e = CurrElementNumber();

         for (l=0; l < fNumIP_displ; l++)
         {

             fState_variables_n_Elements_IPs(e,l*kNUM_FMATERIAL_STATE_TERMS+kc)
             =fMaterial_Params[kc0];
             fState_variables_n_Elements_IPs(e,l*kNUM_FMATERIAL_STATE_TERMS+kc_current_configuration)
             =fMaterial_Params[kc0];
             fState_variables_n_Elements_IPs(e,l*kNUM_FMATERIAL_STATE_TERMS+kc_chi)
             =fMaterial_Params[kc0_chi];
             fState_variables_n_Elements_IPs(e,l*kNUM_FMATERIAL_STATE_TERMS+kc_nablachi0)
             =fMaterial_Params[kc0_nablachi];
             fState_variables_n_Elements_IPs(e,l*kNUM_FMATERIAL_STATE_TERMS+kc_nablachi1)
             =fMaterial_Params[kc1_nablachi];
             fState_variables_n_Elements_IPs(e,l*kNUM_FMATERIAL_STATE_TERMS+kc_nablachi2)
             =fMaterial_Params[kc2_nablachi];

             fState_variables_n_Elements_IPs(e,l*kNUM_FMATERIAL_STATE_TERMS+Kappa)
             =fMaterial_Params[kKappa0];
             fState_variables_n_Elements_IPs(e,l*kNUM_FMATERIAL_STATE_TERMS+Kappa_chi)
             =fMaterial_Params[kKappa0_chi];
             fState_variables_n_Elements_IPs(e,l*kNUM_FMATERIAL_STATE_TERMS+Kappa_nablachi0)
             =fMaterial_Params[kKappa0_nablachi];
             fState_variables_n_Elements_IPs(e,l*kNUM_FMATERIAL_STATE_TERMS+Kappa_nablachi1)
             =fMaterial_Params[kKappa1_nablachi];
             fState_variables_n_Elements_IPs(e,l*kNUM_FMATERIAL_STATE_TERMS+Kappa_nablachi2)
             =fMaterial_Params[kKappa2_nablachi];

             /*fState_variables_n_Elements_IPs(e,l*kNUM_FMATERIAL_STATE_TERMS+kGc_chi1)
             =fMaterial_Params[kGc0_chi1];// Micro Gradient Pl.
             fState_variables_n_Elements_IPs(e,l*kNUM_FMATERIAL_STATE_TERMS+kGc_chi2)
             =fMaterial_Params[kGc0_chi2];// Micro Gradient Pl.
             fState_variables_n_Elements_IPs(e,l*kNUM_FMATERIAL_STATE_TERMS+kGc_chi3)
             =fMaterial_Params[kGc0_chi3];// Micro Gradient Pl.*/

             //fState_variables_n_Elements_IPs(e,l*kNUM_FMATERIAL_STATE_TERMS+khkappa)=0.0;
             if (fMaterial_Params[kCapped_Model_Flag] == 0)
             {
				 fState_variables_n_Elements_IPs(e,l*kNUM_FMATERIAL_STATE_TERMS+khc)=Apsi;
				 fState_variables_n_Elements_IPs(e,l*kNUM_FMATERIAL_STATE_TERMS+khc_chi)=Apsi_chi;
				 fState_variables_n_Elements_IPs(e,l*kNUM_FMATERIAL_STATE_TERMS+khc_nablachi)=Apsi_nablachi;
             }

             if (fMaterial_Params[kCapped_Model_Flag] == 1)
             {
                 fState_variables_n_Elements_IPs(e,l*kNUM_FMATERIAL_STATE_TERMS+khc)=0;
                 fState_variables_n_Elements_IPs(e,l*kNUM_FMATERIAL_STATE_TERMS+khc_chi)=0;
                 fState_variables_n_Elements_IPs(e,l*kNUM_FMATERIAL_STATE_TERMS+khc_nablachi)=0;
             }

             //fState_variables_n_Elements_IPs(e,l*kNUM_FMATERIAL_STATE_TERMS+khGc_chi)=AGpsi_chi;// Micro Gradient Pl.

             fState_variables_n_Elements_IPs(e,l*kNUM_FMATERIAL_STATE_TERMS+kDelgamma)=0.0;
             fState_variables_n_Elements_IPs(e,l*kNUM_FMATERIAL_STATE_TERMS+kDelgammachi)=0.0;
             //fState_variables_n_Elements_IPs(e,l*kNUM_FMATERIAL_STATE_TERMS+kDelgammaGchi)=0.0;// Micro Gradient Pl.
             fState_variables_n_Elements_IPs(e,l*kNUM_FMATERIAL_STATE_TERMS+ktrSigma)=0.0;
             fState_variables_n_Elements_IPs(e,l*kNUM_FMATERIAL_STATE_TERMS+kSigma_inv)=0.0;
             fState_variables_n_Elements_IPs(e,l*kNUM_FMATERIAL_STATE_TERMS+ktrRel)=0.0;
             fState_variables_n_Elements_IPs(e,l*kNUM_FMATERIAL_STATE_TERMS+kRel_inv)=0.0;
             fState_variables_n_Elements_IPs(e,l*kNUM_FMATERIAL_STATE_TERMS+kinvtrM)=0.0;
             fState_variables_n_Elements_IPs(e,l*kNUM_FMATERIAL_STATE_TERMS+kinvdevM)=0.0;
             fState_variables_n_Elements_IPs(e,l*kNUM_FMATERIAL_STATE_TERMS+kinvPhi)=0.0;
             fState_variables_n_Elements_IPs(e,l*kNUM_FMATERIAL_STATE_TERMS+kinvGPhi)=0.0;
             fState_variables_n_Elements_IPs(e,l*kNUM_FMATERIAL_STATE_TERMS+ktreps)=0.0;
             fState_variables_n_Elements_IPs(e,l*kNUM_FMATERIAL_STATE_TERMS+kdeveps)=0.0;
             fState_variables_n_Elements_IPs(e,l*kNUM_FMATERIAL_STATE_TERMS+kinvtrgammastn)=0.0;
             fState_variables_n_Elements_IPs(e,l*kNUM_FMATERIAL_STATE_TERMS+kinvdevgammastn)=0.0;

             fFp_n_IPs.SetRow(l,fIdentity_matrix);//(Fp)n
             fCe_n_IPs.SetRow(l,fIdentity_matrix);//(Ce)n
             fdGdS_n_IPs.SetRow(l,fdGdS_n);//

             fdGdCauchy_Stress_n_IPs.SetRow(l,fdGdCauchy_Stress_n);//
             fCauchy_stress_n_IPs.SetRow(l,fCauchy_stress_tensor_current_n_IP);//
             fDeformation_Gradient_n_IPs.SetRow(l,fIdentity_matrix);//


             fChip_n_IPs.SetRow(l,fIdentity_matrix);//(Xp)n
             fCchie_n_IPs.SetRow(l,fIdentity_matrix);//(Cxe)n
             PSIe_n_IPs.SetRow(l,fIdentity_matrix);//(PSIe)n
             fdGchidSIGMA_n_IPs.SetRow(l,fdGchidSIGMA_n);//
             GXp_n_IPs.SetRow(l,GXp_n);//
             GAMMAe_n_IPs.SetRow(l,GAMMAe_n);
             dGnablachidMKLM_n_IPs.SetRow(l,fdGnablachidMKLM_n);

             fMeKLM_n_IPs.SetRow(l,fMeKLM_n);
             SPK_n_IPs.SetRow(l,SPK_n);
             SIGMA_S_n_IPs.SetRow(l,SIGMA_S_n);
             SIGMA_n_IPs.SetRow(l,SIGMA_n);

             Elastic_LagrangianStn_n_IPs.SetRow(l,Elastic_LagrangianStn_n);
             Elastic_MicroStnTensor_n_IPs.SetRow(l,Elastic_MicroStnTensor_n);

         }
         fFp_n_Elements_IPs.SetRow(e,fFp_n_IPs);
         fCe_n_Elements_IPs.SetRow(e,fCe_n_IPs);
         fdGdS_n_Elements_IPs.SetRow(e,fdGdS_n_IPs);
         fdGdCauchy_Stress_n_Elements_IPs.SetRow(e,fdGdCauchy_Stress_n_IPs);
         fCauchy_stress_Elements_n_IPs.SetRow(e,fCauchy_stress_n_IPs);
         fDeformation_Gradient_n_Elements_IPs.SetRow(e,fDeformation_Gradient_n_IPs);


         fChip_n_Elements_IPs.SetRow(e,fChip_n_IPs);
         fCchie_n_Elements_IPs.SetRow(e,fCchie_n_IPs);
         PSIe_n_Elements_IPs.SetRow(e,PSIe_n_IPs);
         fdGchidSIGMA_n_Elements_IPs.SetRow(e,fdGchidSIGMA_n_IPs);
         GXp_n_Elements_IPs.SetRow(e,GXp_n_IPs);
         dGnablachidMKLM_Element_n_IPs.SetRow(e,dGnablachidMKLM_n_IPs);
         GAMMAe_n_Elements_IPs.SetRow(e,GAMMAe_n_IPs);

         fMeKLM_n_Elements_IPs.SetRow(e,fMeKLM_n_IPs);
         SPK_n_Elements_IPs.SetRow(e,SPK_n_IPs);
         SIGMA_S_n_Elements_IPs.SetRow(e,SIGMA_S_n_IPs);
         SIGMA_n_Elements_IPs.SetRow(e,SIGMA_n_IPs);

         Elastic_LagrangianStn_n_Elements_IPs.SetRow(e,Elastic_LagrangianStn_n_IPs);
         Elastic_MicroStnTensor_n_Elements_IPs.SetRow(e,Elastic_MicroStnTensor_n_IPs);

     }
     fFp_Elements_IPs = fFp_n_Elements_IPs;
     fCe_Elements_IPs =  fCe_n_Elements_IPs;
     fdGdS_Elements_IPs = fdGdS_n_Elements_IPs;
     fdGdCauchy_Stress_Elements_IPs = fdGdCauchy_Stress_n_Elements_IPs;
     fCauchy_stress_Elements_IPs = fCauchy_stress_Elements_n_IPs;
     fDeformation_Gradient_Elements_IPs = fDeformation_Gradient_n_Elements_IPs;

     fdFYdS_Elements_IPs = fdFYdS_n_Elements_IPs;
     fChip_Elements_IPs = fChip_n_Elements_IPs;
     fCchie_Elements_IPs=fCchie_n_Elements_IPs;
     PSIe_Elements_IPs=PSIe_n_Elements_IPs;
     fdFYchidSIGMA_Elements_IPs = fdFYchidSIGMA_n_Elements_IPs;
     fdGchidSIGMA_Elements_IPs = fdGchidSIGMA_n_Elements_IPs;
     GXp_Elements_IPs=GXp_n_Elements_IPs;
     fState_variables_Elements_IPs=fState_variables_n_Elements_IPs;
     dGnablachidMKLM_Element_IPs = dGnablachidMKLM_Element_n_IPs;
     GAMMAe_Elements_IPs=GAMMAe_n_Elements_IPs;

     fMeKLM_Elements_IPs = fMeKLM_n_Elements_IPs;
     SPK_Elements_IPs = SPK_n_Elements_IPs;
     SIGMA_S_Elements_IPs = SIGMA_S_n_Elements_IPs;
     SIGMA_Elements_IPs = SIGMA_n_Elements_IPs;

     Elastic_MicroStnTensor_Elements_IPs = Elastic_MicroStnTensor_n_Elements_IPs;
     Elastic_LagrangianStn_Elements_IPs = Elastic_LagrangianStn_n_Elements_IPs;


     //   }



    ///////////////////////////////////////////////////////////////////////////
    /////////////DIMENSIONALIZE MICROMORPHIC MATRICES FINISH HERE FOR 3D CASE//////////////
    ///////////////////////////////////////////////////////////////////////////




    u_dotdot_column_matrix.Dimension (n_en_displ_x_n_sd,1);
    u_dot_column_matrix.Dimension (n_en_displ_x_n_sd,1);
    u_dot_column_matrix_Transpose.Dimension (1, n_en_displ_x_n_sd);


    /* streams */
    ofstreamT& out = ElementSupport().Output();

    /* storage for integration point strain, stress, and ISVs*/
    fIPVariable.Dimension (n_el, fNumIP_displ*(knumstrain+knumstress+knum_d_state));
    //fIPVariable.Dimension (n_el, fNumIP_micro*(knumstrain+knumstress+knum_d_state));
    fIPVariable = 0.0;

    /* allocate storage for nodal forces */
    //fForces_at_Node.Dimension ( n_sd );

    /* extract natural boundary conditions */
    TakeNaturalBC(list);

    /* setup output file and format */
    outputPrecision = 10;
    outputFileWidth = outputPrecision + 8;
    fs_micromorph3D_out.open("fs_micromorph3D.info");
//   fs_micromorph3D_outMn.open("fs_micromorph3DMn.info");
}


/* information about subordinate parameter lists */
void FSMicromorphic2_3DT::DefineSubs(SubListT& sub_list) const
{
  //            cout<<"CHECK POINT-24"<<endl;
    /* inherited */
    ElementBaseT::DefineSubs(sub_list);

    /* element blocks */
    sub_list.AddSub("micromorphic2_FS_3D_element_block");

    /* tractions */
    sub_list.AddSub("micromorphic2_FS_3D_natural_bc", ParameterListT::Any);
}



/* return the description of the given inline subordinate parameter list */
void FSMicromorphic2_3DT::DefineInlineSub(const StringT& name, ParameterListT::ListOrderT& order,
                       SubListT& sub_lists) const
{
   //              cout<<"CHECK POINT-25"<<endl;
    ElementBaseT::DefineInlineSub(name, order, sub_lists);
}



/* a pointer to the ParameterInterfaceT of the given subordinate */
ParameterInterfaceT* FSMicromorphic2_3DT::NewSub(const StringT& name) const
{
   //           cout<<"CHECK POINT-26"<<endl;
    /* create non-const this */
    FSMicromorphic2_3DT* non_const_this = const_cast<FSMicromorphic2_3DT*>(this);

    if (name == "micromorphic2_FS_3D_natural_bc") /* traction bc */
    {
        ParameterContainerT* natural_bc = new ParameterContainerT(name);

        natural_bc->AddParameter(ParameterT::Word, "side_set_ID");
        natural_bc->AddParameter(ParameterT::Integer, "schedule");

        ParameterT coord_sys(ParameterT::Enumeration, "coordinate_system");
        coord_sys.AddEnumeration("global", Traction_CardT::kCartesian);
        coord_sys.AddEnumeration( "local", Traction_CardT::kLocal);
        coord_sys.SetDefault(Traction_CardT::kCartesian);
        natural_bc->AddParameter(coord_sys);

        natural_bc->AddSub("DoubleList", ParameterListT::OnePlus);

        return natural_bc;
    }
    else if (name == "micromorphic2_FS_3D_element_block")
    {
        ParameterContainerT* element_block = new ParameterContainerT(name);
        element_block->AddSub("block_ID_list");
        return element_block;
    }
    else /* inherited */
    return ElementBaseT::NewSub(name);
}



//##################################################################################
//###### Traction B.C. Methods (Cut and Paste from ContinuumElementT) ##############
//##################################################################################

//---------------------------------------------------------------------

//---------------------------------------------------------------------

/* update traction BC data */
void FSMicromorphic2_3DT::SetTractionBC(void)
{
//NOTE: With the possibility of variable global node numbers and
//      and equations, we assume as little as possible here with
//      regard to the validity of the node/equation numbers, requiring
//      only that NodesX in the element cards has the correct global
//      node numbers.
      //        cout<<"CHECK POINT-27"<<endl;
    /* dimensions */
    int ndof = NumDOF();

    /* echo values */
    iArray2DT nd_tmp, eq_tmp;
    for (int i = 0; i < fTractionList.Length(); i++)
    {
    Traction_CardT& BC_card = fTractionList[i];

    /* traction element/facet */
    int elem, facet;
    BC_card.Destination(elem, facet);

    /* set global node numbers */
    const iArrayT& loc_nodes = BC_card.LocalNodeNumbers();
    int nnd = loc_nodes.Length();

    iArrayT& nodes = BC_card.Nodes();
    nodes.Dimension(nnd);
    nodes.Collect(loc_nodes, fElementCards[elem].NodesX());

    /* set global equation numbers */
    iArrayT& eqnos = BC_card.Eqnos();
    eqnos.Dimension(ndof*nnd);

    /* get from node manager */
    nd_tmp.Set(1, nnd, nodes.Pointer());
    eq_tmp.Set(1, ndof*nnd, eqnos.Pointer());
    fDispl->SetLocalEqnos(nd_tmp, eq_tmp);
    }

    /* set flag */
    fTractionBCSet = 1;
}



/* extract natural boundary condition information */
void FSMicromorphic2_3DT::TakeNaturalBC(const ParameterListT& list)
{
  //             cout<<"CHECK POINT-28"<<endl;
    const char caller[] = "FSMicromorphic2_3DT::TakeTractionBC";

    int num_natural_bc = list.NumLists("micromorphic2_FS_3D_natural_bc");
    if (num_natural_bc > 0)
    {
    /* model manager */
    ModelManagerT& model = ElementSupport().ModelManager();

    /* temp space */
    ArrayT<StringT> block_ID(num_natural_bc);
    ArrayT<iArray2DT> localsides(num_natural_bc);
    iArrayT LTf(num_natural_bc);
    ArrayT<Traction_CardT::CoordSystemT> coord_sys(num_natural_bc);
    ArrayT<dArray2DT> values(num_natural_bc);

    /* nodes on element facets */
    iArrayT num_facet_nodes;
    fShapes_displ->NumNodesOnFacets(num_facet_nodes);

    /* loop over natural BC's */
    int tot_num_sides = 0;
    for (int i = 0; i < num_natural_bc; i++)
    {
        const ParameterListT& natural_bc = list.GetList("micromorphic2_FS_3D_natural_bc", i);

        /* side set */
        const StringT& ss_ID = natural_bc.GetParameter("side_set_ID");
        localsides[i] = model.SideSet(ss_ID);
        int num_sides = localsides[i].MajorDim();
        tot_num_sides += num_sides;
        if (num_sides > 0)
        {
        block_ID[i] = model.SideSetGroupID(ss_ID);
        LTf[i] = natural_bc.GetParameter("schedule");
        coord_sys[i] = Traction_CardT::int2CoordSystemT(natural_bc.GetParameter("coordinate_system"));

        /* switch to elements numbering within the group */
        iArray2DT& side_set = localsides[i];
        iArrayT elems(num_sides);
        side_set.ColumnCopy(0, elems);
        BlockToGroupElementNumbers(elems, block_ID[i]);
        side_set.SetColumn(0, elems);

        /* all facets in set must have the same number of nodes */
        int num_nodes = num_facet_nodes[side_set(0,1)];
        for (int f = 0; f < num_sides; f++)
            if (num_facet_nodes[side_set(f,1)] != num_nodes)
            ExceptionT::BadInputValue(caller, "faces side set \"%s\" have different numbers of nodes",
                          ss_ID.Pointer());

        /* read traction nodal values */
        dArray2DT& nodal_values = values[i];
        nodal_values.Dimension(num_nodes, NumDOF());
        int num_traction_vectors = natural_bc.NumLists("DoubleList");
        if (num_traction_vectors != 1 && num_traction_vectors != num_nodes)
            ExceptionT::GeneralFail(caller, "expecting 1 or %d vectors not %d",
                        num_nodes, num_traction_vectors);

        /* constant over the face */
        if (num_traction_vectors == 1) {
            const ParameterListT& traction_vector = natural_bc.GetList("DoubleList");
            int dim = traction_vector.NumLists("Double");
            if (dim != NumDOF())
            ExceptionT::GeneralFail(caller, "expecting traction vector length %d not %d",
                        NumDOF(), dim);

            /* same for all face nodes */
            for (int f = 0; f < NumDOF(); f++) {
            double t = traction_vector.GetList("Double", f).GetParameter("value");
            nodal_values.SetColumn(f, t);
            }
        }
        else
        {
            /* read separate vector for each face node */
            dArrayT t;
            for (int f = 0; f < num_nodes; f++) {
            const ParameterListT& traction_vector = natural_bc.GetList("DoubleList", f);
            int dim = traction_vector.NumLists("Double");
            if (dim != NumDOF())
                ExceptionT::GeneralFail(caller, "expecting traction vector length %d not %d",
                            NumDOF(), dim);

            nodal_values.RowAlias(f, t);
            for (int j = 0; j < NumDOF(); j++)
                t[j] = traction_vector.GetList("Double", j).GetParameter("value");
            }
        }
        }
    }
#pragma message("OK with empty side sets?")

    /* allocate all traction BC cards */
    fTractionList.Dimension(tot_num_sides);

    /* correct numbering offset */
    LTf--;

    /* define traction cards */
    if (tot_num_sides > 0)
    {
        iArrayT loc_node_nums;
        int dex = 0;
        for (int i = 0; i < num_natural_bc; i++)
        {
        /* set traction BC cards */
        iArray2DT& side_set = localsides[i];
        int num_sides = side_set.MajorDim();
        for (int j = 0; j < num_sides; j++)
        {
            /* get facet local node numbers */
            fShapes_displ->NodesOnFacet(side_set(j, 1), loc_node_nums);

            /* set and echo */
            fTractionList[dex++].SetValues(ElementSupport(), side_set(j,0), side_set (j,1), LTf[i],
                           coord_sys[i], loc_node_nums, values[i]);
        }
        }
    }

    /* check coordinate system specifications */
    if (NumSD() != NumDOF())
        for (int i = 0; i < fTractionList.Length(); i++)
        if (fTractionList[i].CoordSystem() != Traction_CardT::kCartesian)
            ExceptionT::BadInputValue(caller, "coordinate system must be Cartesian if (nsd != ndof) for card %d", i+1);
    }
}


//---------------------------------------------------------------------

/* compute contribution to RHS from traction BC's */
void FSMicromorphic2_3DT::ApplyTractionBC(void)
{
    //           cout<<"CHECK POINT-29"<<endl;
    if (fTractionList.Length() > 0)
    {
    /* dimensions */
    int nsd = NumSD();
    int ndof = NumDOF();

    /* update equation numbers */
    if (!fTractionBCSet) SetTractionBC();

    /* force vector */
    dArrayT rhs;
    VariArrayT<double> rhs_man(25, rhs);

    /* local coordinates */
    LocalArrayT coords(LocalArrayT::kInitCoords);
    VariLocalArrayT coord_man(25, coords, nsd);
    ElementSupport().RegisterCoordinates(coords);

    /* nodal tractions */
    LocalArrayT tract(LocalArrayT::kUnspecified);
    VariLocalArrayT tract_man(25, tract, ndof);

    /* integration point tractions */
    dArray2DT ip_tract;
    nVariArray2DT<double> ip_tract_man(25, ip_tract, ndof);
    dArrayT tract_loc, tract_glb(ndof);
    dMatrixT Q(ndof);

    /* Jacobian of the surface mapping */
    dMatrixT jacobian(nsd, nsd-1);

    for (int i = 0; i < fTractionList.Length(); i++)
    {
        const Traction_CardT& BC_card = fTractionList[i];

        /* dimension */
        const iArrayT& nodes = BC_card.Nodes();
        int nnd = nodes.Length();
        rhs_man.SetLength(nnd*ndof, false);
        coord_man.SetNumberOfNodes(nnd);
        tract_man.SetNumberOfNodes(nnd);

        /* local coordinates */
        coords.SetLocal(nodes);

        /* nodal traction vectors: (ndof x nnd) */
        BC_card.CurrentValue(tract);

        /* BC destination */
        int elem, facet;
        BC_card.Destination(elem, facet);

        /* default thickness */
        double thick = 1.0;

        /* boundary shape functions */
        const ParentDomainT& surf_shape = ShapeFunctionDispl().FacetShapeFunction(facet);
        int nip = surf_shape.NumIP();

        /* all ip tractions: (nip x ndof) */
        ip_tract_man.SetMajorDimension(nip, false);
        surf_shape.Interpolate(tract, ip_tract);

        /* traction vector coordinate system */
        if (BC_card.CoordSystem() == Traction_CardT::kCartesian)
        {
        /* integrate */
        rhs = 0.0;
        const double* w = surf_shape.Weight();
        for (int j = 0; j < nip; j++)
        {
            /* coordinate mapping */
            surf_shape.DomainJacobian(coords, j, jacobian);
            double detj = surf_shape.SurfaceJacobian(jacobian);

            /* ip weight */
            double jwt = detj*w[j]*thick;

            /* ip traction */
            const double* tj = ip_tract(j);

            /* accumulate */
            for (int l = 0; l < ndof; l++)
            {
            /* nodal shape function */
            const double* Na = surf_shape.Shape(j);

            double* prhs = rhs.Pointer(l);
            double  fact = jwt*(*tj++);
            for (int k = 0; k < nnd; k++)
            {
                *prhs += fact*(*Na++);
                prhs += ndof;
            }
            }
        }
        }
        else if (BC_card.CoordSystem() == Traction_CardT::kLocal)
        {
        /* integrate */
        rhs = 0.0;
        const double* w = surf_shape.Weight();
        for (int j = 0; j < nip; j++)
        {
            /* coordinate mapping */
            surf_shape.DomainJacobian(coords, j, jacobian);
            double detj = surf_shape.SurfaceJacobian(jacobian, Q);

            /* ip weight */
            double jwt = detj*w[j]*thick;

            /* transform ip traction out of local frame */
            ip_tract.RowAlias(j, tract_loc);
            Q.Multx(tract_loc, tract_glb);

            /* ip traction */
            const double* tj = tract_glb.Pointer();

            /* accumulate */
            for (int l = 0; l < ndof; l++)
            {
            /* nodal shape function */
            const double* Na = surf_shape.Shape(j);

            double* prhs = rhs.Pointer(l);
            double  fact = jwt*(*tj++);
            for (int k = 0; k < nnd; k++)
            {
                *prhs += fact*(*Na++);
                prhs += ndof;
            }
            }
        }
        }
        else
        throw ExceptionT::kGeneralFail;

        /* assemble into displacement equations */
        ElementSupport().AssembleRHS(fDispl->Group(), rhs, BC_card.Eqnos());
    }
    }
}

void FSMicromorphic2_3DT::Form_solid_shape_functions(const double* &shapes_displ_X)
{
    fShapeDispl = 0.0;
    for (int i=0; i<8; i++)
    {
        fShapeDispl(0,i*3) = shapes_displ_X[i];
        fShapeDispl(1,1+i*3) = shapes_displ_X[i];
        fShapeDispl(2,2+i*3) = shapes_displ_X[i];
    }
}

void FSMicromorphic2_3DT::Form_Gradient_of_solid_shape_functions(const dMatrixT &fShapeDisplGrad_temp)
{
    fShapeDisplGrad = 0.0;
    for(int i=0; i<8; i++)
    {
        fShapeDisplGrad(0,i*3) = fShapeDisplGrad_temp(0,i);
        fShapeDisplGrad(1,1+i*3) = fShapeDisplGrad_temp(0,i);
        fShapeDisplGrad(2,2+i*3) = fShapeDisplGrad_temp(0,i);

        fShapeDisplGrad(3,i*3) = fShapeDisplGrad_temp(1,i);
        fShapeDisplGrad(4,1+i*3) = fShapeDisplGrad_temp(1,i);
        fShapeDisplGrad(5,2+i*3) = fShapeDisplGrad_temp(1,i);

        fShapeDisplGrad(6,i*3) = fShapeDisplGrad_temp(2,i);
        fShapeDisplGrad(7,1+i*3) = fShapeDisplGrad_temp(2,i);
        fShapeDisplGrad(8,2+i*3) = fShapeDisplGrad_temp(2,i);
    }

}

void FSMicromorphic2_3DT::Form_micro_shape_functions(const double* &shapes_micro_X)
{
    fShapeMicro = 0.0;
    //hard coded for n_en_micro=8; can change
    for (int i=0; i<n_en_micro; i++)
        fShapeMicro[i] = shapes_micro_X[i];
}

void FSMicromorphic2_3DT::Form_deformation_gradient_tensor(void)
{
    fShapeDisplGrad.Multx(u_vec,fGrad_disp_vector);
    fDeformation_Gradient(0,0) = fGrad_disp_vector[0]+1.0;
    fDeformation_Gradient(0,1) = fGrad_disp_vector[3];
    fDeformation_Gradient(0,2) = fGrad_disp_vector[6];
    fDeformation_Gradient(1,0) = fGrad_disp_vector[1];
    fDeformation_Gradient(1,1) = fGrad_disp_vector[4]+1.0;
    fDeformation_Gradient(1,2) = fGrad_disp_vector[7];
    fDeformation_Gradient(2,0) = fGrad_disp_vector[2];
    fDeformation_Gradient(2,1) = fGrad_disp_vector[5];
    fDeformation_Gradient(2,2) = fGrad_disp_vector[8]+1.0;

    fGrad_disp_matrix(0,0) = fGrad_disp_vector[0];
    fGrad_disp_matrix(0,1) = fGrad_disp_vector[3];
    fGrad_disp_matrix(0,2) = fGrad_disp_vector[6];
    fGrad_disp_matrix(1,0) = fGrad_disp_vector[1];
    fGrad_disp_matrix(1,1) = fGrad_disp_vector[4];
    fGrad_disp_matrix(1,2) = fGrad_disp_vector[7];
    fGrad_disp_matrix(2,0) = fGrad_disp_vector[2];
    fGrad_disp_matrix(2,1) = fGrad_disp_vector[5];
    fGrad_disp_matrix(2,2) = fGrad_disp_vector[8];

}

void FSMicromorphic2_3DT::Form_Grad_grad_transformation_matrix(void)
{
    fDefGradInv_Grad_grad = 0.0;
    fDefGradInv_Grad_grad(0,0) = fDeformation_Gradient_Inverse(0,0);
    fDefGradInv_Grad_grad(0,3) = fDeformation_Gradient_Inverse(0,1);
    fDefGradInv_Grad_grad(0,6) = fDeformation_Gradient_Inverse(0,2);
    fDefGradInv_Grad_grad(1,1) = fDeformation_Gradient_Inverse(0,0);
    fDefGradInv_Grad_grad(1,4) = fDeformation_Gradient_Inverse(0,1);
    fDefGradInv_Grad_grad(1,7) = fDeformation_Gradient_Inverse(0,2);
    fDefGradInv_Grad_grad(2,2) = fDeformation_Gradient_Inverse(0,0);
    fDefGradInv_Grad_grad(2,5) = fDeformation_Gradient_Inverse(0,1);
    fDefGradInv_Grad_grad(2,8) = fDeformation_Gradient_Inverse(0,2);

    fDefGradInv_Grad_grad(3,0) = fDeformation_Gradient_Inverse(1,0);
    fDefGradInv_Grad_grad(3,3) = fDeformation_Gradient_Inverse(1,1);
    fDefGradInv_Grad_grad(3,6) = fDeformation_Gradient_Inverse(1,2);
    fDefGradInv_Grad_grad(4,1) = fDeformation_Gradient_Inverse(1,0);
    fDefGradInv_Grad_grad(4,4) = fDeformation_Gradient_Inverse(1,1);
    fDefGradInv_Grad_grad(4,7) = fDeformation_Gradient_Inverse(1,2);
    fDefGradInv_Grad_grad(5,2) = fDeformation_Gradient_Inverse(1,0);
    fDefGradInv_Grad_grad(5,5) = fDeformation_Gradient_Inverse(1,1);
    fDefGradInv_Grad_grad(5,8) = fDeformation_Gradient_Inverse(1,2);

    fDefGradInv_Grad_grad(6,0) = fDeformation_Gradient_Inverse(2,0);
    fDefGradInv_Grad_grad(6,3) = fDeformation_Gradient_Inverse(2,1);
    fDefGradInv_Grad_grad(6,6) = fDeformation_Gradient_Inverse(2,2);
    fDefGradInv_Grad_grad(7,1) = fDeformation_Gradient_Inverse(2,0);
    fDefGradInv_Grad_grad(7,4) = fDeformation_Gradient_Inverse(2,1);
    fDefGradInv_Grad_grad(7,7) = fDeformation_Gradient_Inverse(2,2);
    fDefGradInv_Grad_grad(8,2) = fDeformation_Gradient_Inverse(2,0);
    fDefGradInv_Grad_grad(8,5) = fDeformation_Gradient_Inverse(2,1);
    fDefGradInv_Grad_grad(8,8) = fDeformation_Gradient_Inverse(2,2);
}




//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
////////////////////// MATRICES FOR MICROMORPHIC 3-D CASE/////////////
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////

void FSMicromorphic2_3DT:: Form_CCof_tensor()
{

       for(int k=0;k<3;k++)
        {
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    for(int n=0;n<3;n++)
                    {
                        for(int p=0;p<3;p++)
                        {
                            for(int q=0;q<3;q++)
                            {
                            CCof[k][l][m][n][p][q]=0.0;
                            }}}}}}

    for(int k=0;k<3;k++)
    {
        for(int l=0;l<3;l++)
        {
            for(int m=0;m<3;m++)
            {
                for(int n=0;n<3;n++)
                {
                    for(int p=0;p<3;p++)
                    {
                        for(int q=0;q<3;q++)
                        {
                        CCof[k][l][m][n][p][q]=   fMaterial_Params[kTau1]*( KrDelta[k][l]*KrDelta[n][m]*KrDelta[q][p]+ KrDelta[l][m]*KrDelta[n][p]*KrDelta[k][q])
                                                + fMaterial_Params[kTau2]*( KrDelta[k][l]*KrDelta[m][p]*KrDelta[n][q]+ KrDelta[k][m]*KrDelta[l][q]*KrDelta[n][p])
                                                + fMaterial_Params[kTau3]*( KrDelta[k][l]*KrDelta[q][m]*KrDelta[n][p])
                                                + fMaterial_Params[kTau4]*( KrDelta[l][m]*KrDelta[k][n]*KrDelta[q][p])
                                                + fMaterial_Params[kTau5]*( KrDelta[k][m]*KrDelta[l][n]*KrDelta[q][p]+ KrDelta[l][m]*KrDelta[k][p]*KrDelta[n][q])
                                                + fMaterial_Params[kTau6]*( KrDelta[k][m]*KrDelta[l][p]*KrDelta[n][q])
                                                + fMaterial_Params[kTau7]*( KrDelta[k][n]*KrDelta[l][p]*KrDelta[q][m])
                                                + fMaterial_Params[kTau8]*( KrDelta[k][p]*KrDelta[l][q]*KrDelta[n][m]+ KrDelta[k][q]*KrDelta[l][n]*KrDelta[m][p])
                                                + fMaterial_Params[kTau9]*( KrDelta[k][n]*KrDelta[l][q]*KrDelta[m][p])
                                                +fMaterial_Params[kTau10]*( KrDelta[k][p]*KrDelta[l][n]*KrDelta[q][m])
                                                +fMaterial_Params[kTau11]*( KrDelta[k][q]*KrDelta[l][p]*KrDelta[n][m]);
                        }
                    }
                }
            }
        }
    }


}

void FSMicromorphic2_3DT::Form_micro_deformation_tensor_Chi()
{
    NCHI.Multx(Phi_vec,Chi_vec);
    Chi[0][0] = Chi_vec[0]+1.0;
    Chi[0][1] = Chi_vec[3];
    Chi[0][2] = Chi_vec[6];
    Chi[1][0] = Chi_vec[1];
    Chi[1][1] = Chi_vec[4]+1.0;
    Chi[1][2] = Chi_vec[7];
    Chi[2][0] = Chi_vec[2];
    Chi[2][1] = Chi_vec[5];
    Chi[2][2] = Chi_vec[8]+1.0;

    for(int i=0;i<3;i++)
    {
        for(int j=0;j<3;j++)
        {
            ChiM(i,j)=Chi[i][j];
        }
    }

}

void FSMicromorphic2_3DT:: Form_Chi_inv_matrix()
{
    ChiInv_m=0.0;
    Chi_m=0.0;
    for(int i=0;i<3;i++)
    {for(int j=0;j<3;j++)
    {Chi_m(i,j)=Chi[i][j];}}

    ChiInv_m.Inverse(Chi_m);
    for(int i=0;i<3;i++)
    {for(int j=0;j<3;j++)
    {ChiInv[i][j]=ChiInv_m(i,j);}}


}
void FSMicromorphic2_3DT:: Form_GRAD_Chi_matrix()
{
    int row;
    row=0;
    GRAD_NCHI.Multx(Phi_vec,GRAD_Chi_vec);
    for(int T=0;T<=2;T++)
    {
        for(int i=0;i<=2;i++)
        {
            for(int K=0;K<=2;K++)
            {
                GRAD_Chi[i][T][K]=GRAD_Chi_vec[row];//CHI=1+PHI ==> GRAD_CHI=GRAD_PHI
                row++;
            }
        }
    }

    row=0;
    for(int T=0;T<=2;T++)
    {
        for(int i=0;i<=2;i++)
        {
            for(int K=0;K<=2;K++)
            {
                GRAD_CHIM(i,T,K)=GRAD_Chi_vec[row];//CHI=1+PHI ==> GRAD_CHI=GRAD_PHI
                row++;
            }
        }
    }
}


//Forming the Matrices coming from the Bal. of Lin. Mom.
void FSMicromorphic2_3DT::Form_KroneckerDelta_matrix()
{
    for(int i=0;i<=2;i++)
    { for(int j=0;j<=2;j++)
            {KrDelta[i][j]=0.0;}}
    KrDelta[0][0]=1.0;
    KrDelta[1][1]=1.0;
    KrDelta[2][2]=1.0;
}

void FSMicromorphic2_3DT::Form_Gamma_tensor3D()
{

    for(int a=0;a<3;a++)
    {for(int p=0;p<3;p++)
       {for(int q=0;q<3;q++)
            {Gamma[a][p][q]=0.0;}}}

    for(int a=0;a<3;a++)
    {
        for(int p=0;p<3;p++)
        {
            for(int q=0;q<3;q++)
            {
                //summation over the same term starts here
                for(int A=0;A<3;A++)
                    {
                    for(int Q=0;Q<3;Q++)
                     {
                        Gamma[a][p][q]+=ChiInv[A][p]*GRAD_Chi[a][A][Q]*Finv[Q][q];
                     }
                    }
            }
        }
    }
}

void FSMicromorphic2_3DT::Form_G1_matrix()
{
    int row=0;
 //   int col;
    double scale;
    scale=0.0;
  //  row=0;
/*    Mat1=0.0;
    Mat2=0.0;
    Mat3=0.0;
    Mat4=0.0;
    Mat5=0.0;*/
    Sigma=0.0;
  //  RHS=0.0;
    //Sigma1=0.0;
    G1=0.0;
    deltaL=0.0;
    deltad=0.0;
    deltaL_Tr=0.0;
    Fn_m=0.0;
    Finv_m=0.0;
    SigN_m=0.0;
    ChiInv_m=0.0;
    ChiN_m=0.0;
    deltaEp=0.0;
    deltaNu=0.0;
    tempSig=0.0;
    double trdeltaEp=0.0;
    double trdeltad=0.0;


    for(int i=0;i<3;i++)
    {
        for(int j=0;j<3;j++)
        {
            Fn_m(i,j)=Fn[i][j];
            Finv_m(i,j)=Finv[i][j];
            SigN_m(i,j)=SigN[i][j];
            ChiInv_m(i,j)=ChiInv[i][j];
            ChiN_m(i,j)=ChiN[i][j];
          }
    }



deltaL.MultAB(Fn_m,Finv_m);
deltaL*=-1;
deltaL+=fIdentity_matrix;

deltaL_Tr.Transpose(deltaL);

deltad=deltaL;
deltad+=deltaL_Tr;
deltad*=0.5;
trdeltad=0.0;
for(int i=0;i<3;i++)
    trdeltad+=deltad(i,i);
//cout<<trdeltad<<endl;

deltaNu.MultAB(ChiN_m,ChiInv_m);
deltaNu*=-1;
deltaNu+=fIdentity_matrix;
deltaEp=deltaNu;
deltaEp+=deltaL_Tr;

for(int i=0;i<3;i++)
    trdeltaEp+=deltaEp(i,i);


Sigma=SigN_m;
//


tempSig=SigN_m;
scale=-1*trdeltad;
tempSig*=scale;
Sigma+=tempSig;
//

tempSig.MultAB(deltaL,SigN_m);
Sigma+=tempSig;


tempSig.MultABT(SigN_m,deltaL);
Sigma+=tempSig;
//


tempSig=fIdentity_matrix;
scale=trdeltad*(fMaterial_Params[kLambda]+fMaterial_Params[kTau]);
tempSig*=scale;
Sigma+=tempSig;
//

tempSig=deltad;
scale=2*(fMaterial_Params[kMu]+fMaterial_Params[kSigma_const]);
tempSig*=scale;
Sigma+=tempSig;

//

tempSig=fIdentity_matrix;
scale=trdeltaEp*fMaterial_Params[kEta];
tempSig*=scale;
Sigma+=tempSig;


tempSig=deltaEp;
scale=fMaterial_Params[kKappa];
tempSig*=scale;
Sigma+=tempSig;
//


tempSig.Transpose(deltaEp);
scale=fMaterial_Params[kNu];
tempSig*=scale;
Sigma+=tempSig;


    for(int k=0;k<=2;k++)
    {
        for(int l=0;l<=2;l++)
        {
             G1[row]=Sigma(l,k);
            row++;
        }
    }

}

void FSMicromorphic2_3DT::Form_Finv_w_matrix()//checked correct
{

    int count, row, col;
    row=0;
    col=0;
    count=0;
    Finv_w=0.0;
    while(count<=2)
    {
        Finv_w(row,col)    =fDeformation_Gradient_Inverse(0,0);
        Finv_w(row,col+1)  =fDeformation_Gradient_Inverse(1,0);
        Finv_w(row,col+2)  =fDeformation_Gradient_Inverse(2,0);
        Finv_w(row+1,col)  =fDeformation_Gradient_Inverse(0,1);
        Finv_w(row+1,col+1)=fDeformation_Gradient_Inverse(1,1);
        Finv_w(row+1,col+2)=fDeformation_Gradient_Inverse(2,1);
        Finv_w(row+2,col)  =fDeformation_Gradient_Inverse(0,2);
        Finv_w(row+2,col+1)=fDeformation_Gradient_Inverse(1,2);
        Finv_w(row+2,col+2)=fDeformation_Gradient_Inverse(2,2);
        row=row+3;
        col=col+3;
        count++;
    }

}



void FSMicromorphic2_3DT::Form_NCHI_matrix(const dMatrixT &fShapeMicro_row_matrix)
{
    int row=0;
    int col=0;
  //  int counter;
    NCHI=0.0;
    for(int j=0;j<=8;j++)
    {
        col=j;
        for(int i=0;i<8;i++)
        {
            NCHI(row,col)=fShapeMicro_row_matrix(0,i);
            col=col+9;
        }
        row++;
    }

}


void FSMicromorphic2_3DT:: Form_GRAD_Nuw_matrix(const dMatrixT &fShapeDisplGrad_temp)
{
    int row,col;
    row=0;
    col=0;
    GRAD_Nuw=0.0;
    for(int j=0;j<3;j++)
    {
        col=j;
        for(int i=0;i<8;i++)
        {
            GRAD_Nuw(row,col)  =fShapeDisplGrad_temp(0,i);
            GRAD_Nuw(row+1,col)=fShapeDisplGrad_temp(1,i);
            GRAD_Nuw(row+2,col)=fShapeDisplGrad_temp(2,i);
            col=col+3;
        }
        row=row+3;
    }


}


void FSMicromorphic2_3DT::Form_Var_F_tensor()
{
    int row,col;
    row=0;
    col=0;
    Var_F=0.0;
/*    for (int l=0;l<3;l++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            //row operations starts
            for (int k=0;k<3;k++)
            {
                    //summation on the same terms starts
                    for (int K=0;K<3;K++)
                    {
                        Var_F(row,col)+=Finv[K][i]*Sigma(l,k);
                       row++;
                    }

                }
            col++;
        }
    }*/
  for (int l=0;l<3;l++)
    {
        for(int m=0;m<3;m++)
        {
            row=m;
            for (int k=0;k<3;k++)
                 {
                  Var_F(row,col)= Sigma(l,k);
                   row=row+3;
                }
            col++;
        }
    }



}

void FSMicromorphic2_3DT::Form_Tsigma_1_matrix()
{


        int row=0;
        int col=0;
        Tsigma_1=0.0;
        for(int i=0;i<3;i++)
        {
            for(int m=0;m<3;m++)
            {
                row=0;
                for(int k=0;k<3;k++)
                {
                    for(int l=0;l<3;l++)
                    {
                        //summation on the same term
                        for(int L=0;L<3;L++)
                        {
                            Tsigma_1(row,col)+=SigN[l][k]*Fn[i][L]*Finv[L][m];
                        }
                        row++;
                    }
                }
            col++;
            }
        }





}

void FSMicromorphic2_3DT::Form_Tsigma_2_matrix()
{

    int row=0;
    int col=0;
    Tsigma_2=0.0;
    for(int i=0;i<3;i++)
    {
        for(int m=0;m<3;m++)
        {
            row=0;
            for(int k=0;k<3;k++)
            {
                for(int l=0;l<3;l++)
                {
                    //summation over the same term
                    for(int L=0;L<3;L++)
                    {
                        Tsigma_2(row,col)+=SigN[i][k]*Fn[l][L]*Finv[L][m];
                    }
                    row++;
                }
            }
        col++;
        }
    }


}

void FSMicromorphic2_3DT::Form_Tsigma_3_matrix()
{
    int row=0;
    int col=0;
    Tsigma_3=0.0;
    for(int i=0;i<3;i++)
    {
        for(int m=0;m<3;m++)
        {
            row=0;
            for(int k=0;k<3;k++)
            {
                for(int l=0;l<3;l++)
                {
                    //summation on the same term
                    for(int L=0;L<3;L++)
                    {
                        Tsigma_3(row,col)+=SigN[l][i]*Fn[k][L]*Finv[L][m];
                    }
                    row++;
                }
            }
        col++;
        }
    }
/*    int row=0;
    int col=0;
    Tsigma_3=0.0;
    for(int i=0;i<3;i++)
    {
        for(int m=0;m<3;m++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int k=0;k<3;k++)
                {
                    //summation on the same term
                    for(int L=0;L<3;L++)
                    {
                        Tsigma_3(row,col)=Tsigma_3(row,col)+SigN[l][i]*Fn[k][L]*Finv[L][m];
                    }
                    row++;
                }
            }
        col++;
        }
    }*/
}

void FSMicromorphic2_3DT::Form_TFn_1_matrix()
    {

       int row=0;
        int col=0;
        TFn_1=0.0;
        for(int i=0;i<3;i++)
        {
            for(int m=0;m<3;m++)
            {
                row=0;
                for(int k=0;k<3;k++)
                {
                        for(int l=0;l<3;l++)
                    {
                        //summation on the same term
                        for(int L=0;L<3;L++)
                        {
                            TFn_1(row,col)+=fIdentity_matrix(l,k)*Fn[i][L]*Finv[L][m];
                        }
                        row++;
                    }
                }
            col++;
            }
        }

/*

    int row=0;
    int col=0;
    TFn_1=0.0;
    for(int i=0;i<3;i++)
    {
        for(int m=0;m<3;m++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int k=0;k<3;k++)
                {
                    //summation on the same term
                    for(int L=0;L<3;L++)
                    {
                        TFn_1(row,col)=TFn_1(row,col)+KrDelta[l][k]*Fn[i][L]*Finv[L][m];
                    }
                    row++;
                }
            }
        col++;
        }
    }
*/

 }

void FSMicromorphic2_3DT::Form_TFn_2_matrix()
{
    int row=0;
    int col=0;
    TFn_2=0.0;
    for(int k=0;k<3;k++)
    {
        for(int m=0;m<3;m++)
        {
            //row operations
            row=3*k;
                for(int l=0;l<3;l++)
                {
                    //summation on the same term
                    for(int L=0;L<3;L++)
                    {
                        TFn_2(row,col)+=Fn[l][L]*Finv[L][m];
                    }
                    row++;
                }
            col++;
        }

    }

/*     int row=0;
        int col=0;
        TFn_2=0.0;
        for(int k=0;k<3;k++)
        {
            for(int m=0;m<3;m++)
            {
                //row operations
                row=k;
                    for(int l=0;l<3;l++)
                    {
                        //summation on the same term
                        for(int L=0;L<3;L++)
                        {
                            TFn_2(row,col)=TFn_2(row,col)+Fn[l][L]*Finv[L][m];
                        }
                        row+=3;
                    }

                col++;
            }
        }
*/

}

void FSMicromorphic2_3DT::Form_TFn_3_matrix()
    {

    int row=0;
    int col=0;
    TFn_3=0.0;
    for(int l=0;l<3;l++)
    {
        for(int m=0;m<3;m++)
        {
            row=l;
                for(int k=0;k<3;k++)
                {
                    //summation on the same term
                    for(int L=0;L<3;L++)
                    {
                        TFn_3(row,col)+=Fn[k][L]*Finv[L][m];
                    }
                    row=row+3;
                }
        col++;
        }
    }

    // mutliply with (Mu+sigma)
    }

void FSMicromorphic2_3DT::Form_TChi_1_matrix()
{
    int row=0;
    int col=0;
    TChi_1=0.0;
    for(int T=0;T<3;T++)
    {
        for(int m=0;m<3;m++)
        {
            row=0;
            for(int k=0;k<3;k++)
            {
                for(int l=0;l<3;l++)
                {
                    //summation over the same term starts here
                    for(int i=0;i<3;i++)
                    {
                        for(int L=0;L<3;L++)
                        {
                            TChi_1(row,col)+=ChiN[i][L]*ChiInv[L][m]*ChiInv[T][i]*fIdentity_matrix(l,k);
                        }
                    }
                    row++;
                }
            }
            col++;
        }
    }



}

void FSMicromorphic2_3DT::Form_TFn_4_matrix()
{
    int row;
    int col;
    row=0;
    col=0;
    TFn_4=0.0;
    for(int i=0;i<3;i++)
    {
        for(int m=0;m<3;m++)
        {
            row=0;
            for(int k=0;k<3;k++)
            {
                for(int l=0;l<3;l++)
                {
                    //summation over the same term starts here
                    for(int L=0;L<3;L++)
                    {
                        TFn_4(row,col)+=Fn[i][L]*Finv[L][m]*fIdentity_matrix(k,l);
                    }
                    row++;
                }
            }
            col++;
        }
    }

}

void FSMicromorphic2_3DT::Form_TChi_2_matrix()
{
   int row,col;
   row=0;
   col=0;
   TChi_2=0.0;
/*
   for(int T=0;T<3;T++)
   {
       for(int m=0;m<3;m++)
       {
           row=0;
           for(int k=0;k<3;k++)
           {
               for(int l=0;l<3;l++)
               {
                   //summation
                   for(int L=0;L<3;L++)
                   {
                       TChi_2(row,col)+=ChiN[l][L]*ChiInv[L][m]*ChiInv[T][k];
                   }
                   row++;
               }
           }
        col++;
       }
   }
*/

   for(int R=0;R<3;R++)
    {
        for(int m=0;m<3;m++)
        {
            row=0;
            for(int k=0;k<3;k++)
            {
                for(int l=0;l<3;l++)
                {
                    //summation
                    for(int K=0;K<3;K++)
                    {
            //TChi_2(row,col)+=ChiN[l][K]*ChiInv[K][m]*ChiInv[R,k];
                        TChi_2(row,col)+=ChiN[l][K]*ChiInv_m(K,m)*ChiInv_m(R,k);

                    }
                    row++;
                }
            }
         col++;
        }
    }


}

void FSMicromorphic2_3DT::Form_TFn_5_matrix()
{
    int row,col;
    row=0;
    col=0;
    TFn_5=0.0;
 /*   for(int l=0;l<3;l++)
    {
        for(int m=0;m<3;m++)
        {
            //
            row=l;
            for(int k=0;k<3;k++)
            {
                //summation
                for(int L=0;L<3;L++)
                {
                    TFn_5(row,col)+=Fn[k][L]*Finv[L][m];
                }
                row=row+3;
            }
            col++;
        }
    }
*/

for(int i=0;i<3;i++)
{
    for(int m=0;m<3;m++)
    {
        //
        row=0;
        for(int k=0;k<3;k++)
        {
            for(int l=0;l<3;l++)
            {
                //summation
                for(int K=0;K<3;K++)
                {
                    TFn_5(row,col)+=Fn[k][K]*Finv[K][m]*fIdentity_matrix(l,i);
                }
                row++;
            }
        }
        col++;
    }
}

}

void FSMicromorphic2_3DT::Form_TChi_3_matrix()
{
    int row;
    int col;
    row=0;
    col=0;
    TChi_3=0.0;

    for(int T=0;T<3;T++)
    {
        for(int m=0;m<3;m++)
        {
            //
            row=0;
            for(int k=0;k<3;k++)
            {
                for(int l=0;l<3;l++)
                {
                    //summation over the same term
                    for(int L=0;L<3;L++)
                    {
                        TChi_3(row,col)+=ChiN[k][L]*ChiInv[L][m]*ChiInv[T][l];
                    }
                    row++;
                }
            }
            col++;
        }
    }

}

void FSMicromorphic2_3DT::Form_TFn_6_matrix()

{
    int row,col;
    TFn_6=0.0;
    row=0;
    col=0;
    for(int k=0;k<3;k++)
    {
        for(int m=0;m<3;m++)
        {
            row=k*3;
            for(int l=0;l<3;l++)
            {
                //summation over the same term
                for(int L=0;L<3;L++)
                {
                    TFn_6(row,col)+=Fn[l][L]*Finv[L][m];
                }
                row++;
            }
            col++;
        }
    }


}

void FSMicromorphic2_3DT::Form_double_Finv_from_Deformation_tensor_inverse()
{
    for(int i=0;i<=2;i++)
        {
            for(int j=0;j<=2;j++)
                {
                Finv[i][j]=fDeformation_Gradient_Inverse(i,j);}}
}

void FSMicromorphic2_3DT::Form_SigCurr_matrix()
{

        int row=0;
        int col=0;
        SigCurr=0.0;
/*        for(int j=0;j<3;j++)
        {
            for(int n=0;n<3;n++)
            {
                //col starts
                row=0;
                for(int k=0;k<3;k++)
                {
                    for(int l=0;l<3;l++)
                    {
                        SigCurr(row,col)=Sigma(l,k)*fIdentity_matrix(j,n);
                        row++;
                    }
                }
                col++;
            }
        }
*/

        for(int N=0;N<3;N++)
           {
               for(int n=0;n<3;n++)
               {
                   //col starts
                   row=0;
                   for(int k=0;k<3;k++)
                   {
                       for(int l=0;l<3;l++)
                       {
                           SigCurr(row,col)=Sigma(l,k)*fDeformation_Gradient_Inverse(N,n);
                           row++;
                       }
                   }
                   col++;
               }
           }


}




// Forming the matrices coming from the Bal. of First Mom. of Momtm
void FSMicromorphic2_3DT::Form_Finv_eta_matrix()
{
    Finv_eta=0.0;
    int row,col,count;
    row=0;
    col=0;
    count=1;
    while (count<=9)
    {
        Finv_eta(row,col)    =Finv[0][0];
        Finv_eta(row,col+1)  =Finv[1][0];
        Finv_eta(row,col+2)  =Finv[2][0];
        Finv_eta(row+1,col)  =Finv[0][1];
        Finv_eta(row+1,col+1)=Finv[1][1];
        Finv_eta(row+1,col+2)=Finv[2][1];
        Finv_eta(row+2,col)  =Finv[0][2];
        Finv_eta(row+2,col+1)=Finv[1][2];
        Finv_eta(row+2,col+2)=Finv[2][2];
        row=row+3;
        col=col+3;
        count++;
    }

}

void FSMicromorphic2_3DT::Form_Gradient_of_micro_shape_eta_functions(const dMatrixT &fShapeMicroGrad_temp)
{

    int row=0;
    int col=0;
    int i=0;
    GRAD_NCHI=0.0;

    for(int i=0;i<9;i++)
    {
        col=i;
        for(int j=0; j<8; j++)
        {
            GRAD_NCHI(row  ,col)  =fShapeMicroGrad_temp(0,j);
            GRAD_NCHI(row+1,col)  =fShapeMicroGrad_temp(1,j);
            GRAD_NCHI(row+2,col)  =fShapeMicroGrad_temp(2,j);
            col=col+9;
        }
        row=row+3;
    }


}


void FSMicromorphic2_3DT:: Form_Etagrad_matrix()
{
    int row=0;
    int col=0;
    Etagrad=0.0;
    for(int k=0;k<3;k++)
    {
        for(int i=0;i<3;i++)
        {
            row=i;
            for(int m=0;m<3;m++)
            {
                for(int l=0;l<3;l++)
                {
                    Etagrad(row,col)=Mnplus1[k][l][m];
                    row=row+3;
                }
            }
            col++;
        }
    }
}



void FSMicromorphic2_3DT::Form_Mm_1_matrix()
{
    int row;
    int col;
    Mm_1=0.0;
    row=0;
    col=0;
    for(int i=0;i<3;i++)
    {
        for(int p=0;p<3;p++)
        {
            //
            row=0;
            for(int m=0;m<3;m++)
            {
                for(int l=0;l<3;l++)
                {
                    for(int k=0;k<3;k++)
                    {
                        //summation
                        for(int L=0;L<3;L++)
                        {
                            Mm_1(row,col)+=Fn[i][L]*Finv[L][p]*mn[k][l][m];
                        }
                        row++;
                    }
                }
            }
            col++;
        }
    }
}


void FSMicromorphic2_3DT::Form_Mm_2_matrix()
{
    int row,col;
    Mm_2=0.0;
    row=0;
    col=0;
    for(int i=0;i<3;i++)
    {
        for(int p=0;p<3;p++)
        {
            //
            row=0;
            for(int m=0;m<3;m++)
            {
                for(int l=0;l<3;l++)
                {
                    for(int k=0;k<3;k++)
                    {
                        //summation
                        for(int L=0;L<3;L++)
                        {
                            Mm_2(row,col)+=Fn[k][L]*Finv[L][p]*mn[i][l][m];
                        }
                        row++;
                    }
                }
            }
            col++;
        }
    }

}

void FSMicromorphic2_3DT::Form_Mm_3_matrix()
{
    int row,col;
    Mm_3=0.0;
    row=0;
    col=0;
    for(int i=0;i<3;i++)
    {
        for(int p=0;p<3;p++)
        {
            //
            row=0;
            for(int m=0;m<3;m++)
            {
                for(int l=0;l<3;l++)
                {
                    for(int k=0;k<3;k++)
                    {
                        //summation
                        for(int L=0;L<3;L++)
                        {
                            Mm_3(row,col)+=Fn[l][L]*Finv[L][p]*mn[k][i][m];
                        }
                        row++;
                    }
                }
            }
            col++;
        }
    }


}

void FSMicromorphic2_3DT:: Form_Mm_4_matrix()
{
    Mm_4=0.0;
    int col;
    int row;
    col=0;
    for(int T = 0;T<= 2;T++)
        {
        for(int n=0;n<=2;n++)
            {
            row = 0;//row calculations start here
            for(int m = 0;m <= 2; m++)
            {
                for(int l = 0; l <= 2; l++)
                {
                    for(int k = 0; k <= 2; k++)
                    {
                    //summation on the same term starts here
                        for(int L = 0; L <= 2; L++)
                            {
                            for(int i = 0; i <= 2; i++)
                                {
                                    Mm_4(row, col) +=mn[k][l][i]*ChiN[m][L]*ChiInv[L][n]*ChiInv[T][i];
                                }
                            }
                        row++;
                    }
                }
            }
            col++;
            }
        }


}

void FSMicromorphic2_3DT:: Form_Mm_5_matrix()
{
Mm_5=0.0;
int col;
int row;
col=0;
for(int T = 0;T<= 2;T++)
    {
    for(int n=0;n<=2;n++)
        {
        row = 0;//row calculations start here
        for(int m = 0;m <= 2; m++)
        {
            for(int l = 0; l <= 2; l++)
            {
                for(int k = 0; k <= 2; k++)
                {
                    //summation on the same term starts here
                    for(int p = 0; p <= 2; p++)
                    {
                        for(int r = 0; r <= 2; r++)
                        {
                            for(int s = 0; s <= 2; s++)
                            {
                                for(int L = 0; L <= 2; L++)
                                {
                                    for(int i = 0; i <= 2; i++)
                                    {
                                        Mm_5(row,col) +=CCof[k][l][m][p][r][s]*ChiN[p][L]*ChiInv[L][n]*
                                                        ChiInv[T][i]*GammaN[i][r][s];}}}}}
                    row++;}
                }
            }
        col++;
        }
    }

}

void FSMicromorphic2_3DT:: Form_Mm_6_matrix()
{
    Mm_6=0.0;
    int col;
    int row;
    col=0;
    for(int T = 0;T<= 2;T++)
        {
        for(int n=0;n<=2;n++)
            {
            row = 0;//row calculations start here
            for(int m = 0;m <= 2; m++)
            {
                for(int l = 0; l <= 2; l++)
                {
                    for(int k = 0; k <= 2; k++)
                    {
                        //summation on the same term starts here
                        for(int p = 0; p <= 2; p++)
                        {
                            for(int r = 0; r <= 2; r++)
                            {
                                for(int s = 0; s <= 2; s++)
                                {
                                    for(int L = 0; L <= 2; L++)
                                    {
                                        for(int i = 0; i <= 2; i++)
                                        {
                                            Mm_6(row,col)+= CCof[k][l][m][p][r][s]*ChiN[i][L]*ChiInv[L][n]*
                                                            ChiInv[T][r]*GammaN[p][i][s];}}}}}
                        row++;}
                    }
                }
            col++;
            }
        }


}


void FSMicromorphic2_3DT:: Form_Mm_7_matrix()
{
    Mm_7=0.0;
    int col;
    int row;
    col=0;
    for(int T = 0;T<= 2;T++)
        {
        for(int n=0;n<=2;n++)
            {
            row = 0;//row calculations start here
            for(int m = 0;m <= 2; m++)
            {
                for(int l = 0; l <= 2; l++)
                {
                    for(int k = 0; k <= 2; k++)
                    {
                        // summation on the same term starts
                        for(int p = 0; p <= 2; p++)
                        {
                            for(int r = 0; r <= 2; r++)
                            {
                                for(int s = 0; s <= 2; s++)
                                {
                                    for(int L = 0; L <= 2; L++)
                                    {
                                        for(int R=0; R<=2;R++)
                                        {
                                            Mm_7(row, col) +=CCof[k][l][m][p][r][s]*GRAD_ChiN[p][L][R]*Finv[R][r]*ChiInv[L][n]*
                                                            ChiInv[T][s];}}}}}
                        //summation on the same term ends
                        row++;}
                    }
                }
            col++;
            }
        }
}


void FSMicromorphic2_3DT:: Form_Mm_71_matrix()
{
    Mm_71=0.0;
    int row=0;
    int col=0;
    for(int A=0; A<3;A++)
    {
        for(int p=0;p<3;p++)
        {
            for(int T=0;T<3;T++)
            {
                //
                row=0;
                for(int m=0;m<3;m++)
                {
                    for(int l=0;l<3;l++)
                    {
                        for(int k=0;k<3;k++)
                        {
                            //summation starts here
                            for(int r=0;r<3;r++)
                            {
                                for(int s=0;s<3;s++)
                                {
									Mm_71(row,col)+=CCof[k][l][m][p][r][s]*Finv[T][s]*ChiInv[A][r];
                                }
                            }
                            row++;
                        }
                    }
                }
                col++;
            }
        }
    }


}

void FSMicromorphic2_3DT:: Form_Mm_72_matrix()
{
    Mm_72=0.0;
    int row=0;
    int col=0;
    for(int s=0;s<3;s++)
    {
        for(int a=0;a<3;a++)
        {
            row=0;
            for(int m=0;m<3;m++)
            {
                for(int l=0;l<3;l++)
                {
                    for(int k=0;k<3;k++)
                    {
                        //summation
                        for(int p=0;p<3;p++)
                            {
                            for( int r=0;r<3;r++)
                            {
                            for(int A=0;A<3;A++)
                                {
                                    for(int T=0;T<3;T++)
                                    {
                                Mm_72(row,col)+=CCof[k][l][m][p][r][s]*(GRAD_Chi[p][A][T]-GRAD_ChiN[p][A][T])*Finv[T][a]*ChiInv[A][r];
                                    }
                                }
                            }
                            }
                    row++;
                    }
                }
            }
            col++;
        }
    }
}

void FSMicromorphic2_3DT:: Form_Mm_73_matrix()
{
    Mm_73=0.0;
    int row=0;
    int col=0;
    for(int B=0;B<3;B++)
    {
        for(int a=0;a<3;a++)
        {
            row=0;
            for(int m=0;m<3;m++)
            {
                for(int l=0;l<3;l++)
                {
                    for(int k=0;k<3;k++)
                    {
                        //summation
                        for(int A=0;A<3;A++)
                        {
                            for(int T=0;T<3;T++)
                            {
                                for(int p=0;p<3;p++)
                                {
                                    for(int r=0;r<3;r++)
                                    {
                                        for(int s=0;s<3;s++)
                                        {
                                            Mm_73(row,col)+=CCof[k][l][m][p][r][s]*(GRAD_Chi[p][A][T]-GRAD_ChiN[p][A][T])*Finv[T][s]*ChiInv[A][a]*ChiInv[B][r];

                                        }
                                    }
                                }
                            }
                        }
                        row++;
                    }
                }
            }
            col++;
        }
    }
}


void FSMicromorphic2_3DT:: Form_Mm_74_matrix()
{
    Mm_74=0.0;
    int row=0;
    int col=0;
    for(int A=0;A<3;A++)
    {
        for(int p=0;p<3;p++)
        {
            row=0;
            for(int m=0;m<3;m++)
            {
                for(int l=0;l<3;l++)
                {
                    for(int k=0;k<3;k++)
                    {
                        //summation
                        for(int B=0;B<3;B++)
                        {
                            for(int T=0;T<3;T++)
                            {
                                for(int r=0; r<3;r++)
                                {
                                    for(int s=0;s<3;s++)
                                    {
                                        for(int a=0;a<3;a++)
                                        {
                                            Mm_74(row,col)+=CCof[k][l][m][p][r][s]*ChiInv[A][a]*GRAD_Chi[a][B][T]*ChiInv[B][r]*Finv[T][s];
                                        }

                                    }
                                }
                            }
                        }
                        row++;
                    }
                }
            }
            col++;
        }
    }
}


void FSMicromorphic2_3DT:: Form_Mm_75_matrix()
{
    Mm_75=0.0;
    int row=0;
    int col=0;
    for(int L=0;L<3;L++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int m=0;m<3;m++)
            {
                for(int l=0;l<3;l++)
                {
                    for(int k=0;k<3;k++)
                    {
                        //summation
                        for(int p=0;p<3;p++)
                        {
                            for(int A=0;A<3;A++)
                            {
                                for(int r=0;r<3;r++)
                                {
                                    for(int s=0;s<3;s++)
                                    {
                                        for(int B=0;B<3;B++)
                                        {
                                            for(int a=0;a<3;a++)
                                            {
                                                for(int T=0;T<3;T++)
                                                {
                                                    Mm_75(row,col)+=CCof[k][l][m][p][r][s]*(Chi[p][A]-ChiN[p][A])*ChiInv[A][i]*ChiInv[L][a]*GRAD_Chi[a][B][T]
                                                                  *ChiInv[B][r]*Finv[T][s];
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        row++;

                    }
                }
            }
            col++;
        }
    }
}


void FSMicromorphic2_3DT:: Form_Mm_76_matrix()
{
    Mm_76=0.0;
    int row=0;
    int col=0;
    for(int B=0;B<3;B++)
    {
        for(int a=0;a<3;a++)
        {
            for(int T=0;T<3;T++)
            {
                row=0;
                for(int m=0;m<3;m++)
                {
                    for(int l=0;l<3;l++)
                    {
                        for(int k=0;k<3;k++)
                        {
                            //summation

                            for(int p=0;p<3;p++)
                            {
                                for(int r=0;r<3;r++)
                                {
                                    for(int s=0;s<3;s++)
                                    {
                                        for(int A=0;A<3;A++)
                                        {
                                            Mm_76(row,col)+=CCof[k][l][m][p][r][s]*(Chi[p][A]-ChiN[p][A])*ChiInv[A][a]*ChiInv[B][r]*Finv[T][s];
                                        }
                                    }
                                }
                            }
                            row++;
                        }
                    }
                }
                col++;
            }

        }
    }
}

void FSMicromorphic2_3DT:: Form_Mm_77_matrix()
{
    Mm_77=0.0;
    int row=0;
    int col=0;
    for(int L=0;L<3;L++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int m=0;m<3;m++)
            {
                for(int l=0;l<3;l++)
                {
                    for(int k=0;k<3;k++)
                    {
                        //summation
                        for(int p=0;p<3;p++)
                        {
                            for(int r=0;r<3;r++)
                            {
                                for(int s=0;s<3;s++)
                                {
                                    for(int A=0;A<3;A++)
                                    {
                                        for(int a=0;a<3;a++)
                                        {
                                            for(int B=0;B<3;B++)
                                            {
                                                for(int T=0;T<3;T++)
                                                {
                                                    Mm_77(row,col)+=CCof[k][l][m][p][r][s]*(Chi[p][A]-ChiN[p][A])*ChiInv[A][a]*GRAD_Chi[a][B][T]*ChiInv[B][i]
                                                            *ChiInv[L][r]*Finv[T][s];
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        row++;
                    }
                }
            }
            col++;
        }
    }
}

void FSMicromorphic2_3DT:: Form_Mm_78_matrix()
{
    Mm_78=0.0;
    int row=0;
    int col=0;
    for(int s=0;s<3;s++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int m=0;m<3;m++)
            {
                for(int l=0;l<3;l++)
                {
                    for(int k=0;k<3;k++)
                    {
                        //summation
                        for(int p=0;p<3;p++)
                        {
                            for(int r=0;r<3;r++)
                            {
                                for(int A=0;A<3;A++)
                                {
                                    for(int a=0;a<3;a++)
                                    {
                                        for(int B=0;B<3;B++)
                                        {
                                            for(int T=0;T<3;T++)
                                            {
                                                Mm_78(row,col)+=CCof[k][l][m][p][r][s]*(Chi[p][A]-ChiN[p][A])*ChiInv[A][a]*GRAD_Chi[a][B][T]*ChiInv[B][r]*Finv[T][i];
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        row++;
                    }
                }
            }
            col++;
        }
    }
}

void FSMicromorphic2_3DT:: Form_Mm_8_matrix()
{

    Mm_8=0.0;
    int col;
    int row;
    col=0;
    for(int T = 0;T<= 2;T++)
        {
        for(int n=0;n<=2;n++)
            {
            row = 0;//row calculations start here
            for(int m = 0;m <= 2; m++)
            {
                for(int l = 0; l <= 2; l++)
                {
                    for(int k = 0; k <= 2; k++)
                    {
                        //summation on the same term starts here
                        for(int p = 0; p <= 2; p++)
                        {
                            for(int r = 0; r <= 2; r++)
                            {
                                for(int s = 0; s <= 2; s++)
                                {
                                    for(int L = 0; L <= 2; L++)
                                    {
                                        for(int i = 0; i <= 2; i++)
                                        {
                                            for(int H=0;H<=2;H++)
                                            {
                                                for(int R=0;R<=2;R++)
                                                {
                                                    Mm_8(row, col) +=CCof[k][l][m][p][r][s]*ChiN[p][L]*ChiInv[L][n]*
                                                                 ChiInv[T][i]*GRAD_Chi[i][H][R]*Finv[R][r]*ChiInv[H][s];}}}}}}}
                        row++;}
                    }
                }
            col++;
            }
        }
}

void FSMicromorphic2_3DT:: Form_Mm_9_matrix()
{

    Mm_9=0.0;
    int col;
    int row;
    col=0;
    for(int T = 0;T<= 2;T++)
        {
            for(int n=0;n<=2;n++)
            {
                for(int K=0;K<=2;K++)
                {
                    row = 0;//row calculations start here
                    for(int m = 0;m <= 2; m++)
                    {
                        for(int l = 0; l <= 2; l++)
                        {
                            for(int k = 0; k <= 2; k++)
                            {
                                //summation on the same term starts here
                                for(int p = 0; p <= 2; p++)
                                {
                                    for(int r = 0; r <= 2; r++)
                                    {
                                        for(int s = 0; s <= 2; s++)
                                        {
                                            for(int L = 0; L <= 2; L++)
                                            {
                                                Mm_9(row, col) +=CCof[k][l][m][p][r][s]*ChiN[p][L]*ChiInv[L][n]
                                                               *Finv[K][r]*ChiInv[T][s];}}}}
                            row++;}
                        }
                    }
                    col++;
                }
            }
        }




}

void FSMicromorphic2_3DT:: Form_Mm_10_matrix()
{

    Mm_10=0.0;
    int col;
    int row;
    col=0;
    for(int T = 0;T<= 2;T++)
        {
            for(int n=0;n<=2;n++)
            {
                    row = 0;//row calculations start here
                    for(int m = 0;m <= 2; m++)
                    {
                        for(int l = 0; l <= 2; l++)
                        {
                            for(int k = 0; k <= 2; k++)
                            {
                                //summation on the same term starts here
                                for(int p = 0; p <= 2; p++)
                                {
                                    for(int r = 0; r <= 2; r++)
                                    {
                                        for(int s = 0; s <= 2; s++)
                                        {
                                            for(int L = 0; L <= 2; L++)
                                            {
                                                for(int a = 0; a <= 2; a++)
                                                {
                                                    for(int K = 0; K <= 2; K++)
                                                    {
                                                        for(int R = 0; R <= 2; R++)
                                                        {
                                                            Mm_10(row,col) += CCof[k][l][m][p][r][s]*ChiN[p][L]*ChiInv[L][a]*GRAD_Chi[a][K][R]
                                                                            *Finv[R][r]*ChiInv[K][n]*ChiInv[T][s];}}}}}}}
                            row++;}
                        }
                    }
                    col++;
                }
            }
}


void FSMicromorphic2_3DT:: Form_Mm_11_matrix()
{

    Mm_11=0.0;
    int col;
    int row;
    col=0;
    row=0;
/*    for(int k = 0;k<= 2;k++)
        {
            for(int n=0;n<=2;n++)
            {
                    row = k;//row calculations start here//attention here is different
                    for(int m = 0;m <= 2; m++)
                    {
                        for(int l = 0; l <= 2; l++)
                        {
                                //summation on the same term starts here
                                for(int i=0;i<=2;i++)
                                {
                                    for(int L=0;L<=2;L++)
                                    {

                                        Mm_11(row, col) +=Fn[i][L]*Finv[L][n]*GammaN[i][l][m];}}
                            row=row+3;
                        }
                    }
                    col++;
                }
            }
*/
    for(int p = 0;p<= 2;p++)
        {
            for(int n=0;n<=2;n++)
            {
                   //row calculations start here//attention here is different
                row=0;
                for(int m=0;m<3;m++)
                        {
                        for(int l = 0;l <= 2; l++)
                            {
                            for(int k = 0; k <= 2; k++)
                                {
                                //summation on the same term starts here

                                    for(int r=0;r<=2;r++)
                                        {
                                        for(int s=0;s<3;s++)
                                            {
                                                for(int L=0;L<3;L++)
                                                    {
                                                        for(int i=0;i<3;i++)
                                                            {
                                                                for(int n=0;n<3;n++)
                                                                    {
                                                                    Mm_11(row, col) +=CCof[k][l][m][p][r][s]*Fn[i][L]*Finv[L][n]*GammaN[i][r][s];
                                                                    }
                                                                }
                                                        }
                                                }
                                    }
                                row++;
                                }
                            }
                        }
                    col++;
            }
        }

}


void FSMicromorphic2_3DT:: Form_Mm_12_matrix()
{

    Mm_12=0.0;
    int col;
    int row;
    col=0;
/*    for(int m = 0;m<= 2;m++)
        {
            for(int n=0;n<=2;n++)
            {
                    row = m*9;//row calculations start here, attention here  is different too
                    for(int l = 0; l <= 2; l++)
                        {
                            for(int k = 0; k <= 2; k++)
                            {
                                //summation on the same term starts here
                                for(int i=0;i<=2;i++)
                                {
                                    for(int L=0;L<=2;L++)
                                    {
                                        Mm_12(row, col) +=GammaN[k][l][i]*Fn[i][L]*Finv[L][n];}}
                            row++;}
                        }
                    col++;
                }
            }*/

    for(int s = 0;s<= 2;s++)
        {
            for(int n=0;n<=2;n++)
            {
                    row = 0;//row calculations start here, attention here  is different too
                    for(int m = 0; m <= 2; m++)
                        {
                            for(int l = 0; l <= 2; l++)
                            {
                               for(int k=0;k<3;k++)
                               {
                                //summation on the same term starts here
                                for(int p=0;p<=2;p++)
                                {
                                    for(int r=0;r<=2;r++)
                                    {
                                      for(int i=0;i<3;i++)
                                      {
                                          for(int L=0;L<3;L++)
                                          {
                                              Mm_12(row, col) +=CCof[k][l][m][p][r][s]*GammaN[p][r][i]*Fn[i][L]*Finv[L][n];
                                          }
                                      }

                                    }
                                }
                            row++;
                               }
                            }
                        }
                    col++;
            }
        }

}

void FSMicromorphic2_3DT:: Form_Mm_13_matrix()
{
    Mm_13=0.0;
    int col;
    int row;
    col=0;

/*
    for(int T = 0;T<= 2;T++)
        {
            for(int n=0;n<=2;n++)
            {
                    row = 0;//row calculations start here
                    for(int m = 0;m <= 2; m++)
                    {
                        for(int l = 0; l <= 2; l++)
                        {
                            for(int k = 0; k <= 2; k++)
                            {
                                //summation on the same term starts here
                                for(int i=0;i<=2;i++)
                                {
                                    for(int L=0;L<=2;L++)
                                    {
                                        Mm_13(row, col) +=GammaN[k][i][m]*ChiN[i][L]*ChiInv[L][n]*ChiInv[T][l];}}
                            row++;}
                        }
                    }
                    col++;
                }
            }
*/




    for(int T = 0;T<= 2;T++)
        {
            for(int t=0;t<=2;t++)
            {
                    row = 0;//row calculations start here
                    for(int m = 0;m <= 2; m++)
                    {
                        for(int l = 0; l <= 2; l++)
                        {
                            for(int k = 0; k <= 2; k++)
                            {
                                //summation on the same term starts here
                                for(int p=0;p<3;p++)
                                {
                                    for(int r=0;r<3;r++)
                                    {
                                        for(int s=0;s<3;s++)
                                        {

                                            for(int i=0;i<=2;i++)
                                            {
                                                for(int L=0;L<=2;L++)
                                                {
                                                    Mm_13(row, col) +=CCof[k][l][m][p][r][s]*GammaN[p][i][s]*ChiN[i][L]*ChiInv[L][t]*ChiInv[T][r];}}

                                        }
                                    }
                                }

                            row++;}
                        }
                    }
                    col++;
                }
            }

}


void FSMicromorphic2_3DT:: Form_Mm_14_matrix()
{

    Mm_14=0.0;
    int col;
    int row;
    col=0;
    for(int T = 0;T<= 2;T++)
        {
        for(int n=0;n<=2;n++)
            {
            row = 0;//row calculations start here
            for(int m = 0;m <= 2; m++)
            {
                for(int l = 0; l <= 2; l++)
                {
                    for(int k = 0; k <= 2; k++)
                    {
                      Mm_14(row, col) +=Mnplus1[k][l][m]*Finv[T][n];
                      row++;
                     }
                }
            }
            col++;
            }
        }


}

void FSMicromorphic2_3DT:: Form_Ru_1_matrix()
{
    Ru_1=0.0;
    int col;
    int row;
    col=0;
    for(int i = 0;i<= 2;i++)
        {
            for(int k=0;k<=2;k++)
            {
                    row = 0;//row calculations start here
                    for(int m = 0; m <= 2; m++)
                        {
                            for(int l = 0; l <= 2; l++)
                            {
                                //summation on the same term starts here
                                    for(int L=0;L<=2;L++)
                                    {
                                        Ru_1(row, col) +=Fn[i][L]*Finv[L][k]*sn_sigman(m,l);
                                    }
                            row++;
                            }
                        }
                    col++;
                }
            }
}

void FSMicromorphic2_3DT:: Form_Ru_2_matrix()
{

    Ru_2=0.0;
    int col;
    int row;
    col=0;
    for(int i = 0;i<= 2;i++)
        {
            for(int k=0;k<=2;k++)
            {
                    row = 0;//row calculations start here
                    for(int m = 0; m <= 2; m++)
                        {
                            for(int l = 0; l <= 2; l++)
                            {
                                //summation on the same term starts here
                                    for(int L=0;L<=2;L++)
                                    {
                                        Ru_2(row, col)+=Fn[m][L]*Finv[L][k]*sn_sigman(i,l);
                                     }

                            row++;}
                        }
                    col++;
                }
            }


}

void FSMicromorphic2_3DT:: Form_Ru_3_matrix()
{

    Ru_3=0.0;
    int col;
    int row;
    col=0;
    for(int i = 0;i<= 2;i++)
        {
            for(int k=0;k<=2;k++)
            {
                    row = 0;//row calculations start here
                    for(int m = 0; m <= 2; m++)
                        {
                            for(int l = 0; l <= 2; l++)
                            {
                                //summation on the same term starts here
                                    for(int L=0;L<=2;L++)
                                    {
                                        Ru_3(row, col) +=sn_sigman(m,i)*Fn[l][L]*Finv[L][k];
                                     }
                            row++;
                            }
                        }
                    col++;
                }
            }
}

void FSMicromorphic2_3DT:: Form_RChi_1_matrix()
{

    int col;
    int row;
    RChi_1=0.0;
    col=0;
    for(int K = 0; K<= 2; K++)
        {
            for(int p=0; p<=2; p++)
            {
                    row = 0;//row calculations start here
                    for(int m = 0; m <= 2; m++)
                        {
                            for(int l = 0; l <= 2; l++)
                            {
                                //summation on the same term starts here
                                    for(int T=0; T<=2; T++)
                                    {
                                        RChi_1(row,col) +=ChiN[l][T]*ChiInv[T][p]*ChiInv[K][m];
                                    }
                            row++;
                           }
                        }
                    col++;
                }
            }


}

void FSMicromorphic2_3DT::Form_Ru_4_matrix()
{
    Ru_4=0.0;
    int col;
    int row;
    col=0;
   for(int l = 0; l<= 2; l++)
        {
            for(int k=0;k<=2;k++)
            {
                row = l;//row calculations start here
                for(int m = 0; m <= 2; m++)
                    {
                            //summation on the same term starts here
                                for(int K=0;K<=2;K++)
                                {
                                    Ru_4(row,col)+=Fn[m][K]*Finv[K][k];
                                }
                                row=row+3;
                    }
                    col++;
                }
            }

  /*  for(int p=0;p<3;p++)
    {
        for(int k=0;k<3;k++)
        {
            row=0;
            for(int m=0;m<3;m++)
            {
                for(int l=0;l<3;l++)
                {
                    //summation
                    for(int K=0;K<3;K++)
                    {
                        Ru_4(row, col) +=Fn[m][K]*Finv[K][k]*fIdentity_matrix(p,l);
                    }
                    row++;
                }
            }
        col++;
        }
    }

*/
}

void FSMicromorphic2_3DT:: Form_RChi_2_matrix()
{

    RChi_2=0.0;
    int col;
    int row;
    col=0;
    for(int K = 0; K<= 2; K++)
        {
            for(int p=0; p<=2; p++)
            {
                row = 0;//row calculations start here
                for(int m = 0; m <= 2; m++)
                    {
                        for(int l = 0; l <= 2; l++)
                        {
                            //summation on the same term starts here
                            for(int T=0; T<=2; T++)
                            {
                                RChi_2(row, col) +=ChiN[m][T]*ChiInv[T][p]*ChiInv[K][l];
                             }
                            row++;
                        }
                    }
                col++;
                }
            }
}


void FSMicromorphic2_3DT:: Form_Ru_5_matrix()
{

    Ru_5=0.0;
    int col;
    int row;
    col=0;
    for(int m = 0; m<= 2; m++)
        {
            for(int k=0;k<=2;k++)
            {
                row =m*3;//row calculations start here , here is also different
                for(int l = 0; l <= 2; l++)
                    {
                            //summation on the same term starts here
                                for(int K=0;K<=2;K++)
                                {
                                    Ru_5(row, col) +=Fn[l][K]*Finv[K][k];
                                }
                        row++;
                      }
                    col++;
                }
            }



}

void FSMicromorphic2_3DT:: Form_Ru_6_matrix()
{
    Ru_6=0.0;
    int col=0;
    int row=0;
    for(int i=0; i<3;i++)
    {
        for(int k=0;k<3;k++)
        {
            row=0;
            for(int m=0;m<3;m++)
            {
                for(int l=0;l<3;l++)
                {
                    for(int K=0;K<3;K++)
                    {
                        Ru_6(row,col)+=Fn[i][K]*Finv[K][k]*fIdentity_matrix(m,l);
                    }
                    row++;
                }
            }
            col++;
        }
    }

}
void FSMicromorphic2_3DT:: Form_Ru_7_matrix()
{
    Ru_7=0.0;
    int col=0;
    int row=0;

 for(int l = 0; l<= 2; l++)
     {
         for(int k=0;k<=2;k++)
         {
             row = l;//row calculations start here
             for(int m = 0; m <= 2; m++)
                 {
                         //summation on the same term starts here
                             for(int K=0;K<=2;K++)
                             {
                                 Ru_7(row, col) =(Ru_7(row, col) +Fn[m][K]*Finv[K][k]);
                             }
                             row=row+3;
                 }
                 col++;
             }
         }


}

void FSMicromorphic2_3DT:: Form_RChi_3_matrix()
{
    RChi_3=0.0;
    int row=0;
    int col=0;
    for(int K=0;K<3;K++)
    {
        for(int p=0;p<3;p++)
        {
            row=0;
            for(int m=0;m<3;m++)
            {
                for(int l=0;l<3;l++)
                {
                //summation
                    for(int T=0;T<3;T++)
                    {
                        for(int i=0;i<3;i++)
                        {
                            RChi_3(row,col)+=ChiN[i][T]*ChiInv[T][p]*ChiInv[K][i]*fIdentity_matrix(m,l);

                        }
                    }
                    row++;
                }
            }
            col++;
        }
    }
}

void FSMicromorphic2_3DT:: Form_Ru_8_matrix()
{
    Ru_8=0.0;
    int row=0;
    int col=0;
    for(int m=0;m<3;m++)
    {
        for(int k=0;k<3;k++)
        {
            row=m*3;
                for(int l=0;l<3;l++)
                {
                    //summation over the same term
                    for(int L=0;L<3;L++)
                    {
                        Ru_8(row,col)+=Fn[l][L]*Finv[L][k];
                    }
                    row++;
                }

            col++;
        }
    }

}

void FSMicromorphic2_3DT:: Form_Ru_9_matrix()
{
    Ru_9=0.0;
    int row=0;
    int col=0;
    for(int i=0;i<3;i++)
    {
        for(int p=0;p<3;p++)
        {
            row=0;
            for(int m=0;m<3;m++)
            {
                for(int l=0;l<3;l++)
                {
                   //sum
                    for(int K=0;K<3;K++)
                    {
                        Ru_9(row,col)+=Fn[i][K]*Finv[K][p]*fIdentity_matrix(m,l);
                    }
                    row++;
                }
            }
            col++;
        }
    }

}



void FSMicromorphic2_3DT:: Form_Rs_sigma_matrix()
{

    Rs_sigma=0.0;
    int col;
    int row;
    col=0;
    for(int T = 0;T<= 2;T++)
        {
            for(int n=0;n<=2;n++)
            {
                    row = 0;//row calculations start here
                    for(int m = 0; m <= 2; m++)
                        {
                            for(int l = 0; l <= 2; l++)
                            {

                                Rs_sigma(row, col)=s_sigma(m,l)*Finv[T][n];
                            row++;
                            }
                        }
                    col++;
                }
            }


}

void FSMicromorphic2_3DT:: Form_R_Capital_Lambda_Chi_matrix()
{


    R_Capital_Gamma_Chi=0.0;
    int col;
    int row;
    col=0;
            for(int K=0;K<=2;K++)
            {
                for( int m=0; m<=2; m++)
                {
                    row = m*3;//row calculations start here
                    for(int l = 0; l <= 2; l++)
                    {
                        //summation on the same term starts here
                        R_Capital_Gamma_Chi(row, col)=CapitalLambda(l,K);
                        row++;
                    }
                }
            col=col++;
            }


}

void FSMicromorphic2_3DT:: Form_CapitalLambda_matrix()
{
    for(int i=0;i<=2;i++)
    {
        for(int j=0;j<=2;j++)
        {
            CapitalLambda(i,j)=0.0;//10^8
        }
    }
}

void FSMicromorphic2_3DT::Form_H1_matrix()
{
    int row=0;
    double trdeltad=0.0;
    double dtgd[3][3][3];
    double grad_Nu[3][3][3];
    double Cgamma[3][3][3];
    double dgcir[3][3][3];
    H1=0.0;
/*    double DtDnu[3][3][3];
    double Dtnu[3][3];
    double DtGdot[3][3][3];
    double DTL[3][3];
    double grad_Chi[3][3][3];
    double grad_ChiN[3][3][3];
    double DtGC[3][3][3];
    double CklmprsDtGC[3][3][3];
    double trd;
    trd=0.0;*/
 /********************************************************************************
 *********************************************************************************
 *********************************************************************************
 *********************************************************************************/
    deltaEp=0.0;
    deltaNu=0.0;
    deltad=0.0;
    deltaL=0.0;
    tempSig=0.0;
    Fn_m=0.0;
    Finv_m=0.0;
    SigN_m=0.0;
    ChiInv_m=0.0;
    ChiN_m=0.0;


    for(int i=0;i<3;i++)
    {
        for(int j=0;j<3;j++)
        {

            Fn_m(i,j)=Fn[i][j];
            Finv_m(i,j)=Finv[i][j];
            SigN_m(i,j)=SigN[i][j];
            ChiInv_m(i,j)=ChiInv[i][j];
            ChiN_m(i,j)=ChiN[i][j];
        }
    }

    deltaL.MultAB(Fn_m,Finv_m);
    deltaL*=-1;
    deltaL+=fIdentity_matrix;

    deltaL_Tr.Transpose(deltaL);

    deltad=deltaL;
    deltad+=deltaL_Tr;
    deltad*=0.5;
    trdeltad=0.0;
    for(int i=0;i<3;i++)
        trdeltad+=deltad(i,i);

    deltaNu.MultAB(ChiN_m,ChiInv_m);
    deltaNu*=-1;
    deltaNu+=fIdentity_matrix;
    deltaEp+=deltaNu;
    deltaEp+=deltaL_Tr;
 /********************************************************************************
 *********************************************************************************
 *********************************************************************************
 *********************************************************************************/
//constructing Mnplus1
//initiliazting  the tensors
for(int m=0;m<3;m++)
{
    for(int l=0;l<3;l++)
    {
        for(int k=0;k<3;k++)
        {
            Mnplus1[k][l][m]=0.0;
            dtgd[k][l][m]=0.0;
            grad_Nu[k][l][m]=0.0;
            Cgamma[k][l][m]=0.0;
            dgcir[k][l][m]=0.0;}}}
//calculating the dChiInvdX appearing in grad_Nu(pr,s) in equation 101

for(int p=0;p<3;p++)
{
    for(int r=0;r<3;r++)
    {
        for(int s=0;s<3;s++)
        {
            //summation
            for(int L=0;L<3;L++)
            {
                for(int l=0;l<3;l++)
                {
                    for(int K=0;K<3;K++)
                    {
                        for(int T=0;T<3;T++)
                        {
                            grad_Nu[p][r][s]+=-(Chi[p][L]-ChiN[p][L])*ChiInv[L][l]*GRAD_Chi[l][K][T]*ChiInv[K][r]*fDeformation_Gradient_Inverse(T,s);
                        }
                    }
                }
            }
        }
    }
}

for(int p=0;p<3;p++)
{
    for(int r=0;r<3;r++)
    {
        for(int s=0;s<3;s++)
        {
            //summation
            for(int K=0;K<3;K++)
            {
                for(int L=0;L<3;L++)
                {
                    grad_Nu[p][r][s]+=(GRAD_Chi[p][L][K]-GRAD_ChiN[p][L][K])*fDeformation_Gradient_Inverse(K,s)*ChiInv[L][r];
                }
            }
        }
    }
}



for(int p=0;p<3;p++)
{
    for(int r=0;r<3;r++)
    {
        for(int s=0;s<3;s++)
        {
            //
             dtgd[p][r][s]+=grad_Nu[p][r][s];
            for(int i=0;i<3;i++)
            {
               dtgd[p][r][s]+=deltaNu(p,i)*GammaN[i][r][s]-deltaNu(i,r)*GammaN[p][i][s];
            }
        }
    }
}

for(int p=0;p<3;p++)
{
    for(int r=0;r<3;r++)
    {
        for(int s=0;s<3;s++)
        {        //
            dgcir[p][r][s]=dtgd[p][r][s];
            for(int i=0;i<3;i++)
            {
                dgcir[p][r][s]+=deltaL(i,p)*GammaN[i][r][s]+GammaN[p][r][i]*deltaL(i,s)+GammaN[p][i][s]*deltaNu(i,r);
            }
        }
    }
}


for(int k=0;k<3;k++)
{
    for(int l=0;l<3;l++)
    {
        for(int m=0;m<3;m++)
        {
            for(int p=0;p<3;p++)
            {
                for(int r=0;r<3;r++)
                {
                    for(int s=0;s<3;s++)
                    {
                        Cgamma[k][l][m]+=CCof[k][l][m][p][r][s]*dgcir[p][r][s];
                    }
                }
            }
        }
    }
}

for(int m=0;m<3;m++)
    {
        for(int l=0;l<3;l++)
        {
            for(int k=0;k<3;k++)
            {
                   //
                Mnplus1[k][l][m]+=(1-trdeltad)*mn[k][l][m];
                for(int p=0;p<3;p++)
                {
                    //Mnplus1[k][l][m]+=DTL[k][p]*mn[p][l][m]+mn[k][p][m]*DTL[l][p]+mn[k][l][p]*Dtnu[m][p];
                    Mnplus1[k][l][m]+=deltaL(k,p)*mn[p][l][m]+mn[k][p][m]*deltaL(l,p)+mn[k][l][p]*deltaNu(m,p);
                }
            }
        }
    }

for(int m=0;m<3;m++)
    {
        for(int l=0;l<3;l++)
        {
            for(int k=0;k<3;k++)
            {
                Mnplus1[k][l][m]+=Cgamma[k][l][m];
            }
        }
    }

    for(int m=0;m<3;m++)
    {
        for(int l=0;l<3;l++)
        {
            for(int k=0;k<3;k++)
            {
                H1[row]=Mnplus1[k][l][m];
                row++;
            }
        }
    }


}

void FSMicromorphic2_3DT::Form_H2_matrix()
{
    int row;
    double trdeltad=0.0;
    double trdeltaEp=0.0;
    double scale=0.0;
    row=0;
    H2=0.0;
    s_sigma=0.0;
    deltaEp=0.0;
    deltaNu=0.0;
    deltad=0.0;
    deltaL=0.0;
    tempSig=0.0;
    Fn_m=0.0;
    Finv_m=0.0;
    SigN_m=0.0;
    ChiInv_m=0.0;
    ChiN_m=0.0;
    for(int i=0;i<3;i++)
    {
        for(int j=0;j<3;j++)
        {
            Fn_m(i,j)=Fn[i][j];
            Finv_m(i,j)=Finv[i][j];
            SigN_m(i,j)=SigN[i][j];
            ChiInv_m(i,j)=ChiInv[i][j];
            ChiN_m(i,j)=ChiN[i][j];
        }
    }

    deltaL.MultAB(Fn_m,Finv_m);
    deltaL*=-1;
    deltaL+=fIdentity_matrix;

    deltaL_Tr.Transpose(deltaL);

    deltad=deltaL;
    deltad+=deltaL_Tr;
    deltad*=0.5;
    trdeltad=0.0;
    for(int i=0;i<3;i++)
        trdeltad+=deltad(i,i);

    deltaNu.MultAB(ChiN_m,ChiInv_m);
    deltaNu*=-1;
    deltaNu+=fIdentity_matrix;
    deltaEp+=deltaNu;
    deltaEp+=deltaL_Tr;

    for(int i=0;i<3;i++)
        trdeltaEp+=deltaEp(i,i);

    s_sigma+=sn_sigman;

    tempSig=sn_sigman;
    tempSig*=-trdeltad;
    s_sigma+=tempSig;

    tempSig.MultAB(deltaL,sn_sigman);
    s_sigma+=tempSig;

    tempSig.MultABT(sn_sigman,deltaL);
    s_sigma+=tempSig;

    tempSig.Transpose(deltaEp);
    scale=(fMaterial_Params[kKappa]-fMaterial_Params[kSigma_const]);
    tempSig*=scale;
    s_sigma+=tempSig;

    tempSig=deltaEp;
    scale=(fMaterial_Params[kNu]-fMaterial_Params[kSigma_const]);
    tempSig*=scale;
    s_sigma+=tempSig;

    tempSig=fIdentity_matrix;
    scale=trdeltad*fMaterial_Params[kTau];
    tempSig*=scale;
    s_sigma+=tempSig;

    tempSig=deltad;
    scale=2*fMaterial_Params[kSigma_const];
    tempSig*=scale;
    s_sigma+=tempSig;

    tempSig=fIdentity_matrix;
    scale=trdeltaEp*(fMaterial_Params[kEta]-fMaterial_Params[kTau]);
    tempSig*=scale;
    s_sigma+=tempSig;



 //  s_sigma*=-1;//because in formulation it is sigma-s!!

    for(int m=0;m<=2;m++)
    {
        for(int l=0;l<=2;l++)
        {
            H2[row]=-s_sigma(m,l);
            row++;
        }
    }
}

void FSMicromorphic2_3DT:: Form_H3_matrix()
{
    int row;
    row=0;
    H3=0.0;
    for(int m=0;m<=2;m++)
    {
        for(int l=0;l<=2;l++)
        {
            H3[row]=Lambda(l,m)-Omega(l,m);
            row++;
        }
    }
}

void FSMicromorphic2_3DT:: Mapping_double_and_Array(const int condition)
{
    int row;
    row=0;
  //
    if(condition==1)
    {
        for(int i=0;i<=2;i++)
        {
            for(int j=0;j<=2;j++)
            {
                for(int k=0;k<=2;k++)
                {
                    mn_ar[row]=Mnplus1[i][j][k];
                    GammaN_ar[row]=Gamma[i][j][k];
                    row++;
                }
            }
        }
    }
   if(condition==-1)
    {
        for(int i=0;i<=2;i++)
        {
            for(int j=0;j<=2;j++)
            {
                SigN[i][j]=SigN_ar(i,j);
              //  row1++;
                for(int k=0;k<=2;k++)
                {
                    mn[i][j][k]=mn_ar[row];
                    GammaN[i][j][k]=GammaN_ar[row];
                    row++;
                }
            }
        }
    }

}

void FSMicromorphic2_3DT:: Form_deformation_tensors_arrays(const int condition) //
{
    int row,row1;
    row=0;

    if(condition==1)
    {
        for (int i=0;i<=2;i++)
        {
            for(int j=0;j<=2;j++)
            {

                Chi_ar(i,j)=Chi[i][j];

                for(int k=0;k<=2;k++)
                {
                    GRAD_Chi_ar[row]=GRAD_Chi[i][j][k];
                    row++;
                }
            }
        }
    }
    if(condition==-1)
    {
        for (int i=0;i<=2;i++)
        {
            for(int j=0;j<=2;j++)
            {
                Fn[i][j]=Fn_ar(i,j);
                FnInv[i][j]=FnInv_ar(i,j);
                ChiN[i][j]=ChiN_ar(i,j);

                for(int k=0;k<=2;k++)
                {
                    GRAD_ChiN[i][j][k]=GRAD_ChiN_ar[row];
                    row++;
                }
            }
        }
    }

}


////////////////////////////////////////////////////////////////
//////////////FINITE STRAIN MATRICES FUNCTIONS//////////////////
////////////////////////////////////////////////////////////////
void FSMicromorphic2_3DT::Form_ChiM()
{
    NCHI.Multx(Phi_vec,Chi_vec);
    ChiM(0,0) = Chi_vec[0]+1.0;
    ChiM(0,1) = Chi_vec[3];
    ChiM(0,2) = Chi_vec[6];
    ChiM(1,0) = Chi_vec[1];
    ChiM(1,1) = Chi_vec[4]+1.0;
    ChiM(1,2) = Chi_vec[7];
    ChiM(2,0) = Chi_vec[2];
    ChiM(2,1) = Chi_vec[5];
    ChiM(2,2) = Chi_vec[8]+1.0;

}


void FSMicromorphic2_3DT::Form_Second_Piola_Kirchhoff_SPK(const dMatrixT& LagStn, const dMatrixT& MicroStn)
{
    double trLST=0.0;
    double  trcE=0.0;
    double scale=0.0;
/*    double trcE=0.0;
    double scale=0.0;*/
    SPK=0.0;
    Temp_SPK=0.0;
    KirchhoffST=0.0;

  /*  trLST=LagrangianStn(0,0)+LagrangianStn(1,1)+LagrangianStn(2,2);
    SPK.SetToScaled(trLST*fMaterial_Params[kLambda],fIdentity_matrix);
    Temp_SPK.SetToScaled(2*fMaterial_Params[kMu],LagrangianStn);
    SPK+=Temp_SPK;
    KirchhoffST.MultABCT(fDeformation_Gradient,SPK,fDeformation_Gradient);*/

    trLST= LagStn(0,0)+LagStn(1,1)+LagStn(2,2);
    trcE = MicroStn(0,0)+MicroStn(1,1)+MicroStn(2,2);

   Temp_SPK=fIdentity_matrix;
   scale=(fMaterial_Params[kLambda]+fMaterial_Params[kTau]);
   scale*=trLST;
   Temp_SPK*=scale;
   SPK+=Temp_SPK;

   scale=2*(fMaterial_Params[kMu]+fMaterial_Params[kSigma_const]);
   Temp_SPK=LagStn;
   Temp_SPK*=scale;
   SPK+=Temp_SPK;

   scale=fMaterial_Params[kEta]*trcE;
   Temp_SPK=fIdentity_matrix;
   Temp_SPK*=scale;
   SPK+=Temp_SPK;

   Temp_SPK=MicroStn;
   Temp_SPK*=fMaterial_Params[kKappa];
   SPK+=Temp_SPK;

   Temp_SPK.Transpose(MicroStn);
   Temp_SPK*=fMaterial_Params[kNu];
   SPK+=Temp_SPK;


/*
    Temp_SPK=fIdentity_matrix;
    //scale=lambda_cap;
    scale=lambda_cap+g1_;
    scale*=trLST;
    Temp_SPK*=scale;
    SPK+=Temp_SPK;

    //scale=2*Mu_cap;
    scale=2*Mu_cap+2*g2_;
    Temp_SPK=LagrangianStn;
    Temp_SPK*=scale;
    SPK+=Temp_SPK;

    // scale=g1_*trcE;
    scale=(g1_+b1_)*trcE;
    Temp_SPK=fIdentity_matrix;
    Temp_SPK*=scale;
    SPK+=Temp_SPK;

    Temp_SPK=MicroStnTensor;
    //scale=g2_;
    scale=(g2_+b2_);
    Temp_SPK*=scale;
    SPK+=Temp_SPK;

    Temp_SPK.Transpose(MicroStnTensor);
    //scale=g2_;
    scale=(g2_+b3_);
    Temp_SPK*=scale;
    SPK+=Temp_SPK;

*/


}

void FSMicromorphic2_3DT:: Form_I1_1()
{
    int row=0;
    int col=0;
    I1_1=0.0;
    for(int k=0;k<3;k++)
    {
        for(int n=0;n<3;n++)
        {
            row=3*n;
            for(int l=0;l<3;l++)
            {
                //summation over the dummy indices
                I1_1(row,col)+=KirchhoffST(k,l);
                // row=row+3;
                row++;
            }
            col++;
        }

    }
}


void FSMicromorphic2_3DT:: Form_I1_2()
{
    int row=0;
    int col=0;
    I1_2=0.0;
    for(int n=0;n<3;n++)
    {
        for(int k=0;k<3;k++)
        {
            row=3*k;
            for(int l=0;l<3;l++)
            {
                I1_2(row,col)+=KirchhoffST(n,l);
                row++;
            }
            col++;
        }
    }


}

void FSMicromorphic2_3DT:: Form_I1_3()
{
    int row=0;
    int col=0;
    I1_3=0.0;

/*    for(int m=0;m<3;m++)
    {
        for(int l=0;l<3;l++)
        {
            //row=3*l;
            row=l;
            for(int k=0;k<3;k++)
            {
                I1_3(row,col)+= KirchhoffST(k,m);
                row=row+3;
                //row=row+1;
            }
            col++;
        }
     }*/

    for(int L=0;L<3;L++)
    {
        for(int l=0;l<3;l++)
        {
            row=l;
            for(int K=0;K<3;K++)
            {
                I1_3(row,col)=SPK(K,L);
                row=row+3;
            }
            col++;
        }
    }


}

void FSMicromorphic2_3DT:: Form_I1_4()
{
    int row=0;
    int col=0;
    I1_4=0.0;
/*    for(int n=0;n<3;n++)
    {
        for(int i=0;i<3;i++)
        {
            //
            row=0;
            for(int k=0;k<3;k++)
            {
                for(int l=0;l<3;l++)
                {
                    //summation over the same term
                    for(int K=0;K<3;K++)
                    {
                        for(int M=0;M<3;M++)
                        {
                            I1_4(row,col)+=fDeformation_Gradient(k,K)*fDeformation_Gradient(n,M)*fDeformation_Gradient(i,M)
                                          *fDeformation_Gradient(l,K);
                        }
                    }
                    row++;
                }
            }
            col++;
        }
    }
*/


    for(int M=0;M<3;M++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int L=0;L<3;L++)
            {
                for(int l=0;l<3;l++)
                {
                    I1_4(row,col)=fDeformation_Gradient(l,L)*fDeformation_Gradient(i,M);
                    row++;
                }
            }
            col++;
        }
    }


}

void FSMicromorphic2_3DT:: Form_I1_5()
{
    int row;
    int col=0;
    I1_5=0.0;
/*    for(int n=0;n<3;n++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            //
            for(int k=0;k<3;k++)
            {
                for(int l=0;l<3;l++)
                {
                    //summation
                    for(int K=0;K<3;K++)
                    {
                        for(int L=0;L<3;L++)
                        {
                            I1_5(row,col)+=fDeformation_Gradient(k,K)*fDeformation_Gradient(n,K)
                                         *fDeformation_Gradient(i,L)*fDeformation_Gradient(l,L);
                        }
                    }
                    row++;
                }
            }
            col++;
        }
    }
    */

    for(int K=0;K<3;K++)
    {
        for(int i=0;i<3;i++)
        {

            row=K*3;
            for(int l=0;l<3;l++)
            {
                for(int L=0;L<3;L++)
                {
                    I1_5(row,col)+=fDeformation_Gradient(l,L)
                                  *fDeformation_Gradient(i,L);
                }
                row++;
            }
            col++;
        }
    }



}

void FSMicromorphic2_3DT:: Form_I1_6()
{
    int row;
    int col=0;
    I1_6=0.0;
/*    for(int n=0;n<3;n++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            //
            for(int k=0;k<3;k++)
            {
                for(int l=0;l<3;l++)
                {
                    //summation
                    for(int K=0;K<3;K++)
                    {
                        for(int L=0;L<3;L++)
                        {
                            I1_6(row,col)+=fDeformation_Gradient(k,K)*fDeformation_Gradient(i,K)
                                          *fDeformation_Gradient(n,L)*fDeformation_Gradient(l,L);
                        }
                    }
                row++;
                }
            }
            col++;
        }
    }*/

    for(int L=0;L<3;L++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int K=0;K<3;K++)
            {
                for(int l=0;l<3;l++)
                {
                    I1_6(row,col)=fDeformation_Gradient(l,L)*fDeformation_Gradient(i,K);
                    row++;
                }
            }
            col++;
        }
    }

}

void FSMicromorphic2_3DT:: Form_I1_7()
{
    int row;
    int col=0;
    I1_7=0.0;
    for(int n=0;n<3;n++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int k=0;k<3;k++)
            {
                for(int l=0;l<3;l++)
                {
                    //summation
                    for(int K=0;K<3;K++)
                    {
                        for(int M=0;M<3;M++)
                        {
                            I1_7(row,col)+=fDeformation_Gradient(k,K)*fDeformation_Gradient(n,M)
                                          *ChiM(i,M)*fDeformation_Gradient(l,K);
                        }
                    }
                    row++;
                }
            }
            col++;
        }
    }
}

void FSMicromorphic2_3DT:: Form_I2_1()
{
    int row;
    int col=0;
    I2_1=0.0;
    for(int M=0;M<3;M++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int k=0;k<3;k++)
            {
                for(int l=0;l<3;l++)
                {
                    //summation
                    for(int K=0;K<3;K++)
                    {
                        I2_1(row,col)+=fDeformation_Gradient(k,K)*fDeformation_Gradient(i,M)
                                      *fDeformation_Gradient(l,K);
                    }
                    row++;
                }
            }
            col++;
        }
    }
}


void FSMicromorphic2_3DT:: Form_I1_8()
{
    int row;
    int col=0;
    I1_8=0.0;
    for(int n=0;n<3;n++)
    {
        for(int i=0;i<3;i++)
        {
            //
            row=0;
            for(int k=0;k<3;k++)
            {
                for (int l=0;l<3;l++)
                {
                    //summation
                    for(int K=0;K<3;K++)
                    {
                        for(int L=0;L<3;L++)
                        {
                            I1_8(row,col)+=fDeformation_Gradient(k,K)*fDeformation_Gradient(n,K)
                                          *ChiM(i,L)*fDeformation_Gradient(l,L);
                        }
                    }
                    row++;
                }
            }
            col++;
        }
    }

}

void FSMicromorphic2_3DT:: Form_I2_2()
{
    int row;
    int col=0;
    I2_2=0.0;
    for(int L=0;L<3;L++)
    {
        for(int i=0;i<3;i++)
        {
            //
            row=0;
            for(int k=0;k<3;k++)
            {
                for(int l=0;l<3;l++)
                {
                    //summation
                    for(int K=0;K<3;K++)
                    {
                        I2_2(row,col)+=fDeformation_Gradient(k,K)*fDeformation_Gradient(i,K)
                                       *fDeformation_Gradient(l,L);
                    }
                    row++;
                }
            }
            col++;
        }
    }
}

void FSMicromorphic2_3DT:: Form_I1_9()
{
    int row;
    int col=0;
    I1_9=0.0;
/*    for(int n=0;n<3;n++)
    {
        for(int i=0;i<3;i++)
        {
            //
            row=0;
            for(int k=0;k<3;k++)
            {
                for(int l=0;l<3;l++)
                {
                    //summation
                    for(int K=0;K<3;K++)
                    {
                        for(int L=0;L<3;L++)
                        {
                            I1_9(row,col)+=fDeformation_Gradient(k,K)*fDeformation_Gradient(n,L)
                                          *ChiM(i,K)*fDeformation_Gradient(l,L);
                        }
                    }
                    row++;
                }
            }
            col++;
        }
    }*/

    for(int L=0;L<3;L++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int K=0;K<3;K++)
            {
                for(int l=0;l<3;l++)
                {
                    I1_9(row,col)=ChiM(i,K)*fDeformation_Gradient(l,L);
                    row++;
                }
            }
            col++;
        }
    }


}


void FSMicromorphic2_3DT:: Form_I2_3()
{
    int row;
    int col=0;
    I2_3=0.0;
/*    for(int K=0;K<3;K++)
    {
        for(int i=0;i<3;i++)
        {
            //
            row=0;
            for(int k=0;k<3;k++)
            {
                for(int l=0;l<3;l++)
                {
                    //summation
                    for(int L=0;L<3;L++)
                    {
                        I2_3(row,col)+=fDeformation_Gradient(k,K)*fDeformation_Gradient(i,L)*fDeformation_Gradient(l,L);
                    }
                    row++;
                }
            }
            col++;
        }
    }*/

    for(int K=0;K<3;K++)
    {
        for(int i=0;i<3;i++)
        {
            row=3*K;
            for(int l=0;l<3;l++)
            {
                //summation
                for(int L=0;L<3;L++)
                {
                    I2_3(row,col)+=fDeformation_Gradient(i,L)*fDeformation_Gradient(l,L);
                }
                row++;
            }
            col++;
        }
    }
}

void FSMicromorphic2_3DT:: Form_fV1()
{
    int row=0;
    fV1=0.0;
    //fTemp_matrix_nsd_x_nsd=0.0;
    //fTemp_matrix_nsd_x_nsd.MultABCT(fDeformation_Gradient,SPK,fDeformation_Gradient);
/*    for(int l=0;l<3;l++)
    {
        for(int k=0;k<3;k++)
        {
            fV1[row]=KirchhoffST(l,k);
            row++;
        }
    }*/

    fTemp_matrix_nsd_x_nsd.MultABT(SPK,fDeformation_Gradient);
    for (int K=0;K<3;K++)
    {
        for(int l=0;l<3;l++)
        {
            fV1[row]=fTemp_matrix_nsd_x_nsd(K,l);
            row++;
        }
    }


}

void FSMicromorphic2_3DT:: Form_fV2()
{
    int row=0;
    fV2=0.0;
    Temp_SPK=0.0;
    Temp_SPK.MultABCT(fDeformation_Gradient,SIGMA_S,fDeformation_Gradient);
    //Temp_SPK*=-1;
    for(int l=0;l<3;l++)
    {
        for(int m=0;m<3;m++)
        {
            fV2[row]=Temp_SPK(m,l);//this is s_sigma
            row++;
        }
    }
}


void FSMicromorphic2_3DT:: Form_fV3()
{
    int row=0;
    fV3=0.0;
    fTemp_tensor_n_sd_x_n_sd_x_n_sd=0.0;

//  for(int k=0;k<3;k++)
//    {
//        for(int l=0;l<3;l++)
//        {
//            for(int m=0;m<3;m++)
//            {
//                //summation
//                for(int K=0;K<3;K++)
//                {
//                    for(int L=0;L<3;L++)
//                    {
//                        for(int M=0;M<3;M++)
//                        {
//                            fTemp_tensor_n_sd_x_n_sd_x_n_sd(k,l,m)+=fDeformation_Gradient(k,K)
//                                                                  *fDeformation_Gradient(l,L)
//                                                                  *fMKLM(K,L,M)
//                                                                  *ChiM(m,M);
//                        }
//                    }
//                }
//            }
//        }
//     }


//
//    for(int l=0;l<3;l++)
//    {
//        for(int m=0;m<3;m++)
//        {
//            for(int k=0;k<3;k++)
//            {
//                fV3[row]=fTemp_tensor_n_sd_x_n_sd_x_n_sd(k,l,m);
//                row++;
//            }
//        }
//    }



    for(int A=0;A<3;A++)
      {
          for(int l=0;l<3;l++)
          {
              for(int m=0;m<3;m++)
              {
                  //summation
                  for(int L=0;L<3;L++)
                  {
                      for(int M=0;M<3;M++)
                      {
                    	  fTemp_tensor_n_sd_x_n_sd_x_n_sd(A,l,m)+=fDeformation_Gradient(l,L)
                                                                 *fMeKLM(A,L,M)
                                                                 *ChiM(m,M);
                      }
                  }
              }
          }
       }

    for(int l=0;l<3;l++)
    {
        for(int m=0;m<3;m++)
        {
            for(int A=0;A<3;A++)
            {
                fV3[row]=fTemp_tensor_n_sd_x_n_sd_x_n_sd(A,l,m);
                row++;
            }
        }
    }



}

void FSMicromorphic2_3DT:: Form_SIGMA_S()
{
    double trLST=0.0;
    double trcE =0.0;
    double scale=0.0;
    SIGMA_S=0.0;
    fTemp_matrix_nsd_x_nsd=0.0;

    trLST= LagrangianStn(0,0)+LagrangianStn(1,1)+LagrangianStn(2,2);
    trcE = MicroStnTensor(0,0)+MicroStnTensor(1,1)+MicroStnTensor(2,2);

    SIGMA_S =fIdentity_matrix;
    scale   =(LagrangianStn(0,0)+LagrangianStn(1,1)+LagrangianStn(2,2))*fMaterial_Params[kTau];//or trLST
    SIGMA_S*=scale;

    fTemp_matrix_nsd_x_nsd=LagrangianStn;
    scale=2*fMaterial_Params[kSigma_const];
    fTemp_matrix_nsd_x_nsd*=scale;
    SIGMA_S+=fTemp_matrix_nsd_x_nsd;

    fTemp_matrix_nsd_x_nsd=fIdentity_matrix;
    scale=trcE*(fMaterial_Params[kEta]-fMaterial_Params[kTau]);
    fTemp_matrix_nsd_x_nsd*=scale;
    SIGMA_S+=fTemp_matrix_nsd_x_nsd;

    fTemp_matrix_nsd_x_nsd=MicroStnTensor;
    scale=(fMaterial_Params[kNu]-fMaterial_Params[kSigma_const]);
    fTemp_matrix_nsd_x_nsd*=scale;
    SIGMA_S+=fTemp_matrix_nsd_x_nsd;

    fTemp_matrix_nsd_x_nsd.Transpose(MicroStnTensor);
    scale=(fMaterial_Params[kKappa]-fMaterial_Params[kSigma_const]);
    fTemp_matrix_nsd_x_nsd*=scale;
    SIGMA_S+=fTemp_matrix_nsd_x_nsd;



/*  SIGMA_S =fIdentity_matrix;
    //scale   =(LagrangianStn(0,0)+LagrangianStn(1,1)+LagrangianStn(2,2))*(g1_-lambda_cap);//or trLST
    scale=(LagrangianStn(0,0)+LagrangianStn(1,1)+LagrangianStn(2,2))*g1_;
    SIGMA_S*=scale;

    fTemp_matrix_nsd_x_nsd=LagrangianStn;
    //scale=2*g2_-2*Mu_cap;
    scale=2*g2_;
    fTemp_matrix_nsd_x_nsd*=scale;
    SIGMA_S+=fTemp_matrix_nsd_x_nsd;

    fTemp_matrix_nsd_x_nsd=fIdentity_matrix;
    //scale=trcE*(b1_-g1_);
    scale=trcE*b1_;
    fTemp_matrix_nsd_x_nsd*=scale;
    SIGMA_S+=fTemp_matrix_nsd_x_nsd;

    fTemp_matrix_nsd_x_nsd=MicroStnTensor;
    //scale=(b2_-g2_);
    scale=b2_;
    fTemp_matrix_nsd_x_nsd*=scale;
    SIGMA_S+=fTemp_matrix_nsd_x_nsd;

    fTemp_matrix_nsd_x_nsd.Transpose(MicroStnTensor);
    //scale=(b3_-g2_);
    scale=b3_;
    fTemp_matrix_nsd_x_nsd*=scale;
    SIGMA_S+=fTemp_matrix_nsd_x_nsd;
*/



}


void FSMicromorphic2_3DT:: Form_fFJ()
{
    int row=0;
    int col=0;
    fFJ=0.0;
    Temp_SPK=0.0;
/*  fTemp_matrix_nsd_x_nsd=0.0;
    fTemp_matrix_nsd_x_nsd=SIGMA_S;
    Temp_SPK.MultABCT(fDeformation_Gradient,fTemp_matrix_nsd_x_nsd,fDeformation_Gradient);*/
/*
    for(int n=0;n<3;n++)
    {
        for(int m=0;m<3;m++)
        {
            row=m;
            for(int l=0;l<3;l++)
            {
                fFJ(row,col)+=Temp_SPK(n,l);
                row=row+3;
            }
            col++;
        }
    }*/

    for(int M=0;M<3;M++)
    {
        for(int m=0;m<3;m++)
        {
            row=m;
            for(int l=0;l<3;l++)
            {
                //summation
                for(int L=0;L<3;L++)
                {
                    fFJ(row,col)+=SIGMA_S(M,L)*fDeformation_Gradient(l,L);
                }
                row=row+3;
            }
            col++;
        }
    }

}


void FSMicromorphic2_3DT:: Form_fJF()
{
    int row=0;
    int col=0;
    fJF=0.0;
/*  Temp_SPK=0.0;
    fTemp_matrix_nsd_x_nsd=0.0;
    fTemp_matrix_nsd_x_nsd=SIGMA_S;
    Temp_SPK.MultABCT(fDeformation_Gradient,fTemp_matrix_nsd_x_nsd,fDeformation_Gradient);
    for(int n=0;n<3;n++)
    {
        for(int l=0;l<3;l++)
        {
            row=3*l;
            for(int m=0;m<3;m++)
            {
                fJF(row,col)+=Temp_SPK(m,n);
                row++;
            }
            col++;
        }
    }*/

    for(int L=0;L<3;L++)
    {
        for(int l=0;l<3;l++)
        {
            row=3*l;
            for(int m=0;m<3;m++)
            {
                //summation
                for(int M=0;M<3;M++)
                {
                    fJF(row,col)+=fDeformation_Gradient(m,M)*SIGMA_S(M,L);
                }
                row++;
            }
            col++;
        }
    }


}

void FSMicromorphic2_3DT:: Form_fJ1_1()
{
    int row=0;
    int col=0;
    fJ1_1=0.0;
/*  for(int n=0;n<3;n++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    //summation
                    for(int M=0;M<3;M++)
                    {
                        for(int N=0;N<3;N++)
                        {
                            fJ1_1(row,col)+=fDeformation_Gradient(m,M)*fDeformation_Gradient(n,N)
                                         *fDeformation_Gradient(i,N)*fDeformation_Gradient(l,M);
                        }
                    }
                    row++;
                }
            }
            col++;
        }
    }*/
    for(int M=0;M<3;M++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    //summation
                    for(int K=0;K<3;K++)
                    {
                        fJ1_1(row,col)+=fDeformation_Gradient(m,K)*fDeformation_Gradient(i,M)
                                        *fDeformation_Gradient(l,K);
                    }
                    row++;
                }
            }
            col++;
        }
    }


}
void FSMicromorphic2_3DT::Form_fJ1_2()
{
    int row=0;
    int col=0;
    fJ1_2=0.0;
    for(int n=0;n<3;n++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    //summation
                    for(int M=0;M<3;M++)
                    {
                        for(int L=0;L<3;L++)
                        {
                            fJ1_2(row,col)+=fDeformation_Gradient(m,M)*fDeformation_Gradient(n,M)
                                         *fDeformation_Gradient(i,L)*fDeformation_Gradient(l,L);
                        }
                    }
                    row++;
                }
            }
            col++;
        }
    }

}


void FSMicromorphic2_3DT::Form_fJ1_3()
{
    int row=0;
    int col=0;
    fJ1_3=0.0;
    for(int n=0;n<3;n++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    //summation
                    for(int M=0;M<3;M++)
                    {
                        for(int L=0;L<3;L++)
                        {
                            fJ1_3(row,col)+=fDeformation_Gradient(m,M)*fDeformation_Gradient(i,M)
                                            *fDeformation_Gradient(n,L)*fDeformation_Gradient(l,L);
                        }
                    }
                    row++;
                }
            }
            col++;
        }
    }

}

void FSMicromorphic2_3DT:: Form_fJ1_4()
{
    int row=0;
    int col=0;
    fJ1_4=0.0;
/*      for(int n=0;n<3;n++)
        {
            for(int i=0;i<3;i++)
            {
                row=0;
                for(int l=0;l<3;l++)
                {
                    for(int m=0;m<3;m++)
                    {
                        //summation
                        for(int M=0;M<3;M++)
                        {
                            for(int N=0;N<3;N++)
                            {
                                fJ1_4(row,col)+=fDeformation_Gradient(m,M)*fDeformation_Gradient(n,N)
                                             *ChiM(i,N)*fDeformation_Gradient(l,M);
                            }
                        }
                        row++;
                    }
                }
                col++;
            }
        }*/

    for(int M=0;M<3;M++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    //summation

                    for(int K=0;K<3;K++)
                    {
                        fJ1_4(row,col)+=fDeformation_Gradient(m,K)*ChiM(i,M)*fDeformation_Gradient(l,K);
                    }

                    row++;
                }
            }
            col++;
        }
    }


}

void FSMicromorphic2_3DT::Form_fJ2_1()
{
    int row=0;
    int col=0;
    fJ2_1=0.0;
    for(int N=0;N<3;N++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    //summation
                    for(int M=0;M<3;M++)
                    {
                        fJ2_1(row,col)+=fDeformation_Gradient(m,M)*fDeformation_Gradient(i,N)*fDeformation_Gradient(l,M);
                    }
                    row++;
                }
            }
            col++;
        }
    }
}


void FSMicromorphic2_3DT:: Form_fJ1_5()
{
    int row=0;
    int col=0;
    fJ1_5=0.0;
    for(int n=0;n<3;n++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    //summation
                    for(int M=0;M<3;M++)
                    {
                        for(int L=0;L<3;L++)
                        {
                            fJ1_5(row,col)+=fDeformation_Gradient(m,M)*fDeformation_Gradient(n,M)
                                         *ChiM(i,L)*fDeformation_Gradient(l,L);
                        }
                    }
                    row++;
                }
            }
            col++;
        }
    }

}

void FSMicromorphic2_3DT:: Form_fJ2_2()
{
    int row=0;
    int col=0;
    fJ2_2=0.0;
    for(int L=0;L<3;L++)
    {
        for(int i=0;i<3;i++)
        {
            //
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    //summation
                    for(int M=0;M<3;M++)
                    {
                        fJ2_2(row,col)+=fDeformation_Gradient(m,M)*fDeformation_Gradient(i,M)*fDeformation_Gradient(l,L);
                    }
                    row++;
                }
            }
            col++;
        }
    }
}

void FSMicromorphic2_3DT:: Form_fJ1_6()
{
    int row=0;
    int col=0;
    fJ1_6=0.0;
    for(int n=0;n<3;n++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    //summation
                    for(int M=0;M<3;M++)
                    {
                        for(int L=0;L<3;L++)
                        {
                            fJ1_6(row,col)+=fDeformation_Gradient(m,M)*fDeformation_Gradient(n,L)
                                          *ChiM(i,M)*fDeformation_Gradient(l,L);
                        }
                    }
                    row++;
                }
            }
            col++;
        }
    }
}

void FSMicromorphic2_3DT::Form_fJ2_3()
{
    int row=0;
    int col=0;
    fJ2_3=0.0;
    for(int M=0;M<3;M++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    //summation
                    for(int L=0;L<3;L++)
                    {
                        fJ2_3(row,col)+=fDeformation_Gradient(m,M)*fDeformation_Gradient(i,L)*fDeformation_Gradient(l,L);
                    }
                    row++;
                }
            }
            col++;
        }
    }
}


void FSMicromorphic2_3DT:: Form_GAMMA()
{
    GAMMA=0.0;
    for(int K=0;K<3;K++)
    {
        for(int L=0;L<3;L++)
        {
            for(int M=0;M<3;M++)
            {
                //summation
                for(int i=0;i<3;i++)
                {
                    GAMMA(K,L,M)+=fDeformation_Gradient(i,K)*GRAD_CHIM(i,L,M);
                }
            }
        }
    }

}


void FSMicromorphic2_3DT:: Form_fMKLM()
{
    fMKLM=0.0;
    for(int K=0;K<3;K++ )
    {
        for(int L=0;L<3;L++)
        {
            for(int M=0;M<3;M++)
            {
                fMKLM(K,L,M)=fMaterial_Params[kTau7]*GAMMA(L,M,K)
                            +fMaterial_Params[kTau8]*(GAMMA(K,L,M)+GAMMA(M,L,K));
            }
        }
    }


    for(int K=0;K<3;K++ )
    {
        for(int L=0;L<3;L++)
        {
            for(int M=0;M<3;M++)
            {
                //summation
                for(int R=0;R<3;R++)
                {
                    fMKLM(K,L,M)=fMKLM(K,L,M)+fMaterial_Params[kTau3]*GAMMA(R,R,K)*fIdentity_matrix(L,M)
                                +fMaterial_Params[kTau4]*GAMMA(L,R,R)*fIdentity_matrix(K,M)
                                +fMaterial_Params[kTau6]*GAMMA(R,M,R)*fIdentity_matrix(K,L);
                }
            }
        }
    }

}

//////////////////  Added for the micro gradient plasticity /////////////////////////////////////////////
void FSMicromorphic2_3DT:: Form_fMKLM_tr()
{
    fMKLM_tr=0.0;

    for(int Kbar=0;Kbar<3;Kbar++ )
    {
        for(int Lbar=0;Lbar<3;Lbar++)
        {
            for(int Mbar=0;Mbar<3;Mbar++)
            {
				fMKLM_tr(Kbar,Lbar,Mbar)+= fMaterial_Params[kTau7]*GAMMAe_tr(Lbar,Mbar,Kbar)+fMaterial_Params[kTau8]*GAMMAe_tr(Kbar,Lbar,Mbar)+fMaterial_Params[kTau8]*GAMMAe_tr(Mbar,Kbar,Lbar)
										 + fMaterial_Params[kTau9]*GAMMAe_tr(Lbar,Kbar,Mbar)+fMaterial_Params[kTau10]*GAMMAe_tr(Mbar,Lbar,Kbar)+fMaterial_Params[kTau11]*GAMMAe_tr(Kbar,Mbar,Lbar);
            }
        }
    }

    for(int Kbar=0;Kbar<3;Kbar++ )
    {
        for(int Lbar=0;Lbar<3;Lbar++)
        {
            for(int Mbar=0;Mbar<3;Mbar++)
            {
            	for(int pbar=0;pbar<3;pbar++)
            	{
            		fMKLM_tr(Kbar,Lbar,Mbar)+= fMaterial_Params[kTau1]*GAMMAe_tr(Kbar,pbar,pbar)*fIdentity_matrix(Mbar,Lbar)+fMaterial_Params[kTau1]*GAMMAe_tr(pbar,pbar,Lbar)*fIdentity_matrix(Kbar,Mbar)
											 + fMaterial_Params[kTau2]*GAMMAe_tr(pbar,Kbar,pbar)*fIdentity_matrix(Lbar,Mbar)+fMaterial_Params[kTau2]*GAMMAe_tr(pbar,pbar,Mbar)*fIdentity_matrix(Lbar,Kbar)
											 + fMaterial_Params[kTau3]*GAMMAe_tr(pbar,pbar,Kbar)*fIdentity_matrix(Mbar,Lbar)+fMaterial_Params[kTau4]*GAMMAe_tr(Lbar,pbar,pbar)*fIdentity_matrix(Kbar,Mbar)
											 + fMaterial_Params[kTau5]*GAMMAe_tr(Mbar,pbar,pbar)*fIdentity_matrix(Kbar,Lbar)+fMaterial_Params[kTau5]*GAMMAe_tr(pbar,Lbar,pbar)*fIdentity_matrix(Kbar,Mbar)
											 + fMaterial_Params[kTau6]*GAMMAe_tr(pbar,Mbar,pbar)*fIdentity_matrix(Kbar,Lbar);
            	}
			}
        }
    }
}


void FSMicromorphic2_3DT:: Form_Mean_fMKLM_tr()
{
	Mean_fMKLM_tr = 0.0;

	for( int k=0;k<3;k++)
	{
		Mean_fMKLM_tr(k,0)= (1.0/3.0)*fMKLM_tr(0,0,k) + (1.0/3.0)*fMKLM_tr(1,1,k) + (1.0/3.0)*fMKLM_tr(2,2,k);
	}
}

void FSMicromorphic2_3DT:: Form_Norm_Mean_fMKLM_tr()
{
	Norm_Mean_fMKLM_tr = 0.0;
	fTemp_matrix_one_x_one = 0.0;
	for( int k=0;k<3;k++)
	{
		fTemp_matrix_one_x_one+= Mean_fMKLM_tr(k,0)*Mean_fMKLM_tr(k,0);
	}
	Norm_Mean_fMKLM_tr = sqrt(fTemp_matrix_one_x_one);
}


void FSMicromorphic2_3DT:: Form_fdevMKLM_tr()
{
	fdevMKLM_tr = 0.0;

	for(int i=0;i<3;i++)
	{
	    for(int j=0;j<3;j++)
	    {
	        for( int k=0;k<3;k++)
	        {
	            fdevMKLM_tr(i,j,k)=fMKLM_tr(i,j,k)-(1.0/3.0)*fIdentity_matrix(i,j)*fMKLM_tr(0,0,k)
	                                         -(1.0/3.0)*fIdentity_matrix(i,j)*fMKLM_tr(1,1,k)
	                                         -(1.0/3.0)*fIdentity_matrix(i,j)*fMKLM_tr(2,2,k);
	        }
	    }
	}
}



void FSMicromorphic2_3DT:: Form_fNormdevMKLM_tr()
{
	fNormdevMKLM_tr = 0.0;
	fTemp_matrix_one_x_one = 0.0;

	for(int i=0;i<3;i++)
	{
	    for(int j=0;j<3;j++)
	    {
	        for( int k=0;k<3;k++)
	        {
	        	fTemp_matrix_one_x_one+= fdevMKLM_tr(i,j,k)*fdevMKLM_tr(i,j,k);
	        }
	    }
	}
	fNormdevMKLM_tr = sqrt(fTemp_matrix_one_x_one);
}

void FSMicromorphic2_3DT:: Form_GXe_tr()
{
     GXe_tr=0.0;
    for(int i=0;i<3;i++)
    {
        for(int Lbar=0;Lbar<3;Lbar++)
        {
            for(int Mbar=0;Mbar<3;Mbar++)
            {
                //summation
                for(int A=0;A<3;A++)
                {
                    for(int L=0;L<3;L++)
                    {
                    	GXe_tr(i,Lbar,Mbar)+= GRAD_CHIM(i,L,A)*fFp_n_inverse(A,Mbar)*fChip_n_inverse(L,Lbar);
                    }
                }
            }
        }
    }


    for(int i=0;i<3;i++)
    {
        for(int Lbar=0;Lbar<3;Lbar++)
        {
            for(int Mbar=0;Mbar<3;Mbar++)
            {
                //summation
                for(int Abar=0;Abar<3;Abar++)
                {
                    for(int B=0;B<3;B++)
                    {
                         GXe_tr(i,Lbar,Mbar)+= -1*fChie_tr(i,Abar)*GXp_n(Abar,B,Mbar)*fChip_n_inverse(B,Lbar);
                    }
                }
            }
        }
    }
}


void FSMicromorphic2_3DT:: Form_GAMMAe_tr()
{
	GAMMAe_tr=0.0;
    for(int Kbar=0;Kbar<3;Kbar++)
    {
        for(int Lbar=0;Lbar<3;Lbar++)
        {
            for(int Mbar=0;Mbar<3;Mbar++)
            {
                //summation
                for(int i=0;i<3;i++)
                {
					GAMMAe_tr(Kbar,Lbar,Mbar)+= fFe_tr(i,Kbar)*GXe_tr(i,Lbar,Mbar);
                }
            }
        }
    }
}




void FSMicromorphic2_3DT::Form_dfMKLMdDelgammanablachi()
{
	dfMKLMdDelgammanablachi = 0.0;
	fTemp_matrix_nsd_x_nsd = 0.0;
	fTemp_matrix_nsd_x_nsd2 = 0.0;
	fTemp_matrix_nsd_x_nsd.MultAB(fChip_n,fChip_inverse);
	fTemp_matrix_nsd_x_nsd2.MultATBC(fFe,fChie,PSIe_n_inverse);

	for(int Kbar=0;Kbar<3;Kbar++)
	{
	    for(int Lbar=0;Lbar<3;Lbar++)
	    {
	        for( int Mbar=0;Mbar<3;Mbar++)
	        {
	        	// Summation over dummy indices
	    	    for(int qbar=0;qbar<3;qbar++)
	    	    {
	    	        for( int pbar=0;pbar<3;pbar++)
	    	        {
						dfMKLMdDelgammanablachi(Kbar,Lbar,Mbar)+= -1*fTemp_matrix_nsd_x_nsd2(Kbar,qbar)*fdGnablachidMKLM_tr(pbar,Mbar,qbar)
						*fTemp_matrix_nsd_x_nsd(pbar,Lbar);
	    	        }
	    	    }
	        }
	    }
	}
	dfMKLMdDelgammanablachi*= fMaterial_Params[kTau7];
}



void FSMicromorphic2_3DT::Form_dmeanfMKLMdDelgammanablachi()
{
	dmeanfMKLMdDelgammanablachi = 0.0;

		for( int Mbar=0;Mbar<3;Mbar++)
		{
			dmeanfMKLMdDelgammanablachi(Mbar,0) = (1.0/3.0)*dfMKLMdDelgammanablachi(0,0,Mbar) + (1.0/3.0)*dfMKLMdDelgammanablachi(1,1,Mbar) + (1.0/3.0)*dfMKLMdDelgammanablachi(2,2,Mbar);
		}
}





void FSMicromorphic2_3DT::Form_dfdevMKLMdDelgammanablachi()
{
	dfdevMKLMdDelgammanablachi = 0.0;


	for(int Ibar=0;Ibar<3;Ibar++)
	{
	    for(int Jbar=0;Jbar<3;Jbar++)
	    {
	        for(int Kbar=0;Kbar<3;Kbar++)
	        {
				dfdevMKLMdDelgammanablachi(Ibar,Jbar,Kbar) = dfMKLMdDelgammanablachi(Ibar,Jbar,Kbar)-(1.0/3.0)*fIdentity_matrix(Ibar,Jbar)*dfMKLMdDelgammanablachi(0,0,Kbar)
															-(1.0/3.0)*fIdentity_matrix(Ibar,Jbar)*dfMKLMdDelgammanablachi(1,1,Kbar)
															-(1.0/3.0)*fIdentity_matrix(Ibar,Jbar)*dfMKLMdDelgammanablachi(2,2,Kbar);
	        }
	    }
	}
}


void FSMicromorphic2_3DT::Form_dfNorm_devMKLMdDelgammanablachi()
{
	dfNorm_devMKLMdDelgammanablachi = 0.0;


	for(int Ibar=0;Ibar<3;Ibar++)
	{
	    for(int Jbar=0;Jbar<3;Jbar++)
	    {
	        for(int Kbar=0;Kbar<3;Kbar++)
	        {
	        	dfNorm_devMKLMdDelgammanablachi+= (1.0/fNormdevMeKLM)*dfdevMKLMdDelgammanablachi(Ibar,Jbar,Kbar)*fdevMeKLM(Ibar,Jbar,Kbar);
	        }
	    }
	}
}


void FSMicromorphic2_3DT:: Form_fMeKLM()
{
    fMeKLM=0.0;
	for(int Kbar=0;Kbar<3;Kbar++ )
	{
		for(int Lbar=0;Lbar<3;Lbar++)
		{
			for(int Mbar=0;Mbar<3;Mbar++)
			{
				fMeKLM(Kbar,Lbar,Mbar)+= fMaterial_Params[kTau7]*GAMMAe(Lbar,Mbar,Kbar)+fMaterial_Params[kTau8]*GAMMAe(Kbar,Lbar,Mbar)+fMaterial_Params[kTau8]*GAMMAe(Mbar,Kbar,Lbar)
										 + fMaterial_Params[kTau9]*GAMMAe(Lbar,Kbar,Mbar)+fMaterial_Params[kTau10]*GAMMAe(Mbar,Lbar,Kbar)+fMaterial_Params[kTau11]*GAMMAe(Kbar,Mbar,Lbar);
			}
		}
	}
}


void FSMicromorphic2_3DT:: Form_fdevMeKLM()
{
	fdevMeKLM = 0.0;

	for(int i=0;i<3;i++)
	{
	    for(int j=0;j<3;j++)
	    {
	        for( int k=0;k<3;k++)
	        {
	            fdevMeKLM(i,j,k)=fMeKLM(i,j,k)-(1.0/3.0)*fIdentity_matrix(i,j)*fMeKLM(0,0,k)
	                                         -(1.0/3.0)*fIdentity_matrix(i,j)*fMeKLM(1,1,k)
	                                         -(1.0/3.0)*fIdentity_matrix(i,j)*fMeKLM(2,2,k);
	        }
	    }
	}
}


void FSMicromorphic2_3DT:: Form_Mean_fMeKLM()
{
	Mean_fMeKLM = 0.0;

	for( int k=0;k<3;k++)
	{
		Mean_fMeKLM(k,0) = (1.0/3.0)*fMeKLM(0,0,k)+(1.0/3.0)*fMeKLM(1,1,k)+(1.0/3.0)*fMeKLM(2,2,k);
	}
}


void FSMicromorphic2_3DT:: Form_Norm_Mean_fMeKLM()
{
	Norm_Mean_fMeKLM = 0.0;
	fTemp_matrix_one_x_one = 0.0;
	for( int k=0;k<3;k++)
	{
		fTemp_matrix_one_x_one+= Mean_fMeKLM(k,0)*Mean_fMeKLM(k,0);
	}
	Norm_Mean_fMeKLM = sqrt(fTemp_matrix_one_x_one);
}


void FSMicromorphic2_3DT:: Form_fNormdevMeKLM()
{
	fNormdevMeKLM = 0.0;
	fTemp_matrix_one_x_one = 0.0;

	for(int i=0;i<3;i++)
	{
	    for(int j=0;j<3;j++)
	    {
	        for( int k=0;k<3;k++)
	        {
	        	fTemp_matrix_one_x_one+= fdevMeKLM(i,j,k)*fdevMeKLM(i,j,k);
	        }
	    }
	}
	fNormdevMeKLM = sqrt(fTemp_matrix_one_x_one);
}




void FSMicromorphic2_3DT::Form_dGnablachidMKLM_tr()
{
	fdGnablachidMKLM_tr = 0.0;
	fTemp_tensor_n_sd_x_n_sd_x_n_sd = 0.0;

	if (fMaterial_Params[kCapped_Model_Flag] == 0)
	{
		for( int Mbar=0;Mbar<3;Mbar++)
		{
			for(int qbar=0;qbar<3;qbar++)
			{
				for( int Abar=0;Abar<3;Abar++)
				{
					fTemp_tensor_n_sd_x_n_sd_x_n_sd(Mbar,qbar,Abar) = (1.0/3.0)*Bpsi_nablachi*fIdentity_matrix(Mbar,qbar)*Mean_fMKLM_tr(Abar,0)/Norm_Mean_fMKLM_tr;
					fdGnablachidMKLM_tr(Mbar,qbar,Abar) = (1/fNormdevMKLM_tr)*fdevMKLM_tr(Mbar,qbar,Abar) + fTemp_tensor_n_sd_x_n_sd_x_n_sd(Mbar,qbar,Abar);

				}
			}
		}
	}

	if (fMaterial_Params[kCapped_Model_Flag] == 1)
	{
		for( int Mbar=0;Mbar<3;Mbar++)
		{
			for(int qbar=0;qbar<3;qbar++)
			{
				for( int Abar=0;Abar<3;Abar++)
				{
					fTemp_tensor_n_sd_x_n_sd_x_n_sd(Mbar,qbar,Abar) = Cpsi_nablachi_tr*fIdentity_matrix(Mbar,qbar)*Mean_fMKLM_tr(Abar,0);
					fdGnablachidMKLM_tr(Mbar,qbar,Abar) = (1/fNormdevMKLM_tr)*fdevMKLM_tr(Mbar,qbar,Abar) + fTemp_tensor_n_sd_x_n_sd_x_n_sd(Mbar,qbar,Abar);

				}
			}
		}
	}
}


void FSMicromorphic2_3DT::Form_dGnablachidMKLM()
{
	fdGnablachidMKLM = 0.0;
	fTemp_tensor_n_sd_x_n_sd_x_n_sd = 0.0;

	if (fMaterial_Params[kCapped_Model_Flag] == 0)
	{
		for( int Mbar=0;Mbar<3;Mbar++)
		{
			for(int qbar=0;qbar<3;qbar++)
			{
				for( int Abar=0;Abar<3;Abar++)
				{
					fTemp_tensor_n_sd_x_n_sd_x_n_sd(Mbar,qbar,Abar) = (1.0/3.0)*Bpsi_nablachi*fIdentity_matrix(Mbar,qbar)*Mean_fMeKLM(Abar,0)/Norm_Mean_fMeKLM;
					fdGnablachidMKLM(Mbar,qbar,Abar) = (1.0/fNormdevMeKLM)*fdevMeKLM(Mbar,qbar,Abar) + fTemp_tensor_n_sd_x_n_sd_x_n_sd(Mbar,qbar,Abar);

				}
			}
		}
	}

	if (fMaterial_Params[kCapped_Model_Flag] == 1)
	{
		for( int Mbar=0;Mbar<3;Mbar++)
		{
			for(int qbar=0;qbar<3;qbar++)
			{
				for( int Abar=0;Abar<3;Abar++)
				{
					fTemp_tensor_n_sd_x_n_sd_x_n_sd(Mbar,qbar,Abar) = Cpsi_nablachi*fIdentity_matrix(Mbar,qbar)*Mean_fMeKLM(Abar,0);
					fdGnablachidMKLM(Mbar,qbar,Abar) = (1.0/fNormdevMeKLM)*fdevMeKLM(Mbar,qbar,Abar) + fTemp_tensor_n_sd_x_n_sd_x_n_sd(Mbar,qbar,Abar);

				}
			}
		}
	}
}


void FSMicromorphic2_3DT::Form_dFnablachidMKLM()
{
	fdFnablachidMKLM = 0.0;
	fTemp_tensor_n_sd_x_n_sd_x_n_sd = 0.0;

	if (fMaterial_Params[kCapped_Model_Flag] == 0)
	{
		for( int Mbar=0;Mbar<3;Mbar++)
		{
			for(int qbar=0;qbar<3;qbar++)
			{
				for( int Abar=0;Abar<3;Abar++)
				{
					fTemp_tensor_n_sd_x_n_sd_x_n_sd(Mbar,qbar,Abar) = (1.0/3.0)*Bphi_nablachi*fIdentity_matrix(Mbar,qbar)*Mean_fMeKLM(Abar,0)/Norm_Mean_fMeKLM;
					fdFnablachidMKLM(Mbar,qbar,Abar) = (1/fNormdevMeKLM)*fdevMeKLM(Mbar,qbar,Abar) + fTemp_tensor_n_sd_x_n_sd_x_n_sd(Mbar,qbar,Abar);

				}
			}
		}
	}

	if (fMaterial_Params[kCapped_Model_Flag] == 1)
	{
		for( int Mbar=0;Mbar<3;Mbar++)
		{
			for(int qbar=0;qbar<3;qbar++)
			{
				for( int Abar=0;Abar<3;Abar++)
				{
					fTemp_tensor_n_sd_x_n_sd_x_n_sd(Mbar,qbar,Abar) = Cphi_nablachi*fIdentity_matrix(Mbar,qbar)*Mean_fMeKLM(Abar,0);
					fdFnablachidMKLM(Mbar,qbar,Abar) = (1/fNormdevMeKLM)*fdevMeKLM(Mbar,qbar,Abar) + fTemp_tensor_n_sd_x_n_sd_x_n_sd(Mbar,qbar,Abar);

				}
			}
		}
	}


}


void FSMicromorphic2_3DT::Form_kc_nablachi_n(const int a)
{
	kc_nablachi_n = 0.0;

	kc_nablachi_n(0,0) = fState_variables_n_IPs(a,kc_nablachi0);
	kc_nablachi_n(1,0) = fState_variables_n_IPs(a,kc_nablachi1);
	kc_nablachi_n(2,0) = fState_variables_n_IPs(a,kc_nablachi2);

}

void FSMicromorphic2_3DT::Form_Norm_kc_nablachi_n()
{
	Norm_kc_nablachi_n = 0.0;
	fTemp_matrix_one_x_one = 0.0;
		for(int k=0;k<3;k++)
		{
			fTemp_matrix_one_x_one+= kc_nablachi_n(k,0)*kc_nablachi_n(k,0);
		}
		Norm_kc_nablachi_n = sqrt(fTemp_matrix_one_x_one);
}
/////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////Functions for the Capped model////////////////////////
void FSMicromorphic2_3DT::Form_Kappa_nablachi_n(const int a)
{
	Kappa_nablachi_n = 0.0;

	Kappa_nablachi_n(0,0) = fState_variables_n_IPs(a,Kappa_nablachi0);
	Kappa_nablachi_n(1,0) = fState_variables_n_IPs(a,Kappa_nablachi1);
	Kappa_nablachi_n(2,0) = fState_variables_n_IPs(a,Kappa_nablachi2);

}

void FSMicromorphic2_3DT::Form_Norm_Kappa_nablachi_n()
{
	Norm_Kappa_nablachi_n = 0.0;
	fTemp_matrix_one_x_one = 0.0;
		for(int k=0;k<3;k++)
		{
			fTemp_matrix_one_x_one+= Kappa_nablachi_n(k,0)*Kappa_nablachi_n(k,0);
		}
		Norm_Kappa_nablachi_n = sqrt(fTemp_matrix_one_x_one);
}


///////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////

void FSMicromorphic2_3DT::Form_Norm_cohesion_nablachi()
{
	Norm_cohesion_nablachi = 0.0;
	fTemp_matrix_one_x_one = 0.0;
		for(int k=0;k<3;k++)
		{
			fTemp_matrix_one_x_one+= cohesion_nablachi(k,0)*cohesion_nablachi(k,0);
		}
		Norm_cohesion_nablachi = sqrt(fTemp_matrix_one_x_one);
}

void FSMicromorphic2_3DT::Form_Norm_Kappa_nablachi()
{
	Norm_Kappa_nablachi = 0.0;
	fTemp_matrix_one_x_one = 0.0;
		for(int k=0;k<3;k++)
		{
			fTemp_matrix_one_x_one+= Kappa_nablachi(k,0)*Kappa_nablachi(k,0);
		}
		Norm_Kappa_nablachi = sqrt(fTemp_matrix_one_x_one);
}



void FSMicromorphic2_3DT::Form_dNorm_meanfMKLMdDelgammanablachi()
{
	dNorm_meanfMKLMdDelgammanablachi = 0.0;

		for( int Mbar=0;Mbar<3;Mbar++)
		{
			dNorm_meanfMKLMdDelgammanablachi+= (1/Norm_Mean_fMeKLM)*dmeanfMKLMdDelgammanablachi(Mbar,0)*Mean_fMeKLM(Mbar,0);
		}
}


void FSMicromorphic2_3DT::Form_dfkc_nablachidDelgammanablachi(const int a)
{
	dfkc_nablachidDelgammanablachi = 0.0;
	fTemp_matrix_one_x_one = 0.0;

		for( int Mbar=0;Mbar<3;Mbar++)
		{
			fTemp_matrix_one_x_one = (1/Norm_kc_nablachi_n)*fMaterial_Params[kHc_nablachi]*fState_variables_n_IPs(a,khc_nablachi);
			dfkc_nablachidDelgammanablachi.SetToScaled(fTemp_matrix_one_x_one,kc_nablachi_n);
		}
}


void FSMicromorphic2_3DT::Form_dNorm_kc_nablachidDelgammanablachi()
{
	dNorm_kc_nablachidDelgammanablachi = 0.0;

		for( int Mbar=0;Mbar<3;Mbar++)
		{
			dNorm_kc_nablachidDelgammanablachi+= (1.0/Norm_cohesion_nablachi)*dfkc_nablachidDelgammanablachi(Mbar,0)*cohesion_nablachi(Mbar,0);
		}
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void FSMicromorphic2_3DT::Form_dfKappa_nablachidDelgammanablachi(const int a)
{
	dfKappa_nablachidDelgammanablachi = 0.0;
	fTemp_matrix_one_x_one = 0.0;

		for( int Mbar=0;Mbar<3;Mbar++)
		{
			fTemp_matrix_one_x_one = (1/Norm_Kappa_nablachi_n)*fMaterial_Params[kHKappa_nablachi]*fState_variables_n_IPs(a,khKappa_nablachi);
			dfKappa_nablachidDelgammanablachi.SetToScaled(fTemp_matrix_one_x_one,Kappa_nablachi_n);
		}
}


void FSMicromorphic2_3DT::Form_dNorm_Kappa_nablachidDelgammanablachi()
{
	dNorm_Kappa_nablachidDelgammanablachi = 0.0;

		for( int Mbar=0;Mbar<3;Mbar++)
		{
			dNorm_Kappa_nablachidDelgammanablachi+= (1.0/Norm_Kappa_nablachi)*dfKappa_nablachidDelgammanablachi(Mbar,0)*Kappa_nablachi(Mbar,0);
		}
}



///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void FSMicromorphic2_3DT:: Form_GXp()
{

    GXp=0.0;
    fTemp_tensor_n_sd_x_n_sd_x_n_sd = 0.0;
    fTemp_tensor_n_sd_x_n_sd_x_n_sd1 = 0.0;
    fTemp_tensor_n_sd_x_n_sd_x_n_sd2 = 0.0;
    fTemp_matrix_nsd_x_nsd = 0.0;


    fTemp_matrix_nsd_x_nsd.SetToScaled(fDelgammanablachi,PSIe_n_inverse);
    GXp = GXp_n;
    for(int Dbar=0;Dbar<3;Dbar++)
    {
        for(int Kbar=0;Kbar<3;Kbar++)
        {
            for(int J=0;J<3;J++)
            {
                //summation
                for(int Lbar=0;Lbar<3;Lbar++)
                {
                    for(int Mbar=0;Mbar<3;Mbar++)
                    {
                        GXp(Dbar,J,Kbar)+= fTemp_matrix_nsd_x_nsd(Dbar,Lbar)*fdGnablachidMKLM_tr(Mbar,Kbar,Lbar)*fChip_n(Mbar,J);
                    }
                }
            }
        }
    }

    for(int Dbar=0;Dbar<3;Dbar++)
    {
        for(int Mbar=0;Mbar<3;Mbar++)
        {
            for(int Kbar=0;Kbar<3;Kbar++)
            {
                //summation
                for(int Cbar=0;Cbar<3;Cbar++)
                {
					for(int Fbar=0;Fbar<3;Fbar++)
					{
						fTemp_tensor_n_sd_x_n_sd_x_n_sd(Dbar,Mbar,Kbar)+= fDeltaLbarChai_P(Dbar,Cbar)*PSIe_n_inverse(Cbar,Fbar)*GAMMAe_n(Fbar,Mbar,Kbar);
						fTemp_tensor_n_sd_x_n_sd_x_n_sd1(Dbar,Mbar,Kbar)+= -1*fDeltaLbarChai_P(Fbar,Mbar)*PSIe_n_inverse(Dbar,Cbar)*GAMMAe_n(Cbar,Fbar,Kbar);
					}
                }
            }
        }
    }
    fTemp_tensor_n_sd_x_n_sd_x_n_sd2 = fTemp_tensor_n_sd_x_n_sd_x_n_sd;
    fTemp_tensor_n_sd_x_n_sd_x_n_sd2+= fTemp_tensor_n_sd_x_n_sd_x_n_sd1;

    for(int Dbar=0;Dbar<3;Dbar++)
    {
        for(int J=0;J<3;J++)
        {
			for(int Kbar=0;Kbar<3;Kbar++)
			{
				for(int Mbar=0;Mbar<3;Mbar++)
				{
					GXp(Dbar,J,Kbar)+= fTemp_tensor_n_sd_x_n_sd_x_n_sd2(Dbar,Mbar,Kbar)*fChip_n(Mbar,J);
				}
			}
        }
    }


    for(int Dbar=0;Dbar<3;Dbar++)
    {
        for(int P=0;P<3;P++)
        {
            for(int Kbar=0;Kbar<3;Kbar++)
            {
                //summation
                for(int Lbar=0;Lbar<3;Lbar++)
                {
                    GXp(Dbar,P,Kbar)+= (fDeltaLbarChai_P(Dbar,Lbar)*GXp_n(Lbar,P,Kbar)-GXp_n(Dbar,P,Lbar)*fDeltaLbar_P(Lbar,Kbar));
                }
            }
        }
    }
}


void FSMicromorphic2_3DT:: Form_GXe()
{

    GXe=0.0;
    for(int i=0;i<3;i++)
    {
        for(int Ibar=0;Ibar<3;Ibar++)
        {
            for(int Jbar=0;Jbar<3;Jbar++)
            {
                //summation
                for(int I=0;I<3;I++)
                {
                    for(int J=0;J<3;J++)
                    {
                        GXe(i,Ibar,Jbar)+= GRAD_CHIM(i,I,J)*fFp_inverse(J,Jbar)*fChip_inverse(I,Ibar);
                    }
                }
            }
        }
    }


    for(int i=0;i<3;i++)
    {
        for(int Ibar=0;Ibar<3;Ibar++)
        {
            for(int Jbar=0;Jbar<3;Jbar++)
            {
                //summation
                for(int Kbar=0;Kbar<3;Kbar++)
                {
                    for(int K=0;K<3;K++)
                    {
                        GXe(i,Ibar,Jbar)+= -1*fChie(i,Kbar)*GXp(Kbar,K,Jbar)*fChip_inverse(K,Ibar);
                    }
                }
            }
        }
    }


}


void FSMicromorphic2_3DT:: Form_GAMMAe()
{
    GAMMAe=0.0;
    for(int Kbar=0;Kbar<3;Kbar++)
    {
        for(int Lbar=0;Lbar<3;Lbar++)
        {
            for(int Mbar=0;Mbar<3;Mbar++)
            {
                //summation
                for(int i=0;i<3;i++)
                {
                    GAMMAe(Kbar,Lbar,Mbar)+= fFe(i,Kbar)*GXe(i,Lbar,Mbar);
                }
            }
        }
    }

}

//////////////////// Function related to the global consistent tangent for the micro-gradient plasticity //////////////////
void FSMicromorphic2_3DT:: Form_Coeff_delDelgamma_nablachi(const int a)
{
	fTemp_matrix_one_x_one = 0.0;
	fTemp_matrix_nsd_x_nsd = 0.0;
	fTemp_matrix_nsd_x_nsd2 = 0.0;
	Coeff_delDelgamma_nablachi = 0.0;
	fTemp_matrix_nsd_x_nsd.MultAB(fChip_n,fChip_inverse);
	fTemp_matrix_nsd_x_nsd2.MultATBC(fFe,fChie,PSIe_n_inverse);


		for(int Kbar=0;Kbar<3;Kbar++)
		{
			for(int Lbar=0;Lbar<3;Lbar++)
			{
				for(int Mbar=0;Mbar<3;Mbar++)
				{
					for(int qbar=0;qbar<3;qbar++)
					{
						for(int pbar=0;pbar<3;pbar++)
						{
							Coeff_delDelgamma_nablachi+=fdFnablachidMKLM(Kbar,Lbar,Mbar)*fTemp_matrix_nsd_x_nsd2(Kbar,qbar)*fdGnablachidMKLM_tr(pbar,Mbar,qbar)
							*fTemp_matrix_nsd_x_nsd(pbar,Lbar);
						}
					}
				}
			}
		}

    Coeff_delDelgamma_nablachi*= fMaterial_Params[kTau7];
    fTemp_matrix_one_x_one = fState_variables_n_IPs(a,khc_nablachi)*fMaterial_Params[kHc_nablachi]/Norm_kc_nablachi_n;

		for(int pbar=0;pbar<3;pbar++)
		{
			Coeff_delDelgamma_nablachi-= fTemp_matrix_one_x_one*fdfnablachidcohesion_nablachi(pbar,0)*kc_nablachi_n(pbar,0);
		}

	if (fMaterial_Params[kCapped_Model_Flag] == 1)
	{

	fTemp_matrix_one_x_one = fState_variables_n_IPs(a,khKappa_nablachi)*fMaterial_Params[kHKappa_nablachi]/Norm_Kappa_nablachi_n;

		for(int pbar=0;pbar<3;pbar++)
		{
			Coeff_delDelgamma_nablachi-= fTemp_matrix_one_x_one*dFYnablachidKappanablachi(pbar,0)*Kappa_nablachi_n(pbar,0);
		}
	}
	fTemp_matrix_one_x_one = Coeff_delDelgamma_nablachi;
	Coeff_delDelgamma_nablachi = 1.0/fTemp_matrix_one_x_one;
}



void FSMicromorphic2_3DT:: Form_II13e_1()
{
    int row=0;
    int col=0;
    II13e_1=0.0;

    for(int P=0;P<3;P++)
    {
        for(int k=0;k<3;k++)
        {
        	row=0;
            for(int m=0;m<3;m++)
            {
                for(int l=0;l<3;l++)
                {
                    for(int K=0;K<3;K++)
                    {
                        //summation over the same term starts
                        for(int Kbar=0;Kbar<3;Kbar++)
                        {
                            for(int Lbar=0;Lbar<3;Lbar++)
                            {
                            	for(int Mbar=0;Mbar<3;Mbar++)
                            	{
                                	for(int Nbar=0;Nbar<3;Nbar++)
                                	{
										for(int n=0;n<3;n++)
										{
											for(int A=0;A<3;A++)
											{
												II13e_1(row,col)+=fDeformation_Gradient_Inverse(K,n)*fFe(n,Kbar)*fFe(l,Lbar)*fFp_inverse(P,Kbar)*fChie(k,Nbar)*GXp(Nbar,A,Mbar)
												*fChip_inverse(A,Lbar)*fChie(m,Mbar);
											}
										}
                                	}
                            	}
                            }
                        }
                        row++;
                    }
                }
            }
           col++;
        }
    }
}


void FSMicromorphic2_3DT:: Form_II14p_1_16()
{
    int row=0;
    int col=0;
    Temp_II14p = 0.0;
    II14p_1=0.0;
    II14p_2=0.0;
    II14p_3=0.0;
    II14p_4=0.0;
    II14p_5=0.0;
    II14p_6=0.0;
    II14p_7=0.0;
    II14p_8=0.0;
    II14p_9=0.0;
    II14p_10=0.0;
    II14p_11=0.0;
    II14p_12=0.0;
    II14p_13=0.0;
    II14p_14=0.0;
    II14p_15=0.0;
    II14p_16=0.0;

	fTemp_matrix_nsd_x_nsd = 0.0;
	fTemp_matrix_nsd_x_nsd2 = 0.0;

	fTemp_matrix_nsd_x_nsd.MultATBC(fdGdS_tr,fFp_n,fFp_inverse);
	fTemp_matrix_nsd_x_nsd2.MultABC(fFe,fCe_n_inverse,fTemp_matrix_nsd_x_nsd);
	fTemp_matrix_nsd_x_nsd.MultATB(fTemp_matrix_nsd_x_nsd2,fChie);

	fTemp_matrix_nsd_x_nsd3.MultAB(fDeformation_Gradient_Inverse,fFe);


	for(int I=0;I<3;I++)
	{
    	for(int l=0;l<3;l++)
    	{
			for(int m=0;m<3;m++)
			{
				/// Summation
				for(int Mbar=0;Mbar<3;Mbar++)
				{
					for(int Nbar=0;Nbar<3;Nbar++)
					{
						for(int Kbar=0;Kbar<3;Kbar++)
						{
							for(int Lbar=0;Lbar<3;Lbar++)
							{
								for(int A=0;A<3;A++)
								{
									Temp_II14p(I,l,m)+=fTemp_matrix_nsd_x_nsd3(I,Kbar)*fFe(l,Lbar)*fTemp_matrix_nsd_x_nsd(Kbar,Nbar)*GXp(Nbar,A,Mbar)*fChip_inverse(A,Lbar)*fChie(m,Mbar);
								}
							}
						}
					}
				}
			}
    	}
	}

     row=0;
     col=0;

	for(int J=0;J<3;J++)
	{
		for(int i=0;i<3;i++)
		{
			row=0;
			for(int m=0;m<3;m++)
			{
				for(int l=0;l<3;l++)
				{
					for(int I=0;I<3;I++)
					{
						// Summation
						for(int Ibar=0;Ibar<3;Ibar++)
						{
							II14p_1(row,col)+= Temp_II14p(I,l,m)*fdFYdS_trace*fFp_inverse(J,Ibar)*fFe(i,Ibar);
						}
						row++;
					}
				}
			}
	     col++;
		}
	}

     row=0;
     col=0;

	for(int J=0;J<3;J++)
	{
		for(int i=0;i<3;i++)
		{
			row=0;
			for(int m=0;m<3;m++)
			{
				for(int l=0;l<3;l++)
				{
					for(int I=0;I<3;I++)
					{
						// Summation
						for(int Kbar=0;Kbar<3;Kbar++)
						{
							for(int Lbar=0;Lbar<3;Lbar++)
							{
								II14p_2(row,col)+= Temp_II14p(I,l,m)*fdFYdS(Kbar,Lbar)*(fFp_inverse(J,Kbar)*fFe(i,Lbar) + fFp_inverse(J,Lbar)*fFe(i,Kbar));
							}
						}
						row++;
					}
				}
			}
	     col++;
		}
	}

     row=0;
     col=0;

	for(int J=0;J<3;J++)
	{
		for(int i=0;i<3;i++)
		{
			row=0;
			for(int m=0;m<3;m++)
			{
				for(int l=0;l<3;l++)
				{
					for(int I=0;I<3;I++)
					{
						// Summation
						for(int Ibar=0;Ibar<3;Ibar++)
						{
							II14p_3(row,col)+= Temp_II14p(I,l,m)*fdFYdS_trace*fFp_inverse(J,Ibar)*fChie(i,Ibar);
						}
						row++;
					}
				}
			}
	     col++;
		}
	}

     row=0;
     col=0;

	for(int J=0;J<3;J++)
	{
		for(int i=0;i<3;i++)
		{
			row=0;
			for(int m=0;m<3;m++)
			{
				for(int l=0;l<3;l++)
				{
					for(int I=0;I<3;I++)
					{
						// Summation
						for(int Lbar=0;Lbar<3;Lbar++)
						{
							for(int Kbar=0;Kbar<3;Kbar++)
							{
								II14p_4(row,col)+= Temp_II14p(I,l,m)*fdFYdS(Kbar,Lbar)*fFp_inverse(J,Kbar)*fChie(i,Lbar);
							}
						}
						row++;
					}
				}
			}
	     col++;
		}
	}

     row=0;
     col=0;

	for(int J=0;J<3;J++)
	{
		for(int i=0;i<3;i++)
		{
			row=0;
			for(int m=0;m<3;m++)
			{
				for(int l=0;l<3;l++)
				{
					for(int I=0;I<3;I++)
					{
						// Summation
						for(int Lbar=0;Lbar<3;Lbar++)
						{
							for(int Kbar=0;Kbar<3;Kbar++)
							{
								II14p_5(row,col)+= Temp_II14p(I,l,m)*fdFYdS(Kbar,Lbar)*fFp_inverse(J,Lbar)*fChie(i,Kbar);
							}
						}
						row++;
					}
				}
			}
	     col++;
		}
	}

     row=0;
     col=0;

	for(int J=0;J<3;J++)
	{
		for(int i=0;i<3;i++)
		{
			row=0;
			for(int m=0;m<3;m++)
			{
				for(int l=0;l<3;l++)
				{
					for(int I=0;I<3;I++)
					{
						// Summation
						for(int Ibar=0;Ibar<3;Ibar++)
						{
							II14p_6(row,col)+= Temp_II14p(I,l,m)*fdFYdS_trace*fFe(i,Ibar)*fChip_inverse(J,Ibar);
						}
						row++;
					}
				}
			}
	     col++;
		}
	}

     row=0;
     col=0;

	for(int J=0;J<3;J++)
	{
		for(int i=0;i<3;i++)
		{
			row=0;
			for(int m=0;m<3;m++)
			{
				for(int l=0;l<3;l++)
				{
					for(int I=0;I<3;I++)
					{
						// Summation
						for(int Lbar=0;Lbar<3;Lbar++)
						{
							for(int Kbar=0;Kbar<3;Kbar++)
							{
								II14p_7(row,col)+= Temp_II14p(I,l,m)*fdFYdS(Kbar,Lbar)*fFe(i,Kbar)*fChip_inverse(J,Lbar);
							}
						}
						row++;
					}
				}
			}
	     col++;
		}
	}

     row=0;
     col=0;

	for(int J=0;J<3;J++)
	{
		for(int i=0;i<3;i++)
		{
			row=0;
			for(int m=0;m<3;m++)
			{
				for(int l=0;l<3;l++)
				{
					for(int I=0;I<3;I++)
					{
						// Summation
						for(int Lbar=0;Lbar<3;Lbar++)
						{
							for(int Kbar=0;Kbar<3;Kbar++)
							{
								II14p_8(row,col)+= Temp_II14p(I,l,m)*fdFYdS(Kbar,Lbar)*fFe(i,Lbar)*fChip_inverse(J,Kbar);
							}
						}
						row++;
					}
				}
			}
	     col++;
		}
	}


    row=0;
    col=0;

	for(int J=0;J<3;J++)
	{
		for(int i=0;i<3;i++)
		{
			row=0;
			for(int m=0;m<3;m++)
			{
				for(int l=0;l<3;l++)
				{
					for(int I=0;I<3;I++)
					{
						// Summation
						for(int Ibar=0;Ibar<3;Ibar++)
						{
							II14p_9(row,col)+= Temp_II14p(I,l,m)*fdFYchidSIGMA_S_trace*fFp_inverse(J,Ibar)*fFe(i,Ibar);
						}
						row++;
					}
				}
			}
	     col++;
		}
	}

     row=0;
     col=0;

	for(int J=0;J<3;J++)
	{
		for(int i=0;i<3;i++)
		{
			row=0;
			for(int m=0;m<3;m++)
			{
				for(int l=0;l<3;l++)
				{
					for(int I=0;I<3;I++)
					{
						// Summation
						for(int Kbar=0;Kbar<3;Kbar++)
						{
							for(int Lbar=0;Lbar<3;Lbar++)
							{
								II14p_10(row,col)+= Temp_II14p(I,l,m)*fdFYchidSIGMA(Kbar,Lbar)*(fFp_inverse(J,Kbar)*fFe(i,Lbar) + fFp_inverse(J,Lbar)*fFe(i,Kbar));
							}
						}
						row++;
					}
				}
			}
	     col++;
		}
	}

     row=0;
     col=0;

	for(int J=0;J<3;J++)
	{
		for(int i=0;i<3;i++)
		{
			row=0;
			for(int m=0;m<3;m++)
			{
				for(int l=0;l<3;l++)
				{
					for(int I=0;I<3;I++)
					{
						// Summation
						for(int Ibar=0;Ibar<3;Ibar++)
						{
							II14p_11(row,col)+= Temp_II14p(I,l,m)*fdFYchidSIGMA_S_trace*fFp_inverse(J,Ibar)*fChie(i,Ibar);
						}
						row++;
					}
				}
			}
	     col++;
		}
	}

     row=0;
     col=0;

	for(int J=0;J<3;J++)
	{
		for(int i=0;i<3;i++)
		{
			row=0;
			for(int m=0;m<3;m++)
			{
				for(int l=0;l<3;l++)
				{
					for(int I=0;I<3;I++)
					{
						// Summation
						for(int Lbar=0;Lbar<3;Lbar++)
						{
							for(int Kbar=0;Kbar<3;Kbar++)
							{
								II14p_12(row,col)+= Temp_II14p(I,l,m)*fdFYchidSIGMA(Kbar,Lbar)*fFp_inverse(J,Kbar)*fChie(i,Lbar);
							}
						}
						row++;
					}
				}
			}
	     col++;
		}
	}

     row=0;
     col=0;

	for(int J=0;J<3;J++)
	{
		for(int i=0;i<3;i++)
		{
			row=0;
			for(int m=0;m<3;m++)
			{
				for(int l=0;l<3;l++)
				{
					for(int I=0;I<3;I++)
					{
						// Summation
						for(int Lbar=0;Lbar<3;Lbar++)
						{
							for(int Kbar=0;Kbar<3;Kbar++)
							{
								II14p_13(row,col)+= Temp_II14p(I,l,m)*fdFYchidSIGMA(Kbar,Lbar)*fFp_inverse(J,Lbar)*fChie(i,Kbar);
							}
						}
						row++;
					}
				}
			}
	     col++;
		}
	}

     row=0;
     col=0;

	for(int J=0;J<3;J++)
	{
		for(int i=0;i<3;i++)
		{
			row=0;
			for(int m=0;m<3;m++)
			{
				for(int l=0;l<3;l++)
				{
					for(int I=0;I<3;I++)
					{
						// Summation
						for(int Ibar=0;Ibar<3;Ibar++)
						{
							II14p_14(row,col)+= Temp_II14p(I,l,m)*fdFYchidSIGMA_S_trace*fFe(i,Ibar)*fChip_inverse(J,Ibar);
						}
						row++;
					}
				}
			}
	     col++;
		}
	}

     row=0;
     col=0;

	for(int J=0;J<3;J++)
	{
		for(int i=0;i<3;i++)
		{
			row=0;
			for(int m=0;m<3;m++)
			{
				for(int l=0;l<3;l++)
				{
					for(int I=0;I<3;I++)
					{
						// Summation
						for(int Lbar=0;Lbar<3;Lbar++)
						{
							for(int Kbar=0;Kbar<3;Kbar++)
							{
								II14p_15(row,col)+= Temp_II14p(I,l,m)*fdFYchidSIGMA(Kbar,Lbar)*fFe(i,Kbar)*fChip_inverse(J,Lbar);
							}
						}
						row++;
					}
				}
			}
	     col++;
		}
	}

     row=0;
     col=0;

	for(int J=0;J<3;J++)
	{
		for(int i=0;i<3;i++)
		{
			row=0;
			for(int m=0;m<3;m++)
			{
				for(int l=0;l<3;l++)
				{
					for(int I=0;I<3;I++)
					{
						// Summation
						for(int Lbar=0;Lbar<3;Lbar++)
						{
							for(int Kbar=0;Kbar<3;Kbar++)
							{
								II14p_16(row,col)+= Temp_II14p(I,l,m)*fdFYchidSIGMA(Kbar,Lbar)*fFe(i,Lbar)*fChip_inverse(J,Kbar);
							}
						}
						row++;
					}
				}
			}
	     col++;
		}
	}
}


void FSMicromorphic2_3DT:: Form_II15e_1()
{
    int row=0;
    int col=0;
    II15e_1=0.0;

    for(int P=0;P<3;P++)
    {
        for(int k=0;k<3;k++)
        {
        	row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    for(int K=0;K<3;K++)
                    {
                        //summation over the same term starts
                        for(int Kbar=0;Kbar<3;Kbar++)
                        {
                            for(int Lbar=0;Lbar<3;Lbar++)
                            {
                            	for(int Mbar=0;Mbar<3;Mbar++)
                            	{
                                	for(int Nbar=0;Nbar<3;Nbar++)
                                	{
										for(int n=0;n<3;n++)
										{
											for(int A=0;A<3;A++)
											{
												II15e_1(row,col)+=fDeformation_Gradient_Inverse(K,n)*fFe(n,Kbar)*fFe(l,Lbar)*(fMaterial_Params[kTau7]*fFe(k,Lbar)*fChip_inverse(P,Nbar)*GXp(Nbar,A,Kbar)*
												fChip_inverse(A,Mbar)+fMaterial_Params[kTau8]*fFe(k,Kbar)*fChip_inverse(P,Nbar)*GXp(Nbar,A,Mbar)*fChip_inverse(A,Lbar)
												+fMaterial_Params[kTau8]*fFe(k,Mbar)*fChip_inverse(P,Nbar)*GXp(Nbar,A,Lbar)*fChip_inverse(A,Kbar)
												+fMaterial_Params[kTau9]*fFe(k,Lbar)*fChip_inverse(P,Nbar)*GXp(Nbar,A,Mbar)*fChip_inverse(A,Kbar)
												+fMaterial_Params[kTau10]*fFe(k,Mbar)*fChip_inverse(P,Nbar)*GXp(Nbar,A,Kbar)*fChip_inverse(A,Lbar)
												+fMaterial_Params[kTau11]*fFe(k,Kbar)*fChip_inverse(P,Nbar)*GXp(Nbar,A,Lbar)*fChip_inverse(A,Mbar))*fChie(m,Mbar);
											}
										}
                                	}
                            	}
                            }
                        }
                        row++;
                    }
                }
            }
           col++;
        }
    }
}


void FSMicromorphic2_3DT:: Form_II16p_1_16()
{
    int row=0;
    int col=0;
    Temp_II16p = 0.0;
    II16p_1=0.0;
    II16p_2=0.0;
    II16p_3=0.0;
    II16p_4=0.0;
    II16p_5=0.0;
    II16p_6=0.0;
    II16p_7=0.0;
    II16p_8=0.0;
    II16p_9=0.0;
    II16p_10=0.0;
    II16p_11=0.0;
    II16p_12=0.0;
    II16p_13=0.0;
    II16p_14=0.0;
    II16p_15=0.0;
    II16p_16=0.0;

	fTemp_matrix_nsd_x_nsd = 0.0;
	fTemp_matrix_nsd_x_nsd2 = 0.0;
	fTemp_matrix_nsd_x_nsd3 = 0.0;

	fTemp_matrix_nsd_x_nsd.MultABC(fCchie_n,fChip_n,fChip_inverse);
	fTemp_matrix_nsd_x_nsd2.MultATBC(fdGchidSIGMA_tr,PSIe_n_inverseT,fTemp_matrix_nsd_x_nsd);
	fTemp_matrix_nsd_x_nsd.MultABC(fChie,PSIe_n_inverse,fTemp_matrix_nsd_x_nsd2);
	fTemp_matrix_nsd_x_nsd2.MultATB(fFe,fTemp_matrix_nsd_x_nsd);

	fTemp_matrix_nsd_x_nsd3.MultAB(fDeformation_Gradient_Inverse,fFe);


	for(int I=0;I<3;I++)
	{
    	for(int l=0;l<3;l++)
    	{
			for(int m=0;m<3;m++)
			{
				/// Summation
				for(int Mbar=0;Mbar<3;Mbar++)
				{
					for(int Nbar=0;Nbar<3;Nbar++)
					{
						for(int Kbar=0;Kbar<3;Kbar++)
						{
							for(int Lbar=0;Lbar<3;Lbar++)
							{
								for(int A=0;A<3;A++)
								{
									Temp_II16p(I,l,m)+=fTemp_matrix_nsd_x_nsd3(I,Kbar)*fFe(l,Lbar)*(fMaterial_Params[kTau7]*fTemp_matrix_nsd_x_nsd2(Lbar,Nbar)*GXp(Nbar,A,Kbar)*fChip_inverse(A,Mbar)
											+fMaterial_Params[kTau8]*fTemp_matrix_nsd_x_nsd2(Kbar,Nbar)*GXp(Nbar,A,Mbar)*fChip_inverse(A,Lbar)
											+fMaterial_Params[kTau8]*fTemp_matrix_nsd_x_nsd2(Mbar,Nbar)*GXp(Nbar,A,Lbar)*fChip_inverse(A,Kbar)
											+fMaterial_Params[kTau9]*fTemp_matrix_nsd_x_nsd2(Lbar,Nbar)*GXp(Nbar,A,Mbar)*fChip_inverse(A,Kbar)
											+fMaterial_Params[kTau10]*fTemp_matrix_nsd_x_nsd2(Mbar,Nbar)*GXp(Nbar,A,Kbar)*fChip_inverse(A,Lbar)
											+fMaterial_Params[kTau11]*fTemp_matrix_nsd_x_nsd2(Kbar,Nbar)*GXp(Nbar,A,Lbar)*fChip_inverse(A,Mbar))*fChie(m,Mbar);
								}
							}
						}
					}
				}
			}
    	}
	}

     row=0;
     col=0;

	for(int J=0;J<3;J++)
	{
		for(int i=0;i<3;i++)
		{
			row=0;
			for(int l=0;l<3;l++)
			{
				for(int m=0;m<3;m++)
				{
					for(int I=0;I<3;I++)
					{
						// Summation
						for(int Ibar=0;Ibar<3;Ibar++)
						{
							II16p_1(row,col)+= Temp_II16p(I,l,m)*fdFYdS_trace*fFp_inverse(J,Ibar)*fFe(i,Ibar);
						}
						row++;
					}
				}
			}
	     col++;
		}
	}

     row=0;
     col=0;

	for(int J=0;J<3;J++)
	{
		for(int i=0;i<3;i++)
		{
			row=0;
			for(int l=0;l<3;l++)
			{
				for(int m=0;m<3;m++)
				{
					for(int I=0;I<3;I++)
					{
						// Summation
						for(int Kbar=0;Kbar<3;Kbar++)
						{
							for(int Lbar=0;Lbar<3;Lbar++)
							{
								II16p_2(row,col)+= Temp_II16p(I,l,m)*fdFYdS(Kbar,Lbar)*(fFp_inverse(J,Kbar)*fFe(i,Lbar) + fFp_inverse(J,Lbar)*fFe(i,Kbar));
							}
						}
						row++;
					}
				}
			}
	     col++;
		}
	}

     row=0;
     col=0;

	for(int J=0;J<3;J++)
	{
		for(int i=0;i<3;i++)
		{
			row=0;
			for(int l=0;l<3;l++)
			{
				for(int m=0;m<3;m++)
				{
					for(int I=0;I<3;I++)
					{
						// Summation
						for(int Ibar=0;Ibar<3;Ibar++)
						{
							II16p_3(row,col)+= Temp_II16p(I,l,m)*fdFYdS_trace*fFp_inverse(J,Ibar)*fChie(i,Ibar);
						}
						row++;
					}
				}
			}
	     col++;
		}
	}

     row=0;
     col=0;

	for(int J=0;J<3;J++)
	{
		for(int i=0;i<3;i++)
		{
			row=0;
			for(int l=0;l<3;l++)
			{
				for(int m=0;m<3;m++)
				{
					for(int I=0;I<3;I++)
					{
						// Summation
						for(int Lbar=0;Lbar<3;Lbar++)
						{
							for(int Kbar=0;Kbar<3;Kbar++)
							{
								II16p_4(row,col)+= Temp_II16p(I,l,m)*fdFYdS(Kbar,Lbar)*fFp_inverse(J,Kbar)*fChie(i,Lbar);
							}
						}
						row++;
					}
				}
			}
	     col++;
		}
	}

     row=0;
     col=0;

	for(int J=0;J<3;J++)
	{
		for(int i=0;i<3;i++)
		{
			row=0;
			for(int l=0;l<3;l++)
			{
				for(int m=0;m<3;m++)
				{
					for(int I=0;I<3;I++)
					{
						// Summation
						for(int Lbar=0;Lbar<3;Lbar++)
						{
							for(int Kbar=0;Kbar<3;Kbar++)
							{
								II16p_5(row,col)+= Temp_II16p(I,l,m)*fdFYdS(Kbar,Lbar)*fFp_inverse(J,Lbar)*fChie(i,Kbar);
							}
						}
						row++;
					}
				}
			}
	     col++;
		}
	}

     row=0;
     col=0;

	for(int J=0;J<3;J++)
	{
		for(int i=0;i<3;i++)
		{
			row=0;
			for(int l=0;l<3;l++)
			{
				for(int m=0;m<3;m++)
				{
					for(int I=0;I<3;I++)
					{
						// Summation
						for(int Ibar=0;Ibar<3;Ibar++)
						{
							II16p_6(row,col)+= Temp_II16p(I,l,m)*fdFYdS_trace*fFe(i,Ibar)*fChip_inverse(J,Ibar);
						}
						row++;
					}
				}
			}
	     col++;
		}
	}

     row=0;
     col=0;

	for(int J=0;J<3;J++)
	{
		for(int i=0;i<3;i++)
		{
			row=0;
			for(int l=0;l<3;l++)
			{
				for(int m=0;m<3;m++)
				{
					for(int I=0;I<3;I++)
					{
						// Summation
						for(int Lbar=0;Lbar<3;Lbar++)
						{
							for(int Kbar=0;Kbar<3;Kbar++)
							{
								II16p_7(row,col)+= Temp_II16p(I,l,m)*fdFYdS(Kbar,Lbar)*fFe(i,Kbar)*fChip_inverse(J,Lbar);
							}
						}
						row++;
					}
				}
			}
	     col++;
		}
	}

     row=0;
     col=0;

	for(int J=0;J<3;J++)
	{
		for(int i=0;i<3;i++)
		{
			row=0;
			for(int l=0;l<3;l++)
			{
				for(int m=0;m<3;m++)
				{
					for(int I=0;I<3;I++)
					{
						// Summation
						for(int Lbar=0;Lbar<3;Lbar++)
						{
							for(int Kbar=0;Kbar<3;Kbar++)
							{
								II16p_8(row,col)+= Temp_II16p(I,l,m)*fdFYdS(Kbar,Lbar)*fFe(i,Lbar)*fChip_inverse(J,Kbar);
							}
						}
						row++;
					}
				}
			}
	     col++;
		}
	}

    row=0;
    col=0;

	for(int J=0;J<3;J++)
	{
		for(int i=0;i<3;i++)
		{
			row=0;
			for(int l=0;l<3;l++)
			{
				for(int m=0;m<3;m++)
				{
					for(int I=0;I<3;I++)
					{
						// Summation
						for(int Ibar=0;Ibar<3;Ibar++)
						{
							II16p_9(row,col)+= Temp_II16p(I,l,m)*fdFYchidSIGMA_S_trace*fFp_inverse(J,Ibar)*fFe(i,Ibar);
						}
						row++;
					}
				}
			}
	     col++;
		}
	}

    row=0;
    col=0;

	for(int J=0;J<3;J++)
	{
		for(int i=0;i<3;i++)
		{
			row=0;
			for(int l=0;l<3;l++)
			{
				for(int m=0;m<3;m++)
				{
					for(int I=0;I<3;I++)
					{
						// Summation
						for(int Kbar=0;Kbar<3;Kbar++)
						{
							for(int Lbar=0;Lbar<3;Lbar++)
							{
								II16p_10(row,col)+= Temp_II16p(I,l,m)*fdFYchidSIGMA(Kbar,Lbar)*(fFp_inverse(J,Kbar)*fFe(i,Lbar) + fFp_inverse(J,Lbar)*fFe(i,Kbar));
							}
						}
						row++;
					}
				}
			}
	     col++;
		}
	}

    row=0;
    col=0;

	for(int J=0;J<3;J++)
	{
		for(int i=0;i<3;i++)
		{
			row=0;
			for(int l=0;l<3;l++)
			{
				for(int m=0;m<3;m++)
				{
					for(int I=0;I<3;I++)
					{
						// Summation
						for(int Ibar=0;Ibar<3;Ibar++)
						{
							II16p_11(row,col)+= Temp_II16p(I,l,m)*fdFYchidSIGMA_S_trace*fFp_inverse(J,Ibar)*fChie(i,Ibar);
						}
						row++;
					}
				}
			}
	     col++;
		}
	}

    row=0;
    col=0;

	for(int J=0;J<3;J++)
	{
		for(int i=0;i<3;i++)
		{
			row=0;
			for(int l=0;l<3;l++)
			{
				for(int m=0;m<3;m++)
				{
					for(int I=0;I<3;I++)
					{
						// Summation
						for(int Lbar=0;Lbar<3;Lbar++)
						{
							for(int Kbar=0;Kbar<3;Kbar++)
							{
								II16p_12(row,col)+= Temp_II16p(I,l,m)*fdFYchidSIGMA(Kbar,Lbar)*fFp_inverse(J,Kbar)*fChie(i,Lbar);
							}
						}
						row++;
					}
				}
			}
	     col++;
		}
	}

    row=0;
    col=0;

	for(int J=0;J<3;J++)
	{
		for(int i=0;i<3;i++)
		{
			row=0;
			for(int l=0;l<3;l++)
			{
				for(int m=0;m<3;m++)
				{
					for(int I=0;I<3;I++)
					{
						// Summation
						for(int Lbar=0;Lbar<3;Lbar++)
						{
							for(int Kbar=0;Kbar<3;Kbar++)
							{
								II16p_13(row,col)+= Temp_II16p(I,l,m)*fdFYchidSIGMA(Kbar,Lbar)*fFp_inverse(J,Lbar)*fChie(i,Kbar);
							}
						}
						row++;
					}
				}
			}
	     col++;
		}
	}

    row=0;
    col=0;

	for(int J=0;J<3;J++)
	{
		for(int i=0;i<3;i++)
		{
			row=0;
			for(int l=0;l<3;l++)
			{
				for(int m=0;m<3;m++)
				{
					for(int I=0;I<3;I++)
					{
						// Summation
						for(int Ibar=0;Ibar<3;Ibar++)
						{
							II16p_14(row,col)+= Temp_II16p(I,l,m)*fdFYchidSIGMA_S_trace*fFe(i,Ibar)*fChip_inverse(J,Ibar);
						}
						row++;
					}
				}
			}
	     col++;
		}
	}

    row=0;
    col=0;

	for(int J=0;J<3;J++)
	{
		for(int i=0;i<3;i++)
		{
			row=0;
			for(int l=0;l<3;l++)
			{
				for(int m=0;m<3;m++)
				{
					for(int I=0;I<3;I++)
					{
						// Summation
						for(int Lbar=0;Lbar<3;Lbar++)
						{
							for(int Kbar=0;Kbar<3;Kbar++)
							{
								II16p_15(row,col)+= Temp_II16p(I,l,m)*fdFYchidSIGMA(Kbar,Lbar)*fFe(i,Kbar)*fChip_inverse(J,Lbar);
							}
						}
						row++;
					}
				}
			}
	     col++;
		}
	}

    row=0;
    col=0;

	for(int J=0;J<3;J++)
	{
		for(int i=0;i<3;i++)
		{
			row=0;
			for(int l=0;l<3;l++)
			{
				for(int m=0;m<3;m++)
				{
					for(int I=0;I<3;I++)
					{
						// Summation
						for(int Lbar=0;Lbar<3;Lbar++)
						{
							for(int Kbar=0;Kbar<3;Kbar++)
							{
								II16p_16(row,col)+= Temp_II16p(I,l,m)*fdFYchidSIGMA(Kbar,Lbar)*fFe(i,Lbar)*fChip_inverse(J,Kbar);
							}
						}
						row++;
					}
				}
			}
	     col++;
		}
	}
}


void FSMicromorphic2_3DT:: Form_II17p_1_16()
{
    int row=0;
    int col=0;
    Temp_II17p = 0.0;
    II17p_1=0.0;
    II17p_2=0.0;
    II17p_3=0.0;
    II17p_4=0.0;
    II17p_5=0.0;
    II17p_6=0.0;
    II17p_7=0.0;
    II17p_8=0.0;
    II17p_9=0.0;
    II17p_10=0.0;
    II17p_11=0.0;
    II17p_12=0.0;
    II17p_13=0.0;
    II17p_14=0.0;
    II17p_15=0.0;
    II17p_16=0.0;

	fTemp_matrix_nsd_x_nsd = 0.0;
	fTemp_matrix_nsd_x_nsd2 = 0.0;

	fTemp_matrix_nsd_x_nsd.MultABC(fCchie_n,fChip_n,fChip_inverse);
	fTemp_matrix_nsd_x_nsd2.MultATBC(fdGchidSIGMA_tr,PSIe_n_inverseT,fTemp_matrix_nsd_x_nsd);
	fTemp_matrix_nsd_x_nsd.MultABC(fChip_inverse,PSIe_n_inverse,fTemp_matrix_nsd_x_nsd2);
	fTemp_matrix_nsd_x_nsd2.MultABC(fChie,fChip_n,fTemp_matrix_nsd_x_nsd);
	//fTemp_matrix_nsd_x_nsd.MultATB(fFe,fTemp_matrix_nsd_x_nsd2);

	fTemp_matrix_nsd_x_nsd3.MultAB(fDeformation_Gradient_Inverse,fFe);


	for(int I=0;I<3;I++)
	{
    	for(int l=0;l<3;l++)
    	{
			for(int m=0;m<3;m++)
			{
				/// Summation
				for(int Mbar=0;Mbar<3;Mbar++)
				{
					for(int Nbar=0;Nbar<3;Nbar++)
					{
						for(int Kbar=0;Kbar<3;Kbar++)
						{
							for(int Lbar=0;Lbar<3;Lbar++)
							{
								for(int A=0;A<3;A++)
								{
									for(int k=0;k<3;k++)
									{
										Temp_II17p(I,l,m)+=fTemp_matrix_nsd_x_nsd3(I,Kbar)*fFe(l,Lbar)*(fMaterial_Params[kTau7]*fFe(k,Lbar)*fTemp_matrix_nsd_x_nsd2(k,Nbar)*GXp_n(Nbar,A,Kbar)*fChip_inverse(A,Mbar)
												+fMaterial_Params[kTau8]*fFe(k,Kbar)*fTemp_matrix_nsd_x_nsd2(k,Nbar)*GXp_n(Nbar,A,Mbar)*fChip_inverse(A,Lbar)
												+fMaterial_Params[kTau8]*fFe(k,Mbar)*fTemp_matrix_nsd_x_nsd2(k,Nbar)*GXp_n(Nbar,A,Lbar)*fChip_inverse(A,Kbar)
												+fMaterial_Params[kTau9]*fFe(k,Lbar)*fTemp_matrix_nsd_x_nsd2(k,Nbar)*GXp_n(Nbar,A,Mbar)*fChip_inverse(A,Kbar)
												+fMaterial_Params[kTau10]*fFe(k,Mbar)*fTemp_matrix_nsd_x_nsd2(k,Nbar)*GXp_n(Nbar,A,Kbar)*fChip_inverse(A,Lbar)
												+fMaterial_Params[kTau11]*fFe(k,Kbar)*fTemp_matrix_nsd_x_nsd2(k,Nbar)*GXp_n(Nbar,A,Lbar)*fChip_inverse(A,Mbar))*fChie(m,Mbar);
									}
								}
							}
						}
					}
				}
			}
    	}
	}

     row=0;
     col=0;

	for(int J=0;J<3;J++)
	{
		for(int i=0;i<3;i++)
		{
			row=0;
			for(int l=0;l<3;l++)
			{
				for(int m=0;m<3;m++)
				{
					for(int I=0;I<3;I++)
					{
						// Summation
						for(int Ibar=0;Ibar<3;Ibar++)
						{
							II17p_1(row,col)+= Temp_II17p(I,l,m)*fdFYdS_trace*fFp_inverse(J,Ibar)*fFe(i,Ibar);
						}
						row++;
					}
				}
			}
	     col++;
		}
	}

     row=0;
     col=0;

	for(int J=0;J<3;J++)
	{
		for(int i=0;i<3;i++)
		{
			row=0;
			for(int l=0;l<3;l++)
			{
				for(int m=0;m<3;m++)
				{
					for(int I=0;I<3;I++)
					{
						// Summation
						for(int Kbar=0;Kbar<3;Kbar++)
						{
							for(int Lbar=0;Lbar<3;Lbar++)
							{
								II17p_2(row,col)+= Temp_II17p(I,l,m)*fdFYdS(Kbar,Lbar)*(fFp_inverse(J,Kbar)*fFe(i,Lbar) + fFp_inverse(J,Lbar)*fFe(i,Kbar));
							}
						}
						row++;
					}
				}
			}
	     col++;
		}
	}

     row=0;
     col=0;

	for(int J=0;J<3;J++)
	{
		for(int i=0;i<3;i++)
		{
			row=0;
			for(int l=0;l<3;l++)
			{
				for(int m=0;m<3;m++)
				{
					for(int I=0;I<3;I++)
					{
						// Summation
						for(int Ibar=0;Ibar<3;Ibar++)
						{
							II17p_3(row,col)+= Temp_II17p(I,l,m)*fdFYdS_trace*fFp_inverse(J,Ibar)*fChie(i,Ibar);
						}
						row++;
					}
				}
			}
	     col++;
		}
	}

     row=0;
     col=0;

	for(int J=0;J<3;J++)
	{
		for(int i=0;i<3;i++)
		{
			row=0;
			for(int l=0;l<3;l++)
			{
				for(int m=0;m<3;m++)
				{
					for(int I=0;I<3;I++)
					{
						// Summation
						for(int Lbar=0;Lbar<3;Lbar++)
						{
							for(int Kbar=0;Kbar<3;Kbar++)
							{
								II17p_4(row,col)+= Temp_II17p(I,l,m)*fdFYdS(Kbar,Lbar)*fFp_inverse(J,Kbar)*fChie(i,Lbar);
							}
						}
						row++;
					}
				}
			}
	     col++;
		}
	}

     row=0;
     col=0;

	for(int J=0;J<3;J++)
	{
		for(int i=0;i<3;i++)
		{
			row=0;
			for(int l=0;l<3;l++)
			{
				for(int m=0;m<3;m++)
				{
					for(int I=0;I<3;I++)
					{
						// Summation
						for(int Lbar=0;Lbar<3;Lbar++)
						{
							for(int Kbar=0;Kbar<3;Kbar++)
							{
								II17p_5(row,col)+= Temp_II17p(I,l,m)*fdFYdS(Kbar,Lbar)*fFp_inverse(J,Lbar)*fChie(i,Kbar);
							}
						}
						row++;
					}
				}
			}
	     col++;
		}
	}

     row=0;
     col=0;

	for(int J=0;J<3;J++)
	{
		for(int i=0;i<3;i++)
		{
			row=0;
			for(int l=0;l<3;l++)
			{
				for(int m=0;m<3;m++)
				{
					for(int I=0;I<3;I++)
					{
						// Summation
						for(int Ibar=0;Ibar<3;Ibar++)
						{
							II17p_6(row,col)+= Temp_II17p(I,l,m)*fdFYdS_trace*fFe(i,Ibar)*fChip_inverse(J,Ibar);
						}
						row++;
					}
				}
			}
	     col++;
		}
	}

     row=0;
     col=0;

	for(int J=0;J<3;J++)
	{
		for(int i=0;i<3;i++)
		{
			row=0;
			for(int l=0;l<3;l++)
			{
				for(int m=0;m<3;m++)
				{
					for(int I=0;I<3;I++)
					{
						// Summation
						for(int Lbar=0;Lbar<3;Lbar++)
						{
							for(int Kbar=0;Kbar<3;Kbar++)
							{
								II17p_7(row,col)+= Temp_II17p(I,l,m)*fdFYdS(Kbar,Lbar)*fFe(i,Kbar)*fChip_inverse(J,Lbar);
							}
						}
						row++;
					}
				}
			}
	     col++;
		}
	}

     row=0;
     col=0;

	for(int J=0;J<3;J++)
	{
		for(int i=0;i<3;i++)
		{
			row=0;
			for(int l=0;l<3;l++)
			{
				for(int m=0;m<3;m++)
				{
					for(int I=0;I<3;I++)
					{
						// Summation
						for(int Lbar=0;Lbar<3;Lbar++)
						{
							for(int Kbar=0;Kbar<3;Kbar++)
							{
								II17p_8(row,col)+= Temp_II17p(I,l,m)*fdFYdS(Kbar,Lbar)*fFe(i,Lbar)*fChip_inverse(J,Kbar);
							}
						}
						row++;
					}
				}
			}
	     col++;
		}
	}

    row=0;
     col=0;

	for(int J=0;J<3;J++)
	{
		for(int i=0;i<3;i++)
		{
			row=0;
			for(int l=0;l<3;l++)
			{
				for(int m=0;m<3;m++)
				{
					for(int I=0;I<3;I++)
					{
						// Summation
						for(int Ibar=0;Ibar<3;Ibar++)
						{
							II17p_9(row,col)+= Temp_II17p(I,l,m)*fdFYchidSIGMA_S_trace*fFp_inverse(J,Ibar)*fFe(i,Ibar);
						}
						row++;
					}
				}
			}
	     col++;
		}
	}

     row=0;
     col=0;

	for(int J=0;J<3;J++)
	{
		for(int i=0;i<3;i++)
		{
			row=0;
			for(int l=0;l<3;l++)
			{
				for(int m=0;m<3;m++)
				{
					for(int I=0;I<3;I++)
					{
						// Summation
						for(int Kbar=0;Kbar<3;Kbar++)
						{
							for(int Lbar=0;Lbar<3;Lbar++)
							{
								II17p_10(row,col)+= Temp_II17p(I,l,m)*fdFYchidSIGMA(Kbar,Lbar)*(fFp_inverse(J,Kbar)*fFe(i,Lbar) + fFp_inverse(J,Lbar)*fFe(i,Kbar));
							}
						}
						row++;
					}
				}
			}
	     col++;
		}
	}

     row=0;
     col=0;

	for(int J=0;J<3;J++)
	{
		for(int i=0;i<3;i++)
		{
			row=0;
			for(int l=0;l<3;l++)
			{
				for(int m=0;m<3;m++)
				{
					for(int I=0;I<3;I++)
					{
						// Summation
						for(int Ibar=0;Ibar<3;Ibar++)
						{
							II17p_11(row,col)+= Temp_II17p(I,l,m)*fdFYchidSIGMA_S_trace*fFp_inverse(J,Ibar)*fChie(i,Ibar);
						}
						row++;
					}
				}
			}
	     col++;
		}
	}

     row=0;
     col=0;

	for(int J=0;J<3;J++)
	{
		for(int i=0;i<3;i++)
		{
			row=0;
			for(int l=0;l<3;l++)
			{
				for(int m=0;m<3;m++)
				{
					for(int I=0;I<3;I++)
					{
						// Summation
						for(int Lbar=0;Lbar<3;Lbar++)
						{
							for(int Kbar=0;Kbar<3;Kbar++)
							{
								II17p_12(row,col)+= Temp_II17p(I,l,m)*fdFYchidSIGMA(Kbar,Lbar)*fFp_inverse(J,Kbar)*fChie(i,Lbar);
							}
						}
						row++;
					}
				}
			}
	     col++;
		}
	}

     row=0;
     col=0;

	for(int J=0;J<3;J++)
	{
		for(int i=0;i<3;i++)
		{
			row=0;
			for(int l=0;l<3;l++)
			{
				for(int m=0;m<3;m++)
				{
					for(int I=0;I<3;I++)
					{
						// Summation
						for(int Lbar=0;Lbar<3;Lbar++)
						{
							for(int Kbar=0;Kbar<3;Kbar++)
							{
								II17p_13(row,col)+= Temp_II17p(I,l,m)*fdFYchidSIGMA(Kbar,Lbar)*fFp_inverse(J,Lbar)*fChie(i,Kbar);
							}
						}
						row++;
					}
				}
			}
	     col++;
		}
	}

     row=0;
     col=0;

	for(int J=0;J<3;J++)
	{
		for(int i=0;i<3;i++)
		{
			row=0;
			for(int l=0;l<3;l++)
			{
				for(int m=0;m<3;m++)
				{
					for(int I=0;I<3;I++)
					{
						// Summation
						for(int Ibar=0;Ibar<3;Ibar++)
						{
							II17p_14(row,col)+= Temp_II17p(I,l,m)*fdFYchidSIGMA_S_trace*fFe(i,Ibar)*fChip_inverse(J,Ibar);
						}
						row++;
					}
				}
			}
	     col++;
		}
	}

     row=0;
     col=0;

	for(int J=0;J<3;J++)
	{
		for(int i=0;i<3;i++)
		{
			row=0;
			for(int l=0;l<3;l++)
			{
				for(int m=0;m<3;m++)
				{
					for(int I=0;I<3;I++)
					{
						// Summation
						for(int Lbar=0;Lbar<3;Lbar++)
						{
							for(int Kbar=0;Kbar<3;Kbar++)
							{
								II17p_15(row,col)+= Temp_II17p(I,l,m)*fdFYchidSIGMA(Kbar,Lbar)*fFe(i,Kbar)*fChip_inverse(J,Lbar);
							}
						}
						row++;
					}
				}
			}
	     col++;
		}
	}

     row=0;
     col=0;

	for(int J=0;J<3;J++)
	{
		for(int i=0;i<3;i++)
		{
			row=0;
			for(int l=0;l<3;l++)
			{
				for(int m=0;m<3;m++)
				{
					for(int I=0;I<3;I++)
					{
						// Summation
						for(int Lbar=0;Lbar<3;Lbar++)
						{
							for(int Kbar=0;Kbar<3;Kbar++)
							{
								II17p_16(row,col)+= Temp_II17p(I,l,m)*fdFYchidSIGMA(Kbar,Lbar)*fFe(i,Lbar)*fChip_inverse(J,Kbar);
							}
						}
						row++;
					}
				}
			}
	     col++;
		}
	}
}

void FSMicromorphic2_3DT:: Form_II18p_1_16()
{
    int row=0;
    int col=0;
    Temp_II18p = 0.0;
    II18p_1=0.0;
    II18p_2=0.0;
    II18p_3=0.0;
    II18p_4=0.0;
    II18p_5=0.0;
    II18p_6=0.0;
    II18p_7=0.0;
    II18p_8=0.0;
    II18p_9=0.0;
    II18p_10=0.0;
    II18p_11=0.0;
    II18p_12=0.0;
    II18p_13=0.0;
    II18p_14=0.0;
    II18p_15=0.0;
    II18p_16=0.0;

	fTemp_matrix_nsd_x_nsd = 0.0;
	fTemp_matrix_nsd_x_nsd2 = 0.0;

	fTemp_matrix_nsd_x_nsd.MultATBC(fdGdS_tr,fFp_n,fFp_inverse);
	fTemp_matrix_nsd_x_nsd2.MultABC(fFp_inverse,fCe_n_inverse,fTemp_matrix_nsd_x_nsd);

	fTemp_matrix_nsd_x_nsd.MultAB(fFp_n,fTemp_matrix_nsd_x_nsd2);
	fTemp_matrix_nsd_x_nsd2.MultATB(fFe,fChie);
	fTemp_matrix_nsd_x_nsd3.MultAB(fDeformation_Gradient_Inverse,fFe);


	for(int I=0;I<3;I++)
	{
    	for(int l=0;l<3;l++)
    	{
			for(int m=0;m<3;m++)
			{
				/// Summation
				for(int Mbar=0;Mbar<3;Mbar++)
				{
					for(int Nbar=0;Nbar<3;Nbar++)
					{
						for(int Kbar=0;Kbar<3;Kbar++)
						{
							for(int Lbar=0;Lbar<3;Lbar++)
							{
								for(int pbar=0;pbar<3;pbar++)
								{
									for(int A=0;A<3;A++)
									{
										Temp_II18p(I,l,m)+=fTemp_matrix_nsd_x_nsd3(I,Kbar)*fFe(l,Lbar)*(fMaterial_Params[kTau7]*fTemp_matrix_nsd_x_nsd2(Lbar,Nbar)*GXp_n(Nbar,A,pbar)*fTemp_matrix_nsd_x_nsd(pbar,Kbar)
										*fChip_inverse(A,Mbar)+fMaterial_Params[kTau8]*fTemp_matrix_nsd_x_nsd2(Kbar,Nbar)*GXp_n(Nbar,A,pbar)*fTemp_matrix_nsd_x_nsd(pbar,Mbar)*fChip_inverse(A,Lbar)
										+fMaterial_Params[kTau8]*fTemp_matrix_nsd_x_nsd2(Mbar,Nbar)*GXp_n(Nbar,A,pbar)*fTemp_matrix_nsd_x_nsd(pbar,Lbar)*fChip_inverse(A,Kbar)
										+fMaterial_Params[kTau9]*fTemp_matrix_nsd_x_nsd2(Lbar,Nbar)*GXp_n(Nbar,A,pbar)*fTemp_matrix_nsd_x_nsd(pbar,Mbar)*fChip_inverse(A,Kbar)
										+fMaterial_Params[kTau10]*fTemp_matrix_nsd_x_nsd2(Mbar,Nbar)*GXp_n(Nbar,A,pbar)*fTemp_matrix_nsd_x_nsd(pbar,Kbar)*fChip_inverse(A,Lbar)
										+fMaterial_Params[kTau11]*fTemp_matrix_nsd_x_nsd2(Kbar,Nbar)*GXp_n(Nbar,A,pbar)*fTemp_matrix_nsd_x_nsd(pbar,Lbar)*fChip_inverse(A,Mbar))*fChie(m,Mbar);
									}
								}
							}
						}
					}
				}
			}
    	}
	}

     row=0;
     col=0;

	for(int J=0;J<3;J++)
	{
		for(int i=0;i<3;i++)
		{
			row=0;
			for(int l=0;l<3;l++)
			{
				for(int m=0;m<3;m++)
				{
					for(int I=0;I<3;I++)
					{
						// Summation
						for(int Ibar=0;Ibar<3;Ibar++)
						{
							II18p_1(row,col)+= Temp_II18p(I,l,m)*fdFYdS_trace*fFp_inverse(J,Ibar)*fFe(i,Ibar);
						}
						row++;
					}
				}
			}
	     col++;
		}
	}

     row=0;
     col=0;

	for(int J=0;J<3;J++)
	{
		for(int i=0;i<3;i++)
		{
			row=0;
			for(int l=0;l<3;l++)
			{
				for(int m=0;m<3;m++)
				{
					for(int I=0;I<3;I++)
					{
						// Summation
						for(int Kbar=0;Kbar<3;Kbar++)
						{
							for(int Lbar=0;Lbar<3;Lbar++)
							{
								II18p_2(row,col)+= Temp_II18p(I,l,m)*fdFYdS(Kbar,Lbar)*(fFp_inverse(J,Kbar)*fFe(i,Lbar) + fFp_inverse(J,Lbar)*fFe(i,Kbar));
							}
						}
						row++;
					}
				}
			}
	     col++;
		}
	}

     row=0;
     col=0;

	for(int J=0;J<3;J++)
	{
		for(int i=0;i<3;i++)
		{
			row=0;
			for(int l=0;l<3;l++)
			{
				for(int m=0;m<3;m++)
				{
					for(int I=0;I<3;I++)
					{
						// Summation
						for(int Ibar=0;Ibar<3;Ibar++)
						{
							II18p_3(row,col)+= Temp_II18p(I,l,m)*fdFYdS_trace*fFp_inverse(J,Ibar)*fChie(i,Ibar);
						}
						row++;
					}
				}
			}
	     col++;
		}
	}

     row=0;
     col=0;

	for(int J=0;J<3;J++)
	{
		for(int i=0;i<3;i++)
		{
			row=0;
			for(int l=0;l<3;l++)
			{
				for(int m=0;m<3;m++)
				{
					for(int I=0;I<3;I++)
					{
						// Summation
						for(int Lbar=0;Lbar<3;Lbar++)
						{
							for(int Kbar=0;Kbar<3;Kbar++)
							{
								II18p_4(row,col)+= Temp_II18p(I,l,m)*fdFYdS(Kbar,Lbar)*fFp_inverse(J,Kbar)*fChie(i,Lbar);
							}
						}
						row++;
					}
				}
			}
	     col++;
		}
	}

     row=0;
     col=0;

	for(int J=0;J<3;J++)
	{
		for(int i=0;i<3;i++)
		{
			row=0;
			for(int l=0;l<3;l++)
			{
				for(int m=0;m<3;m++)
				{
					for(int I=0;I<3;I++)
					{
						// Summation
						for(int Lbar=0;Lbar<3;Lbar++)
						{
							for(int Kbar=0;Kbar<3;Kbar++)
							{
								II18p_5(row,col)+= Temp_II18p(I,l,m)*fdFYdS(Kbar,Lbar)*fFp_inverse(J,Lbar)*fChie(i,Kbar);
							}
						}
						row++;
					}
				}
			}
	     col++;
		}
	}

     row=0;
     col=0;

	for(int J=0;J<3;J++)
	{
		for(int i=0;i<3;i++)
		{
			row=0;
			for(int l=0;l<3;l++)
			{
				for(int m=0;m<3;m++)
				{
					for(int I=0;I<3;I++)
					{
						// Summation
						for(int Ibar=0;Ibar<3;Ibar++)
						{
							II18p_6(row,col)+= Temp_II18p(I,l,m)*fdFYdS_trace*fFe(i,Ibar)*fChip_inverse(J,Ibar);
						}
						row++;
					}
				}
			}
	     col++;
		}
	}

     row=0;
     col=0;

	for(int J=0;J<3;J++)
	{
		for(int i=0;i<3;i++)
		{
			row=0;
			for(int l=0;l<3;l++)
			{
				for(int m=0;m<3;m++)
				{
					for(int I=0;I<3;I++)
					{
						// Summation
						for(int Lbar=0;Lbar<3;Lbar++)
						{
							for(int Kbar=0;Kbar<3;Kbar++)
							{
								II18p_7(row,col)+= Temp_II18p(I,l,m)*fdFYdS(Kbar,Lbar)*fFe(i,Kbar)*fChip_inverse(J,Lbar);
							}
						}
						row++;
					}
				}
			}
	     col++;
		}
	}

     row=0;
     col=0;

	for(int J=0;J<3;J++)
	{
		for(int i=0;i<3;i++)
		{
			row=0;
			for(int l=0;l<3;l++)
			{
				for(int m=0;m<3;m++)
				{
					for(int I=0;I<3;I++)
					{
						// Summation
						for(int Lbar=0;Lbar<3;Lbar++)
						{
							for(int Kbar=0;Kbar<3;Kbar++)
							{
								II18p_8(row,col)+= Temp_II18p(I,l,m)*fdFYdS(Kbar,Lbar)*fFe(i,Lbar)*fChip_inverse(J,Kbar);
							}
						}
						row++;
					}
				}
			}
	     col++;
		}
	}



	row=0;
	col=0;

	for(int J=0;J<3;J++)
	{
		for(int i=0;i<3;i++)
		{
			row=0;
			for(int l=0;l<3;l++)
			{
				for(int m=0;m<3;m++)
				{
					for(int I=0;I<3;I++)
					{
						// Summation
						for(int Ibar=0;Ibar<3;Ibar++)
						{
							II18p_9(row,col)+= Temp_II18p(I,l,m)*fdFYchidSIGMA_S_trace*fFp_inverse(J,Ibar)*fFe(i,Ibar);
						}
						row++;
					}
				}
			}
		col++;
		}
	}

	row=0;
	col=0;

	for(int J=0;J<3;J++)
	{
		for(int i=0;i<3;i++)
		{
			row=0;
			for(int l=0;l<3;l++)
			{
				for(int m=0;m<3;m++)
				{
					for(int I=0;I<3;I++)
					{
						// Summation
						for(int Kbar=0;Kbar<3;Kbar++)
						{
							for(int Lbar=0;Lbar<3;Lbar++)
							{
								II18p_10(row,col)+= Temp_II18p(I,l,m)*fdFYchidSIGMA(Kbar,Lbar)*(fFp_inverse(J,Kbar)*fFe(i,Lbar) + fFp_inverse(J,Lbar)*fFe(i,Kbar));
							}
						}
						row++;
					}
				}
			}
		col++;
		}
	}

	row=0;
	col=0;

	for(int J=0;J<3;J++)
	{
		for(int i=0;i<3;i++)
		{
			row=0;
			for(int l=0;l<3;l++)
			{
				for(int m=0;m<3;m++)
				{
					for(int I=0;I<3;I++)
					{
						// Summation
						for(int Ibar=0;Ibar<3;Ibar++)
						{
							II18p_11(row,col)+= Temp_II18p(I,l,m)*fdFYchidSIGMA_S_trace*fFp_inverse(J,Ibar)*fChie(i,Ibar);
						}
						row++;
					}
				}
			}
		col++;
		}
	}

	row=0;
	col=0;

	for(int J=0;J<3;J++)
	{
		for(int i=0;i<3;i++)
		{
			row=0;
			for(int l=0;l<3;l++)
			{
				for(int m=0;m<3;m++)
				{
					for(int I=0;I<3;I++)
					{
						// Summation
						for(int Lbar=0;Lbar<3;Lbar++)
						{
							for(int Kbar=0;Kbar<3;Kbar++)
							{
								II18p_12(row,col)+= Temp_II18p(I,l,m)*fdFYchidSIGMA(Kbar,Lbar)*fFp_inverse(J,Kbar)*fChie(i,Lbar);
							}
						}
						row++;
					}
				}
			}
		col++;
		}
	}

	row=0;
	col=0;

	for(int J=0;J<3;J++)
	{
		for(int i=0;i<3;i++)
		{
			row=0;
			for(int l=0;l<3;l++)
			{
				for(int m=0;m<3;m++)
				{
					for(int I=0;I<3;I++)
					{
						// Summation
						for(int Lbar=0;Lbar<3;Lbar++)
						{
							for(int Kbar=0;Kbar<3;Kbar++)
							{
								II18p_13(row,col)+= Temp_II18p(I,l,m)*fdFYchidSIGMA(Kbar,Lbar)*fFp_inverse(J,Lbar)*fChie(i,Kbar);
							}
						}
						row++;
					}
				}
			}
		col++;
		}
	}

	row=0;
	col=0;

	for(int J=0;J<3;J++)
	{
		for(int i=0;i<3;i++)
		{
			row=0;
			for(int l=0;l<3;l++)
			{
				for(int m=0;m<3;m++)
				{
					for(int I=0;I<3;I++)
					{
						// Summation
						for(int Ibar=0;Ibar<3;Ibar++)
						{
							II18p_14(row,col)+= Temp_II18p(I,l,m)*fdFYchidSIGMA_S_trace*fFe(i,Ibar)*fChip_inverse(J,Ibar);
						}
						row++;
					}
				}
			}
		col++;
		}
	}

	row=0;
	col=0;

	for(int J=0;J<3;J++)
	{
		for(int i=0;i<3;i++)
		{
			row=0;
			for(int l=0;l<3;l++)
			{
				for(int m=0;m<3;m++)
				{
					for(int I=0;I<3;I++)
					{
						// Summation
						for(int Lbar=0;Lbar<3;Lbar++)
						{
							for(int Kbar=0;Kbar<3;Kbar++)
							{
								II18p_15(row,col)+= Temp_II18p(I,l,m)*fdFYchidSIGMA(Kbar,Lbar)*fFe(i,Kbar)*fChip_inverse(J,Lbar);
							}
						}
						row++;
					}
				}
			}
		col++;
		}
	}

	row=0;
	col=0;

	for(int J=0;J<3;J++)
	{
		for(int i=0;i<3;i++)
		{
			row=0;
			for(int l=0;l<3;l++)
			{
				for(int m=0;m<3;m++)
				{
					for(int I=0;I<3;I++)
					{
						// Summation
						for(int Lbar=0;Lbar<3;Lbar++)
						{
							for(int Kbar=0;Kbar<3;Kbar++)
							{
								II18p_16(row,col)+= Temp_II18p(I,l,m)*fdFYchidSIGMA(Kbar,Lbar)*fFe(i,Lbar)*fChip_inverse(J,Kbar);
							}
						}
						row++;
					}
				}
			}
		col++;
		}
	}
}



void FSMicromorphic2_3DT:: Form_II19p_1_16()
{
    int row=0;
    int col=0;
    Temp_II19p = 0.0;
    II19p_1=0.0;
    II19p_2=0.0;
    II19p_3=0.0;
    II19p_4=0.0;
    II19p_5=0.0;
    II19p_6=0.0;
    II19p_7=0.0;
    II19p_8=0.0;
    II19p_9=0.0;
    II19p_10=0.0;
    II19p_11=0.0;
    II19p_12=0.0;
    II19p_13=0.0;
    II19p_14=0.0;
    II19p_15=0.0;
    II19p_16=0.0;


	fTemp_matrix_nsd_x_nsd = 0.0;
	fTemp_matrix_nsd_x_nsd2 = 0.0;

	fTemp_matrix_nsd_x_nsd.MultABC(fCchie_n,fChip_n,fChip_inverse);
	fTemp_matrix_nsd_x_nsd2.MultATBC(fdGchidSIGMA_tr,PSIe_n_inverseT,fTemp_matrix_nsd_x_nsd);
	fTemp_matrix_nsd_x_nsd.MultABC(fChip_inverse,PSIe_n_inverse,fTemp_matrix_nsd_x_nsd2);

	fTemp_matrix_nsd_x_nsd2.MultATB(fFe,fChie);

	fTemp_matrix_nsd_x_nsd3.MultAB(fDeformation_Gradient_Inverse,fFe);


	for(int I=0;I<3;I++)
	{
    	for(int l=0;l<3;l++)
    	{
			for(int m=0;m<3;m++)
			{
				/// Summation
				for(int Mbar=0;Mbar<3;Mbar++)
				{
					for(int Nbar=0;Nbar<3;Nbar++)
					{
						for(int Kbar=0;Kbar<3;Kbar++)
						{
							for(int Lbar=0;Lbar<3;Lbar++)
							{
								for(int A=0;A<3;A++)
								{
									Temp_II19p(I,l,m)+=fTemp_matrix_nsd_x_nsd3(I,Kbar)*fFe(l,Lbar)*(fMaterial_Params[kTau7]*fTemp_matrix_nsd_x_nsd2(Lbar,Nbar)*GXp(Nbar,A,Kbar)*fTemp_matrix_nsd_x_nsd(A,Mbar)
											+fMaterial_Params[kTau8]*fTemp_matrix_nsd_x_nsd2(Kbar,Nbar)*GXp(Nbar,A,Mbar)*fTemp_matrix_nsd_x_nsd(A,Lbar)
											+fMaterial_Params[kTau8]*fTemp_matrix_nsd_x_nsd2(Mbar,Nbar)*GXp(Nbar,A,Lbar)*fTemp_matrix_nsd_x_nsd(A,Kbar)
											+fMaterial_Params[kTau9]*fTemp_matrix_nsd_x_nsd2(Lbar,Nbar)*GXp(Nbar,A,Mbar)*fTemp_matrix_nsd_x_nsd(A,Kbar)
											+fMaterial_Params[kTau10]*fTemp_matrix_nsd_x_nsd2(Mbar,Nbar)*GXp(Nbar,A,Kbar)*fTemp_matrix_nsd_x_nsd(A,Lbar)
											+fMaterial_Params[kTau11]*fTemp_matrix_nsd_x_nsd2(Kbar,Nbar)*GXp(Nbar,A,Lbar)*fTemp_matrix_nsd_x_nsd(A,Mbar))*fChie(m,Mbar);
								}
							}
						}
					}
				}
			}
    	}
	}

     row=0;
     col=0;

	for(int J=0;J<3;J++)
	{
		for(int i=0;i<3;i++)
		{
			row=0;
			for(int l=0;l<3;l++)
			{
				for(int m=0;m<3;m++)
				{
					for(int I=0;I<3;I++)
					{
						// Summation
						for(int Ibar=0;Ibar<3;Ibar++)
						{
							II19p_1(row,col)+= Temp_II19p(I,l,m)*fdFYdS_trace*fFp_inverse(J,Ibar)*fFe(i,Ibar);
						}
						row++;
					}
				}
			}
	     col++;
		}
	}

     row=0;
     col=0;

	for(int J=0;J<3;J++)
	{
		for(int i=0;i<3;i++)
		{
			row=0;
			for(int l=0;l<3;l++)
			{
				for(int m=0;m<3;m++)
				{
					for(int I=0;I<3;I++)
					{
						// Summation
						for(int Kbar=0;Kbar<3;Kbar++)
						{
							for(int Lbar=0;Lbar<3;Lbar++)
							{
								II19p_2(row,col)+= Temp_II19p(I,l,m)*fdFYdS(Kbar,Lbar)*(fFp_inverse(J,Kbar)*fFe(i,Lbar) + fFp_inverse(J,Lbar)*fFe(i,Kbar));
							}
						}
						row++;
					}
				}
			}
	     col++;
		}
	}

     row=0;
     col=0;

	for(int J=0;J<3;J++)
	{
		for(int i=0;i<3;i++)
		{
			row=0;
			for(int l=0;l<3;l++)
			{
				for(int m=0;m<3;m++)
				{
					for(int I=0;I<3;I++)
					{
						// Summation
						for(int Ibar=0;Ibar<3;Ibar++)
						{
							II19p_3(row,col)+= Temp_II19p(I,l,m)*fdFYdS_trace*fFp_inverse(J,Ibar)*fChie(i,Ibar);
						}
						row++;
					}
				}
			}
	     col++;
		}
	}

     row=0;
     col=0;

	for(int J=0;J<3;J++)
	{
		for(int i=0;i<3;i++)
		{
			row=0;
			for(int l=0;l<3;l++)
			{
				for(int m=0;m<3;m++)
				{
					for(int I=0;I<3;I++)
					{
						// Summation
						for(int Lbar=0;Lbar<3;Lbar++)
						{
							for(int Kbar=0;Kbar<3;Kbar++)
							{
								II19p_4(row,col)+= Temp_II19p(I,l,m)*fdFYdS(Kbar,Lbar)*fFp_inverse(J,Kbar)*fChie(i,Lbar);
							}
						}
						row++;
					}
				}
			}
	     col++;
		}
	}

     row=0;
     col=0;

	for(int J=0;J<3;J++)
	{
		for(int i=0;i<3;i++)
		{
			row=0;
			for(int l=0;l<3;l++)
			{
				for(int m=0;m<3;m++)
				{
					for(int I=0;I<3;I++)
					{
						// Summation
						for(int Lbar=0;Lbar<3;Lbar++)
						{
							for(int Kbar=0;Kbar<3;Kbar++)
							{
								II19p_5(row,col)+= Temp_II19p(I,l,m)*fdFYdS(Kbar,Lbar)*fFp_inverse(J,Lbar)*fChie(i,Kbar);
							}
						}
						row++;
					}
				}
			}
	     col++;
		}
	}

     row=0;
     col=0;

	for(int J=0;J<3;J++)
	{
		for(int i=0;i<3;i++)
		{
			row=0;
			for(int l=0;l<3;l++)
			{
				for(int m=0;m<3;m++)
				{
					for(int I=0;I<3;I++)
					{
						// Summation
						for(int Ibar=0;Ibar<3;Ibar++)
						{
							II19p_6(row,col)+= Temp_II19p(I,l,m)*fdFYdS_trace*fFe(i,Ibar)*fChip_inverse(J,Ibar);
						}
						row++;
					}
				}
			}
	     col++;
		}
	}

     row=0;
     col=0;

	for(int J=0;J<3;J++)
	{
		for(int i=0;i<3;i++)
		{
			row=0;
			for(int l=0;l<3;l++)
			{
				for(int m=0;m<3;m++)
				{
					for(int I=0;I<3;I++)
					{
						// Summation
						for(int Lbar=0;Lbar<3;Lbar++)
						{
							for(int Kbar=0;Kbar<3;Kbar++)
							{
								II19p_7(row,col)+= Temp_II19p(I,l,m)*fdFYdS(Kbar,Lbar)*fFe(i,Kbar)*fChip_inverse(J,Lbar);
							}
						}
						row++;
					}
				}
			}
	     col++;
		}
	}

     row=0;
     col=0;

	for(int J=0;J<3;J++)
	{
		for(int i=0;i<3;i++)
		{
			row=0;
			for(int l=0;l<3;l++)
			{
				for(int m=0;m<3;m++)
				{
					for(int I=0;I<3;I++)
					{
						// Summation
						for(int Lbar=0;Lbar<3;Lbar++)
						{
							for(int Kbar=0;Kbar<3;Kbar++)
							{
								II19p_8(row,col)+= Temp_II19p(I,l,m)*fdFYdS(Kbar,Lbar)*fFe(i,Lbar)*fChip_inverse(J,Kbar);
							}
						}
						row++;
					}
				}
			}
	     col++;
		}
	}

    row=0;
    col=0;

	for(int J=0;J<3;J++)
	{
		for(int i=0;i<3;i++)
		{
			row=0;
			for(int l=0;l<3;l++)
			{
				for(int m=0;m<3;m++)
				{
					for(int I=0;I<3;I++)
					{
						// Summation
						for(int Ibar=0;Ibar<3;Ibar++)
						{
							II19p_9(row,col)+= Temp_II19p(I,l,m)*fdFYchidSIGMA_S_trace*fFp_inverse(J,Ibar)*fFe(i,Ibar);
						}
						row++;
					}
				}
			}
	     col++;
		}
	}

    row=0;
    col=0;

	for(int J=0;J<3;J++)
	{
		for(int i=0;i<3;i++)
		{
			row=0;
			for(int l=0;l<3;l++)
			{
				for(int m=0;m<3;m++)
				{
					for(int I=0;I<3;I++)
					{
						// Summation
						for(int Kbar=0;Kbar<3;Kbar++)
						{
							for(int Lbar=0;Lbar<3;Lbar++)
							{
								II19p_10(row,col)+= Temp_II19p(I,l,m)*fdFYchidSIGMA(Kbar,Lbar)*(fFp_inverse(J,Kbar)*fFe(i,Lbar) + fFp_inverse(J,Lbar)*fFe(i,Kbar));
							}
						}
						row++;
					}
				}
			}
	     col++;
		}
	}

    row=0;
    col=0;

	for(int J=0;J<3;J++)
	{
		for(int i=0;i<3;i++)
		{
			row=0;
			for(int l=0;l<3;l++)
			{
				for(int m=0;m<3;m++)
				{
					for(int I=0;I<3;I++)
					{
						// Summation
						for(int Ibar=0;Ibar<3;Ibar++)
						{
							II19p_11(row,col)+= Temp_II19p(I,l,m)*fdFYchidSIGMA_S_trace*fFp_inverse(J,Ibar)*fChie(i,Ibar);
						}
						row++;
					}
				}
			}
	     col++;
		}
	}

    row=0;
    col=0;

	for(int J=0;J<3;J++)
	{
		for(int i=0;i<3;i++)
		{
			row=0;
			for(int l=0;l<3;l++)
			{
				for(int m=0;m<3;m++)
				{
					for(int I=0;I<3;I++)
					{
						// Summation
						for(int Lbar=0;Lbar<3;Lbar++)
						{
							for(int Kbar=0;Kbar<3;Kbar++)
							{
								II19p_12(row,col)+= Temp_II19p(I,l,m)*fdFYchidSIGMA(Kbar,Lbar)*fFp_inverse(J,Kbar)*fChie(i,Lbar);
							}
						}
						row++;
					}
				}
			}
	     col++;
		}
	}

    row=0;
    col=0;

	for(int J=0;J<3;J++)
	{
		for(int i=0;i<3;i++)
		{
			row=0;
			for(int l=0;l<3;l++)
			{
				for(int m=0;m<3;m++)
				{
					for(int I=0;I<3;I++)
					{
						// Summation
						for(int Lbar=0;Lbar<3;Lbar++)
						{
							for(int Kbar=0;Kbar<3;Kbar++)
							{
								II19p_13(row,col)+= Temp_II19p(I,l,m)*fdFYchidSIGMA(Kbar,Lbar)*fFp_inverse(J,Lbar)*fChie(i,Kbar);
							}
						}
						row++;
					}
				}
			}
	     col++;
		}
	}

    row=0;
    col=0;

	for(int J=0;J<3;J++)
	{
		for(int i=0;i<3;i++)
		{
			row=0;
			for(int l=0;l<3;l++)
			{
				for(int m=0;m<3;m++)
				{
					for(int I=0;I<3;I++)
					{
						// Summation
						for(int Ibar=0;Ibar<3;Ibar++)
						{
							II19p_14(row,col)+= Temp_II19p(I,l,m)*fdFYchidSIGMA_S_trace*fFe(i,Ibar)*fChip_inverse(J,Ibar);
						}
						row++;
					}
				}
			}
	     col++;
		}
	}

    row=0;
    col=0;

	for(int J=0;J<3;J++)
	{
		for(int i=0;i<3;i++)
		{
			row=0;
			for(int l=0;l<3;l++)
			{
				for(int m=0;m<3;m++)
				{
					for(int I=0;I<3;I++)
					{
						// Summation
						for(int Lbar=0;Lbar<3;Lbar++)
						{
							for(int Kbar=0;Kbar<3;Kbar++)
							{
								II19p_15(row,col)+= Temp_II19p(I,l,m)*fdFYchidSIGMA(Kbar,Lbar)*fFe(i,Kbar)*fChip_inverse(J,Lbar);
							}
						}
						row++;
					}
				}
			}
	     col++;
		}
	}

    row=0;
    col=0;

	for(int J=0;J<3;J++)
	{
		for(int i=0;i<3;i++)
		{
			row=0;
			for(int l=0;l<3;l++)
			{
				for(int m=0;m<3;m++)
				{
					for(int I=0;I<3;I++)
					{
						// Summation
						for(int Lbar=0;Lbar<3;Lbar++)
						{
							for(int Kbar=0;Kbar<3;Kbar++)
							{
								II19p_16(row,col)+= Temp_II19p(I,l,m)*fdFYchidSIGMA(Kbar,Lbar)*fFe(i,Lbar)*fChip_inverse(J,Kbar);
							}
						}
						row++;
					}
				}
			}
	     col++;
		}
	}
}


void FSMicromorphic2_3DT:: Form_II20p_1_16()
{
    int row=0;
    int col=0;
    Temp_II20p = 0.0;
    II20p_1=0.0;
    II20p_2=0.0;
    II20p_3=0.0;
    II20p_4=0.0;
    II20p_5=0.0;
    II20p_6=0.0;
    II20p_7=0.0;
    II20p_8=0.0;
    II20p_9=0.0;
    II20p_10=0.0;
    II20p_11=0.0;
    II20p_12=0.0;
    II20p_13=0.0;
    II20p_14=0.0;
    II20p_15=0.0;
    II20p_16=0.0;

	fTemp_matrix_nsd_x_nsd = 0.0;
	fTemp_matrix_nsd_x_nsd2 = 0.0;
	fTemp_matrix_nsd_x_nsd3 = 0.0;
	fTemp_matrix_nsd_x_nsd4 = 0.0;
	fTemp_matrix_nsd_x_nsd.MultAB(fChip_n,fChip_inverse);
	fTemp_matrix_nsd_x_nsd2.MultATBC(PSIe_n_inverse,fCchie_n,fTemp_matrix_nsd_x_nsd);
	fTemp_matrix_nsd_x_nsd.MultABC(PSIe_n_inverse,fdGchidSIGMA_tr_transpose,fTemp_matrix_nsd_x_nsd2);
	fTemp_matrix_nsd_x_nsd2.MultABC(fChip_n,fChip_inverse,fTemp_matrix_nsd_x_nsd);

	fTemp_matrix_nsd_x_nsd.MultATB(fFe,fChie);
	fTemp_matrix_nsd_x_nsd3.MultAB(fChip_n,fChip_inverse);
	fTemp_matrix_nsd_x_nsd4.MultAB(fDeformation_Gradient_Inverse,fFe);


	for(int I=0;I<3;I++)
	{
    	for(int l=0;l<3;l++)
    	{
			for(int m=0;m<3;m++)
			{
				/// Summation
				for(int Mbar=0;Mbar<3;Mbar++)
				{
					for(int Nbar=0;Nbar<3;Nbar++)
					{
						for(int Kbar=0;Kbar<3;Kbar++)
						{
							for(int Lbar=0;Lbar<3;Lbar++)
							{
								for(int Fbar=0;Fbar<3;Fbar++)
								{
									for(int pbar=0;pbar<3;pbar++)
									{
										for(int Cbar=0;Cbar<3;Cbar++)
										{
											Temp_II20p(I,l,m)+=fTemp_matrix_nsd_x_nsd4(I,Kbar)*fFe(l,Lbar)*(fMaterial_Params[kTau7]*fTemp_matrix_nsd_x_nsd(Lbar,Nbar)*(fTemp_matrix_nsd_x_nsd2(Nbar,Cbar)
											*PSIe_n_inverse(Cbar,Fbar)*GAMMAe_n(Fbar,pbar,Kbar) - fTemp_matrix_nsd_x_nsd2(Fbar,pbar)*PSIe_n_inverse(Nbar,Cbar)*GAMMAe_n(Cbar,Fbar,Kbar))
											+fMaterial_Params[kTau8]*fTemp_matrix_nsd_x_nsd(Kbar,Nbar)*(fTemp_matrix_nsd_x_nsd2(Nbar,Cbar)
													*PSIe_n_inverse(Cbar,Fbar)*GAMMAe_n(Fbar,pbar,Mbar) - fTemp_matrix_nsd_x_nsd2(Fbar,pbar)*PSIe_n_inverse(Nbar,Cbar)*GAMMAe_n(Cbar,Fbar,Mbar))
											+fMaterial_Params[kTau8]*fTemp_matrix_nsd_x_nsd(Mbar,Nbar)*(fTemp_matrix_nsd_x_nsd2(Nbar,Cbar)
													*PSIe_n_inverse(Cbar,Fbar)*GAMMAe_n(Fbar,pbar,Lbar) - fTemp_matrix_nsd_x_nsd2(Fbar,pbar)*PSIe_n_inverse(Nbar,Cbar)*GAMMAe_n(Cbar,Fbar,Lbar))
											+fMaterial_Params[kTau9]*fTemp_matrix_nsd_x_nsd(Lbar,Nbar)*(fTemp_matrix_nsd_x_nsd2(Nbar,Cbar)
													*PSIe_n_inverse(Cbar,Fbar)*GAMMAe_n(Fbar,pbar,Mbar) - fTemp_matrix_nsd_x_nsd2(Fbar,pbar)*PSIe_n_inverse(Nbar,Cbar)*GAMMAe_n(Cbar,Fbar,Mbar))
											+fMaterial_Params[kTau10]*fTemp_matrix_nsd_x_nsd(Mbar,Nbar)*(fTemp_matrix_nsd_x_nsd2(Nbar,Cbar)
													*PSIe_n_inverse(Cbar,Fbar)*GAMMAe_n(Fbar,pbar,Kbar) - fTemp_matrix_nsd_x_nsd2(Fbar,pbar)*PSIe_n_inverse(Nbar,Cbar)*GAMMAe_n(Cbar,Fbar,Kbar))
											+fMaterial_Params[kTau11]*fTemp_matrix_nsd_x_nsd(Kbar,Nbar)*(fTemp_matrix_nsd_x_nsd2(Nbar,Cbar)
													*PSIe_n_inverse(Cbar,Fbar)*GAMMAe_n(Fbar,pbar,Lbar) - fTemp_matrix_nsd_x_nsd2(Fbar,pbar)*PSIe_n_inverse(Nbar,Cbar)*GAMMAe_n(Cbar,Fbar,Lbar))
													)*fTemp_matrix_nsd_x_nsd3(pbar,Lbar)*fChie(m,Mbar);
										}
									}
								}
							}
						}
					}
				}
			}
    	}
	}

     row=0;
     col=0;

	for(int J=0;J<3;J++)
	{
		for(int i=0;i<3;i++)
		{
			row=0;
			for(int l=0;l<3;l++)
			{
				for(int m=0;m<3;m++)
				{
					for(int I=0;I<3;I++)
					{
						// Summation
						for(int Ibar=0;Ibar<3;Ibar++)
						{
							II20p_1(row,col)+= Temp_II20p(I,l,m)*fdFYdS_trace*fFp_inverse(J,Ibar)*fFe(i,Ibar);
						}
						row++;
					}
				}
			}
	     col++;
		}
	}

     row=0;
     col=0;

	for(int J=0;J<3;J++)
	{
		for(int i=0;i<3;i++)
		{
			row=0;
			for(int l=0;l<3;l++)
			{
				for(int m=0;m<3;m++)
				{
					for(int I=0;I<3;I++)
					{
						// Summation
						for(int Kbar=0;Kbar<3;Kbar++)
						{
							for(int Lbar=0;Lbar<3;Lbar++)
							{
								II20p_2(row,col)+= Temp_II20p(I,l,m)*fdFYdS(Kbar,Lbar)*(fFp_inverse(J,Kbar)*fFe(i,Lbar) + fFp_inverse(J,Lbar)*fFe(i,Kbar));
							}
						}
						row++;
					}
				}
			}
	     col++;
		}
	}

     row=0;
     col=0;

	for(int J=0;J<3;J++)
	{
		for(int i=0;i<3;i++)
		{
			row=0;
			for(int l=0;l<3;l++)
			{
				for(int m=0;m<3;m++)
				{
					for(int I=0;I<3;I++)
					{
						// Summation
						for(int Ibar=0;Ibar<3;Ibar++)
						{
							II20p_3(row,col)+= Temp_II20p(I,l,m)*fdFYdS_trace*fFp_inverse(J,Ibar)*fChie(i,Ibar);
						}
						row++;
					}
				}
			}
	     col++;
		}
	}

     row=0;
     col=0;

	for(int J=0;J<3;J++)
	{
		for(int i=0;i<3;i++)
		{
			row=0;
			for(int l=0;l<3;l++)
			{
				for(int m=0;m<3;m++)
				{
					for(int I=0;I<3;I++)
					{
						// Summation
						for(int Lbar=0;Lbar<3;Lbar++)
						{
							for(int Kbar=0;Kbar<3;Kbar++)
							{
								II20p_4(row,col)+= Temp_II20p(I,l,m)*fdFYdS(Kbar,Lbar)*fFp_inverse(J,Kbar)*fChie(i,Lbar);
							}
						}
						row++;
					}
				}
			}
	     col++;
		}
	}

     row=0;
     col=0;

	for(int J=0;J<3;J++)
	{
		for(int i=0;i<3;i++)
		{
			row=0;
			for(int l=0;l<3;l++)
			{
				for(int m=0;m<3;m++)
				{
					for(int I=0;I<3;I++)
					{
						// Summation
						for(int Lbar=0;Lbar<3;Lbar++)
						{
							for(int Kbar=0;Kbar<3;Kbar++)
							{
								II20p_5(row,col)+= Temp_II20p(I,l,m)*fdFYdS(Kbar,Lbar)*fFp_inverse(J,Lbar)*fChie(i,Kbar);
							}
						}
						row++;
					}
				}
			}
	     col++;
		}
	}

     row=0;
     col=0;

	for(int J=0;J<3;J++)
	{
		for(int i=0;i<3;i++)
		{
			row=0;
			for(int l=0;l<3;l++)
			{
				for(int m=0;m<3;m++)
				{
					for(int I=0;I<3;I++)
					{
						// Summation
						for(int Ibar=0;Ibar<3;Ibar++)
						{
							II20p_6(row,col)+= Temp_II20p(I,l,m)*fdFYdS_trace*fFe(i,Ibar)*fChip_inverse(J,Ibar);
						}
						row++;
					}
				}
			}
	     col++;
		}
	}

     row=0;
     col=0;

	for(int J=0;J<3;J++)
	{
		for(int i=0;i<3;i++)
		{
			row=0;
			for(int l=0;l<3;l++)
			{
				for(int m=0;m<3;m++)
				{
					for(int I=0;I<3;I++)
					{
						// Summation
						for(int Lbar=0;Lbar<3;Lbar++)
						{
							for(int Kbar=0;Kbar<3;Kbar++)
							{
								II20p_7(row,col)+= Temp_II20p(I,l,m)*fdFYdS(Kbar,Lbar)*fFe(i,Kbar)*fChip_inverse(J,Lbar);
							}
						}
						row++;
					}
				}
			}
	     col++;
		}
	}

     row=0;
     col=0;

	for(int J=0;J<3;J++)
	{
		for(int i=0;i<3;i++)
		{
			row=0;
			for(int l=0;l<3;l++)
			{
				for(int m=0;m<3;m++)
				{
					for(int I=0;I<3;I++)
					{
						// Summation
						for(int Lbar=0;Lbar<3;Lbar++)
						{
							for(int Kbar=0;Kbar<3;Kbar++)
							{
								II20p_8(row,col)+= Temp_II20p(I,l,m)*fdFYdS(Kbar,Lbar)*fFe(i,Lbar)*fChip_inverse(J,Kbar);
							}
						}
						row++;
					}
				}
			}
	     col++;
		}
	}

    row=0;
    col=0;

	for(int J=0;J<3;J++)
	{
		for(int i=0;i<3;i++)
		{
			row=0;
			for(int l=0;l<3;l++)
			{
				for(int m=0;m<3;m++)
				{
					for(int I=0;I<3;I++)
					{
						// Summation
						for(int Ibar=0;Ibar<3;Ibar++)
						{
							II20p_9(row,col)+= Temp_II20p(I,l,m)*fdFYchidSIGMA_S_trace*fFp_inverse(J,Ibar)*fFe(i,Ibar);
						}
						row++;
					}
				}
			}
	     col++;
		}
	}

    row=0;
    col=0;

	for(int J=0;J<3;J++)
	{
		for(int i=0;i<3;i++)
		{
			row=0;
			for(int l=0;l<3;l++)
			{
				for(int m=0;m<3;m++)
				{
					for(int I=0;I<3;I++)
					{
						// Summation
						for(int Kbar=0;Kbar<3;Kbar++)
						{
							for(int Lbar=0;Lbar<3;Lbar++)
							{
								II20p_10(row,col)+= Temp_II20p(I,l,m)*fdFYchidSIGMA(Kbar,Lbar)*(fFp_inverse(J,Kbar)*fFe(i,Lbar) + fFp_inverse(J,Lbar)*fFe(i,Kbar));
							}
						}
						row++;
					}
				}
			}
	     col++;
		}
	}

    row=0;
    col=0;

	for(int J=0;J<3;J++)
	{
		for(int i=0;i<3;i++)
		{
			row=0;
			for(int l=0;l<3;l++)
			{
				for(int m=0;m<3;m++)
				{
					for(int I=0;I<3;I++)
					{
						// Summation
						for(int Ibar=0;Ibar<3;Ibar++)
						{
							II20p_11(row,col)+= Temp_II20p(I,l,m)*fdFYchidSIGMA_S_trace*fFp_inverse(J,Ibar)*fChie(i,Ibar);
						}
						row++;
					}
				}
			}
	     col++;
		}
	}

    row=0;
    col=0;

	for(int J=0;J<3;J++)
	{
		for(int i=0;i<3;i++)
		{
			row=0;
			for(int l=0;l<3;l++)
			{
				for(int m=0;m<3;m++)
				{
					for(int I=0;I<3;I++)
					{
						// Summation
						for(int Lbar=0;Lbar<3;Lbar++)
						{
							for(int Kbar=0;Kbar<3;Kbar++)
							{
								II20p_12(row,col)+= Temp_II20p(I,l,m)*fdFYchidSIGMA(Kbar,Lbar)*fFp_inverse(J,Kbar)*fChie(i,Lbar);
							}
						}
						row++;
					}
				}
			}
	     col++;
		}
	}

    row=0;
    col=0;

	for(int J=0;J<3;J++)
	{
		for(int i=0;i<3;i++)
		{
			row=0;
			for(int l=0;l<3;l++)
			{
				for(int m=0;m<3;m++)
				{
					for(int I=0;I<3;I++)
					{
						// Summation
						for(int Lbar=0;Lbar<3;Lbar++)
						{
							for(int Kbar=0;Kbar<3;Kbar++)
							{
								II20p_13(row,col)+= Temp_II20p(I,l,m)*fdFYchidSIGMA(Kbar,Lbar)*fFp_inverse(J,Lbar)*fChie(i,Kbar);
							}
						}
						row++;
					}
				}
			}
	     col++;
		}
	}

    row=0;
    col=0;

	for(int J=0;J<3;J++)
	{
		for(int i=0;i<3;i++)
		{
			row=0;
			for(int l=0;l<3;l++)
			{
				for(int m=0;m<3;m++)
				{
					for(int I=0;I<3;I++)
					{
						// Summation
						for(int Ibar=0;Ibar<3;Ibar++)
						{
							II20p_14(row,col)+= Temp_II20p(I,l,m)*fdFYchidSIGMA_S_trace*fFe(i,Ibar)*fChip_inverse(J,Ibar);
						}
						row++;
					}
				}
			}
	     col++;
		}
	}

    row=0;
    col=0;

	for(int J=0;J<3;J++)
	{
		for(int i=0;i<3;i++)
		{
			row=0;
			for(int l=0;l<3;l++)
			{
				for(int m=0;m<3;m++)
				{
					for(int I=0;I<3;I++)
					{
						// Summation
						for(int Lbar=0;Lbar<3;Lbar++)
						{
							for(int Kbar=0;Kbar<3;Kbar++)
							{
								II20p_15(row,col)+= Temp_II20p(I,l,m)*fdFYchidSIGMA(Kbar,Lbar)*fFe(i,Kbar)*fChip_inverse(J,Lbar);
							}
						}
						row++;
					}
				}
			}
	     col++;
		}
	}

    row=0;
    col=0;

	for(int J=0;J<3;J++)
	{
		for(int i=0;i<3;i++)
		{
			row=0;
			for(int l=0;l<3;l++)
			{
				for(int m=0;m<3;m++)
				{
					for(int I=0;I<3;I++)
					{
						// Summation
						for(int Lbar=0;Lbar<3;Lbar++)
						{
							for(int Kbar=0;Kbar<3;Kbar++)
							{
								II20p_16(row,col)+= Temp_II20p(I,l,m)*fdFYchidSIGMA(Kbar,Lbar)*fFe(i,Lbar)*fChip_inverse(J,Kbar);
							}
						}
						row++;
					}
				}
			}
	     col++;
		}
	}
}


void FSMicromorphic2_3DT:: Form_II21p_1_75()
{
    int row=0;
    int col=0;
    Temp_II21p = 0.0;
    II21e_1=0.0;
    II21p_1=0.0;
    II21p_2=0.0;
    II21p_3=0.0;
    II21p_4=0.0;
    II21p_5=0.0;
    II21p_6=0.0;
    II21p_7=0.0;
    II21p_8=0.0;
    II21p_9=0.0;
    II21p_1a=0.0;
    II21p_2a=0.0;
    II21p_3a=0.0;
    II21p_4a=0.0;
    II21p_5a=0.0;
    II21p_6a=0.0;
    II21p_7a=0.0;
    II21p_8a=0.0;

	fTemp_matrix_nsd_x_nsd = 0.0;
	fTemp_matrix_nsd_x_nsd2 = 0.0;
	fTemp_matrix_nsd_x_nsd3 = 0.0;
	fTemp_matrix_nsd_x_nsd.MultATBC(fFe,fChie,PSIe_n_inverse);
	fTemp_matrix_nsd_x_nsd2.MultAB(fChip_n,fChip_inverse);
	fTemp_matrix_nsd_x_nsd3.MultAB(fDeformation_Gradient_Inverse,fFe);


	for(int I=0;I<3;I++)
	{
    	for(int l=0;l<3;l++)
    	{
			for(int m=0;m<3;m++)
			{
				/// Summation
				for(int Mbar=0;Mbar<3;Mbar++)
				{
					for(int Nbar=0;Nbar<3;Nbar++)
					{
						for(int Kbar=0;Kbar<3;Kbar++)
						{
							for(int Lbar=0;Lbar<3;Lbar++)
							{
								for(int pbar=0;pbar<3;pbar++)
								{
									Temp_II21p(I,l,m)+= -1*fTemp_matrix_nsd_x_nsd3(I,Kbar)*fFe(l,Lbar)*(fMaterial_Params[kTau7]*fTemp_matrix_nsd_x_nsd(Lbar,Nbar)*fdGnablachidMKLM_tr(pbar,Kbar,Nbar)
									*fTemp_matrix_nsd_x_nsd2(pbar,Mbar)+fMaterial_Params[kTau8]*fTemp_matrix_nsd_x_nsd(Kbar,Nbar)*fdGnablachidMKLM_tr(pbar,Mbar,Nbar)*fTemp_matrix_nsd_x_nsd2(pbar,Lbar)
									+fMaterial_Params[kTau8]*fTemp_matrix_nsd_x_nsd(Mbar,Nbar)*fdGnablachidMKLM_tr(pbar,Lbar,Nbar)*fTemp_matrix_nsd_x_nsd2(pbar,Kbar)
									+fMaterial_Params[kTau9]*fTemp_matrix_nsd_x_nsd(Lbar,Nbar)*fdGnablachidMKLM_tr(pbar,Mbar,Nbar)*fTemp_matrix_nsd_x_nsd2(pbar,Kbar)
									+fMaterial_Params[kTau10]*fTemp_matrix_nsd_x_nsd(Mbar,Nbar)*fdGnablachidMKLM_tr(pbar,Kbar,Nbar)*fTemp_matrix_nsd_x_nsd2(pbar,Lbar)
									+fMaterial_Params[kTau11]*fTemp_matrix_nsd_x_nsd(Kbar,Nbar)*fdGnablachidMKLM_tr(pbar,Lbar,Nbar)*fTemp_matrix_nsd_x_nsd2(pbar,Mbar))
									*fChie(m,Mbar);
								}
							}
						}
					}
				}
			}
    	}
	}

     row=0;
     col=0;

	for(int J=0;J<3;J++)
	{
		for(int k=0;k<3;k++)
		{
			row=0;
			for(int l=0;l<3;l++)
			{
				for(int m=0;m<3;m++)
				{
					for(int I=0;I<3;I++)
					{
						// Summation
						for(int Kbar=0;Kbar<3;Kbar++)
						{
							for(int Lbar=0;Lbar<3;Lbar++)
							{
								for(int Mbar=0;Mbar<3;Mbar++)
								{
									for(int K=0;K<3;K++)
									{
										for(int L=0;L<3;L++)
										{
											II21e_1(row,col)+= Temp_II21p(I,l,m)*fdFnablachidMKLM(Kbar,Lbar,Mbar)*fFp_inverse(J,Kbar)*GRAD_CHIM(k,K,L)
											*fFp_inverse(L,Mbar)*fChip_inverse(K,Lbar);
										}
									}
								}
							}
						}
					row++;
					}
				}
			}
	     col++;
		}
	}

	fTemp_matrix_nsd_x_nsd = 0.0;
	fTemp_matrix_nsd_x_nsd2 = 0.0;
	fTemp_matrix_nsd_x_nsd3 = 0.0;
	fTemp_matrix_nsd_x_nsd.MultATBC(fdGdS_tr,fFp_n,fFp_inverse);
	fTemp_matrix_nsd_x_nsd2.MultABC(fFe,fCe_n_inverse,fTemp_matrix_nsd_x_nsd);
	Temp_II21p_2_8 = 0.0;

	for(int L=0;L<3;L++)
	{
		for(int K=0;K<3;K++)
		{
			for(int k=0;k<3;k++)
			{
				for(int Mbar=0;Mbar<3;Mbar++)
				{
					for(int Lbar=0;Lbar<3;Lbar++)
					{
						for(int Kbar=0;Kbar<3;Kbar++)
						{
							Temp_II21p_2_8+= fdFnablachidMKLM(Kbar,Lbar,Mbar)*fTemp_matrix_nsd_x_nsd2(k,Kbar)*GRAD_CHIM(k,K,L)*fFp_inverse(L,Mbar)*fChip_inverse(K,Lbar);
						}
					}
				}
			}
		}
	}

     row=0;
     col=0;

	for(int J=0;J<3;J++)
	{
		for(int i=0;i<3;i++)
		{
			row=0;
			for(int l=0;l<3;l++)
			{
				for(int m=0;m<3;m++)
				{
					for(int I=0;I<3;I++)
					{
						// Summation
						for(int Ibar=0;Ibar<3;Ibar++)
						{
							II21p_1(row,col)+= Temp_II21p(I,l,m)*Temp_II21p_2_8*fdFYdS_trace*fFp_inverse(J,Ibar)*fFe(i,Ibar);
						}
						row++;
					}
				}
			}
	     col++;
		}
	}

     row=0;
     col=0;

	for(int J=0;J<3;J++)
	{
		for(int i=0;i<3;i++)
		{
			row=0;
			for(int l=0;l<3;l++)
			{
				for(int m=0;m<3;m++)
				{
					for(int I=0;I<3;I++)
					{
						// Summation
						for(int Kbar=0;Kbar<3;Kbar++)
						{
							for(int Lbar=0;Lbar<3;Lbar++)
							{
								II21p_2(row,col)+= Temp_II21p(I,l,m)*Temp_II21p_2_8*fdFYdS(Kbar,Lbar)*(fFp_inverse(J,Kbar)*fFe(i,Lbar) + fFp_inverse(J,Lbar)*fFe(i,Kbar));
							}
						}
						row++;
					}
				}
			}
	     col++;
		}
	}

     row=0;
     col=0;

	for(int J=0;J<3;J++)
	{
		for(int i=0;i<3;i++)
		{
			row=0;
			for(int l=0;l<3;l++)
			{
				for(int m=0;m<3;m++)
				{
					for(int I=0;I<3;I++)
					{
						// Summation
						for(int Ibar=0;Ibar<3;Ibar++)
						{
							II21p_3(row,col)+= Temp_II21p(I,l,m)*Temp_II21p_2_8*fdFYdS_trace*fFp_inverse(J,Ibar)*fChie(i,Ibar);
						}
						row++;
					}
				}
			}
	     col++;
		}
	}

     row=0;
     col=0;

	for(int J=0;J<3;J++)
	{
		for(int i=0;i<3;i++)
		{
			row=0;
			for(int l=0;l<3;l++)
			{
				for(int m=0;m<3;m++)
				{
					for(int I=0;I<3;I++)
					{
						// Summation
						for(int Lbar=0;Lbar<3;Lbar++)
						{
							for(int Kbar=0;Kbar<3;Kbar++)
							{
								II21p_4(row,col)+= Temp_II21p(I,l,m)*Temp_II21p_2_8*fdFYdS(Kbar,Lbar)*fFp_inverse(J,Kbar)*fChie(i,Lbar);
							}
						}
						row++;
					}
				}
			}
	     col++;
		}
	}

     row=0;
     col=0;

	for(int J=0;J<3;J++)
	{
		for(int i=0;i<3;i++)
		{
			row=0;
			for(int l=0;l<3;l++)
			{
				for(int m=0;m<3;m++)
				{
					for(int I=0;I<3;I++)
					{
						// Summation
						for(int Lbar=0;Lbar<3;Lbar++)
						{
							for(int Kbar=0;Kbar<3;Kbar++)
							{
								II21p_5(row,col)+= Temp_II21p(I,l,m)*Temp_II21p_2_8*fdFYdS(Kbar,Lbar)*fFp_inverse(J,Lbar)*fChie(i,Kbar);
							}
						}
						row++;
					}
				}
			}
	     col++;
		}
	}

     row=0;
     col=0;

	for(int J=0;J<3;J++)
	{
		for(int i=0;i<3;i++)
		{
			row=0;
			for(int l=0;l<3;l++)
			{
				for(int m=0;m<3;m++)
				{
					for(int I=0;I<3;I++)
					{
						// Summation
						for(int Ibar=0;Ibar<3;Ibar++)
						{
							II21p_6(row,col)+= Temp_II21p(I,l,m)*Temp_II21p_2_8*fdFYdS_trace*fFe(i,Ibar)*fChip_inverse(J,Ibar);
						}
						row++;
					}
				}
			}
	     col++;
		}
	}

     row=0;
     col=0;

	for(int J=0;J<3;J++)
	{
		for(int i=0;i<3;i++)
		{
			row=0;
			for(int l=0;l<3;l++)
			{
				for(int m=0;m<3;m++)
				{
					for(int I=0;I<3;I++)
					{
						// Summation
						for(int Lbar=0;Lbar<3;Lbar++)
						{
							for(int Kbar=0;Kbar<3;Kbar++)
							{
								II21p_7(row,col)+= Temp_II21p(I,l,m)*Temp_II21p_2_8*fdFYdS(Kbar,Lbar)*fFe(i,Kbar)*fChip_inverse(J,Lbar);
							}
						}
						row++;
					}
				}
			}
	     col++;
		}
	}

     row=0;
     col=0;

	for(int J=0;J<3;J++)
	{
		for(int i=0;i<3;i++)
		{
			row=0;
			for(int l=0;l<3;l++)
			{
				for(int m=0;m<3;m++)
				{
					for(int I=0;I<3;I++)
					{
						// Summation
						for(int Lbar=0;Lbar<3;Lbar++)
						{
							for(int Kbar=0;Kbar<3;Kbar++)
							{
								II21p_8(row,col)+= Temp_II21p(I,l,m)*Temp_II21p_2_8*fdFYdS(Kbar,Lbar)*fFe(i,Lbar)*fChip_inverse(J,Kbar);
							}
						}
						row++;
					}
				}
			}
	     col++;
		}
	}

    row=0;
    col=0;

	for(int J=0;J<3;J++)
	{
		for(int i=0;i<3;i++)
		{
			row=0;
			for(int l=0;l<3;l++)
			{
				for(int m=0;m<3;m++)
				{
					for(int I=0;I<3;I++)
					{
						// Summation
						for(int Ibar=0;Ibar<3;Ibar++)
						{
							II21p_1a(row,col)+= Temp_II21p(I,l,m)*Temp_II21p_2_8*fdFYchidSIGMA_S_trace*fFp_inverse(J,Ibar)*fFe(i,Ibar);
						}
						row++;
					}
				}
			}
	     col++;
		}
	}

    row=0;
    col=0;

	for(int J=0;J<3;J++)
	{
		for(int i=0;i<3;i++)
		{
			row=0;
			for(int l=0;l<3;l++)
			{
				for(int m=0;m<3;m++)
				{
					for(int I=0;I<3;I++)
					{
						// Summation
						for(int Kbar=0;Kbar<3;Kbar++)
						{
							for(int Lbar=0;Lbar<3;Lbar++)
							{
								II21p_2a(row,col)+= Temp_II21p(I,l,m)*Temp_II21p_2_8*fdFYchidSIGMA(Kbar,Lbar)*(fFp_inverse(J,Kbar)*fFe(i,Lbar) + fFp_inverse(J,Lbar)*fFe(i,Kbar));
							}
						}
						row++;
					}
				}
			}
	     col++;
		}
	}

    row=0;
    col=0;

	for(int J=0;J<3;J++)
	{
		for(int i=0;i<3;i++)
		{
			row=0;
			for(int l=0;l<3;l++)
			{
				for(int m=0;m<3;m++)
				{
					for(int I=0;I<3;I++)
					{
						// Summation
						for(int Ibar=0;Ibar<3;Ibar++)
						{
							II21p_3a(row,col)+= Temp_II21p(I,l,m)*Temp_II21p_2_8*fdFYchidSIGMA_S_trace*fFp_inverse(J,Ibar)*fChie(i,Ibar);
						}
						row++;
					}
				}
			}
	     col++;
		}
	}

    row=0;
    col=0;

	for(int J=0;J<3;J++)
	{
		for(int i=0;i<3;i++)
		{
			row=0;
			for(int l=0;l<3;l++)
			{
				for(int m=0;m<3;m++)
				{
					for(int I=0;I<3;I++)
					{
						// Summation
						for(int Lbar=0;Lbar<3;Lbar++)
						{
							for(int Kbar=0;Kbar<3;Kbar++)
							{
								II21p_4a(row,col)+= Temp_II21p(I,l,m)*Temp_II21p_2_8*fdFYchidSIGMA(Kbar,Lbar)*fFp_inverse(J,Kbar)*fChie(i,Lbar);
							}
						}
						row++;
					}
				}
			}
	     col++;
		}
	}

    row=0;
    col=0;

	for(int J=0;J<3;J++)
	{
		for(int i=0;i<3;i++)
		{
			row=0;
			for(int l=0;l<3;l++)
			{
				for(int m=0;m<3;m++)
				{
					for(int I=0;I<3;I++)
					{
						// Summation
						for(int Lbar=0;Lbar<3;Lbar++)
						{
							for(int Kbar=0;Kbar<3;Kbar++)
							{
								II21p_5a(row,col)+= Temp_II21p(I,l,m)*Temp_II21p_2_8*fdFYchidSIGMA(Kbar,Lbar)*fFp_inverse(J,Lbar)*fChie(i,Kbar);
							}
						}
						row++;
					}
				}
			}
	     col++;
		}
	}

    row=0;
    col=0;

	for(int J=0;J<3;J++)
	{
		for(int i=0;i<3;i++)
		{
			row=0;
			for(int l=0;l<3;l++)
			{
				for(int m=0;m<3;m++)
				{
					for(int I=0;I<3;I++)
					{
						// Summation
						for(int Ibar=0;Ibar<3;Ibar++)
						{
							II21p_6a(row,col)+= Temp_II21p(I,l,m)*Temp_II21p_2_8*fdFYchidSIGMA_S_trace*fFe(i,Ibar)*fChip_inverse(J,Ibar);
						}
						row++;
					}
				}
			}
	     col++;
		}
	}

    row=0;
    col=0;

	for(int J=0;J<3;J++)
	{
		for(int i=0;i<3;i++)
		{
			row=0;
			for(int l=0;l<3;l++)
			{
				for(int m=0;m<3;m++)
				{
					for(int I=0;I<3;I++)
					{
						// Summation
						for(int Lbar=0;Lbar<3;Lbar++)
						{
							for(int Kbar=0;Kbar<3;Kbar++)
							{
								II21p_7a(row,col)+= Temp_II21p(I,l,m)*Temp_II21p_2_8*fdFYchidSIGMA(Kbar,Lbar)*fFe(i,Kbar)*fChip_inverse(J,Lbar);
							}
						}
						row++;
					}
				}
			}
	     col++;
		}
	}

    row=0;
    col=0;

	for(int J=0;J<3;J++)
	{
		for(int i=0;i<3;i++)
		{
			row=0;
			for(int l=0;l<3;l++)
			{
				for(int m=0;m<3;m++)
				{
					for(int I=0;I<3;I++)
					{
						// Summation
						for(int Lbar=0;Lbar<3;Lbar++)
						{
							for(int Kbar=0;Kbar<3;Kbar++)
							{
								II21p_8a(row,col)+= Temp_II21p(I,l,m)*Temp_II21p_2_8*fdFYchidSIGMA(Kbar,Lbar)*fFe(i,Lbar)*fChip_inverse(J,Kbar);
							}
						}
						row++;
					}
				}
			}
	     col++;
		}
	}

     row=0;
     col=0;

	for(int K=0;K<3;K++)
	{
		for(int k=0;k<3;k++)
		{
			for(int L=0;L<3;L++)
			{
				row=0;
				for(int l=0;l<3;l++)
				{
					for(int m=0;m<3;m++)
					{
						for(int I=0;I<3;I++)
						{
							// Summation
							for(int Kbar=0;Kbar<3;Kbar++)
							{
								for(int Lbar=0;Lbar<3;Lbar++)
								{
									for(int Mbar=0;Mbar<3;Mbar++)
									{
										II21p_9(row,col)+= Temp_II21p(I,l,m)*fdFnablachidMKLM(Kbar,Lbar,Mbar)*fFe(k,Kbar)
										*fFp_inverse(L,Mbar)*fChip_inverse(K,Lbar);
									}
								}
							}
						row++;
						}
					}
				}
			col++;
			}
		}
	}



	    Temp_II21p_10_17 = 0.0;
	    II21p_10=0.0;
	    II21p_11=0.0;
	    II21p_12=0.0;
	    II21p_13=0.0;
	    II21p_14=0.0;
	    II21p_15=0.0;
	    II21p_16=0.0;
	    II21p_17=0.0;
	    II21p_10a=0.0;
	    II21p_11a=0.0;
	    II21p_12a=0.0;
	    II21p_13a=0.0;
	    II21p_14a=0.0;
	    II21p_15a=0.0;
	    II21p_16a=0.0;
	    II21p_17a=0.0;

		fTemp_matrix_nsd_x_nsd = 0.0;
		fTemp_matrix_nsd_x_nsd2 = 0.0;
		fTemp_matrix_nsd_x_nsd.MultATBC(fdGdS_tr,fFp_n,fFp_inverse);
		fTemp_matrix_nsd_x_nsd2.MultABC(fFp_inverse,fCe_n_inverse,fTemp_matrix_nsd_x_nsd);


		for(int L=0;L<3;L++)
		{
	    	for(int K=0;K<3;K++)
	    	{
				for(int k=0;k<3;k++)
				{
					for(int Mbar=0;Mbar<3;Mbar++)
					{
						for(int Kbar=0;Kbar<3;Kbar++)
						{
							for(int Lbar=0;Lbar<3;Lbar++)
							{
								Temp_II21p_10_17+= fdFnablachidMKLM(Kbar,Lbar,Mbar)*fFe(k,Kbar)*GRAD_CHIM(k,K,L)*fTemp_matrix_nsd_x_nsd2(L,Mbar)*fChip_inverse(K,Lbar);
							}
						}
					}
				}
	    	}
		}

	     row=0;
	     col=0;

		for(int J=0;J<3;J++)
		{
			for(int i=0;i<3;i++)
			{
				row=0;
				for(int l=0;l<3;l++)
				{
					for(int m=0;m<3;m++)
					{
						for(int I=0;I<3;I++)
						{
							// Summation
							for(int Ibar=0;Ibar<3;Ibar++)
							{
								II21p_10(row,col)+= Temp_II21p(I,l,m)*Temp_II21p_10_17*fdFYdS_trace*fFp_inverse(J,Ibar)*fFe(i,Ibar);
							}
							row++;
						}
					}
				}
		     col++;
			}
		}

	     row=0;
	     col=0;

		for(int J=0;J<3;J++)
		{
			for(int i=0;i<3;i++)
			{
				row=0;
				for(int l=0;l<3;l++)
				{
					for(int m=0;m<3;m++)
					{
						for(int I=0;I<3;I++)
						{
							// Summation
							for(int Kbar=0;Kbar<3;Kbar++)
							{
								for(int Lbar=0;Lbar<3;Lbar++)
								{
									II21p_11(row,col)+= Temp_II21p(I,l,m)*Temp_II21p_10_17*fdFYdS(Kbar,Lbar)*(fFp_inverse(J,Kbar)*fFe(i,Lbar) + fFp_inverse(J,Lbar)*fFe(i,Kbar));
								}
							}
							row++;
						}
					}
				}
		     col++;
			}
		}

	     row=0;
	     col=0;

		for(int J=0;J<3;J++)
		{
			for(int i=0;i<3;i++)
			{
				row=0;
				for(int l=0;l<3;l++)
				{
					for(int m=0;m<3;m++)
					{
						for(int I=0;I<3;I++)
						{
							// Summation
							for(int Ibar=0;Ibar<3;Ibar++)
							{
								II21p_12(row,col)+= Temp_II21p(I,l,m)*Temp_II21p_10_17*fdFYdS_trace*fFp_inverse(J,Ibar)*fChie(i,Ibar);
							}
							row++;
						}
					}
				}
		     col++;
			}
		}

	     row=0;
	     col=0;

		for(int J=0;J<3;J++)
		{
			for(int i=0;i<3;i++)
			{
				row=0;
				for(int l=0;l<3;l++)
				{
					for(int m=0;m<3;m++)
					{
						for(int I=0;I<3;I++)
						{
							// Summation
							for(int Lbar=0;Lbar<3;Lbar++)
							{
								for(int Kbar=0;Kbar<3;Kbar++)
								{
									II21p_13(row,col)+= Temp_II21p(I,l,m)*Temp_II21p_10_17*fdFYdS(Kbar,Lbar)*fFp_inverse(J,Kbar)*fChie(i,Lbar);
								}
							}
							row++;
						}
					}
				}
		     col++;
			}
		}

	     row=0;
	     col=0;

		for(int J=0;J<3;J++)
		{
			for(int i=0;i<3;i++)
			{
				row=0;
				for(int l=0;l<3;l++)
				{
					for(int m=0;m<3;m++)
					{
						for(int I=0;I<3;I++)
						{
							// Summation
							for(int Lbar=0;Lbar<3;Lbar++)
							{
								for(int Kbar=0;Kbar<3;Kbar++)
								{
									II21p_14(row,col)+= Temp_II21p(I,l,m)*Temp_II21p_10_17*fdFYdS(Kbar,Lbar)*fFp_inverse(J,Lbar)*fChie(i,Kbar);
								}
							}
						 row++;
						}
					}
				}
		     col++;
			}
		}

	     row=0;
	     col=0;

		for(int J=0;J<3;J++)
		{
			for(int i=0;i<3;i++)
			{
				row=0;
				for(int l=0;l<3;l++)
				{
					for(int m=0;m<3;m++)
					{
						for(int I=0;I<3;I++)
						{
							// Summation
							for(int Ibar=0;Ibar<3;Ibar++)
							{
								II21p_15(row,col)+= Temp_II21p(I,l,m)*Temp_II21p_10_17*fdFYdS_trace*fFe(i,Ibar)*fChip_inverse(J,Ibar);
							}
							row++;
						}
					}
				}
		     col++;
			}
		}

	     row=0;
	     col=0;

		for(int J=0;J<3;J++)
		{
			for(int i=0;i<3;i++)
			{
				row=0;
				for(int l=0;l<3;l++)
				{
					for(int m=0;m<3;m++)
					{
						for(int I=0;I<3;I++)
						{
							// Summation
							for(int Lbar=0;Lbar<3;Lbar++)
							{
								for(int Kbar=0;Kbar<3;Kbar++)
								{
									II21p_16(row,col)+= Temp_II21p(I,l,m)*Temp_II21p_10_17*fdFYdS(Kbar,Lbar)*fFe(i,Kbar)*fChip_inverse(J,Lbar);
								}
							}
						 row++;
						}
					}
				}
		     col++;
			}
		}

	     row=0;
	     col=0;

		for(int J=0;J<3;J++)
		{
			for(int i=0;i<3;i++)
			{
				row=0;
				for(int l=0;l<3;l++)
				{
					for(int m=0;m<3;m++)
					{
						for(int I=0;I<3;I++)
						{
							// Summation
							for(int Lbar=0;Lbar<3;Lbar++)
							{
								for(int Kbar=0;Kbar<3;Kbar++)
								{
									II21p_17(row,col)+= Temp_II21p(I,l,m)*Temp_II21p_10_17*fdFYdS(Kbar,Lbar)*fFe(i,Lbar)*fChip_inverse(J,Kbar);
								}
							}
							row++;
						}
					}
				}
		     col++;
			}
		}

	     row=0;
	     col=0;

		for(int J=0;J<3;J++)
		{
			for(int i=0;i<3;i++)
			{
				row=0;
				for(int l=0;l<3;l++)
				{
					for(int m=0;m<3;m++)
					{
						for(int I=0;I<3;I++)
						{
							// Summation
							for(int Ibar=0;Ibar<3;Ibar++)
							{
								II21p_10a(row,col)+= Temp_II21p(I,l,m)*Temp_II21p_10_17*fdFYchidSIGMA_S_trace*fFp_inverse(J,Ibar)*fFe(i,Ibar);
							}
							row++;
						}
					}
				}
		     col++;
			}
		}

	     row=0;
	     col=0;

		for(int J=0;J<3;J++)
		{
			for(int i=0;i<3;i++)
			{
				row=0;
				for(int l=0;l<3;l++)
				{
					for(int m=0;m<3;m++)
					{
						for(int I=0;I<3;I++)
						{
							// Summation
							for(int Kbar=0;Kbar<3;Kbar++)
							{
								for(int Lbar=0;Lbar<3;Lbar++)
								{
									II21p_11a(row,col)+= Temp_II21p(I,l,m)*Temp_II21p_10_17*fdFYchidSIGMA(Kbar,Lbar)*(fFp_inverse(J,Kbar)*fFe(i,Lbar) + fFp_inverse(J,Lbar)*fFe(i,Kbar));
								}
							}
							row++;
						}
					}
				}
		     col++;
			}
		}

	     row=0;
	     col=0;

		for(int J=0;J<3;J++)
		{
			for(int i=0;i<3;i++)
			{
				row=0;
				for(int l=0;l<3;l++)
				{
					for(int m=0;m<3;m++)
					{
						for(int I=0;I<3;I++)
						{
							// Summation
							for(int Ibar=0;Ibar<3;Ibar++)
							{
								II21p_12a(row,col)+= Temp_II21p(I,l,m)*Temp_II21p_10_17*fdFYchidSIGMA_S_trace*fFp_inverse(J,Ibar)*fChie(i,Ibar);
							}
							row++;
						}
					}
				}
		     col++;
			}
		}

	     row=0;
	     col=0;

		for(int J=0;J<3;J++)
		{
			for(int i=0;i<3;i++)
			{
				row=0;
				for(int l=0;l<3;l++)
				{
					for(int m=0;m<3;m++)
					{
						for(int I=0;I<3;I++)
						{
							// Summation
							for(int Lbar=0;Lbar<3;Lbar++)
							{
								for(int Kbar=0;Kbar<3;Kbar++)
								{
									II21p_13a(row,col)+= Temp_II21p(I,l,m)*Temp_II21p_10_17*fdFYchidSIGMA(Kbar,Lbar)*fFp_inverse(J,Kbar)*fChie(i,Lbar);
								}
							}
							row++;
						}
					}
				}
		     col++;
			}
		}

	     row=0;
	     col=0;

		for(int J=0;J<3;J++)
		{
			for(int i=0;i<3;i++)
			{
				row=0;
				for(int l=0;l<3;l++)
				{
					for(int m=0;m<3;m++)
					{
						for(int I=0;I<3;I++)
						{
							// Summation
							for(int Lbar=0;Lbar<3;Lbar++)
							{
								for(int Kbar=0;Kbar<3;Kbar++)
								{
									II21p_14a(row,col)+= Temp_II21p(I,l,m)*Temp_II21p_10_17*fdFYchidSIGMA(Kbar,Lbar)*fFp_inverse(J,Lbar)*fChie(i,Kbar);
								}
							}
						 row++;
						}
					}
				}
		     col++;
			}
		}

	     row=0;
	     col=0;

		for(int J=0;J<3;J++)
		{
			for(int i=0;i<3;i++)
			{
				row=0;
				for(int l=0;l<3;l++)
				{
					for(int m=0;m<3;m++)
					{
						for(int I=0;I<3;I++)
						{
							// Summation
							for(int Ibar=0;Ibar<3;Ibar++)
							{
								II21p_15a(row,col)+= Temp_II21p(I,l,m)*Temp_II21p_10_17*fdFYchidSIGMA_S_trace*fFe(i,Ibar)*fChip_inverse(J,Ibar);
							}
							row++;
						}
					}
				}
		     col++;
			}
		}

	     row=0;
	     col=0;

		for(int J=0;J<3;J++)
		{
			for(int i=0;i<3;i++)
			{
				row=0;
				for(int l=0;l<3;l++)
				{
					for(int m=0;m<3;m++)
					{
						for(int I=0;I<3;I++)
						{
							// Summation
							for(int Lbar=0;Lbar<3;Lbar++)
							{
								for(int Kbar=0;Kbar<3;Kbar++)
								{
									II21p_16a(row,col)+= Temp_II21p(I,l,m)*Temp_II21p_10_17*fdFYchidSIGMA(Kbar,Lbar)*fFe(i,Kbar)*fChip_inverse(J,Lbar);
								}
							}
						 row++;
						}
					}
				}
		     col++;
			}
		}

	     row=0;
	     col=0;

		for(int J=0;J<3;J++)
		{
			for(int i=0;i<3;i++)
			{
				row=0;
				for(int l=0;l<3;l++)
				{
					for(int m=0;m<3;m++)
					{
						for(int I=0;I<3;I++)
						{
							// Summation
							for(int Lbar=0;Lbar<3;Lbar++)
							{
								for(int Kbar=0;Kbar<3;Kbar++)
								{
									II21p_17a(row,col)+= Temp_II21p(I,l,m)*Temp_II21p_10_17*fdFYchidSIGMA(Kbar,Lbar)*fFe(i,Lbar)*fChip_inverse(J,Kbar);
								}
							}
							row++;
						}
					}
				}
		     col++;
			}
		}

	     row=0;
	     col=0;
	    Temp_II21p_18_25 = 0.0;
	    II21p_18=0.0;
	    II21p_19=0.0;
	    II21p_20=0.0;
	    II21p_21=0.0;
	    II21p_22=0.0;
	    II21p_23=0.0;
	    II21p_24=0.0;
	    II21p_25=0.0;
	    II21p_26=0.0;
	    II21p_18a=0.0;
	    II21p_19a=0.0;
	    II21p_20a=0.0;
	    II21p_21a=0.0;
	    II21p_22a=0.0;
	    II21p_23a=0.0;
	    II21p_24a=0.0;
	    II21p_25a=0.0;

		fTemp_matrix_nsd_x_nsd = 0.0;
		fTemp_matrix_nsd_x_nsd2 = 0.0;
		fTemp_matrix_nsd_x_nsd.MultABC(fCchie_n,fChip_n,fChip_inverse);
		fTemp_matrix_nsd_x_nsd2.MultATBC(fdGchidSIGMA_tr,PSIe_n_inverseT,fTemp_matrix_nsd_x_nsd);
		fTemp_matrix_nsd_x_nsd.MultABC(fChip_inverse,PSIe_n_inverse,fTemp_matrix_nsd_x_nsd2);

		for(int L=0;L<3;L++)
		{
	    	for(int K=0;K<3;K++)
	    	{
				for(int k=0;k<3;k++)
				{
					for(int Mbar=0;Mbar<3;Mbar++)
					{
						for(int Kbar=0;Kbar<3;Kbar++)
						{
							for(int Lbar=0;Lbar<3;Lbar++)
							{
								Temp_II21p_18_25+= fdFnablachidMKLM(Kbar,Lbar,Mbar)*fFe(k,Kbar)*GRAD_CHIM(k,K,L)*fFp_inverse(L,Mbar)*fTemp_matrix_nsd_x_nsd(K,Lbar);
							}
						}
					}
				}
	    	}
		}

	     row=0;
	     col=0;

		for(int J=0;J<3;J++)
		{
			for(int i=0;i<3;i++)
			{
				row=0;
				for(int l=0;l<3;l++)
				{
					for(int m=0;m<3;m++)
					{
						for(int I=0;I<3;I++)
						{
							// Summation
							for(int Ibar=0;Ibar<3;Ibar++)
							{
								II21p_18(row,col)+= Temp_II21p(I,l,m)*Temp_II21p_18_25*fdFYdS_trace*fFp_inverse(J,Ibar)*fFe(i,Ibar);
							}
							row++;
						}
					}
				}
		     col++;
			}
		}

	     row=0;
	     col=0;

		for(int J=0;J<3;J++)
		{
			for(int i=0;i<3;i++)
			{
				row=0;
				for(int l=0;l<3;l++)
				{
					for(int m=0;m<3;m++)
					{
						for(int I=0;I<3;I++)
						{
							// Summation
							for(int Kbar=0;Kbar<3;Kbar++)
							{
								for(int Lbar=0;Lbar<3;Lbar++)
								{
									II21p_19(row,col)+= Temp_II21p(I,l,m)*Temp_II21p_18_25*fdFYdS(Kbar,Lbar)*(fFp_inverse(J,Kbar)*fFe(i,Lbar) + fFp_inverse(J,Lbar)*fFe(i,Kbar));
								}
							}
						row++;
						}
					}
				}
		     col++;
			}
		}

	     row=0;
	     col=0;

		for(int J=0;J<3;J++)
		{
			for(int i=0;i<3;i++)
			{
				row=0;
				for(int l=0;l<3;l++)
				{
					for(int m=0;m<3;m++)
					{
						for(int I=0;I<3;I++)
						{
							// Summation
							for(int Ibar=0;Ibar<3;Ibar++)
							{
								II21p_20(row,col)+= Temp_II21p(I,l,m)*Temp_II21p_18_25*fdFYdS_trace*fFp_inverse(J,Ibar)*fChie(i,Ibar);
							}
							row++;
						}
					}
				}
		     col++;
			}
		}

	     row=0;
	     col=0;

		for(int J=0;J<3;J++)
		{
			for(int i=0;i<3;i++)
			{
				row=0;
				for(int l=0;l<3;l++)
				{
					for(int m=0;m<3;m++)
					{
						for(int I=0;I<3;I++)
						{
							// Summation
							for(int Lbar=0;Lbar<3;Lbar++)
							{
								for(int Kbar=0;Kbar<3;Kbar++)
								{
									II21p_21(row,col)+= Temp_II21p(I,l,m)*Temp_II21p_18_25*fdFYdS(Kbar,Lbar)*fFp_inverse(J,Kbar)*fChie(i,Lbar);
								}
							}
							row++;
						}
					}
				}
		     col++;
			}
		}

	     row=0;
	     col=0;

		for(int J=0;J<3;J++)
		{
			for(int i=0;i<3;i++)
			{
				row=0;
				for(int l=0;l<3;l++)
				{
					for(int m=0;m<3;m++)
					{
						for(int I=0;I<3;I++)
						{
							// Summation
							for(int Lbar=0;Lbar<3;Lbar++)
							{
								for(int Kbar=0;Kbar<3;Kbar++)
								{
									II21p_22(row,col)+= Temp_II21p(I,l,m)*Temp_II21p_18_25*fdFYdS(Kbar,Lbar)*fFp_inverse(J,Lbar)*fChie(i,Kbar);
								}
							}
							row++;
						}
					}
				}
		     col++;
			}
		}

	     row=0;
	     col=0;

		for(int J=0;J<3;J++)
		{
			for(int i=0;i<3;i++)
			{
				row=0;
				for(int l=0;l<3;l++)
				{
					for(int m=0;m<3;m++)
					{
						for(int I=0;I<3;I++)
						{
							// Summation
							for(int Ibar=0;Ibar<3;Ibar++)
							{
								II21p_23(row,col)+= Temp_II21p(I,l,m)*Temp_II21p_18_25*fdFYdS_trace*fFe(i,Ibar)*fChip_inverse(J,Ibar);
							}
							row++;
						}
					}
				}
		     col++;
			}
		}

	     row=0;
	     col=0;

		for(int J=0;J<3;J++)
		{
			for(int i=0;i<3;i++)
			{
				row=0;
				for(int l=0;l<3;l++)
				{
					for(int m=0;m<3;m++)
					{
						for(int I=0;I<3;I++)
						{
							// Summation
							for(int Lbar=0;Lbar<3;Lbar++)
							{
								for(int Kbar=0;Kbar<3;Kbar++)
								{
									II21p_24(row,col)+= Temp_II21p(I,l,m)*Temp_II21p_18_25*fdFYdS(Kbar,Lbar)*fFe(i,Kbar)*fChip_inverse(J,Lbar);
								}
							}
							row++;
						}
					}
				}
		     col++;
			}
		}

	     row=0;
	     col=0;

		for(int J=0;J<3;J++)
		{
			for(int i=0;i<3;i++)
			{
				row=0;
				for(int l=0;l<3;l++)
				{
					for(int m=0;m<3;m++)
					{
						for(int I=0;I<3;I++)
						{
							// Summation
							for(int Lbar=0;Lbar<3;Lbar++)
							{
								for(int Kbar=0;Kbar<3;Kbar++)
								{
									II21p_25(row,col)+= Temp_II21p(I,l,m)*Temp_II21p_18_25*fdFYdS(Kbar,Lbar)*fFe(i,Lbar)*fChip_inverse(J,Kbar);
								}
							}
							row++;
						}
					}
				}
		     col++;
			}
		}


		 row=0;
		 col=0;

		for(int J=0;J<3;J++)
		{
			for(int i=0;i<3;i++)
			{
				row=0;
				for(int l=0;l<3;l++)
				{
					for(int m=0;m<3;m++)
					{
						for(int I=0;I<3;I++)
						{
							// Summation
							for(int Ibar=0;Ibar<3;Ibar++)
							{
								II21p_18a(row,col)+= Temp_II21p(I,l,m)*Temp_II21p_18_25*fdFYchidSIGMA_S_trace*fFp_inverse(J,Ibar)*fFe(i,Ibar);
							}
							row++;
						}
					}
				}
			 col++;
			}
		}

		 row=0;
		 col=0;

		for(int J=0;J<3;J++)
		{
			for(int i=0;i<3;i++)
			{
				row=0;
				for(int l=0;l<3;l++)
				{
					for(int m=0;m<3;m++)
					{
						for(int I=0;I<3;I++)
						{
							// Summation
							for(int Kbar=0;Kbar<3;Kbar++)
							{
								for(int Lbar=0;Lbar<3;Lbar++)
								{
									II21p_19a(row,col)+= Temp_II21p(I,l,m)*Temp_II21p_18_25*fdFYchidSIGMA(Kbar,Lbar)*(fFp_inverse(J,Kbar)*fFe(i,Lbar) + fFp_inverse(J,Lbar)*fFe(i,Kbar));
								}
							}
						row++;
						}
					}
				}
			 col++;
			}
		}

		 row=0;
		 col=0;

		for(int J=0;J<3;J++)
		{
			for(int i=0;i<3;i++)
			{
				row=0;
				for(int l=0;l<3;l++)
				{
					for(int m=0;m<3;m++)
					{
						for(int I=0;I<3;I++)
						{
							// Summation
							for(int Ibar=0;Ibar<3;Ibar++)
							{
								II21p_20a(row,col)+= Temp_II21p(I,l,m)*Temp_II21p_18_25*fdFYchidSIGMA_S_trace*fFp_inverse(J,Ibar)*fChie(i,Ibar);
							}
							row++;
						}
					}
				}
			 col++;
			}
		}

		 row=0;
		 col=0;

		for(int J=0;J<3;J++)
		{
			for(int i=0;i<3;i++)
			{
				row=0;
				for(int l=0;l<3;l++)
				{
					for(int m=0;m<3;m++)
					{
						for(int I=0;I<3;I++)
						{
							// Summation
							for(int Lbar=0;Lbar<3;Lbar++)
							{
								for(int Kbar=0;Kbar<3;Kbar++)
								{
									II21p_21a(row,col)+= Temp_II21p(I,l,m)*Temp_II21p_18_25*fdFYchidSIGMA(Kbar,Lbar)*fFp_inverse(J,Kbar)*fChie(i,Lbar);
								}
							}
							row++;
						}
					}
				}
			 col++;
			}
		}

		 row=0;
		 col=0;

		for(int J=0;J<3;J++)
		{
			for(int i=0;i<3;i++)
			{
				row=0;
				for(int l=0;l<3;l++)
				{
					for(int m=0;m<3;m++)
					{
						for(int I=0;I<3;I++)
						{
							// Summation
							for(int Lbar=0;Lbar<3;Lbar++)
							{
								for(int Kbar=0;Kbar<3;Kbar++)
								{
									II21p_22a(row,col)+= Temp_II21p(I,l,m)*Temp_II21p_18_25*fdFYchidSIGMA(Kbar,Lbar)*fFp_inverse(J,Lbar)*fChie(i,Kbar);
								}
							}
							row++;
						}
					}
				}
			 col++;
			}
		}

		 row=0;
		 col=0;

		for(int J=0;J<3;J++)
		{
			for(int i=0;i<3;i++)
			{
				row=0;
				for(int l=0;l<3;l++)
				{
					for(int m=0;m<3;m++)
					{
						for(int I=0;I<3;I++)
						{
							// Summation
							for(int Ibar=0;Ibar<3;Ibar++)
							{
								II21p_23a(row,col)+= Temp_II21p(I,l,m)*Temp_II21p_18_25*fdFYchidSIGMA_S_trace*fFe(i,Ibar)*fChip_inverse(J,Ibar);
							}
							row++;
						}
					}
				}
			 col++;
			}
		}

		 row=0;
		 col=0;

		for(int J=0;J<3;J++)
		{
			for(int i=0;i<3;i++)
			{
				row=0;
				for(int l=0;l<3;l++)
				{
					for(int m=0;m<3;m++)
					{
						for(int I=0;I<3;I++)
						{
							// Summation
							for(int Lbar=0;Lbar<3;Lbar++)
							{
								for(int Kbar=0;Kbar<3;Kbar++)
								{
									II21p_24a(row,col)+= Temp_II21p(I,l,m)*Temp_II21p_18_25*fdFYchidSIGMA(Kbar,Lbar)*fFe(i,Kbar)*fChip_inverse(J,Lbar);
								}
							}
							row++;
						}
					}
				}
			 col++;
			}
		}

		 row=0;
		 col=0;

		for(int J=0;J<3;J++)
		{
			for(int i=0;i<3;i++)
			{
				row=0;
				for(int l=0;l<3;l++)
				{
					for(int m=0;m<3;m++)
					{
						for(int I=0;I<3;I++)
						{
							// Summation
							for(int Lbar=0;Lbar<3;Lbar++)
							{
								for(int Kbar=0;Kbar<3;Kbar++)
								{
									II21p_25a(row,col)+= Temp_II21p(I,l,m)*Temp_II21p_18_25*fdFYchidSIGMA(Kbar,Lbar)*fFe(i,Lbar)*fChip_inverse(J,Kbar);
								}
							}
							row++;
						}
					}
				}
			 col++;
			}
		}

	     row=0;
	     col=0;

		for(int J=0;J<3;J++)
		{
			for(int k=0;k<3;k++)
			{
				row=0;
				for(int l=0;l<3;l++)
				{
					for(int m=0;m<3;m++)
					{
						for(int I=0;I<3;I++)
						{
							// Summation
							for(int Kbar=0;Kbar<3;Kbar++)
							{
								for(int Lbar=0;Lbar<3;Lbar++)
								{
									for(int Mbar=0;Mbar<3;Mbar++)
									{
										for(int Nbar=0;Nbar<3;Nbar++)
										{
											for(int A=0;A<3;A++)
											{
												II21p_26(row,col)+= Temp_II21p(I,l,m)*fdFnablachidMKLM(Kbar,Lbar,Mbar)*fFp_inverse(J,Kbar)*fChie(k,Nbar)*GXp(Nbar,A,Mbar)
												*fChip_inverse(A,Lbar);
											}
										}
									}
								}
							}
						row++;
						}
					}
				}
		     col++;
			}
		}



	    Temp_II21p_27_34 = 0.0;
	    II21p_27=0.0;
	    II21p_28=0.0;
	    II21p_29=0.0;
	    II21p_30=0.0;
	    II21p_31=0.0;
	    II21p_32=0.0;
	    II21p_33=0.0;
	    II21p_34=0.0;
	    II21p_35=0.0;
	    II21p_27a=0.0;
	    II21p_28a=0.0;
	    II21p_29a=0.0;
	    II21p_30a=0.0;
	    II21p_31a=0.0;
	    II21p_32a=0.0;
	    II21p_33a=0.0;
	    II21p_34a=0.0;

		fTemp_matrix_nsd_x_nsd = 0.0;
		fTemp_matrix_nsd_x_nsd2 = 0.0;
		fTemp_matrix_nsd_x_nsd.MultATBC(fdGdS_tr,fFp_n,fFp_inverse);
		fTemp_matrix_nsd_x_nsd2.MultABC(fFe,fCe_n_inverse,fTemp_matrix_nsd_x_nsd);


		for(int A=0;A<3;A++)
		{
	    	for(int Nbar=0;Nbar<3;Nbar++)
	    	{
				for(int k=0;k<3;k++)
				{
					for(int Mbar=0;Mbar<3;Mbar++)
					{
						for(int Kbar=0;Kbar<3;Kbar++)
						{
							for(int Lbar=0;Lbar<3;Lbar++)
							{
								Temp_II21p_27_34+= fdFnablachidMKLM(Kbar,Lbar,Mbar)*fTemp_matrix_nsd_x_nsd2(k,Kbar)*fChie(k,Nbar)*GXp(Nbar,A,Mbar)*fChip_inverse(A,Lbar);
							}
						}
					}
				}
	    	}
		}

	     row=0;
	     col=0;

		for(int J=0;J<3;J++)
		{
			for(int i=0;i<3;i++)
			{
				row=0;
				for(int l=0;l<3;l++)
				{
					for(int m=0;m<3;m++)
					{
						for(int I=0;I<3;I++)
						{
							// Summation
							for(int Ibar=0;Ibar<3;Ibar++)
							{
								II21p_27(row,col)+= Temp_II21p(I,l,m)*Temp_II21p_27_34*fdFYdS_trace*fFp_inverse(J,Ibar)*fFe(i,Ibar);
							}
							row++;
						}
					}
				}
		     col++;
			}
		}

	     row=0;
	     col=0;

		for(int J=0;J<3;J++)
		{
			for(int i=0;i<3;i++)
			{
				row=0;
				for(int l=0;l<3;l++)
				{
					for(int m=0;m<3;m++)
					{
						for(int I=0;I<3;I++)
						{
							// Summation
							for(int Kbar=0;Kbar<3;Kbar++)
							{
								for(int Lbar=0;Lbar<3;Lbar++)
								{
									II21p_28(row,col)+= Temp_II21p(I,l,m)*Temp_II21p_27_34*fdFYdS(Kbar,Lbar)*(fFp_inverse(J,Kbar)*fFe(i,Lbar) + fFp_inverse(J,Lbar)*fFe(i,Kbar));
								}
							}
							row++;
						}
					}
				}
		     col++;
			}
		}

	     row=0;
	     col=0;

		for(int J=0;J<3;J++)
		{
			for(int i=0;i<3;i++)
			{
				row=0;
				for(int l=0;l<3;l++)
				{
					for(int m=0;m<3;m++)
					{
						for(int I=0;I<3;I++)
						{
							// Summation
							for(int Ibar=0;Ibar<3;Ibar++)
							{
								II21p_29(row,col)+= Temp_II21p(I,l,m)*Temp_II21p_27_34*fdFYdS_trace*fFp_inverse(J,Ibar)*fChie(i,Ibar);
							}
							row++;
						}
					}
				}
		     col++;
			}
		}

	     row=0;
	     col=0;

		for(int J=0;J<3;J++)
		{
			for(int i=0;i<3;i++)
			{
				row=0;
				for(int l=0;l<3;l++)
				{
					for(int m=0;m<3;m++)
					{
						for(int I=0;I<3;I++)
						{
							// Summation
							for(int Lbar=0;Lbar<3;Lbar++)
							{
								for(int Kbar=0;Kbar<3;Kbar++)
								{
									II21p_30(row,col)+= Temp_II21p(I,l,m)*Temp_II21p_27_34*fdFYdS(Kbar,Lbar)*fFp_inverse(J,Kbar)*fChie(i,Lbar);
								}
							}
							row++;
						}
					}
				}
		     col++;
			}
		}

	     row=0;
	     col=0;

		for(int J=0;J<3;J++)
		{
			for(int i=0;i<3;i++)
			{
				row=0;
				for(int l=0;l<3;l++)
				{
					for(int m=0;m<3;m++)
					{
						for(int I=0;I<3;I++)
						{
							// Summation
							for(int Lbar=0;Lbar<3;Lbar++)
							{
								for(int Kbar=0;Kbar<3;Kbar++)
								{
									II21p_31(row,col)+= Temp_II21p(I,l,m)*Temp_II21p_27_34*fdFYdS(Kbar,Lbar)*fFp_inverse(J,Lbar)*fChie(i,Kbar);
								}
							}
							row++;
						}
					}
				}
		     col++;
			}
		}

	     row=0;
	     col=0;

		for(int J=0;J<3;J++)
		{
			for(int i=0;i<3;i++)
			{
				row=0;
				for(int l=0;l<3;l++)
				{
					for(int m=0;m<3;m++)
					{
						for(int I=0;I<3;I++)
						{
							// Summation
							for(int Ibar=0;Ibar<3;Ibar++)
							{
								II21p_32(row,col)+= Temp_II21p(I,l,m)*Temp_II21p_27_34*fdFYdS_trace*fFe(i,Ibar)*fChip_inverse(J,Ibar);
							}
							row++;
						}
					}
				}
		     col++;
			}
		}

	     row=0;
	     col=0;

		for(int J=0;J<3;J++)
		{
			for(int i=0;i<3;i++)
			{
				row=0;
				for(int l=0;l<3;l++)
				{
					for(int m=0;m<3;m++)
					{
						for(int I=0;I<3;I++)
						{
							// Summation
							for(int Lbar=0;Lbar<3;Lbar++)
							{
								for(int Kbar=0;Kbar<3;Kbar++)
								{
									II21p_33(row,col)+= Temp_II21p(I,l,m)*Temp_II21p_27_34*fdFYdS(Kbar,Lbar)*fFe(i,Kbar)*fChip_inverse(J,Lbar);
								}
							}
							row++;
						}
					}
				}
		     col++;
			}
		}

	     row=0;
	     col=0;

		for(int J=0;J<3;J++)
		{
			for(int i=0;i<3;i++)
			{
				row=0;
				for(int l=0;l<3;l++)
				{
					for(int m=0;m<3;m++)
					{
						for(int I=0;I<3;I++)
						{
							// Summation
							for(int Lbar=0;Lbar<3;Lbar++)
							{
								for(int Kbar=0;Kbar<3;Kbar++)
								{
									II21p_34(row,col)+= Temp_II21p(I,l,m)*Temp_II21p_27_34*fdFYdS(Kbar,Lbar)*fFe(i,Lbar)*fChip_inverse(J,Kbar);
								}
							}
							row++;
						}
					}
				}
		     col++;
			}
		}

	     row=0;
	     col=0;

		for(int J=0;J<3;J++)
		{
			for(int i=0;i<3;i++)
			{
				row=0;
				for(int l=0;l<3;l++)
				{
					for(int m=0;m<3;m++)
					{
						for(int I=0;I<3;I++)
						{
							// Summation
							for(int Ibar=0;Ibar<3;Ibar++)
							{
								II21p_27a(row,col)+= Temp_II21p(I,l,m)*Temp_II21p_27_34*fdFYchidSIGMA_S_trace*fFp_inverse(J,Ibar)*fFe(i,Ibar);
							}
							row++;
						}
					}
				}
		     col++;
			}
		}

	     row=0;
	     col=0;

		for(int J=0;J<3;J++)
		{
			for(int i=0;i<3;i++)
			{
				row=0;
				for(int l=0;l<3;l++)
				{
					for(int m=0;m<3;m++)
					{
						for(int I=0;I<3;I++)
						{
							// Summation
							for(int Kbar=0;Kbar<3;Kbar++)
							{
								for(int Lbar=0;Lbar<3;Lbar++)
								{
									II21p_28a(row,col)+= Temp_II21p(I,l,m)*Temp_II21p_27_34*fdFYchidSIGMA(Kbar,Lbar)*(fFp_inverse(J,Kbar)*fFe(i,Lbar) + fFp_inverse(J,Lbar)*fFe(i,Kbar));
								}
							}
							row++;
						}
					}
				}
		     col++;
			}
		}

	     row=0;
	     col=0;

		for(int J=0;J<3;J++)
		{
			for(int i=0;i<3;i++)
			{
				row=0;
				for(int l=0;l<3;l++)
				{
					for(int m=0;m<3;m++)
					{
						for(int I=0;I<3;I++)
						{
							// Summation
							for(int Ibar=0;Ibar<3;Ibar++)
							{
								II21p_29a(row,col)+= Temp_II21p(I,l,m)*Temp_II21p_27_34*fdFYchidSIGMA_S_trace*fFp_inverse(J,Ibar)*fChie(i,Ibar);
							}
							row++;
						}
					}
				}
		     col++;
			}
		}

	     row=0;
	     col=0;

		for(int J=0;J<3;J++)
		{
			for(int i=0;i<3;i++)
			{
				row=0;
				for(int l=0;l<3;l++)
				{
					for(int m=0;m<3;m++)
					{
						for(int I=0;I<3;I++)
						{
							// Summation
							for(int Lbar=0;Lbar<3;Lbar++)
							{
								for(int Kbar=0;Kbar<3;Kbar++)
								{
									II21p_30a(row,col)+= Temp_II21p(I,l,m)*Temp_II21p_27_34*fdFYchidSIGMA(Kbar,Lbar)*fFp_inverse(J,Kbar)*fChie(i,Lbar);
								}
							}
							row++;
						}
					}
				}
		     col++;
			}
		}

	     row=0;
	     col=0;

		for(int J=0;J<3;J++)
		{
			for(int i=0;i<3;i++)
			{
				row=0;
				for(int l=0;l<3;l++)
				{
					for(int m=0;m<3;m++)
					{
						for(int I=0;I<3;I++)
						{
							// Summation
							for(int Lbar=0;Lbar<3;Lbar++)
							{
								for(int Kbar=0;Kbar<3;Kbar++)
								{
									II21p_31a(row,col)+= Temp_II21p(I,l,m)*Temp_II21p_27_34*fdFYchidSIGMA(Kbar,Lbar)*fFp_inverse(J,Lbar)*fChie(i,Kbar);
								}
							}
							row++;
						}
					}
				}
		     col++;
			}
		}

	     row=0;
	     col=0;

		for(int J=0;J<3;J++)
		{
			for(int i=0;i<3;i++)
			{
				row=0;
				for(int l=0;l<3;l++)
				{
					for(int m=0;m<3;m++)
					{
						for(int I=0;I<3;I++)
						{
							// Summation
							for(int Ibar=0;Ibar<3;Ibar++)
							{
								II21p_32a(row,col)+= Temp_II21p(I,l,m)*Temp_II21p_27_34*fdFYchidSIGMA_S_trace*fFe(i,Ibar)*fChip_inverse(J,Ibar);
							}
							row++;
						}
					}
				}
		     col++;
			}
		}

	     row=0;
	     col=0;

		for(int J=0;J<3;J++)
		{
			for(int i=0;i<3;i++)
			{
				row=0;
				for(int l=0;l<3;l++)
				{
					for(int m=0;m<3;m++)
					{
						for(int I=0;I<3;I++)
						{
							// Summation
							for(int Lbar=0;Lbar<3;Lbar++)
							{
								for(int Kbar=0;Kbar<3;Kbar++)
								{
									II21p_33a(row,col)+= Temp_II21p(I,l,m)*Temp_II21p_27_34*fdFYchidSIGMA(Kbar,Lbar)*fFe(i,Kbar)*fChip_inverse(J,Lbar);
								}
							}
							row++;
						}
					}
				}
		     col++;
			}
		}

	     row=0;
	     col=0;

		for(int J=0;J<3;J++)
		{
			for(int i=0;i<3;i++)
			{
				row=0;
				for(int l=0;l<3;l++)
				{
					for(int m=0;m<3;m++)
					{
						for(int I=0;I<3;I++)
						{
							// Summation
							for(int Lbar=0;Lbar<3;Lbar++)
							{
								for(int Kbar=0;Kbar<3;Kbar++)
								{
									II21p_34a(row,col)+= Temp_II21p(I,l,m)*Temp_II21p_27_34*fdFYchidSIGMA(Kbar,Lbar)*fFe(i,Lbar)*fChip_inverse(J,Kbar);
								}
							}
							row++;
						}
					}
				}
		     col++;
			}
		}


	     row=0;
	     col=0;

		for(int J=0;J<3;J++)
		{
			for(int k=0;k<3;k++)
			{
				row=0;
				for(int l=0;l<3;l++)
				{
					for(int m=0;m<3;m++)
					{
						for(int I=0;I<3;I++)
						{
							// Summation
							for(int Kbar=0;Kbar<3;Kbar++)
							{
								for(int Lbar=0;Lbar<3;Lbar++)
								{
									for(int Mbar=0;Mbar<3;Mbar++)
									{
										for(int Nbar=0;Nbar<3;Nbar++)
										{
											for(int A=0;A<3;A++)
											{
												II21p_35(row,col)+= Temp_II21p(I,l,m)*fdFnablachidMKLM(Kbar,Lbar,Mbar)*fFe(k,Kbar)*fChip_inverse(J,Nbar)*GXp(Nbar,A,Mbar)
												*fChip_inverse(A,Lbar);
											}
										}
									}
								}
							}
						 row++;
						}
					}
				}
		     col++;
			}
		}


	    Temp_II21p_36_43 = 0.0;
	    II21p_36=0.0;
	    II21p_37=0.0;
	    II21p_38=0.0;
	    II21p_39=0.0;
	    II21p_40=0.0;
	    II21p_41=0.0;
	    II21p_42=0.0;
	    II21p_43=0.0;
	    II21p_36a=0.0;
	    II21p_37a=0.0;
	    II21p_38a=0.0;
	    II21p_39a=0.0;
	    II21p_40a=0.0;
	    II21p_41a=0.0;
	    II21p_42a=0.0;
	    II21p_43a=0.0;

		fTemp_matrix_nsd_x_nsd = 0.0;
		fTemp_matrix_nsd_x_nsd2 = 0.0;
		fTemp_matrix_nsd_x_nsd.MultABC(fCchie_n,fChip_n,fChip_inverse);
		fTemp_matrix_nsd_x_nsd2.MultATBC(fdGchidSIGMA_tr,PSIe_n_inverseT,fTemp_matrix_nsd_x_nsd);
		fTemp_matrix_nsd_x_nsd.MultABC(fChie,PSIe_n_inverse,fTemp_matrix_nsd_x_nsd2);


		for(int A=0;A<3;A++)
		{
			for(int k=0;k<3;k++)
			{
				for(int Mbar=0;Mbar<3;Mbar++)
				{
					for(int Kbar=0;Kbar<3;Kbar++)
					{
						for(int Lbar=0;Lbar<3;Lbar++)
						{
							for(int Nbar=0;Nbar<3;Nbar++)
							{
								Temp_II21p_36_43+= fdFnablachidMKLM(Kbar,Lbar,Mbar)*fFe(k,Kbar)*fTemp_matrix_nsd_x_nsd(k,Nbar)*GXp(Nbar,A,Mbar)*fChip_inverse(A,Lbar);
							}
						}
					}
				}
			}
		}

	     row=0;
	     col=0;

		for(int J=0;J<3;J++)
		{
			for(int i=0;i<3;i++)
			{
				row=0;
				for(int l=0;l<3;l++)
				{
					for(int m=0;m<3;m++)
					{
						for(int I=0;I<3;I++)
						{
							// Summation
							for(int Ibar=0;Ibar<3;Ibar++)
							{
								II21p_36(row,col)+= Temp_II21p(I,l,m)*Temp_II21p_36_43*fdFYdS_trace*fFp_inverse(J,Ibar)*fFe(i,Ibar);
							}
							row++;
						}
					}
				}
		     col++;
			}
		}

	     row=0;
	     col=0;

		for(int J=0;J<3;J++)
		{
			for(int i=0;i<3;i++)
			{
				row=0;
				for(int l=0;l<3;l++)
				{
					for(int m=0;m<3;m++)
					{
						for(int I=0;I<3;I++)
						{
							// Summation
							for(int Kbar=0;Kbar<3;Kbar++)
							{
								for(int Lbar=0;Lbar<3;Lbar++)
								{
									II21p_37(row,col)+= Temp_II21p(I,l,m)*Temp_II21p_36_43*fdFYdS(Kbar,Lbar)*(fFp_inverse(J,Kbar)*fFe(i,Lbar) + fFp_inverse(J,Lbar)*fFe(i,Kbar));
								}
							}
							row++;
						}
					}
				}
		     col++;
			}
		}

	     row=0;
	     col=0;

		for(int J=0;J<3;J++)
		{
			for(int i=0;i<3;i++)
			{
				row=0;
				for(int l=0;l<3;l++)
				{
					for(int m=0;m<3;m++)
					{
						for(int I=0;I<3;I++)
						{
							// Summation
							for(int Ibar=0;Ibar<3;Ibar++)
							{
								II21p_38(row,col)+= Temp_II21p(I,l,m)*Temp_II21p_36_43*fdFYdS_trace*fFp_inverse(J,Ibar)*fChie(i,Ibar);
							}
							row++;
						}
					}
				}
		     col++;
			}
		}

	     row=0;
	     col=0;

		for(int J=0;J<3;J++)
		{
			for(int i=0;i<3;i++)
			{
				row=0;
				for(int l=0;l<3;l++)
				{
					for(int m=0;m<3;m++)
					{
						for(int I=0;I<3;I++)
						{
							// Summation
							for(int Lbar=0;Lbar<3;Lbar++)
							{
								for(int Kbar=0;Kbar<3;Kbar++)
								{
									II21p_39(row,col)+= Temp_II21p(I,l,m)*Temp_II21p_36_43*fdFYdS(Kbar,Lbar)*fFp_inverse(J,Kbar)*fChie(i,Lbar);
								}
							}
							row++;
						}
					}
				}
		     col++;
			}
		}

	     row=0;
	     col=0;

		for(int J=0;J<3;J++)
		{
			for(int i=0;i<3;i++)
			{
				row=0;
				for(int l=0;l<3;l++)
				{
					for(int m=0;m<3;m++)
					{
						for(int I=0;I<3;I++)
						{
							// Summation
							for(int Lbar=0;Lbar<3;Lbar++)
							{
								for(int Kbar=0;Kbar<3;Kbar++)
								{
									II21p_40(row,col)+= Temp_II21p(I,l,m)*Temp_II21p_36_43*fdFYdS(Kbar,Lbar)*fFp_inverse(J,Lbar)*fChie(i,Kbar);
								}
							}
							row++;
						}
					}
				}
		     col++;
			}
		}

	     row=0;
	     col=0;

		for(int J=0;J<3;J++)
		{
			for(int i=0;i<3;i++)
			{
				row=0;
				for(int l=0;l<3;l++)
				{
					for(int m=0;m<3;m++)
					{
						for(int I=0;I<3;I++)
						{
							// Summation
							for(int Ibar=0;Ibar<3;Ibar++)
							{
								II21p_41(row,col)+= Temp_II21p(I,l,m)*Temp_II21p_36_43*fdFYdS_trace*fFe(i,Ibar)*fChip_inverse(J,Ibar);
							}
							row++;
						}
					}
				}
		     col++;
			}
		}

	     row=0;
	     col=0;

		for(int J=0;J<3;J++)
		{
			for(int i=0;i<3;i++)
			{
				row=0;
				for(int l=0;l<3;l++)
				{
					for(int m=0;m<3;m++)
					{
						for(int I=0;I<3;I++)
						{
							// Summation
							for(int Lbar=0;Lbar<3;Lbar++)
							{
								for(int Kbar=0;Kbar<3;Kbar++)
								{
									II21p_42(row,col)+= Temp_II21p(I,l,m)*Temp_II21p_36_43*fdFYdS(Kbar,Lbar)*fFe(i,Kbar)*fChip_inverse(J,Lbar);
								}
							}
							row++;
						}
					}
				}
		     col++;
			}
		}

	     row=0;
	     col=0;

		for(int J=0;J<3;J++)
		{
			for(int i=0;i<3;i++)
			{
				row=0;
				for(int l=0;l<3;l++)
				{
					for(int m=0;m<3;m++)
					{
						for(int I=0;I<3;I++)
						{
							// Summation
							for(int Lbar=0;Lbar<3;Lbar++)
							{
								for(int Kbar=0;Kbar<3;Kbar++)
								{
									II21p_43(row,col)+= Temp_II21p(I,l,m)*Temp_II21p_36_43*fdFYdS(Kbar,Lbar)*fFe(i,Lbar)*fChip_inverse(J,Kbar);
								}
							}
							row++;
						}
					}
				}
		     col++;
			}
		}


	     row=0;
	     col=0;

		for(int J=0;J<3;J++)
		{
			for(int i=0;i<3;i++)
			{
				row=0;
				for(int l=0;l<3;l++)
				{
					for(int m=0;m<3;m++)
					{
						for(int I=0;I<3;I++)
						{
							// Summation
							for(int Ibar=0;Ibar<3;Ibar++)
							{
								II21p_36a(row,col)+= Temp_II21p(I,l,m)*Temp_II21p_36_43*fdFYchidSIGMA_S_trace*fFp_inverse(J,Ibar)*fFe(i,Ibar);
							}
							row++;
						}
					}
				}
		     col++;
			}
		}

	     row=0;
	     col=0;

		for(int J=0;J<3;J++)
		{
			for(int i=0;i<3;i++)
			{
				row=0;
				for(int l=0;l<3;l++)
				{
					for(int m=0;m<3;m++)
					{
						for(int I=0;I<3;I++)
						{
							// Summation
							for(int Kbar=0;Kbar<3;Kbar++)
							{
								for(int Lbar=0;Lbar<3;Lbar++)
								{
									II21p_37a(row,col)+= Temp_II21p(I,l,m)*Temp_II21p_36_43*fdFYchidSIGMA(Kbar,Lbar)*(fFp_inverse(J,Kbar)*fFe(i,Lbar) + fFp_inverse(J,Lbar)*fFe(i,Kbar));
								}
							}
							row++;
						}
					}
				}
		     col++;
			}
		}

	     row=0;
	     col=0;

		for(int J=0;J<3;J++)
		{
			for(int i=0;i<3;i++)
			{
				row=0;
				for(int l=0;l<3;l++)
				{
					for(int m=0;m<3;m++)
					{
						for(int I=0;I<3;I++)
						{
							// Summation
							for(int Ibar=0;Ibar<3;Ibar++)
							{
								II21p_38a(row,col)+= Temp_II21p(I,l,m)*Temp_II21p_36_43*fdFYchidSIGMA_S_trace*fFp_inverse(J,Ibar)*fChie(i,Ibar);
							}
							row++;
						}
					}
				}
		     col++;
			}
		}

	     row=0;
	     col=0;

		for(int J=0;J<3;J++)
		{
			for(int i=0;i<3;i++)
			{
				row=0;
				for(int l=0;l<3;l++)
				{
					for(int m=0;m<3;m++)
					{
						for(int I=0;I<3;I++)
						{
							// Summation
							for(int Lbar=0;Lbar<3;Lbar++)
							{
								for(int Kbar=0;Kbar<3;Kbar++)
								{
									II21p_39a(row,col)+= Temp_II21p(I,l,m)*Temp_II21p_36_43*fdFYchidSIGMA(Kbar,Lbar)*fFp_inverse(J,Kbar)*fChie(i,Lbar);
								}
							}
							row++;
						}
					}
				}
		     col++;
			}
		}

	     row=0;
	     col=0;

		for(int J=0;J<3;J++)
		{
			for(int i=0;i<3;i++)
			{
				row=0;
				for(int l=0;l<3;l++)
				{
					for(int m=0;m<3;m++)
					{
						for(int I=0;I<3;I++)
						{
							// Summation
							for(int Lbar=0;Lbar<3;Lbar++)
							{
								for(int Kbar=0;Kbar<3;Kbar++)
								{
									II21p_40a(row,col)+= Temp_II21p(I,l,m)*Temp_II21p_36_43*fdFYchidSIGMA(Kbar,Lbar)*fFp_inverse(J,Lbar)*fChie(i,Kbar);
								}
							}
							row++;
						}
					}
				}
		     col++;
			}
		}

	     row=0;
	     col=0;

		for(int J=0;J<3;J++)
		{
			for(int i=0;i<3;i++)
			{
				row=0;
				for(int l=0;l<3;l++)
				{
					for(int m=0;m<3;m++)
					{
						for(int I=0;I<3;I++)
						{
							// Summation
							for(int Ibar=0;Ibar<3;Ibar++)
							{
								II21p_41a(row,col)+= Temp_II21p(I,l,m)*Temp_II21p_36_43*fdFYchidSIGMA_S_trace*fFe(i,Ibar)*fChip_inverse(J,Ibar);
							}
							row++;
						}
					}
				}
		     col++;
			}
		}

	     row=0;
	     col=0;

		for(int J=0;J<3;J++)
		{
			for(int i=0;i<3;i++)
			{
				row=0;
				for(int l=0;l<3;l++)
				{
					for(int m=0;m<3;m++)
					{
						for(int I=0;I<3;I++)
						{
							// Summation
							for(int Lbar=0;Lbar<3;Lbar++)
							{
								for(int Kbar=0;Kbar<3;Kbar++)
								{
									II21p_42a(row,col)+= Temp_II21p(I,l,m)*Temp_II21p_36_43*fdFYchidSIGMA(Kbar,Lbar)*fFe(i,Kbar)*fChip_inverse(J,Lbar);
								}
							}
							row++;
						}
					}
				}
		     col++;
			}
		}

	     row=0;
	     col=0;

		for(int J=0;J<3;J++)
		{
			for(int i=0;i<3;i++)
			{
				row=0;
				for(int l=0;l<3;l++)
				{
					for(int m=0;m<3;m++)
					{
						for(int I=0;I<3;I++)
						{
							// Summation
							for(int Lbar=0;Lbar<3;Lbar++)
							{
								for(int Kbar=0;Kbar<3;Kbar++)
								{
									II21p_43a(row,col)+= Temp_II21p(I,l,m)*Temp_II21p_36_43*fdFYchidSIGMA(Kbar,Lbar)*fFe(i,Lbar)*fChip_inverse(J,Kbar);
								}
							}
							row++;
						}
					}
				}
		     col++;
			}
		}


	    Temp_II21p_44_51 = 0.0;
	    II21p_44=0.0;
	    II21p_45=0.0;
	    II21p_46=0.0;
	    II21p_47=0.0;
	    II21p_48=0.0;
	    II21p_49=0.0;
	    II21p_50=0.0;
	    II21p_51=0.0;
	    II21p_44a=0.0;
	    II21p_45a=0.0;
	    II21p_46a=0.0;
	    II21p_47a=0.0;
	    II21p_48a=0.0;
	    II21p_49a=0.0;
	    II21p_50a=0.0;
	    II21p_51a=0.0;

		fTemp_matrix_nsd_x_nsd = 0.0;
		fTemp_matrix_nsd_x_nsd2 = 0.0;
		fTemp_matrix_nsd_x_nsd.MultABC(fCchie_n,fChip_n,fChip_inverse);
		fTemp_matrix_nsd_x_nsd2.MultATBC(fdGchidSIGMA_tr,PSIe_n_inverseT,fTemp_matrix_nsd_x_nsd);
		fTemp_matrix_nsd_x_nsd.MultABC(fChip_inverse,PSIe_n_inverse,fTemp_matrix_nsd_x_nsd2);


		for(int A=0;A<3;A++)
		{
			for(int k=0;k<3;k++)
			{
				for(int Mbar=0;Mbar<3;Mbar++)
				{
					for(int Kbar=0;Kbar<3;Kbar++)
					{
						for(int Lbar=0;Lbar<3;Lbar++)
						{
							for(int Nbar=0;Nbar<3;Nbar++)
							{
								Temp_II21p_44_51+= fdFnablachidMKLM(Kbar,Lbar,Mbar)*fFe(k,Kbar)*fChie(k,Nbar)*GXp(Nbar,A,Mbar)*fTemp_matrix_nsd_x_nsd(A,Lbar);
							}
						}
					}
				}
			}
		}

	     row=0;
	     col=0;

		for(int J=0;J<3;J++)
		{
			for(int i=0;i<3;i++)
			{
				row=0;
				for(int l=0;l<3;l++)
				{
					for(int m=0;m<3;m++)
					{
						for(int I=0;I<3;I++)
						{
							// Summation
							for(int Ibar=0;Ibar<3;Ibar++)
							{
								II21p_44(row,col)+= Temp_II21p(I,l,m)*Temp_II21p_44_51*fdFYdS_trace*fFp_inverse(J,Ibar)*fFe(i,Ibar);
							}
							row++;
						}
					}
				}
		     col++;
			}
		}

	     row=0;
	     col=0;

		for(int J=0;J<3;J++)
		{
			for(int i=0;i<3;i++)
			{
				row=0;
				for(int l=0;l<3;l++)
				{
					for(int m=0;m<3;m++)
					{
						for(int I=0;I<3;I++)
						{
							// Summation
							for(int Kbar=0;Kbar<3;Kbar++)
							{
								for(int Lbar=0;Lbar<3;Lbar++)
								{
									II21p_45(row,col)+= Temp_II21p(I,l,m)*Temp_II21p_44_51*fdFYdS(Kbar,Lbar)*(fFp_inverse(J,Kbar)*fFe(i,Lbar) + fFp_inverse(J,Lbar)*fFe(i,Kbar));
								}
							}
							row++;
						}
					}
				}
		     col++;
			}
		}

	     row=0;
	     col=0;

		for(int J=0;J<3;J++)
		{
			for(int i=0;i<3;i++)
			{
				row=0;
				for(int l=0;l<3;l++)
				{
					for(int m=0;m<3;m++)
					{
						for(int I=0;I<3;I++)
						{
							// Summation
							for(int Ibar=0;Ibar<3;Ibar++)
							{
								II21p_46(row,col)+= Temp_II21p(I,l,m)*Temp_II21p_44_51*fdFYdS_trace*fFp_inverse(J,Ibar)*fChie(i,Ibar);
							}
							row++;
						}
					}
				}
		     col++;
			}
		}

	     row=0;
	     col=0;

		for(int J=0;J<3;J++)
		{
			for(int i=0;i<3;i++)
			{
				row=0;
				for(int l=0;l<3;l++)
				{
					for(int m=0;m<3;m++)
					{
						for(int I=0;I<3;I++)
						{
							// Summation
							for(int Lbar=0;Lbar<3;Lbar++)
							{
								for(int Kbar=0;Kbar<3;Kbar++)
								{
									II21p_47(row,col)+= Temp_II21p(I,l,m)*Temp_II21p_44_51*fdFYdS(Kbar,Lbar)*fFp_inverse(J,Kbar)*fChie(i,Lbar);
								}
							}
							row++;
						}
					}
				}
		     col++;
			}
		}

	     row=0;
	     col=0;

		for(int J=0;J<3;J++)
		{
			for(int i=0;i<3;i++)
			{
				row=0;
				for(int l=0;l<3;l++)
				{
					for(int m=0;m<3;m++)
					{
						for(int I=0;I<3;I++)
						{
							// Summation
							for(int Lbar=0;Lbar<3;Lbar++)
							{
								for(int Kbar=0;Kbar<3;Kbar++)
								{
									II21p_48(row,col)+= Temp_II21p(I,l,m)*Temp_II21p_44_51*fdFYdS(Kbar,Lbar)*fFp_inverse(J,Lbar)*fChie(i,Kbar);
								}
							}
							row++;
						}
					}
				}
		     col++;
			}
		}

	     row=0;
	     col=0;

		for(int J=0;J<3;J++)
		{
			for(int i=0;i<3;i++)
			{
				row=0;
				for(int l=0;l<3;l++)
				{
					for(int m=0;m<3;m++)
					{
						for(int I=0;I<3;I++)
						{
							// Summation
							for(int Ibar=0;Ibar<3;Ibar++)
							{
								II21p_49(row,col)+= Temp_II21p(I,l,m)*Temp_II21p_44_51*fdFYdS_trace*fFe(i,Ibar)*fChip_inverse(J,Ibar);
							}
							row++;
						}
					}
				}
		     col++;
			}
		}

	     row=0;
	     col=0;

		for(int J=0;J<3;J++)
		{
			for(int i=0;i<3;i++)
			{
				row=0;
				for(int l=0;l<3;l++)
				{
					for(int m=0;m<3;m++)
					{
						for(int I=0;I<3;I++)
						{
							// Summation
							for(int Lbar=0;Lbar<3;Lbar++)
							{
								for(int Kbar=0;Kbar<3;Kbar++)
								{
									II21p_50(row,col)+= Temp_II21p(I,l,m)*Temp_II21p_44_51*fdFYdS(Kbar,Lbar)*fFe(i,Kbar)*fChip_inverse(J,Lbar);
								}
							}
							row++;
						}
					}
				}
		     col++;
			}
		}

	     row=0;
	     col=0;

		for(int J=0;J<3;J++)
		{
			for(int i=0;i<3;i++)
			{
				row=0;
				for(int l=0;l<3;l++)
				{
					for(int m=0;m<3;m++)
					{
						for(int I=0;I<3;I++)
						{
							// Summation
							for(int Lbar=0;Lbar<3;Lbar++)
							{
								for(int Kbar=0;Kbar<3;Kbar++)
								{
									II21p_51(row,col)+= Temp_II21p(I,l,m)*Temp_II21p_44_51*fdFYdS(Kbar,Lbar)*fFe(i,Lbar)*fChip_inverse(J,Kbar);
								}
							}
							row++;
						}
					}
				}
		     col++;
			}
		}


	     row=0;
	     col=0;

		for(int J=0;J<3;J++)
		{
			for(int i=0;i<3;i++)
			{
				row=0;
				for(int l=0;l<3;l++)
				{
					for(int m=0;m<3;m++)
					{
						for(int I=0;I<3;I++)
						{
							// Summation
							for(int Ibar=0;Ibar<3;Ibar++)
							{
								II21p_44a(row,col)+= Temp_II21p(I,l,m)*Temp_II21p_44_51*fdFYchidSIGMA_S_trace*fFp_inverse(J,Ibar)*fFe(i,Ibar);
							}
							row++;
						}
					}
				}
		     col++;
			}
		}

	     row=0;
	     col=0;

		for(int J=0;J<3;J++)
		{
			for(int i=0;i<3;i++)
			{
				row=0;
				for(int l=0;l<3;l++)
				{
					for(int m=0;m<3;m++)
					{
						for(int I=0;I<3;I++)
						{
							// Summation
							for(int Kbar=0;Kbar<3;Kbar++)
							{
								for(int Lbar=0;Lbar<3;Lbar++)
								{
									II21p_45a(row,col)+= Temp_II21p(I,l,m)*Temp_II21p_44_51*fdFYchidSIGMA(Kbar,Lbar)*(fFp_inverse(J,Kbar)*fFe(i,Lbar) + fFp_inverse(J,Lbar)*fFe(i,Kbar));
								}
							}
							row++;
						}
					}
				}
		     col++;
			}
		}

	     row=0;
	     col=0;

		for(int J=0;J<3;J++)
		{
			for(int i=0;i<3;i++)
			{
				row=0;
				for(int l=0;l<3;l++)
				{
					for(int m=0;m<3;m++)
					{
						for(int I=0;I<3;I++)
						{
							// Summation
							for(int Ibar=0;Ibar<3;Ibar++)
							{
								II21p_46a(row,col)+= Temp_II21p(I,l,m)*Temp_II21p_44_51*fdFYchidSIGMA_S_trace*fFp_inverse(J,Ibar)*fChie(i,Ibar);
							}
							row++;
						}
					}
				}
		     col++;
			}
		}

	     row=0;
	     col=0;

		for(int J=0;J<3;J++)
		{
			for(int i=0;i<3;i++)
			{
				row=0;
				for(int l=0;l<3;l++)
				{
					for(int m=0;m<3;m++)
					{
						for(int I=0;I<3;I++)
						{
							// Summation
							for(int Lbar=0;Lbar<3;Lbar++)
							{
								for(int Kbar=0;Kbar<3;Kbar++)
								{
									II21p_47a(row,col)+= Temp_II21p(I,l,m)*Temp_II21p_44_51*fdFYchidSIGMA(Kbar,Lbar)*fFp_inverse(J,Kbar)*fChie(i,Lbar);
								}
							}
							row++;
						}
					}
				}
		     col++;
			}
		}

	     row=0;
	     col=0;

		for(int J=0;J<3;J++)
		{
			for(int i=0;i<3;i++)
			{
				row=0;
				for(int l=0;l<3;l++)
				{
					for(int m=0;m<3;m++)
					{
						for(int I=0;I<3;I++)
						{
							// Summation
							for(int Lbar=0;Lbar<3;Lbar++)
							{
								for(int Kbar=0;Kbar<3;Kbar++)
								{
									II21p_48a(row,col)+= Temp_II21p(I,l,m)*Temp_II21p_44_51*fdFYchidSIGMA(Kbar,Lbar)*fFp_inverse(J,Lbar)*fChie(i,Kbar);
								}
							}
							row++;
						}
					}
				}
		     col++;
			}
		}

	     row=0;
	     col=0;

		for(int J=0;J<3;J++)
		{
			for(int i=0;i<3;i++)
			{
				row=0;
				for(int l=0;l<3;l++)
				{
					for(int m=0;m<3;m++)
					{
						for(int I=0;I<3;I++)
						{
							// Summation
							for(int Ibar=0;Ibar<3;Ibar++)
							{
								II21p_49a(row,col)+= Temp_II21p(I,l,m)*Temp_II21p_44_51*fdFYchidSIGMA_S_trace*fFe(i,Ibar)*fChip_inverse(J,Ibar);
							}
							row++;
						}
					}
				}
		     col++;
			}
		}

	     row=0;
	     col=0;

		for(int J=0;J<3;J++)
		{
			for(int i=0;i<3;i++)
			{
				row=0;
				for(int l=0;l<3;l++)
				{
					for(int m=0;m<3;m++)
					{
						for(int I=0;I<3;I++)
						{
							// Summation
							for(int Lbar=0;Lbar<3;Lbar++)
							{
								for(int Kbar=0;Kbar<3;Kbar++)
								{
									II21p_50a(row,col)+= Temp_II21p(I,l,m)*Temp_II21p_44_51*fdFYchidSIGMA(Kbar,Lbar)*fFe(i,Kbar)*fChip_inverse(J,Lbar);
								}
							}
							row++;
						}
					}
				}
		     col++;
			}
		}

	     row=0;
	     col=0;

		for(int J=0;J<3;J++)
		{
			for(int i=0;i<3;i++)
			{
				row=0;
				for(int l=0;l<3;l++)
				{
					for(int m=0;m<3;m++)
					{
						for(int I=0;I<3;I++)
						{
							// Summation
							for(int Lbar=0;Lbar<3;Lbar++)
							{
								for(int Kbar=0;Kbar<3;Kbar++)
								{
									II21p_51a(row,col)+= Temp_II21p(I,l,m)*Temp_II21p_44_51*fdFYchidSIGMA(Kbar,Lbar)*fFe(i,Lbar)*fChip_inverse(J,Kbar);
								}
							}
							row++;
						}
					}
				}
		     col++;
			}
		}


		Temp_II21p_52_59 = 0.0;
		II21p_52=0.0;
		II21p_53=0.0;
		II21p_54=0.0;
		II21p_55=0.0;
		II21p_56=0.0;
		II21p_57=0.0;
		II21p_58=0.0;
		II21p_59=0.0;
		II21p_52a=0.0;
		II21p_53a=0.0;
		II21p_54a=0.0;
		II21p_55a=0.0;
		II21p_56a=0.0;
		II21p_57a=0.0;
		II21p_58a=0.0;
		II21p_59a=0.0;

		fTemp_matrix_nsd_x_nsd = 0.0;
		fTemp_matrix_nsd_x_nsd2 = 0.0;
		fTemp_matrix_nsd_x_nsd.MultABC(fCchie_n,fChip_n,fChip_inverse);
		fTemp_matrix_nsd_x_nsd2.MultATBC(fdGchidSIGMA_tr,PSIe_n_inverseT,fTemp_matrix_nsd_x_nsd);
		fTemp_matrix_nsd_x_nsd.MultABC(fChip_inverse,PSIe_n_inverse,fTemp_matrix_nsd_x_nsd2);
		fTemp_matrix_nsd_x_nsd2.MultABC(fChie,fChip_n,fTemp_matrix_nsd_x_nsd);
		fTemp_matrix_nsd_x_nsd.MultATB(fFe,fTemp_matrix_nsd_x_nsd2);


		for(int A=0;A<3;A++)
		{
			for(int pbar=0;pbar<3;pbar++)
			{
				for(int Mbar=0;Mbar<3;Mbar++)
				{
					for(int Kbar=0;Kbar<3;Kbar++)
					{
						for(int Lbar=0;Lbar<3;Lbar++)
						{
							Temp_II21p_52_59+= fdFnablachidMKLM(Kbar,Lbar,Mbar)*fTemp_matrix_nsd_x_nsd(Kbar,pbar)*GXp_n(pbar,A,Mbar)*fChip_inverse(A,Lbar);
						}
					}
				}
			}
		}


	     row=0;
	     col=0;

		for(int J=0;J<3;J++)
		{
			for(int i=0;i<3;i++)
			{
				row=0;
				for(int l=0;l<3;l++)
				{
					for(int m=0;m<3;m++)
					{
						for(int I=0;I<3;I++)
						{
							// Summation
							for(int Ibar=0;Ibar<3;Ibar++)
							{
								II21p_52(row,col)+= Temp_II21p(I,l,m)*Temp_II21p_52_59*fdFYdS_trace*fFp_inverse(J,Ibar)*fFe(i,Ibar);
							}
							row++;
						}
					}
				}
			 col++;
			}
		}

	     row=0;
	     col=0;

		for(int J=0;J<3;J++)
		{
			for(int i=0;i<3;i++)
			{
				row=0;
				for(int l=0;l<3;l++)
				{
					for(int m=0;m<3;m++)
					{
						for(int I=0;I<3;I++)
						{
							// Summation
							for(int Kbar=0;Kbar<3;Kbar++)
							{
								for(int Lbar=0;Lbar<3;Lbar++)
								{
									II21p_53(row,col)+= Temp_II21p(I,l,m)*Temp_II21p_52_59*fdFYdS(Kbar,Lbar)*(fFp_inverse(J,Kbar)*fFe(i,Lbar) + fFp_inverse(J,Lbar)*fFe(i,Kbar));
								}
							}
							row++;
						}
					}
				}
			 col++;
			}
		}

	     row=0;
	     col=0;

		for(int J=0;J<3;J++)
		{
			for(int i=0;i<3;i++)
			{
				row=0;
				for(int l=0;l<3;l++)
				{
					for(int m=0;m<3;m++)
					{
						for(int I=0;I<3;I++)
						{
							// Summation
							for(int Ibar=0;Ibar<3;Ibar++)
							{
								II21p_54(row,col)+= Temp_II21p(I,l,m)*Temp_II21p_52_59*fdFYdS_trace*fFp_inverse(J,Ibar)*fChie(i,Ibar);
							}
							row++;
						}
					}
				}
			 col++;
			}
		}

	     row=0;
	     col=0;

		for(int J=0;J<3;J++)
		{
			for(int i=0;i<3;i++)
			{
				row=0;
				for(int l=0;l<3;l++)
				{
					for(int m=0;m<3;m++)
					{
						for(int I=0;I<3;I++)
						{
							// Summation
							for(int Lbar=0;Lbar<3;Lbar++)
							{
								for(int Kbar=0;Kbar<3;Kbar++)
								{
									II21p_55(row,col)+= Temp_II21p(I,l,m)*Temp_II21p_52_59*fdFYdS(Kbar,Lbar)*fFp_inverse(J,Kbar)*fChie(i,Lbar);
								}
							}
							row++;
						}
					}
				}
			 col++;
			}
		}

	     row=0;
	     col=0;

		for(int J=0;J<3;J++)
		{
			for(int i=0;i<3;i++)
			{
				row=0;
				for(int l=0;l<3;l++)
				{
					for(int m=0;m<3;m++)
					{
						for(int I=0;I<3;I++)
						{
							// Summation
							for(int Lbar=0;Lbar<3;Lbar++)
							{
								for(int Kbar=0;Kbar<3;Kbar++)
								{
									II21p_56(row,col)+= Temp_II21p(I,l,m)*Temp_II21p_52_59*fdFYdS(Kbar,Lbar)*fFp_inverse(J,Lbar)*fChie(i,Kbar);
								}
							}
							row++;
						}
					}
				}
			 col++;
			}
		}

	     row=0;
	     col=0;

		for(int J=0;J<3;J++)
		{
			for(int i=0;i<3;i++)
			{
				row=0;
				for(int l=0;l<3;l++)
				{
					for(int m=0;m<3;m++)
					{
						for(int I=0;I<3;I++)
						{
							// Summation
							for(int Ibar=0;Ibar<3;Ibar++)
							{
								II21p_57(row,col)+= Temp_II21p(I,l,m)*Temp_II21p_52_59*fdFYdS_trace*fFe(i,Ibar)*fChip_inverse(J,Ibar);
							}
							row++;
						}
					}
				}
			 col++;
			}
		}

	     row=0;
	     col=0;

		for(int J=0;J<3;J++)
		{
			for(int i=0;i<3;i++)
			{
				row=0;
				for(int l=0;l<3;l++)
				{
					for(int m=0;m<3;m++)
					{
						for(int I=0;I<3;I++)
						{
							// Summation
							for(int Lbar=0;Lbar<3;Lbar++)
							{
								for(int Kbar=0;Kbar<3;Kbar++)
								{
									II21p_58(row,col)+= Temp_II21p(I,l,m)*Temp_II21p_52_59*fdFYdS(Kbar,Lbar)*fFe(i,Kbar)*fChip_inverse(J,Lbar);
								}
							}
							row++;
						}
					}
				}
			 col++;
			}
		}

	     row=0;
	     col=0;

		for(int J=0;J<3;J++)
		{
			for(int i=0;i<3;i++)
			{
				row=0;
				for(int l=0;l<3;l++)
				{
					for(int m=0;m<3;m++)
					{
						for(int I=0;I<3;I++)
						{
							// Summation
							for(int Lbar=0;Lbar<3;Lbar++)
							{
								for(int Kbar=0;Kbar<3;Kbar++)
								{
									II21p_59(row,col)+= Temp_II21p(I,l,m)*Temp_II21p_52_59*fdFYdS(Kbar,Lbar)*fFe(i,Lbar)*fChip_inverse(J,Kbar);
								}
							}
							row++;
						}
					}
				}
			 col++;
			}
		}

	     row=0;
	     col=0;

		for(int J=0;J<3;J++)
		{
			for(int i=0;i<3;i++)
			{
				row=0;
				for(int l=0;l<3;l++)
				{
					for(int m=0;m<3;m++)
					{
						for(int I=0;I<3;I++)
						{
							// Summation
							for(int Ibar=0;Ibar<3;Ibar++)
							{
								II21p_52a(row,col)+= Temp_II21p(I,l,m)*Temp_II21p_52_59*fdFYchidSIGMA_S_trace*fFp_inverse(J,Ibar)*fFe(i,Ibar);
							}
							row++;
						}
					}
				}
			 col++;
			}
		}

	     row=0;
	     col=0;

		for(int J=0;J<3;J++)
		{
			for(int i=0;i<3;i++)
			{
				row=0;
				for(int l=0;l<3;l++)
				{
					for(int m=0;m<3;m++)
					{
						for(int I=0;I<3;I++)
						{
							// Summation
							for(int Kbar=0;Kbar<3;Kbar++)
							{
								for(int Lbar=0;Lbar<3;Lbar++)
								{
									II21p_53a(row,col)+= Temp_II21p(I,l,m)*Temp_II21p_52_59*fdFYchidSIGMA(Kbar,Lbar)*(fFp_inverse(J,Kbar)*fFe(i,Lbar) + fFp_inverse(J,Lbar)*fFe(i,Kbar));
								}
							}
							row++;
						}
					}
				}
			 col++;
			}
		}

	     row=0;
	     col=0;

		for(int J=0;J<3;J++)
		{
			for(int i=0;i<3;i++)
			{
				row=0;
				for(int l=0;l<3;l++)
				{
					for(int m=0;m<3;m++)
					{
						for(int I=0;I<3;I++)
						{
							// Summation
							for(int Ibar=0;Ibar<3;Ibar++)
							{
								II21p_54a(row,col)+= Temp_II21p(I,l,m)*Temp_II21p_52_59*fdFYchidSIGMA_S_trace*fFp_inverse(J,Ibar)*fChie(i,Ibar);
							}
							row++;
						}
					}
				}
			 col++;
			}
		}

	     row=0;
	     col=0;

		for(int J=0;J<3;J++)
		{
			for(int i=0;i<3;i++)
			{
				row=0;
				for(int l=0;l<3;l++)
				{
					for(int m=0;m<3;m++)
					{
						for(int I=0;I<3;I++)
						{
							// Summation
							for(int Lbar=0;Lbar<3;Lbar++)
							{
								for(int Kbar=0;Kbar<3;Kbar++)
								{
									II21p_55a(row,col)+= Temp_II21p(I,l,m)*Temp_II21p_52_59*fdFYchidSIGMA(Kbar,Lbar)*fFp_inverse(J,Kbar)*fChie(i,Lbar);
								}
							}
							row++;
						}
					}
				}
			 col++;
			}
		}

	     row=0;
	     col=0;

		for(int J=0;J<3;J++)
		{
			for(int i=0;i<3;i++)
			{
				row=0;
				for(int l=0;l<3;l++)
				{
					for(int m=0;m<3;m++)
					{
						for(int I=0;I<3;I++)
						{
							// Summation
							for(int Lbar=0;Lbar<3;Lbar++)
							{
								for(int Kbar=0;Kbar<3;Kbar++)
								{
									II21p_56a(row,col)+= Temp_II21p(I,l,m)*Temp_II21p_52_59*fdFYchidSIGMA(Kbar,Lbar)*fFp_inverse(J,Lbar)*fChie(i,Kbar);
								}
							}
							row++;
						}
					}
				}
			 col++;
			}
		}

	     row=0;
	     col=0;

		for(int J=0;J<3;J++)
		{
			for(int i=0;i<3;i++)
			{
				row=0;
				for(int l=0;l<3;l++)
				{
					for(int m=0;m<3;m++)
					{
						for(int I=0;I<3;I++)
						{
							// Summation
							for(int Ibar=0;Ibar<3;Ibar++)
							{
								II21p_57a(row,col)+= Temp_II21p(I,l,m)*Temp_II21p_52_59*fdFYchidSIGMA_S_trace*fFe(i,Ibar)*fChip_inverse(J,Ibar);
							}
							row++;
						}
					}
				}
			 col++;
			}
		}

	     row=0;
	     col=0;

		for(int J=0;J<3;J++)
		{
			for(int i=0;i<3;i++)
			{
				row=0;
				for(int l=0;l<3;l++)
				{
					for(int m=0;m<3;m++)
					{
						for(int I=0;I<3;I++)
						{
							// Summation
							for(int Lbar=0;Lbar<3;Lbar++)
							{
								for(int Kbar=0;Kbar<3;Kbar++)
								{
									II21p_58a(row,col)+= Temp_II21p(I,l,m)*Temp_II21p_52_59*fdFYchidSIGMA(Kbar,Lbar)*fFe(i,Kbar)*fChip_inverse(J,Lbar);
								}
							}
							row++;
						}
					}
				}
			 col++;
			}
		}

	     row=0;
	     col=0;

		for(int J=0;J<3;J++)
		{
			for(int i=0;i<3;i++)
			{
				row=0;
				for(int l=0;l<3;l++)
				{
					for(int m=0;m<3;m++)
					{
						for(int I=0;I<3;I++)
						{
							// Summation
							for(int Lbar=0;Lbar<3;Lbar++)
							{
								for(int Kbar=0;Kbar<3;Kbar++)
								{
									II21p_59a(row,col)+= Temp_II21p(I,l,m)*Temp_II21p_52_59*fdFYchidSIGMA(Kbar,Lbar)*fFe(i,Lbar)*fChip_inverse(J,Kbar);
								}
							}
							row++;
						}
					}
				}
			 col++;
			}
		}



	    Temp_II21p_60_67 = 0.0;
	    II21p_60=0.0;
	    II21p_61=0.0;
	    II21p_62=0.0;
	    II21p_63=0.0;
	    II21p_64=0.0;
	    II21p_65=0.0;
	    II21p_66=0.0;
	    II21p_67=0.0;
	    II21p_60a=0.0;
	    II21p_61a=0.0;
	    II21p_62a=0.0;
	    II21p_63a=0.0;
	    II21p_64a=0.0;
	    II21p_65a=0.0;
	    II21p_66a=0.0;
	    II21p_67a=0.0;

		fTemp_matrix_nsd_x_nsd = 0.0;
		fTemp_matrix_nsd_x_nsd2 = 0.0;
		fTemp_matrix_nsd_x_nsd.MultATBC(fdGdS_tr,fFp_n,fFp_inverse);
		fTemp_matrix_nsd_x_nsd2.MultABC(fFp_inverse,fCe_n_inverse,fTemp_matrix_nsd_x_nsd);
		fTemp_matrix_nsd_x_nsd.MultAB(fFp_n,fTemp_matrix_nsd_x_nsd2);
		fTemp_matrix_nsd_x_nsd3.MultATB(fFe,fChie);

		for(int A=0;A<3;A++)
		{
	    	for(int Nbar=0;Nbar<3;Nbar++)
	    	{
				for(int pbar=0;pbar<3;pbar++)
				{
					for(int Mbar=0;Mbar<3;Mbar++)
					{
						for(int Kbar=0;Kbar<3;Kbar++)
						{
							for(int Lbar=0;Lbar<3;Lbar++)
							{
								Temp_II21p_60_67+= fdFnablachidMKLM(Kbar,Lbar,Mbar)*fTemp_matrix_nsd_x_nsd3(Kbar,Nbar)*GXp_n(Nbar,A,pbar)*fTemp_matrix_nsd_x_nsd(pbar,Mbar)*fChip_inverse(A,Lbar);
							}
						}
					}
				}
	    	}
		}

	     row=0;
	     col=0;

		for(int J=0;J<3;J++)
		{
			for(int i=0;i<3;i++)
			{
				row=0;
				for(int l=0;l<3;l++)
				{
					for(int m=0;m<3;m++)
					{
						for(int I=0;I<3;I++)
						{
							// Summation
							for(int Ibar=0;Ibar<3;Ibar++)
							{
								II21p_60(row,col)+= Temp_II21p(I,l,m)*Temp_II21p_60_67*fdFYdS_trace*fFp_inverse(J,Ibar)*fFe(i,Ibar);
							}
							row++;
						}
					}
				}
		     col++;
			}
		}

	     row=0;
	     col=0;

		for(int J=0;J<3;J++)
		{
			for(int i=0;i<3;i++)
			{
				row=0;
				for(int l=0;l<3;l++)
				{
					for(int m=0;m<3;m++)
					{
						for(int I=0;I<3;I++)
						{
							// Summation
							for(int Kbar=0;Kbar<3;Kbar++)
							{
								for(int Lbar=0;Lbar<3;Lbar++)
								{
									II21p_61(row,col)+= Temp_II21p(I,l,m)*Temp_II21p_60_67*fdFYdS(Kbar,Lbar)*(fFp_inverse(J,Kbar)*fFe(i,Lbar) + fFp_inverse(J,Lbar)*fFe(i,Kbar));
								}
							}
							row++;
						}
					}
				}
		     col++;
			}
		}

	     row=0;
	     col=0;

		for(int J=0;J<3;J++)
		{
			for(int i=0;i<3;i++)
			{
				row=0;
				for(int l=0;l<3;l++)
				{
					for(int m=0;m<3;m++)
					{
						for(int I=0;I<3;I++)
						{
							// Summation
							for(int Ibar=0;Ibar<3;Ibar++)
							{
								II21p_62(row,col)+= Temp_II21p(I,l,m)*Temp_II21p_60_67*fdFYdS_trace*fFp_inverse(J,Ibar)*fChie(i,Ibar);
							}
							row++;
						}
					}
				}
		     col++;
			}
		}

	     row=0;
	     col=0;

		for(int J=0;J<3;J++)
		{
			for(int i=0;i<3;i++)
			{
				row=0;
				for(int l=0;l<3;l++)
				{
					for(int m=0;m<3;m++)
					{
						for(int I=0;I<3;I++)
						{
							// Summation
							for(int Lbar=0;Lbar<3;Lbar++)
							{
								for(int Kbar=0;Kbar<3;Kbar++)
								{
									II21p_63(row,col)+= Temp_II21p(I,l,m)*Temp_II21p_60_67*fdFYdS(Kbar,Lbar)*fFp_inverse(J,Kbar)*fChie(i,Lbar);
								}
							}
							row++;
						}
					}
				}
		     col++;
			}
		}

	     row=0;
	     col=0;

		for(int J=0;J<3;J++)
		{
			for(int i=0;i<3;i++)
			{
				row=0;
				for(int l=0;l<3;l++)
				{
					for(int m=0;m<3;m++)
					{
						for(int I=0;I<3;I++)
						{
							// Summation
							for(int Lbar=0;Lbar<3;Lbar++)
							{
								for(int Kbar=0;Kbar<3;Kbar++)
								{
									II21p_64(row,col)+= Temp_II21p(I,l,m)*Temp_II21p_60_67*fdFYdS(Kbar,Lbar)*fFp_inverse(J,Lbar)*fChie(i,Kbar);
								}
							}
							row++;
						}
					}
				}
		     col++;
			}
		}

	     row=0;
	     col=0;

		for(int J=0;J<3;J++)
		{
			for(int i=0;i<3;i++)
			{
				row=0;
				for(int l=0;l<3;l++)
				{
					for(int m=0;m<3;m++)
					{
						for(int I=0;I<3;I++)
						{
							// Summation
							for(int Ibar=0;Ibar<3;Ibar++)
							{
								II21p_65(row,col)+= Temp_II21p(I,l,m)*Temp_II21p_60_67*fdFYdS_trace*fFe(i,Ibar)*fChip_inverse(J,Ibar);
							}
							row++;
						}
					}
				}
		     col++;
			}
		}

	     row=0;
	     col=0;

		for(int J=0;J<3;J++)
		{
			for(int i=0;i<3;i++)
			{
				row=0;
				for(int l=0;l<3;l++)
				{
					for(int m=0;m<3;m++)
					{
						for(int I=0;I<3;I++)
						{
							// Summation
							for(int Lbar=0;Lbar<3;Lbar++)
							{
								for(int Kbar=0;Kbar<3;Kbar++)
								{
									II21p_66(row,col)+= Temp_II21p(I,l,m)*Temp_II21p_60_67*fdFYdS(Kbar,Lbar)*fFe(i,Kbar)*fChip_inverse(J,Lbar);
								}
							}
							row++;
						}
					}
				}
		     col++;
			}
		}

	     row=0;
	     col=0;

		for(int J=0;J<3;J++)
		{
			for(int i=0;i<3;i++)
			{
				row=0;
				for(int l=0;l<3;l++)
				{
					for(int m=0;m<3;m++)
					{
						for(int I=0;I<3;I++)
						{
							// Summation
							for(int Lbar=0;Lbar<3;Lbar++)
							{
								for(int Kbar=0;Kbar<3;Kbar++)
								{
									II21p_67(row,col)+= Temp_II21p(I,l,m)*Temp_II21p_60_67*fdFYdS(Kbar,Lbar)*fFe(i,Lbar)*fChip_inverse(J,Kbar);
								}
							}
							row++;
						}
					}
				}
		     col++;
			}
		}


	     row=0;
	     col=0;

		for(int J=0;J<3;J++)
		{
			for(int i=0;i<3;i++)
			{
				row=0;
				for(int l=0;l<3;l++)
				{
					for(int m=0;m<3;m++)
					{
						for(int I=0;I<3;I++)
						{
							// Summation
							for(int Ibar=0;Ibar<3;Ibar++)
							{
								II21p_60a(row,col)+= Temp_II21p(I,l,m)*Temp_II21p_60_67*fdFYchidSIGMA_S_trace*fFp_inverse(J,Ibar)*fFe(i,Ibar);
							}
							row++;
						}
					}
				}
		     col++;
			}
		}

	     row=0;
	     col=0;

		for(int J=0;J<3;J++)
		{
			for(int i=0;i<3;i++)
			{
				row=0;
				for(int l=0;l<3;l++)
				{
					for(int m=0;m<3;m++)
					{
						for(int I=0;I<3;I++)
						{
							// Summation
							for(int Kbar=0;Kbar<3;Kbar++)
							{
								for(int Lbar=0;Lbar<3;Lbar++)
								{
									II21p_61a(row,col)+= Temp_II21p(I,l,m)*Temp_II21p_60_67*fdFYchidSIGMA(Kbar,Lbar)*(fFp_inverse(J,Kbar)*fFe(i,Lbar) + fFp_inverse(J,Lbar)*fFe(i,Kbar));
								}
							}
							row++;
						}
					}
				}
		     col++;
			}
		}

	     row=0;
	     col=0;

		for(int J=0;J<3;J++)
		{
			for(int i=0;i<3;i++)
			{
				row=0;
				for(int l=0;l<3;l++)
				{
					for(int m=0;m<3;m++)
					{
						for(int I=0;I<3;I++)
						{
							// Summation
							for(int Ibar=0;Ibar<3;Ibar++)
							{
								II21p_62a(row,col)+= Temp_II21p(I,l,m)*Temp_II21p_60_67*fdFYchidSIGMA_S_trace*fFp_inverse(J,Ibar)*fChie(i,Ibar);
							}
							row++;
						}
					}
				}
		     col++;
			}
		}

	     row=0;
	     col=0;

		for(int J=0;J<3;J++)
		{
			for(int i=0;i<3;i++)
			{
				row=0;
				for(int l=0;l<3;l++)
				{
					for(int m=0;m<3;m++)
					{
						for(int I=0;I<3;I++)
						{
							// Summation
							for(int Lbar=0;Lbar<3;Lbar++)
							{
								for(int Kbar=0;Kbar<3;Kbar++)
								{
									II21p_63a(row,col)+= Temp_II21p(I,l,m)*Temp_II21p_60_67*fdFYchidSIGMA(Kbar,Lbar)*fFp_inverse(J,Kbar)*fChie(i,Lbar);
								}
							}
							row++;
						}
					}
				}
		     col++;
			}
		}

	     row=0;
	     col=0;

		for(int J=0;J<3;J++)
		{
			for(int i=0;i<3;i++)
			{
				row=0;
				for(int l=0;l<3;l++)
				{
					for(int m=0;m<3;m++)
					{
						for(int I=0;I<3;I++)
						{
							// Summation
							for(int Lbar=0;Lbar<3;Lbar++)
							{
								for(int Kbar=0;Kbar<3;Kbar++)
								{
									II21p_64a(row,col)+= Temp_II21p(I,l,m)*Temp_II21p_60_67*fdFYchidSIGMA(Kbar,Lbar)*fFp_inverse(J,Lbar)*fChie(i,Kbar);
								}
							}
							row++;
						}
					}
				}
		     col++;
			}
		}

	     row=0;
	     col=0;

		for(int J=0;J<3;J++)
		{
			for(int i=0;i<3;i++)
			{
				row=0;
				for(int l=0;l<3;l++)
				{
					for(int m=0;m<3;m++)
					{
						for(int I=0;I<3;I++)
						{
							// Summation
							for(int Ibar=0;Ibar<3;Ibar++)
							{
								II21p_65a(row,col)+= Temp_II21p(I,l,m)*Temp_II21p_60_67*fdFYchidSIGMA_S_trace*fFe(i,Ibar)*fChip_inverse(J,Ibar);
							}
							row++;
						}
					}
				}
		     col++;
			}
		}

	     row=0;
	     col=0;

		for(int J=0;J<3;J++)
		{
			for(int i=0;i<3;i++)
			{
				row=0;
				for(int l=0;l<3;l++)
				{
					for(int m=0;m<3;m++)
					{
						for(int I=0;I<3;I++)
						{
							// Summation
							for(int Lbar=0;Lbar<3;Lbar++)
							{
								for(int Kbar=0;Kbar<3;Kbar++)
								{
									II21p_66a(row,col)+= Temp_II21p(I,l,m)*Temp_II21p_60_67*fdFYchidSIGMA(Kbar,Lbar)*fFe(i,Kbar)*fChip_inverse(J,Lbar);
								}
							}
							row++;
						}
					}
				}
		     col++;
			}
		}

	     row=0;
	     col=0;

		for(int J=0;J<3;J++)
		{
			for(int i=0;i<3;i++)
			{
				row=0;
				for(int l=0;l<3;l++)
				{
					for(int m=0;m<3;m++)
					{
						for(int I=0;I<3;I++)
						{
							// Summation
							for(int Lbar=0;Lbar<3;Lbar++)
							{
								for(int Kbar=0;Kbar<3;Kbar++)
								{
									II21p_67a(row,col)+= Temp_II21p(I,l,m)*Temp_II21p_60_67*fdFYchidSIGMA(Kbar,Lbar)*fFe(i,Lbar)*fChip_inverse(J,Kbar);
								}
							}
							row++;
						}
					}
				}
		     col++;
			}
		}

	    Temp_II21p_68_75 = 0.0;
	    II21p_68=0.0;
	    II21p_69=0.0;
	    II21p_70=0.0;
	    II21p_71=0.0;
	    II21p_72=0.0;
	    II21p_73=0.0;
	    II21p_74=0.0;
	    II21p_75=0.0;
	    II21p_68a=0.0;
	    II21p_69a=0.0;
	    II21p_70a=0.0;
	    II21p_71a=0.0;
	    II21p_72a=0.0;
	    II21p_73a=0.0;
	    II21p_74a=0.0;
	    II21p_75a=0.0;

		fTemp_matrix_nsd_x_nsd = 0.0;
		fTemp_matrix_nsd_x_nsd2 = 0.0;
		fTemp_matrix_nsd_x_nsd3 = 0.0;
		fTemp_matrix_nsd_x_nsd.MultAB(fChip_n,fChip_inverse);
		fTemp_matrix_nsd_x_nsd2.MultATBC(PSIe_n_inverse,fCchie_n,fTemp_matrix_nsd_x_nsd);
		fTemp_matrix_nsd_x_nsd.MultABC(PSIe_n_inverse,fdGchidSIGMA_tr_transpose,fTemp_matrix_nsd_x_nsd2);
		fTemp_matrix_nsd_x_nsd2.MultABC(fChip_n,fChip_inverse,fTemp_matrix_nsd_x_nsd);

		fTemp_matrix_nsd_x_nsd3.MultATB(fFe,fChie);




		for(int A=0;A<3;A++)
		{
	    	for(int Nbar=0;Nbar<3;Nbar++)
	    	{
				for(int Fbar=0;Fbar<3;Fbar++)
				{
					for(int Mbar=0;Mbar<3;Mbar++)
					{
						for(int Kbar=0;Kbar<3;Kbar++)
						{
							for(int Lbar=0;Lbar<3;Lbar++)
							{
								for(int pbar=0;pbar<3;pbar++)
								{
									for(int Cbar=0;Cbar<3;Cbar++)
									{
										Temp_II21p_68_75+= fdFnablachidMKLM(Kbar,Lbar,Mbar)*fTemp_matrix_nsd_x_nsd3(Kbar,Nbar)*(fTemp_matrix_nsd_x_nsd2(Nbar,Cbar)*PSIe_n_inverse(Cbar,Fbar)*
										GAMMAe_n(Fbar,pbar,Mbar)-fTemp_matrix_nsd_x_nsd2(Fbar,pbar)*PSIe_n_inverse(Nbar,Cbar)*GAMMAe_n(Cbar,Fbar,Mbar))*fChip_n(pbar,A)*fChip_inverse(A,Lbar);
									}
								}
							}
						}
					}
				}
	    	}
		}

	     row=0;
	     col=0;

		for(int J=0;J<3;J++)
		{
			for(int i=0;i<3;i++)
			{
				row=0;
				for(int l=0;l<3;l++)
				{
					for(int m=0;m<3;m++)
					{
						for(int I=0;I<3;I++)
						{
							// Summation
							for(int Ibar=0;Ibar<3;Ibar++)
							{
								II21p_68(row,col)+= Temp_II21p(I,l,m)*Temp_II21p_68_75*fdFYdS_trace*fFp_inverse(J,Ibar)*fFe(i,Ibar);
							}
							row++;
						}
					}
				}
		     col++;
			}
		}

	     row=0;
	     col=0;

		for(int J=0;J<3;J++)
		{
			for(int i=0;i<3;i++)
			{
				row=0;
				for(int l=0;l<3;l++)
				{
					for(int m=0;m<3;m++)
					{
						for(int I=0;I<3;I++)
						{
							// Summation
							for(int Kbar=0;Kbar<3;Kbar++)
							{
								for(int Lbar=0;Lbar<3;Lbar++)
								{
									II21p_69(row,col)+= Temp_II21p(I,l,m)*Temp_II21p_68_75*fdFYdS(Kbar,Lbar)*(fFp_inverse(J,Kbar)*fFe(i,Lbar) + fFp_inverse(J,Lbar)*fFe(i,Kbar));
								}
							}
							row++;
						}
					}
				}
		     col++;
			}
		}

	     row=0;
	     col=0;

		for(int J=0;J<3;J++)
		{
			for(int i=0;i<3;i++)
			{
				row=0;
				for(int l=0;l<3;l++)
				{
					for(int m=0;m<3;m++)
					{
						for(int I=0;I<3;I++)
						{
							// Summation
							for(int Ibar=0;Ibar<3;Ibar++)
							{
								II21p_70(row,col)+= Temp_II21p(I,l,m)*Temp_II21p_68_75*fdFYdS_trace*fFp_inverse(J,Ibar)*fChie(i,Ibar);
							}
							row++;
						}
					}
				}
		     col++;
			}
		}

	     row=0;
	     col=0;

		for(int J=0;J<3;J++)
		{
			for(int i=0;i<3;i++)
			{
				row=0;
				for(int l=0;l<3;l++)
				{
					for(int m=0;m<3;m++)
					{
						for(int I=0;I<3;I++)
						{
							// Summation
							for(int Lbar=0;Lbar<3;Lbar++)
							{
								for(int Kbar=0;Kbar<3;Kbar++)
								{
									II21p_71(row,col)+= Temp_II21p(I,l,m)*Temp_II21p_68_75*fdFYdS(Kbar,Lbar)*fFp_inverse(J,Kbar)*fChie(i,Lbar);
								}
							}
							row++;
						}
					}
				}
		     col++;
			}
		}

	     row=0;
	     col=0;

		for(int J=0;J<3;J++)
		{
			for(int i=0;i<3;i++)
			{
				row=0;
				for(int l=0;l<3;l++)
				{
					for(int m=0;m<3;m++)
					{
						for(int I=0;I<3;I++)
						{
							// Summation
							for(int Lbar=0;Lbar<3;Lbar++)
							{
								for(int Kbar=0;Kbar<3;Kbar++)
								{
									II21p_72(row,col)+= Temp_II21p(I,l,m)*Temp_II21p_68_75*fdFYdS(Kbar,Lbar)*fFp_inverse(J,Lbar)*fChie(i,Kbar);
								}
							}
							row++;
						}
					}
				}
		     col++;
			}
		}

	     row=0;
	     col=0;

		for(int J=0;J<3;J++)
		{
			for(int i=0;i<3;i++)
			{
				row=0;
				for(int l=0;l<3;l++)
				{
					for(int m=0;m<3;m++)
					{
						for(int I=0;I<3;I++)
						{
							// Summation
							for(int Ibar=0;Ibar<3;Ibar++)
							{
								II21p_73(row,col)+= Temp_II21p(I,l,m)*Temp_II21p_68_75*fdFYdS_trace*fFe(i,Ibar)*fChip_inverse(J,Ibar);
							}
							row++;
						}
					}
				}
		     col++;
			}
		}
	     row=0;
	     col=0;

		for(int J=0;J<3;J++)
		{
			for(int i=0;i<3;i++)
			{
				row=0;
				for(int l=0;l<3;l++)
				{
					for(int m=0;m<3;m++)
					{
						for(int I=0;I<3;I++)
						{
							// Summation
							for(int Lbar=0;Lbar<3;Lbar++)
							{
								for(int Kbar=0;Kbar<3;Kbar++)
								{
									II21p_74(row,col)+= Temp_II21p(I,l,m)*Temp_II21p_68_75*fdFYdS(Kbar,Lbar)*fFe(i,Kbar)*fChip_inverse(J,Lbar);
								}
							}
							row++;
						}
					}
				}
		     col++;
			}
		}

	     row=0;
	     col=0;

		for(int J=0;J<3;J++)
		{
			for(int i=0;i<3;i++)
			{
				row=0;
				for(int l=0;l<3;l++)
				{
					for(int m=0;m<3;m++)
					{
						for(int I=0;I<3;I++)
						{
							// Summation
							for(int Lbar=0;Lbar<3;Lbar++)
							{
								for(int Kbar=0;Kbar<3;Kbar++)
								{
									II21p_75(row,col)+= Temp_II21p(I,l,m)*Temp_II21p_68_75*fdFYdS(Kbar,Lbar)*fFe(i,Lbar)*fChip_inverse(J,Kbar);
								}
							}
							row++;
						}
					}
				}
		     col++;
			}
		}

	     row=0;
	     col=0;

		for(int J=0;J<3;J++)
		{
			for(int i=0;i<3;i++)
			{
				row=0;
				for(int l=0;l<3;l++)
				{
					for(int m=0;m<3;m++)
					{
						for(int I=0;I<3;I++)
						{
							// Summation
							for(int Ibar=0;Ibar<3;Ibar++)
							{
								II21p_68a(row,col)+= Temp_II21p(I,l,m)*Temp_II21p_68_75*fdFYchidSIGMA_S_trace*fFp_inverse(J,Ibar)*fFe(i,Ibar);
							}
							row++;
						}
					}
				}
		     col++;
			}
		}

	     row=0;
	     col=0;

		for(int J=0;J<3;J++)
		{
			for(int i=0;i<3;i++)
			{
				row=0;
				for(int l=0;l<3;l++)
				{
					for(int m=0;m<3;m++)
					{
						for(int I=0;I<3;I++)
						{
							// Summation
							for(int Kbar=0;Kbar<3;Kbar++)
							{
								for(int Lbar=0;Lbar<3;Lbar++)
								{
									II21p_69a(row,col)+= Temp_II21p(I,l,m)*Temp_II21p_68_75*fdFYchidSIGMA(Kbar,Lbar)*(fFp_inverse(J,Kbar)*fFe(i,Lbar) + fFp_inverse(J,Lbar)*fFe(i,Kbar));
								}
							}
							row++;
						}
					}
				}
		     col++;
			}
		}

	     row=0;
	     col=0;

		for(int J=0;J<3;J++)
		{
			for(int i=0;i<3;i++)
			{
				row=0;
				for(int l=0;l<3;l++)
				{
					for(int m=0;m<3;m++)
					{
						for(int I=0;I<3;I++)
						{
							// Summation
							for(int Ibar=0;Ibar<3;Ibar++)
							{
								II21p_70a(row,col)+= Temp_II21p(I,l,m)*Temp_II21p_68_75*fdFYchidSIGMA_S_trace*fFp_inverse(J,Ibar)*fChie(i,Ibar);
							}
							row++;
						}
					}
				}
		     col++;
			}
		}

	     row=0;
	     col=0;

		for(int J=0;J<3;J++)
		{
			for(int i=0;i<3;i++)
			{
				row=0;
				for(int l=0;l<3;l++)
				{
					for(int m=0;m<3;m++)
					{
						for(int I=0;I<3;I++)
						{
							// Summation
							for(int Lbar=0;Lbar<3;Lbar++)
							{
								for(int Kbar=0;Kbar<3;Kbar++)
								{
									II21p_71a(row,col)+= Temp_II21p(I,l,m)*Temp_II21p_68_75*fdFYchidSIGMA(Kbar,Lbar)*fFp_inverse(J,Kbar)*fChie(i,Lbar);
								}
							}
							row++;
						}
					}
				}
		     col++;
			}
		}

	     row=0;
	     col=0;

		for(int J=0;J<3;J++)
		{
			for(int i=0;i<3;i++)
			{
				row=0;
				for(int l=0;l<3;l++)
				{
					for(int m=0;m<3;m++)
					{
						for(int I=0;I<3;I++)
						{
							// Summation
							for(int Lbar=0;Lbar<3;Lbar++)
							{
								for(int Kbar=0;Kbar<3;Kbar++)
								{
									II21p_72a(row,col)+= Temp_II21p(I,l,m)*Temp_II21p_68_75*fdFYchidSIGMA(Kbar,Lbar)*fFp_inverse(J,Lbar)*fChie(i,Kbar);
								}
							}
							row++;
						}
					}
				}
		     col++;
			}
		}

	     row=0;
	     col=0;

		for(int J=0;J<3;J++)
		{
			for(int i=0;i<3;i++)
			{
				row=0;
				for(int l=0;l<3;l++)
				{
					for(int m=0;m<3;m++)
					{
						for(int I=0;I<3;I++)
						{
							// Summation
							for(int Ibar=0;Ibar<3;Ibar++)
							{
								II21p_73a(row,col)+= Temp_II21p(I,l,m)*Temp_II21p_68_75*fdFYchidSIGMA_S_trace*fFe(i,Ibar)*fChip_inverse(J,Ibar);
							}
							row++;
						}
					}
				}
		     col++;
			}
		}
	     row=0;
	     col=0;

		for(int J=0;J<3;J++)
		{
			for(int i=0;i<3;i++)
			{
				row=0;
				for(int l=0;l<3;l++)
				{
					for(int m=0;m<3;m++)
					{
						for(int I=0;I<3;I++)
						{
							// Summation
							for(int Lbar=0;Lbar<3;Lbar++)
							{
								for(int Kbar=0;Kbar<3;Kbar++)
								{
									II21p_74a(row,col)+= Temp_II21p(I,l,m)*Temp_II21p_68_75*fdFYchidSIGMA(Kbar,Lbar)*fFe(i,Kbar)*fChip_inverse(J,Lbar);
								}
							}
							row++;
						}
					}
				}
		     col++;
			}
		}

	     row=0;
	     col=0;

		for(int J=0;J<3;J++)
		{
			for(int i=0;i<3;i++)
			{
				row=0;
				for(int l=0;l<3;l++)
				{
					for(int m=0;m<3;m++)
					{
						for(int I=0;I<3;I++)
						{
							// Summation
							for(int Lbar=0;Lbar<3;Lbar++)
							{
								for(int Kbar=0;Kbar<3;Kbar++)
								{
									II21p_75a(row,col)+= Temp_II21p(I,l,m)*Temp_II21p_68_75*fdFYchidSIGMA(Kbar,Lbar)*fFe(i,Lbar)*fChip_inverse(J,Kbar);
								}
							}
							row++;
						}
					}
				}
		     col++;
			}
		}
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



void FSMicromorphic2_3DT:: Form_fMeKLM_tr()
{
    fMeKLM_tr=0.0;
    for(int Kbar=0;Kbar<3;Kbar++ )
    {
        for(int Lbar=0;Lbar<3;Lbar++)
        {
            for(int Mbar=0;Mbar<3;Mbar++)
            {
                fMeKLM_tr(Kbar,Lbar,Mbar)=fMaterial_Params[kTau7]*GAMMAe_tr(Lbar,Mbar,Kbar)
                                      +fMaterial_Params[kTau8]*(GAMMAe_tr(Kbar,Lbar,Mbar)+GAMMAe_tr(Mbar,Lbar,Kbar));
            }
        }
    }


    for(int Kbar=0;Kbar<3;Kbar++ )
    {
        for(int Lbar=0;Lbar<3;Lbar++)
        {
            for(int Mbar=0;Mbar<3;Mbar++)
            {
                //summation
                for(int Rbar=0;Rbar<3;Rbar++)
                {
                    fMeKLM_tr(Kbar,Lbar,Mbar)=fMeKLM_tr(Kbar,Lbar,Mbar)+fMaterial_Params[kTau3]*GAMMAe_tr(Rbar,Rbar,Kbar)*fIdentity_matrix(Lbar,Mbar)
                                            +fMaterial_Params[kTau4]*GAMMAe_tr(Lbar,Rbar,Rbar)*fIdentity_matrix(Kbar,Mbar)
                                            +fMaterial_Params[kTau6]*GAMMAe_tr(Rbar,Mbar,Rbar)*fIdentity_matrix(Kbar,Lbar);
                }
            }
        }
    }

}

void FSMicromorphic2_3DT:: Form_PGchivar_tr()
{
    PGchivar_tr=0.0;
    for(int Kbar=0;Kbar<3;Kbar++)
    {
        //summation
        for(int Abar=0;Abar<3;Abar++)
        {
            PGchivar_tr[Kbar]+=(1.0/3.0)*(fMeKLM(Abar,Abar,Kbar));
        }
    }

    Temp_inv=PGchivar_tr[0]*PGchivar_tr[0]+PGchivar_tr[1]*PGchivar_tr[1]+PGchivar_tr[2]*PGchivar_tr[2];
    invPGchivar_tr=sqrt(Temp_inv);
}


/*void FSMicromorphic2_3DT:: Form_fMeKLM()
{
    fMeKLM=0.0;
    for(int Kbar=0;Kbar<3;Kbar++ )
    {
        for(int Lbar=0;Lbar<3;Lbar++)
        {
            for(int Mbar=0;Mbar<3;Mbar++)
            {
                fMeKLM(Kbar,Lbar,Mbar)=fMaterial_Params[kTau7]*GAMMAe(Lbar,Mbar,Kbar)
                                      +fMaterial_Params[kTau8]*(GAMMAe(Kbar,Lbar,Mbar)+GAMMAe(Mbar,Lbar,Kbar));
            }
        }
    }


    for(int Kbar=0;Kbar<3;Kbar++ )
    {
        for(int Lbar=0;Lbar<3;Lbar++)
        {
            for(int Mbar=0;Mbar<3;Mbar++)
            {
                //summation
                for(int Rbar=0;Rbar<3;Rbar++)
                {
                    fMeKLM(Kbar,Lbar,Mbar)+=fMaterial_Params[kTau3]*GAMMAe(Rbar,Rbar,Kbar)*fIdentity_matrix(Lbar,Mbar)
										   +fMaterial_Params[kTau4]*GAMMAe(Lbar,Rbar,Rbar)*fIdentity_matrix(Kbar,Mbar)
                                           +fMaterial_Params[kTau6]*GAMMAe(Rbar,Mbar,Rbar)*fIdentity_matrix(Kbar,Lbar);
                }
            }
        }
    }


}
*/


void FSMicromorphic2_3DT:: Form_PGchivar()
{
    PGchivar=0.0;
    for(int Kbar=0;Kbar<3;Kbar++)
    {
        //summation
        for(int Abar=0;Abar<3;Abar++)
        {
            PGchivar[Kbar]+=(1.0/3.0)*(fMeKLM(Abar,Abar,Kbar));
        }
    }

    Temp_inv=PGchivar[0]*PGchivar[0]+PGchivar[1]*PGchivar[1]+PGchivar[2]*PGchivar[2];
    invPGchivar=sqrt(Temp_inv);
}


void FSMicromorphic2_3DT:: Form_devMeKLM()
{

    devMeKLM=0.0;
    for(int Kbar=0;Kbar<3;Kbar++)
    {
        for(int Lbar=0;Lbar<3;Lbar++)
        {
            for(int Mbar=0;Mbar<3;Mbar++)
            {
                devMeKLM(Kbar,Lbar,Mbar)=fMeKLM(Kbar,Lbar,Mbar)-PGchivar[Mbar]*fIdentity_matrix(Kbar,Lbar);

            }
        }
    }

    /* Calculating ||devMe^tr|| */
    invdevMeKLM=0.0;
    Temp_inv=0.0;
    for(int Kbar=0;Kbar<3;Kbar++)
    {
        for(int Lbar=0;Lbar<3;Lbar++)
        {
            for(int Mbar=0;Mbar<3;Mbar++)
            {
                Temp_inv+=devMeKLM(Kbar,Lbar,Mbar)*devMeKLM(Kbar,Lbar,Mbar);

            }
        }
    }
    invdevMeKLM=sqrt(Temp_inv);


}


void FSMicromorphic2_3DT:: Form_fEtaM()
{
    int row=0;
    int col=0;
    fEtaM=0.0;
    for(int k=0;k<3;k++)
    {
        for(int i=0;i<3;i++)
        {
            //
            row=i;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    //summation
                    for(int K=0;K<3;K++)
                    {
                        for(int L=0;L<3;L++)
                        {
                            for(int M=0;M<3;M++)
                            {
                                fEtaM(row,col)+=fDeformation_Gradient(k,K)
                                              *fDeformation_Gradient(l,L)
                                              *fMKLM(K,L,M)
                                              *ChiM(m,M);
                            }
                        }
                    }
                    row=row+3;
                }
            }
            col++;
        }
    }
}


void FSMicromorphic2_3DT:: Form_fFM()
{
    int row=0;
    int col=0;
    fFM=0.0;
    for(int n=0;n<3;n++)
    {
        for(int k=0;k<3;k++)
        {
            //
            row=k;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    //summation
                    for(int K=0;K<3;K++)
                    {
                        for(int L=0;L<3;L++)
                        {
                            for(int M=0;M<3;M++)
                            {
                                fEtaM(row,col)+=fDeformation_Gradient(n,K)
                                              *fDeformation_Gradient(l,L)
                                              *fMKLM(K,L,M)
                                              *ChiM(m,M);
                            }
                        }
                    }
                    row=row+3;
                }
            }
            col++;
        }
    }
}

void FSMicromorphic2_3DT:: Form_fMF()
{
    int row=0;
    int col=0;
    fMF=0.0;
/*  for(int n=0;n<3;n++)
    {
        for(int l=0;l<3;l++)
        {
            //
            row=l*9;
            for(int m=0;m<3;m++)
            {
                for(int k=0;k<3;k++)
                {
                    //summation
                    for(int K=0;K<3;K++)
                    {
                        for(int L=0;L<3;L++)
                        {
                            for(int M=0;M<3;M++)
                            {
                                for(int R=0;R<3;R++)
                                {
                                fMF(row,col)+=fDeformation_Gradient(k,K)
                                             *fDeformation_Gradient(n,L)
                                             *fMKLM(K,L,M)
                                             *ChiM(m,M)
                                             *fDeformation_Gradient_Inverse(R,k);
                                }
                            }
                        }
                    }
                    row++;
                }
            }
            col++;
        }
    }*/

    for(int L=0;L<3;L++)
    {
        for(int l=0;l<3;l++)
        {
            //
            row=l*9;
            for(int m=0;m<3;m++)
            {
                for(int K=0;K<3;K++)
                {
                    //summation
                    for(int M=0;M<3;M++)
                    {
                        fMF(row,col)+=ChiM(m,M)*fMeKLM(K,L,M);
                    }
                    row++;
                }
            }
            col++;
        }
    }



}

void FSMicromorphic2_3DT:: Form_fMchi()
{
    int row=0;
    int col=0;
    fMchi=0.0;
/*  for(int M=0;M<3;M++)
    {
        for(int m=0;m<3;m++)
        {
            row=m*3;
            for(int l=0;l<3;l++)
            {
                for(int k=0;k<3;k++)
                {
                    //summation
                    for(int K=0;K<3;K++)
                    {
                        for(int L=0;L<3;L++)
                        {
                            for(int R=0;R<3;R++)
                            {
                            fMchi(row,col)+=fDeformation_Gradient(k,K)*fDeformation_Gradient(l,L)*fMKLM(K,L,M)
                                           *fDeformation_Gradient_Inverse(R,k);
                            }
                        }
                    }
                    row++;
                }
                row=row+6;
            }
            col++;
        }
    }*/

    for(int M=0;M<3;M++)
    {
        for(int m=0;m<3;m++)
        {
            row=m*3;
            for(int l=0;l<3;l++)
            {
                for(int K=0;K<3;K++)
                {
                    //summation
                    for(int L=0;L<3;L++)
                    {
                        fMchi(row,col)+=fDeformation_Gradient(l,L)*fMeKLM(K,L,M);
                    }
                    row++;
                }
                row=row+6;
            }
            col++;
        }
    }

}

void FSMicromorphic2_3DT:: Form_fMpu_1_1()
{
    int row=0;
    int col=0;

    fMpu_1_1=0.0;

/*    for(int M=0;M<3;M++)
    {
        for(int k=0;k<3;k++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    for(int K=0;K<3;K++)
                    {
                        //summation
						for(int P=0;P<3;P++)
						{
							fMpu_1_1(row,col)+= fDeformation_Gradient(l,K)
											  *GRAD_CHIM(k,P,P)
											  *ChiM(m,M);
						}
					row++;
                    }
                }
            }
            col++;
        }
    }
}*/

    for(int K=0;K<3;K++)
        {
            for(int k=0;k<3;k++)
            {
                row=0;
                for(int l=0;l<3;l++)
                {
                    for(int m=0;m<3;m++)
                    {
                        for(int N=0;N<3;N++)
                        {
                            //summation
    						for(int P=0;P<3;P++)
    						{
        						for(int L=0;L<3;L++)
        						{
									fMpu_1_1(row,col)+= fIdentity_matrix(N,K)*fDeformation_Gradient(l,L)
													  *GRAD_CHIM(k,P,P)
													  *ChiM(m,L);
        						}
    						}
    					row++;
                        }
                    }
                }
                col++;
            }
        }
    }

void FSMicromorphic2_3DT:: Form_fMpu_1_2()
{
    int row=0;
    int col=0;
    fMpu_1_2=0.0;
    for(int P=0;P<3;P++)
    {
        for(int k=0;k<3;k++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    for(int K=0;K<3;K++)
                    {
                        //summation
						for(int L=0;L<3;L++)
						{
							fMpu_1_2(row,col)+= fDeformation_Gradient(l,L)
											  *GRAD_CHIM(k,P,L)
											  *ChiM(m,K);
						}
                      row++;
                    }
                }
            }
          col++;
        }
    }
}

void FSMicromorphic2_3DT:: Form_fMpp_1_1()
{
    int row=0;
    int col=0;

    fMpp_1_1=0.0;


	  for(int R=0;R<3;R++)
	  {
		  for(int k=0;k<3;k++)
		  {
			  for(int L=0;L<3;L++)
			  {
				  if (R==L)
				  {
					  row=0;
					  for(int l=0;l<3;l++)
					  {
						  for(int m=0;m<3;m++)
						  {
							  for(int K=0;K<3;K++)
							  {
								  //summation
								  for(int M=0;M<3;M++)
								  {
									  fMpp_1_1(row,col)+=fDeformation_Gradient(l,M)
													  *fDeformation_Gradient(k,K)
													  *ChiM(m,M);
								  }
							  row++;
							  }
						  }
					  }
				  col++;
				  }
			  }
		  }
	  }
}


void FSMicromorphic2_3DT:: Form_fMpp_1_2()
{
    int row=0;
    int col=0;

    fMpp_1_2=0.0;


	  for(int P=0;P<3;P++)
	  {
		  for(int k=0;k<3;k++)
		  {
			  for(int L=0;L<3;L++)
			  {
				  //
				  row=0;
				  for(int l=0;l<3;l++)
				  {
					  for(int m=0;m<3;m++)
					  {
						  for(int K=0;K<3;K++)
						  {
							  fMpp_1_2(row,col)+= fDeformation_Gradient(l,L)
											  *fDeformation_Gradient(k,P)
											  *ChiM(m,K);
						  row++;
						  }
					  }
				  }
				  col++;
			  }
		  }
	  }
}


void FSMicromorphic2_3DT:: Form_fMpu_2_1()
{
    int row=0;
    int col=0;

    fMpu_2_1=0.0;

    for(int N=0;N<3;N++)
    {
        for(int k=0;k<3;k++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    for(int K=0;K<3;K++)
                    {
                        for(int L=0;L<3;L++)
                        {
							fMpu_2_1(row,col)+= fDeformation_Gradient(l,L)
											  *GRAD_CHIM(k,K,N)
											  *ChiM(m,L);
                        }
					row++;
                    }
                }
            }
            col++;
        }
    }
}

void FSMicromorphic2_3DT:: Form_fMpu_2_2()
{
    int row=0;
    int col=0;
    fMpu_2_2=0.0;
    for(int P=0;P<3;P++)
    {
        for(int k=0;k<3;k++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    for(int K=0;K<3;K++)
                    {
                        //summation
						for(int M=0;M<3;M++)
						{
							fMpu_2_2(row,col)+= fDeformation_Gradient(l,K)
											  *GRAD_CHIM(k,P,M)
											  *ChiM(m,M);
						}
                      row++;
                    }
                }
            }
          col++;
        }
    }
}

void FSMicromorphic2_3DT:: Form_fMpp_2_1()
{
    int row=0;
    int col=0;

    fMpp_2_1=0.0;


	  for(int M=0;M<3;M++)
	  {
		  for(int k=0;k<3;k++)
		  {
			  for(int N=0;N<3;N++)
			  {
				  row=0;
				  for(int l=0;l<3;l++)
				  {
					  for(int m=0;m<3;m++)
					  {
						  for(int K=0;K<3;K++)
						  {
							  for(int M=0;M<3;M++)
							  {
								  fMpp_2_1(row,col)+=fDeformation_Gradient(l,M)
												  *fDeformation_Gradient(k,N)
												  *ChiM(m,M);
							  }
						  row++;
						  }
					  }
				  }
			  col++;
			  }
		  }
	  }
}


void FSMicromorphic2_3DT:: Form_fMpp_2_2()
{
    int row=0;
    int col=0;

    fMpp_2_2=0.0;


	  for(int P=0;P<3;P++)
	  {
		  for(int k=0;k<3;k++)
		  {
			  for(int M=0;M<3;M++)
			  {
				  //
				  row=0;
				  for(int l=0;l<3;l++)
				  {
					  for(int m=0;m<3;m++)
					  {
						  for(int K=0;K<3;K++)
						  {
							  fMpp_2_2(row,col)+=fDeformation_Gradient(l,K)
											  *fDeformation_Gradient(k,P)
											  *ChiM(m,M);
						  row++;
						  }
					  }
				  }
				  col++;
			  }
		  }
	  }
}



void FSMicromorphic2_3DT:: Form_fMpu_3()
{
    int row=0;
    int col=0;
    fMpu_3=0.0;

/*   for(int R=0;R<3;R++)
    {
        for(int k=0;k<3;k++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    for(int K=0;K<3;K++)
                    {
                        //summation
                        for(int L=0;L<3;L++)
                        {
                            for(int M=0;M<3;M++)
                            {
                                fMpu_3(row,col)+=fDeformation_Gradient(l,L)
                                                *GRAD_CHIM(k,R,K)
                                                *fIdentity_matrix(L,M)
                                                *ChiM(m,M);
                            }
                        }
                        row++;
                    }
                }
            }
            col++;
        }
    } Volkan implemented the above */

    for(int R=0;R<3;R++)
    {
        for(int k=0;k<3;k++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    for(int K=0;K<3;K++)
                    {
                        //summation
                        for(int L=0;L<3;L++)
                        {
							fMpu_3(row,col)+=fDeformation_Gradient(l,L)
											*GRAD_CHIM(k,R,K)
											*ChiM(m,L);
                        }
                        row++;
                    }
                }
            }
            col++;
        }
    }


}

void FSMicromorphic2_3DT:: Form_fMpp_3()
{
    int row=0;
    int col=0;
    fMpp_3=0.0;

  /*  for(int R=0;R<3;R++)
    {
        for(int k=0;k<3;k++)
        {
            for(int K=0;K<3;K++)
            {
                //
                row=K;
                for(int l=0;l<3;l++)
                {
                    for(int m=0;m<3;m++)
                    {
                        //summation
                        for(int L=0;L<3;L++)
                        {
                            for(int M=0;M<3;M++)
                            {
                                fMpp_3(row,col)+=fDeformation_Gradient(l,L)
                                                *fDeformation_Gradient(k,L)
                                                *fIdentity_matrix(L,M)
                                                *ChiM(m,M);
                            }
                        }
                        row=row+3;
                    }
                }
                col++;
            }
        }
    } */

    for(int N=0;N<3;N++)
    {
        for(int k=0;k<3;k++)
        {
            for(int K=0;K<3;K++)
            {
                //
                row=0;
                for(int l=0;l<3;l++)
                {
                    for(int m=0;m<3;m++)
                    {
						for(int R=0;R<3;R++)
						{
							//summation
							for(int L=0;L<3;L++)
							{
								fMpp_3(row,col)+=fDeformation_Gradient(l,L)
												*fDeformation_Gradient(k,N)
												*fIdentity_matrix(K,R)
												*ChiM(m,L);
							}
							row++;
						}
                    }
                }
                col++;
            }
        }
    }


}

void FSMicromorphic2_3DT:: Form_fMpu_4()
{
    int row=0;
    int col=0;
    fMpu_4=0.0;

    for(int L=0;L<3;L++)
    {
        for(int i=0;i<3;i++)
        {
            //
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    for(int K=0;K<3;K++)
                    {
                        //summation
						for(int P=0;P<3;P++)
						{
							fMpu_4(row,col)+= fDeformation_Gradient(l,L)
											  *GRAD_CHIM(i,P,P)
											  *ChiM(m,K);
						}
					row++;
                    }
                }
            }
            col++;
        }
    }


	/*for(int k=0;k<3;k++)
	{
		for(int K=0;K<3;K++)
		{
			row=K;
			for(int l=0;l<3;l++)
			{
				for(int m=0;m<3;m++)
				{
					//summation
					for(int R=0;R<3;R++)
					{
						for(int M=0;M<3;M++)
						{
							fMpu_4(row,col)+=fDeformation_Gradient(l,M)
											*GRAD_CHIM(k,R,R)
											*ChiM(m,M);
						}
					}
				   row=row+3;
				}
			}
		col++;
		}
	}*/
}



void FSMicromorphic2_3DT:: Form_fMpp_4()
{
    int row=0;
    int col=0;
    fMpp_4=0.0;

    for(int R=0;R<3;R++)
    {
        for(int k=0;k<3;k++)
        {
            for(int A=0;A<3;A++)
            {
                row=0;
                if(A==R)
                {
                    for(int l=0;l<3;l++)
                    {
                        for(int m=0;m<3;m++)
                        {
                            for(int K=0;K<3;K++)
                            {
                                //summation
                                for(int L=0;L<3;L++)
                                {
									fMpp_4(row,col)+=fDeformation_Gradient(l,L)
													*fDeformation_Gradient(k,L)
													*ChiM(m,K);
                                }
                                row++;
                            }
                        }
                    }
                }
                col++;
            }
        }
    }
}


void FSMicromorphic2_3DT:: Form_fMpu_5_1()
{
    int row=0;
    int col=0;

    fMpu_5_1=0.0;

    for(int M=0;M<3;M++)
    {
        for(int k=0;k<3;k++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    for(int K=0;K<3;K++)
                    {
                        //summation
						for(int P=0;P<3;P++)
						{
							fMpu_5_1(row,col)+= fDeformation_Gradient(l,K)
											  *GRAD_CHIM(k,P,P)
											  *ChiM(m,M);
						}
					row++;
                    }
                }
            }
            col++;
        }
    }
}

void FSMicromorphic2_3DT:: Form_fMpu_5_2()
{
    int row=0;
    int col=0;
    fMpu_5_2=0.0;
    for(int N=0;N<3;N++)
    {
        for(int k=0;k<3;k++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    for(int K=0;K<3;K++)
                    {
                        //summation
						for(int L=0;L<3;L++)
						{
							fMpu_5_2(row,col)+= fDeformation_Gradient(l,L)
											  *GRAD_CHIM(k,L,N)
											  *ChiM(m,K);
						}
                      row++;
                    }
                }
            }
          col++;
        }
    }
}

void FSMicromorphic2_3DT:: Form_fMpp_5_1()
{
    int row=0;
    int col=0;

    fMpp_5_1=0.0;


	  for(int R=0;R<3;R++)
	  {
		  for(int k=0;k<3;k++)
		  {
			  for(int P=0;P<3;P++)
			  {
				  if (P==R)
				  {
					  row=0;
					  for(int l=0;l<3;l++)
					  {
						  for(int m=0;m<3;m++)
						  {
							  for(int K=0;K<3;K++)
							  {
								  //summation
								  for(int M=0;M<3;M++)
								  {
									  fMpp_5_1(row,col)+=fDeformation_Gradient(l,K)
													  *fDeformation_Gradient(k,M)
													  *ChiM(m,M);
								  }
							  row++;
							  }
						  }
					  }
				  col++;
				  }
			  }
		  }
	  }
}


void FSMicromorphic2_3DT:: Form_fMpp_5_2()
{
    int row=0;
    int col=0;

    fMpp_5_2=0.0;


	  for(int L=0;L<3;L++)
	  {
		  for(int k=0;k<3;k++)
		  {
			  for(int N=0;N<3;N++)
			  {
				  //
				  row=0;
				  for(int l=0;l<3;l++)
				  {
					  for(int m=0;m<3;m++)
					  {
						  for(int K=0;K<3;K++)
						  {
							  fMpp_5_2(row,col)+=fDeformation_Gradient(l,L)
											  *fDeformation_Gradient(k,N)
											  *ChiM(m,K);
						  row++;
						  }
					  }
				  }
				  col++;
			  }
		  }
	  }
}


void FSMicromorphic2_3DT:: Form_fMpu_6()
{
    int row=0;
    int col=0;
    fMpu_6=0.0;

   /* for(int R=0;R<3;R++)
    {
        for(int k=0;k<3;k++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    for(int K=0;K<3;K++)
                    {
                        //summation
                        for(int M=0;M<3;M++)
                        {
                            for(int L=0;L<3;L++)
                            {
                                fMpu_6(row,col)+=fDeformation_Gradient(l,L)
                                                *GRAD_CHIM(k,M,R)
                                                *fIdentity_matrix(K,L)
                                                *ChiM(m,M);
                            }
                        }
                        row++;
                    }
                }
            }
            col++;
        }
    } */

    for(int N=0;N<3;N++)
    {
        for(int k=0;k<3;k++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    for(int K=0;K<3;K++)
                    {
                        //summation
						for(int M=0;M<3;M++)
						{
							fMpu_6(row,col)+=fDeformation_Gradient(l,K)
											*GRAD_CHIM(k,M,N)
											*ChiM(m,M);
						}
                        row++;
                    }
                }
            }
            col++;
        }
    }

}



void FSMicromorphic2_3DT:: Form_fMpp_6()
{
    int row=0;
    int col=0;
    fMpp_6=0.0;

    for(int M=0;M<3;M++)
    {
        for(int k=0;k<3;k++)
        {
            for(int N=0;N<3;N++)
            {
			row=0;
                for(int l=0;l<3;l++)
                {
                    for(int m=0;m<3;m++)
                    {
                        for(int K=0;K<3;K++)
                        {
							fMpp_6(row,col)+=fDeformation_Gradient(l,K)
											*fDeformation_Gradient(k,N)
											*ChiM(m,M);
						row++;
                        }
                    }
                }
                col++;
            }
        }
    }


}


void FSMicromorphic2_3DT:: Form_fMpu_7()
{
    int row=0;
    int col=0;
    fMpu_7=0.0;
    for(int L=0;L<3;L++)
    {
        for(int i=0;i<3;i++)
        {
            //
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    for(int K=0;K<3;K++)
                    {
                    	//summation
                        for(int M=0;M<3;M++)
                        {
							fMpu_7(row,col)+= fDeformation_Gradient(l,L)
											  *GRAD_CHIM(i,M,K)
											  *ChiM(m,M);
                        }
                        row++;
                    }
                }
            }
            col++;
        }
    }

    /*
	 for(int i=0;i<3;i++)
	  {
		  for(int K=0;K<3;K++)
		  {
			  row=K;
			  for(int l=0;l<3;l++)
			  {
				  for(int m=0;m<3;m++)
				  {
					  //summation
					  for(int L=0;L<3;L++)
					  {
						  for(int M=0;M<3;M++)
						  {
							  fMpu_7(row,col)+=fDeformation_Gradient(l,L)
											  *GRAD_CHIM(i,L,M)
											  *ChiM(m,M);
						  }
					  }
					  row=row+3;
				  }
			  }
		  col++;
		  }
	  }*/

/*    for(int L=0;L<3;L++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    for(int K=0;K<3;K++)
                    {
                        //summation
                        for(int M=0;M<3;M++)
                        {
                            fMpu_1(row,col)+=fDeformation_Gradient(l,L)
                                            *GRAD_CHIM(i,M,K)
                                            *ChiM(m,M);
                        }
                        row++;
                    }
                }
            }
            col++;
        }
    }
*/


}

void FSMicromorphic2_3DT:: Form_fMpp_7()
{
    int row=0;
    int col=0;

    fMpp_7=0.0;
/*  for(int L=0;L<3;L++)
    {
        for(int i=0;i<3;i++)
        {
            for(int M=0;M<3;M++)
            {
                //
                row=0;
                for(int l=0;l<3;l++)
                {
                    for(int m=0;m<3;m++)
                    {
                        for(int k=0;k<3;k++)
                        {
                            //summation
                            for(int K=0;K<3;K++)
                            {
                                fMpp_1(row,col)+=fDeformation_Gradient(k,K)
                                                *fDeformation_Gradient(l,L)
                                                *fDeformation_Gradient(i,K)
                                                *ChiM(m,M);
                            }
                        row++;
                        }
                    }
                }
                col++;
            }
        }
    }*/

	  for(int M=0;M<3;M++)
	  {
		  for(int i=0;i<3;i++)
		  {
			  for(int K=0;K<3;K++)
			  {
				  //
				  row=0;
				  for(int l=0;l<3;l++)
				  {
					  for(int m=0;m<3;m++)
					  {
						  for(int N=0;N<3;N++)
						  {
							  //summation
							  for(int L=0;L<3;L++)
							  {
								   fMpp_7(row,col)+=fIdentity_matrix(N,K)*fDeformation_Gradient(l,L)
												  *fDeformation_Gradient(i,L)
												  *ChiM(m,M);
							  }
						  row++;
						  }
					  }
				  }
				  col++;
			  }
		  }
	  }

/*    for(int M=0;M<3;M++)
    {
        for(int i=0;i<3;i++)
        {
            for(int K=0;K<3;K++)
            {
                //
                row=K;
                for(int l=0;l<3;l++)
                {
                    for(int m=0;m<3;m++)
                    {

                        //summation
                        for(int L=0;L<3;L++)
                        {
                            fMpp_1(row,col)+=fDeformation_Gradient(l,L)
                                            *fDeformation_Gradient(i,L)
                                            *ChiM(m,M);
                        }
                        row=row+3;

                    }
                }
                col++;
            }
        }
    }

*/

}

void FSMicromorphic2_3DT:: Form_fMpu_8_1()
{
    int row=0;
    int col=0;
    fMpu_8_1=0.0;
    for(int K=0;K<3;K++)
    {
        for(int k=0;k<3;k++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    for(int N=0;N<3;N++)
                    {
                        //summation
						for(int L=0;L<3;L++)
						{
							for(int M=0;M<3;M++)
							{
								fMpu_8_1(row,col)+= fIdentity_matrix(N,K)*fDeformation_Gradient(l,L)
												  *GRAD_CHIM(k,L,M)
												  *ChiM(m,M);
							}
						}
					row++;
                    }
                }
            }
            col++;
        }
    }
}

void FSMicromorphic2_3DT:: Form_fMpu_8_2()
{
    int row=0;
    int col=0;
    fMpu_8_2=0.0;
    for(int M=0;M<3;M++)
    {
        for(int k=0;k<3;k++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    for(int K=0;K<3;K++)
                    {
                        //summation
						for(int L=0;L<3;L++)
						{
							fMpu_8_2(row,col)+= fDeformation_Gradient(l,L)
											  *GRAD_CHIM(k,K,L)
											  *ChiM(m,M);
						}
                      row++;
                    }
                }
            }
          col++;
        }
    }
}

void FSMicromorphic2_3DT:: Form_fMpp_8_1()
{
    int row=0;
    int col=0;

    fMpp_8_1=0.0;


	  for(int L=0;L<3;L++)
	  {
		  for(int k=0;k<3;k++)
		  {
			  for(int M=0;M<3;M++)
			  {
				  //
				  row=0;
				  for(int l=0;l<3;l++)
				  {
					  for(int m=0;m<3;m++)
					  {
						  for(int K=0;K<3;K++)
						  {
								  fMpp_8_1(row,col)+=fDeformation_Gradient(l,L)
												  *fDeformation_Gradient(k,K)
												  *ChiM(m,M);
						  row++;
						  }
					  }
				  }
				  col++;
			  }
		  }
	  }
}


void FSMicromorphic2_3DT:: Form_fMpp_8_2()
{
    int row=0;
    int col=0;

    fMpp_8_2=0.0;


	  for(int K=0;K<3;K++)
	  {
		  for(int k=0;k<3;k++)
		  {
			  for(int L=0;L<3;L++)
			  {
				  //
				  row=0;
				  for(int l=0;l<3;l++)
				  {
					  for(int m=0;m<3;m++)
					  {
						  for(int N=0;N<3;N++)
						  {
							  //summation
							  for(int M=0;M<3;M++)
							  {
								  fMpp_8_2(row,col)+=fIdentity_matrix(N,K)
												  *fDeformation_Gradient(l,L)
												  *fDeformation_Gradient(k,M)
												  *ChiM(m,M);
							  }
						  row++;
						  }
					  }
				  }
				  col++;
			  }
		  }
	  }
}



void FSMicromorphic2_3DT:: Form_fMpu_9()
{
    int row=0;
    int col=0;
    fMpu_9=0.0;
/*  for(int n=0;n<3;n++)
    {
        for(int i=0;i<3;i++)
        {
            //
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    for(int k=0;k<3;k++)
                    {
                        //summation
                        for(int K=0;K<3;K++)
                        {
                            for(int L=0;L<3;L++)
                            {
                                for(int M=0;M<3;M++)
                                {
                                    fMpu_2(row,col)+=fDeformation_Gradient(k,K)
                                                    *fDeformation_Gradient(l,L)
                                                    *fDeformation_Gradient(n,M)
                                                    *GRAD_CHIM(i,L,K)
                                                    *ChiM(m,M);
                                }
                            }
                        }
                        row++;
                    }
                }
            }
            col++;
        }
    }*/
   /* for(int M=0;M<3;M++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    for(int K=0;K<3;K++)
                    {
                        //summation
                        for(int L=0;L<3;L++)
                        {
                            fMpu_2(row,col)+=fDeformation_Gradient(l,L)
                                            *ChiM(m,M)
                                            *GRAD_CHIM(i,L,K);
                        }
                        row++;
                    }
                }
            }
            col++;
        }
    }*/

        for(int L=0;L<3;L++)
        {
            for(int i=0;i<3;i++)
            {
            	row=0;
            	for(int l=0;l<3;l++)
                {
                	for(int m=0;m<3;m++)
                    {
                        for(int K=0;K<3;K++)
                        {
                            //summation
                            for(int M=0;M<3;M++)
                            {
								fMpu_9(row,col)+=fDeformation_Gradient(l,L)
												*ChiM(m,M)
												*GRAD_CHIM(i,K,M);
                            }
                        }
                        row++;
                    }
                }
            	col++;
            }
        }
}

void FSMicromorphic2_3DT:: Form_fMpp_9()
{
    int row=0;
    int col=0;
    fMpp_9=0.0;
/*  for(int L=0;L<3;L++)
    {
        for(int i=0;i<3;i++)
        {
            for(int K=0;K<3;K++)
            {
                //
                row=0;
                for(int l=0;l<3;l++)
                {
                    for(int m=0;m<3;m++)
                    {
                        for(int k=0;k<3;k++)
                        {
                            //summation
                            for(int M=0;M<3;M++)
                            {
                                fMpp_2(row,col)+=fDeformation_Gradient(k,K)
                                                *fDeformation_Gradient(l,L)
                                                *fDeformation_Gradient(i,M)
                                                *ChiM(m,M);
                            }
                            row++;
                        }
                    }
                }
                col++;
            }
        }
    }*/

    for(int K=0;K<3;K++)
    {
        for(int k=0;k<3;k++)
        {
        	for(int M=0;M<3;M++)
            {
                row=0;
                for(int l=0;l<3;l++)
                {
                    for(int m=0;m<3;m++)
                    {
                        for(int N=0;N<3;N++)
                        {
                            //summation
                            for(int L=0;L<3;L++)
                            {
								fMpp_9(row,col)+=fIdentity_matrix(N,K)*fDeformation_Gradient(l,L)
												*ChiM(m,M)
												*fDeformation_Gradient(k,L);
                            }
					  row++;
                        }
                    }
                }
             col++;
            }
        }
    }
}

void FSMicromorphic2_3DT:: Form_fMpu_10()
{
    int row=0;
    int col=0;

    fMpu_10=0.0;

    for(int M=0;M<3;M++)
    {
        for(int k=0;k<3;k++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    for(int K=0;K<3;K++)
                    {
					//summation
						for(int L=0;L<3;L++)
						{
							fMpu_10(row,col)+= fDeformation_Gradient(l,L)
											  *GRAD_CHIM(k,L,K)
											  *ChiM(m,M);
						}
					row++;
                    }
                }
            }
            col++;
        }
    }
}


void FSMicromorphic2_3DT:: Form_fMpp_10()
{
    int row=0;
    int col=0;

    fMpp_10=0.0;

    for(int L=0;L<3;L++)
    {
        for(int k=0;k<3;k++)
        {
			for(int K=0;K<3;K++)
			{
				row=0;
				for(int l=0;l<3;l++)
				{
					for(int m=0;m<3;m++)
					{
						for(int N=0;N<3;N++)
						{
						//summation
							for(int M=0;M<3;M++)
							{
								fMpp_10(row,col)+= fIdentity_matrix(N,K)
												  *fDeformation_Gradient(l,L)
												  *fDeformation_Gradient(k,M)
												  *ChiM(m,M);
							}
						row++;
						}
					}
				}
				col++;
			}
		}
    }
}


void FSMicromorphic2_3DT:: Form_fMpu_11()
{
    int row=0;
    int col=0;

    fMpu_11=0.0;

    for(int K=0;K<3;K++)
    {
        for(int k=0;k<3;k++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    for(int N=0;N<3;N++)
                    {
					//summation
						for(int L=0;L<3;L++)
						{
							for(int M=0;M<3;M++)
							{
								fMpu_11(row,col)+=fIdentity_matrix(N,K)
												  *fDeformation_Gradient(l,L)
												  *GRAD_CHIM(k,M,L)
												  *ChiM(m,M);
							}
						}
					row++;
                    }
                }
            }
            col++;
        }
    }
}


void FSMicromorphic2_3DT:: Form_fMpp_11()
{
    int row=0;
    int col=0;

    fMpp_11=0.0;

    for(int M=0;M<3;M++)
    {
        for(int k=0;k<3;k++)
        {
			for(int L=0;L<3;L++)
			{
				row=0;
				for(int l=0;l<3;l++)
				{
					for(int m=0;m<3;m++)
					{
						for(int K=0;K<3;K++)
						{
							fMpp_11(row,col)+=fDeformation_Gradient(l,L)
											  *fDeformation_Gradient(k,K)
											  *ChiM(m,M);
						row++;
						}
					}
				}
			col++;
			}
		}
    }
}


void FSMicromorphic2_3DT:: Form_Jmat()
{
    int row=0;
    int col=0;
    Jmat=0.0;

    for(int A=0;A<3;A++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int K=0;K<3;K++)
            {
                for(int l=0;l<3;l++)
                {
                    //summation
                    for(int L=0;L<3;L++)
                    {
                        Jmat(row,col)+=fDeformation_Gradient(l,L)*SPK(K,L)*fIdentity_matrix(A,i);
                    }
                    row++;
                }
            }
            col++;
        }
    }


}

void FSMicromorphic2_3DT::Calculate_Cauchy_INV()
{

    double trmat=0.0;
    double press=0.0;
    Cauchy_inv=0.0;
    temp_inv=0.0;

    trmat= Sigma(0,0)+Sigma(1,1)+Sigma(2,2);
    trsigma=trmat;
    //trmat=Sigma.Trace();
    press=trmat/3;
    devsigma=fIdentity_matrix;
    devsigma*=-1;
    devsigma*=press;
    devsigma+=Sigma;

    temp_inv= devsigma.ScalarProduct();
    Cauchy_inv=sqrt(temp_inv);

/*******************************************************/

    trS=SPK.Trace();
    devSPK.SetToScaled(trS*1.0/3.0,fIdentity_matrix);
    devSPK*=-1;
    devSPK+=SPK;

    temp_inv=devSPK.ScalarProduct();
    invdevS=sqrt(temp_inv);


}


void FSMicromorphic2_3DT:: Calculate_stress_diff_INV()
{
    double trmat=0.0;
    double press=0.0;
    Rel_strs_inv=0.0;
    temp_inv=0.0;
    double Je=fFe.Det();
    double Je_1=1/Je;

    if(iConstitutiveModelType==1 || iConstitutiveModelType==2)
    {
    trmat= s_sigma_temp(0,0)+s_sigma_temp(1,1)+s_sigma_temp(2,2);
    trs_sigma=trmat;
    press=trmat/3;
    devRelsts=fIdentity_matrix;
    devRelsts*=-1;
    devRelsts*=press;
    devRelsts+=s_sigma_temp;


    temp_inv=devRelsts.ScalarProduct();
    Rel_strs_inv=sqrt(temp_inv);
    }

    if(iConstitutiveModelType==3 || iConstitutiveModelType==4)
    {
    fTemp_matrix_nsd_x_nsd2.MultABCT(fFe,SIGMA_S,fFe);
    fTemp_matrix_nsd_x_nsd2*=Je_1;

    Temp_inv=fTemp_matrix_nsd_x_nsd2.Trace();
    trs_sigma=Temp_inv;

    fTemp_matrix_nsd_x_nsd.SetToScaled(Temp_inv,fIdentity_matrix);
    fTemp_matrix_nsd_x_nsd*=-1;
    fTemp_matrix_nsd_x_nsd+=fTemp_matrix_nsd_x_nsd2;
    temp_inv=fTemp_matrix_nsd_x_nsd.ScalarProduct();
    Rel_strs_inv=sqrt(temp_inv);
    }




/********************************************/
    trSIGMA_S=SIGMA_S.Trace();

    devSIGMA_S.SetToScaled(trSIGMA_S*1.0/3.0,fIdentity_matrix);
    devSIGMA_S*=-1;
    devSIGMA_S+=SIGMA_S;

    temp_inv=devSIGMA_S.ScalarProduct();
    invdevSIGMA_S=sqrt(temp_inv);


}


void FSMicromorphic2_3DT:: Calculate_relative_strain_INV()
{
     eps=0.0;
     psi=0.0;
     deveps=0.0;
     treps=0.0;
     temp_inv=0.0;
     psi.MultATB(fDeformation_Gradient_Inverse,ChiM);
     eps  = psi;
     eps *= -1;
     eps += fIdentity_matrix;
     //trace of epsilon
     treps=eps(0,0)+eps(1,1)+eps(2,2);
     //||deveps||
     temp_inv=eps.ScalarProduct();
     deveps=sqrt(temp_inv);


}


void FSMicromorphic2_3DT:: Calculate_HOST_INV()
{
	gammastn=0.0;
	invtrgammastn=0.0;
        invdevgammastn=0.0;
        devgammastn=0.0;
        trgammastn=0.0;
	for(int k=0;k<3;k++)
	   {
	    for(int l=0;l<3;l++)
	       {
               for(int m=0;m<3;m++)
                  {
                  //summation
		  for(int K=0;K<3;K++)
		     {
 		     for(int a=0;a<3;a++)
		        {
                        for(int M=0;M<3;M++)
		           {
                           for(int R=0;R<3;R++)
   	       	              {
                                gammastn(k,l,m)+=fDeformation_Gradient_Inverse(K,k)*ChiM_Inverse(K,a)*GRAD_CHIM(a,R,M)*ChiM_Inverse(R,l)
						*fDeformation_Gradient_Inverse(M,m);
 			      }
 			    }
                         }
	 	     }
                   }
               }
           }

    temp_inv=0;
    for(int i =0;i<3;i++)
    {
        for(int a=0;a<3;a++)
        {
            trgammastn[i]+=gammastn(a,i,a);
        }
        temp_inv+=trgammastn[i]*trgammastn[i];
    }

    invtrgammastn=sqrt(temp_inv);


    for(int i=0;i<3;i++)
    {
        for(int j=0;j<3;j++)
        {
            for( int k=0;k<3;k++)
            {
                //for(a=0;a<3;a++)
                //{
                devgammastn(i,j,k)=gammastn(i,j,k)-(1.0/3.0)*fIdentity_matrix(i,j)*gammastn(0,k,0)
                                                  -(1.0/3.0)*fIdentity_matrix(i,j)*gammastn(1,k,1)
                                                  -(1.0/3.0)*fIdentity_matrix(i,j)*gammastn(2,k,2);
                //}
            }
        }
    }


    temp_inv=0;
    for(int i=0;i<3;i++)
    {
        for(int j=0;j<3;j++)
        {
            for(int k=0;k<3;k++)
            {
                temp_inv+=devgammastn(i,j,k)*devgammastn(i,j,k);
            }
        }
    }

    invdevgammastn=sqrt(temp_inv);

}


void FSMicromorphic2_3DT::Calculate_fmklm()
{
    fmklm=0.0;

    for(int k=0;k<3;k++)
    {
        for(int l=0;l<3;l++)
        {
            for(int m=0;m<3;m++)
            {
                //summation over the same terms starts

                for(int K=0;K<3;K++)
                {
                    for(int L=0;L<3;L++)
                    {
                        for(int M=0;M<3;M++)
                        {
                            fmklm(k,l,m)+=fDeformation_Gradient(k,K)*fDeformation_Gradient(l,L)*fMeKLM(K,L,M)*ChiM(m,M);
                        }
                    }
                }
            }
        }
    }
}

void FSMicromorphic2_3DT::Calculate_fmeklm()
{
    fmeklm=0.0;

    for(int k=0;k<3;k++)
    {
        for(int l=0;l<3;l++)
        {
            for(int m=0;m<3;m++)
            {
                //summation over the same terms starts

                for(int Kbar=0;Kbar<3;Kbar++)
                {
                    for(int Lbar=0;Lbar<3;Lbar++)
                    {
                        for(int Mbar=0;Mbar<3;Mbar++)
                        {
                            fmeklm(k,l,m)+=fFe(k,Kbar)*fFe(l,Lbar)*fMeKLM(Kbar,Lbar,Mbar)*fChie(m,Mbar);
                        }
                    }
                }
            }
        }
    }
}



void FSMicromorphic2_3DT:: Calculate_higher_order_tensor_INV()
{
    fdevMKLM=0.0;
    Higher_orderT_inv=0.0;
    devmklm=0.0;
    trmklm=0.0;
    trvecmklm=0.0;
    if(PlasticityCondition==0)
    {
    for(int i=0;i<3;i++)
    {
        for(int j=0;j<3;j++)
        {
            for( int k=0;k<3;k++)
            {
                //for(a=0;a<3;a++)
                //{
                devmklm(i,j,k)=fmklm(i,j,k)-(1.0/3.0)*fIdentity_matrix(i,j)*fmklm(0,0,k)
                                           -(1.0/3.0)*fIdentity_matrix(i,j)*fmklm(1,1,k)
                                           -(1.0/3.0)*fIdentity_matrix(i,j)*fmklm(2,2,k);
                //}
            }
        }
    }


    temp_inv=0;
    for(int i =0;i<3;i++)
    {
        for(int a=0;a<3;a++)
        {
            trvecmklm[i]+=fmklm(a,a,i);
        }
        temp_inv+=trvecmklm[i]*trvecmklm[i];
    }

    trmklm=sqrt(temp_inv);

    temp_inv=0;

    for(int i=0;i<3;i++)
    {
        for(int j=0;j<3;j++)
        {
            for(int k=0;k<3;k++)
            {
                temp_inv+=devmklm(i,j,k)*devmklm(i,j,k);
            }
        }
    }

    Higher_orderT_inv=sqrt(temp_inv);

/***************************************************************/
  /* Invariants for higher order stress tensor at intermediate configuration */
    for(int i=0;i<3;i++)
    {
        for(int j=0;j<3;j++)
        {
            for( int k=0;k<3;k++)
            {
                //for(a=0;a<3;a++)
                //{
                fdevMKLM(i,j,k)=fMKLM(i,j,k)-(1.0/3.0)*fIdentity_matrix(i,j)*fMKLM(0,0,k)
                                            -(1.0/3.0)*fIdentity_matrix(i,j)*fMKLM(1,1,k)
                                            -(1.0/3.0)*fIdentity_matrix(i,j)*fMKLM(2,2,k);
                //}
            }
        }
    }

    temp_inv=0;
    trvecmklm=0.0;
    for(int i =0;i<3;i++)
    {
        for(int a=0;a<3;a++)
        {
            trvecmklm[i]+=fMKLM(a,a,i);
        }
        temp_inv+=trvecmklm[i]*trvecmklm[i];
    }

    invtrMKLM=sqrt(temp_inv);
    temp_inv=0;

    for(int i=0;i<3;i++)
    {
        for(int j=0;j<3;j++)
        {
            for(int k=0;k<3;k++)
            {
                temp_inv+=fdevMKLM(i,j,k)*fdevMKLM(i,j,k);
            }
        }
    }

    invdevMKLM=sqrt(temp_inv);
    }

    if(PlasticityCondition !=0)
    {


    	   for(int i=0;i<3;i++)
    	    {
    	        for(int j=0;j<3;j++)
    	        {
    	            for( int k=0;k<3;k++)
    	            {
    	                //for(a=0;a<3;a++)
    	                //{
    	                devmklm(i,j,k)=fmeklm(i,j,k)-(1.0/3.0)*fIdentity_matrix(i,j)*fmeklm(0,0,k)
    	                                            -(1.0/3.0)*fIdentity_matrix(i,j)*fmeklm(1,1,k)
    	                                            -(1.0/3.0)*fIdentity_matrix(i,j)*fmeklm(2,2,k);
    	                //}
    	            }
    	        }
    	    }


    	    temp_inv=0;
    	    for(int i =0;i<3;i++)
    	    {
    	        for(int a=0;a<3;a++)
    	        {
    	            trvecmklm[i]+=fmeklm(a,a,i);
    	        }
    	        temp_inv+=trvecmklm[i]*trvecmklm[i];
    	    }

    	    trmklm=sqrt(temp_inv);

    	    temp_inv=0;

    	    for(int i=0;i<3;i++)
    	    {
    	        for(int j=0;j<3;j++)
    	        {
    	            for(int k=0;k<3;k++)
    	            {
    	                temp_inv+=devmklm(i,j,k)*devmklm(i,j,k);
    	            }
    	        }
    	    }

    	    Higher_orderT_inv=sqrt(temp_inv);


    	/* Invariants for higher order stress tensor at intermediate configuration */
    	    for(int i=0;i<3;i++)
    	    {
    	        for(int j=0;j<3;j++)
    	        {
    	            for( int k=0;k<3;k++)
    	            {
    	                //for(a=0;a<3;a++)
    	                //{
    	                fdevMKLM(i,j,k)=fMeKLM(i,j,k)-(1.0/3.0)*fIdentity_matrix(i,j)*fMeKLM(0,0,k)
    	                                             -(1.0/3.0)*fIdentity_matrix(i,j)*fMeKLM(1,1,k)
    	                                             -(1.0/3.0)*fIdentity_matrix(i,j)*fMeKLM(2,2,k);
    	                //}
    	            }
    	        }
    	    }

    	    temp_inv=0;
    	    trvecmklm=0.0;
    	    for(int i =0;i<3;i++)
    	    {
    	        for(int a=0;a<3;a++)
    	        {
    	            trvecmklm[i]+=fMeKLM(a,a,i);
    	        }
    	        temp_inv+=trvecmklm[i]*trvecmklm[i];
    	    }

    	    invtrMKLM=sqrt(temp_inv);
    	    temp_inv=0;

    	    for(int i=0;i<3;i++)
    	    {
    	        for(int j=0;j<3;j++)
    	        {
    	            for(int k=0;k<3;k++)
    	            {
    	                temp_inv+=fdevMKLM(i,j,k)*fdevMKLM(i,j,k);
    	            }
    	        }
    	    }

    	    invdevMKLM=sqrt(temp_inv);

    }


}


void FSMicromorphic2_3DT :: Calculate_PHI_GPHI_matrices_INV()
{
    invPhi=0.0;
    invGPhi=0.0;
    temp_inv=0.0;

    PHIMATRIX=ChiM;
    PHIMATRIX(0,0)=ChiM(0,0)-1.0;
    PHIMATRIX(1,1)=ChiM(1,1)-1.0;
    PHIMATRIX(2,2)=ChiM(2,2)-1.0;



    temp_inv=PHIMATRIX.ScalarProduct();
    //cout<<"PHIMATRIX(2,2)="<<PHIMATRIX(2,2)<<endl;
    invPhi=sqrt(temp_inv);
    //cout<<"invPhi="<<invPhi<<endl;

    GPHIMATRIX=GRAD_CHIM;


    temp_inv=0.0;
    for(int i=0;i<3;i++)
    {
        for(int j=0;j<3;j++)
        {
            for(int k=0;k<3;k++)
            {
                temp_inv+=GPHIMATRIX(i,j,k)*GPHIMATRIX(i,j,k);
            }
        }
    }
    invGPhi=sqrt(temp_inv);

}


void FSMicromorphic2_3DT:: Caculate_invdevpart_of_Matrix(const dMatrixT &fMatrix,dMatrixT &fdevfMatrix,double devinvariant)
{

 // assuming Ce~1
 //pressure term
    double pressure=0.0;
    double temp_inv=0.0;

    pressure=fMatrix(0,0)+fMatrix(1,1)+fMatrix(2,2);
    pressure*=1.0/3.0;

    fdevfMatrix=fMatrix;
    fdevfMatrix(0,0)=fdevfMatrix(0,0)-pressure;
    fdevfMatrix(1,1)=fdevfMatrix(1,1)-pressure;
    fdevfMatrix(2,2)=fdevfMatrix(2,2)-pressure;

    temp_inv= fdevfMatrix.ScalarProduct();
    devinvariant=sqrt(temp_inv);
}


/* Plasticity Matrices Forming functions start here */
void FSMicromorphic2_3DT:: Form_fV1p()
{
    int row=0;
    fV1p=0.0;
    //fTemp_matrix_nsd_x_nsd=0.0;
    //fTemp_matrix_nsd_x_nsd.MultABCT(fDeformation_Gradient,SPK,fDeformation_Gradient);
/*    for(int l=0;l<3;l++)
    {
        for(int k=0;k<3;k++)
        {
            fV1[row]=KirchhoffST(l,k);
            row++;
        }
    }*/


    fTemp_matrix_nsd_x_nsd2.MultABCT(fFe,SPK,fFe);
    fTemp_matrix_nsd_x_nsd.MultAB(fDeformation_Gradient_Inverse,fTemp_matrix_nsd_x_nsd2);
    //fTemp_matrix_nsd_x_nsd2=fFe.Inverse();
    //fTemp_matrix_nsd_x_nsd.MultAB(fTemp_matrix_nsd_x_nsd2,KirchhoffST);

    for (int Kbar=0;Kbar<3;Kbar++)
    {
        for(int l=0;l<3;l++)
        {
            fV1p[row]=fTemp_matrix_nsd_x_nsd(Kbar,l);
            row++;
        }
    }


}

void FSMicromorphic2_3DT:: Form_fV2p()
{
    int row=0;
    fV2p=0.0;
    //fTemp_matrix_nsd_x_nsd=0.0;
    fTemp_matrix_nsd_x_nsd.MultABCT(fFe,SIGMA_S,fFe);

    for (int l=0;l<3;l++)
    {
        for(int m=0;m<3;m++)
        {
            fV2p[row]=fTemp_matrix_nsd_x_nsd(m,l);
            row++;
        }
    }


}


void FSMicromorphic2_3DT:: Form_fV3p()
{
    int row=0;
    fV3p=0.0;
    fTemp_tensor_n_sd_x_n_sd_x_n_sd=0.0;


    for(int A=0;A<3;A++)
    {
    	for(int l=0;l<3;l++)
    	{
    		for(int m=0;m<3;m++)
    		{
    			//summation
                for(int Kbar=0;Kbar<3;Kbar++)
                {
                    for(int Lbar=0;Lbar<3;Lbar++)
                    {
                        for(int Mbar=0;Mbar<3;Mbar++)
                        {
                        	for(int k=0;k<3;k++)
                        	{
                                fTemp_tensor_n_sd_x_n_sd_x_n_sd(A,l,m)+=fDeformation_Gradient_Inverse(A,k)
																		*fFe(k,Kbar)
                                                                        *fFe(l,Lbar)
                                                                        *fMeKLM(Kbar,Lbar,Mbar)
                                                                        *fChie(m,Mbar);
                        	}

                        }
                    }
                }
            }
        }
     }





    for(int l=0;l<3;l++)
    {
        for(int m=0;m<3;m++)
        {
            for(int A=0;A<3;A++)
            {
                fV3p[row]=fTemp_tensor_n_sd_x_n_sd_x_n_sd(A,l,m);
                row++;
            }
        }
    }


}


void FSMicromorphic2_3DT:: Form_IJp_1()
{
    int row=0;
    int col=0;
    IJp_1=0.0;
    fTemp_matrix_nsd_x_nsd2.MultABCT(fFe,SPK,fFe);
    fTemp_matrix_nsd_x_nsd.MultAB(fDeformation_Gradient_Inverse,fTemp_matrix_nsd_x_nsd2);
    for(int M=0;M<3;M++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int A=0;A<3;A++)
            {
                for(int l=0;l<3;l++)
                {
                    //summation over the same term starts
                    for(int Nbar=0;Nbar<3;Nbar++)
                    {
                        IJp_1(row,col)+=fTemp_matrix_nsd_x_nsd(A,l)*fFe(i,Nbar)*fFp_inverse(M,Nbar);
                    }
                    row++;
                }
            }
            col++;
        }
    }
}

void FSMicromorphic2_3DT:: Form_IJp_2()
{
    int row=0;
    int col=0;
    IJp_2=0.0;
    fTemp_matrix_nsd_x_nsd2.MultABCT(fFe,SPK,fFe);
    fTemp_matrix_nsd_x_nsd.MultAB(fDeformation_Gradient_Inverse,fTemp_matrix_nsd_x_nsd2);
    for(int M=0;M<3;M++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int A=0;A<3;A++)
            {
                for(int l=0;l<3;l++)
                {
                    //summation over the same term starts
                    for(int Nbar=0;Nbar<3;Nbar++)
                         {
                        for(int Mbar=0;Mbar<3;Mbar++)
                                 {
                            IJp_2(row,col)+=fTemp_matrix_nsd_x_nsd(A,l)*fdFYdS(Mbar,Nbar)*fFe(i,Nbar)*fFp_inverse(M,Mbar);
                                 }
                         }
                         row++;
                }
            }
            col++;
        }
    }

}

void FSMicromorphic2_3DT:: Form_IJp_3()
{
    int row=0;
    int col=0;
    IJp_3=0.0;
    fTemp_matrix_nsd_x_nsd2.MultABCT(fFe,SPK,fFe);
    fTemp_matrix_nsd_x_nsd.MultAB(fDeformation_Gradient_Inverse,fTemp_matrix_nsd_x_nsd2);
    for(int M=0;M<3;M++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int A=0;A<3;A++)
            {
                for(int l=0;l<3;l++)
                {
                    //summation over the same term starts
                    for(int Nbar=0;Nbar<3;Nbar++)
                    {
                        for(int Mbar=0;Mbar<3;Mbar++)
                        {
                            IJp_3(row,col)+=fTemp_matrix_nsd_x_nsd(A,l)*fdFYdS(Mbar,Nbar)*fFe(i,Mbar)*fFp_inverse(M,Nbar);
                                 }
                    }
                    row++;
                }
            }
            col++;
        }
    }

}


void FSMicromorphic2_3DT:: Form_IJp_4()
{
    int row=0;
    int col=0;
    IJp_4=0.0;
    fTemp_matrix_nsd_x_nsd2.MultABCT(fFe,SPK,fFe);
    fTemp_matrix_nsd_x_nsd.MultAB(fDeformation_Gradient_Inverse,fTemp_matrix_nsd_x_nsd2);
    for(int M=0;M<3;M++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int A=0;A<3;A++)
            {
                for(int l=0;l<3;l++)
                {
                    //summation over the same term starts
                    for(int Abar=0;Abar<3;Abar++)
                    {
                        IJp_4(row,col)+=fTemp_matrix_nsd_x_nsd(A,l)*fChie(i,Abar)*fFp_inverse(M,Abar);
                    }
                    row++;
                }
            }
            col++;
        }
    }

}




void FSMicromorphic2_3DT:: Form_IJp_5()
{
    int row=0;
    int col=0;
    IJp_5=0.0;
    fTemp_matrix_nsd_x_nsd2.MultABCT(fFe,SPK,fFe);
    fTemp_matrix_nsd_x_nsd.MultAB(fDeformation_Gradient_Inverse,fTemp_matrix_nsd_x_nsd2);

    for(int M=0;M<3;M++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int A=0;A<3;A++)
            {
                for(int l=0;l<3;l++)
                {
                    //summation over the same term starts
                    for(int Mbar=0;Mbar<3;Mbar++)
                    {
                        for(int Nbar=0;Nbar<3;Nbar++)
                        {
                            IJp_5(row,col)+=fTemp_matrix_nsd_x_nsd(A,l)*fdFYdS(Mbar,Nbar)*fChie(i,Nbar)*fFp_inverse(M,Mbar);
                        }
                    }
                    row++;
                }
            }
            col++;
        }
    }

}

void FSMicromorphic2_3DT:: Form_IJp_6()
{
    int row=0;
    int col=0;
    IJp_6=0.0;
    fTemp_matrix_nsd_x_nsd2.MultABCT(fFe,SPK,fFe);
    fTemp_matrix_nsd_x_nsd.MultAB(fDeformation_Gradient_Inverse,fTemp_matrix_nsd_x_nsd2);

    for(int M=0;M<3;M++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int A=0;A<3;A++)
            {
                for(int l=0;l<3;l++)
                {
                    //summation over the same term starts
                    for(int Mbar=0;Mbar<3;Mbar++)
                    {
                        for(int Nbar=0;Nbar<3;Nbar++)
                        {
                            IJp_6(row,col)+=fTemp_matrix_nsd_x_nsd(A,l)*fdFYdS(Mbar,Nbar)*fChie(i,Mbar)*fFp_inverse(M,Nbar);
                        }
                    }
                    row++;
                }
            }
            col++;
        }
    }

}

void FSMicromorphic2_3DT:: Form_IJp_7()
{
    int row=0;
    int col=0;
    IJp_7=0.0;
    fTemp_matrix_nsd_x_nsd2.MultABCT(fFe,SPK,fFe);
    fTemp_matrix_nsd_x_nsd.MultAB(fDeformation_Gradient_Inverse,fTemp_matrix_nsd_x_nsd2);

    for(int M=0;M<3;M++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int A=0;A<3;A++)
            {
                for(int l=0;l<3;l++)
                {
                    //summation over the same term starts
                    for(int Abar=0;Abar<3;Abar++)
                    {
                        IJp_7(row,col)+=fTemp_matrix_nsd_x_nsd(A,l)*fFe(i,Abar)*fChip_inverse(M,Abar);
                    }
                    row++;
                }
            }
            col++;
        }
    }

}


void FSMicromorphic2_3DT:: Form_IJp_8()
{
    int row=0;
    int col=0;
    IJp_8=0.0;
    fTemp_matrix_nsd_x_nsd2.MultABCT(fFe,SPK,fFe);
    fTemp_matrix_nsd_x_nsd.MultAB(fDeformation_Gradient_Inverse,fTemp_matrix_nsd_x_nsd2);

    for(int M=0;M<3;M++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int A=0;A<3;A++)
            {
                for(int l=0;l<3;l++)
                {
                    //summation over the same term starts
                    for(int Abar=0;Abar<3;Abar++)
                    {
                        for(int Bbar=0;Bbar<3;Bbar++)
                        {
                            IJp_8(row,col)+=fTemp_matrix_nsd_x_nsd(A,l)*fdFYdS(Abar,Bbar)*fFe(i,Abar)*fChip_inverse(M,Bbar);
                        }
                    }
                    row++;
                }
            }
            col++;
        }
    }

}

void FSMicromorphic2_3DT:: Form_IJp_9()
{
    int row=0;
    int col=0;
    IJp_9=0.0;
    fTemp_matrix_nsd_x_nsd2.MultABCT(fFe,SPK,fFe);
    fTemp_matrix_nsd_x_nsd.MultAB(fDeformation_Gradient_Inverse,fTemp_matrix_nsd_x_nsd2);

    for(int M=0;M<3;M++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int A=0;A<3;A++)
            {
                for(int l=0;l<3;l++)
                {
                    //summation over the same term starts
                    for(int Abar=0;Abar<3;Abar++)
                    {
                        for(int Bbar=0;Bbar<3;Bbar++)
                        {
                            IJp_9(row,col)+=fTemp_matrix_nsd_x_nsd(A,l)*fdFYdS(Abar,Bbar)*fFe(i,Bbar)*fChip_inverse(M,Abar);
                        }
                    }
                    row++;
                }
            }
            col++;
        }
    }

}

void FSMicromorphic2_3DT:: Form_IJp_10()
{

    int row=0;
    int col=0;
    IJp_10=0.0;

    fTemp_matrix_nsd_x_nsd2.MultABCT(fFe,SPK,fFe);
    fTemp_matrix_nsd_x_nsd.MultAB(fDeformation_Gradient_Inverse,fTemp_matrix_nsd_x_nsd2);

    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int A=0;A<3;A++)
            {
                for(int l=0;l<3;l++)
                {
                    //summation over the same term starts
                    for(int Abar=0;Abar<3;Abar++)
                    {
                        IJp_10(row,col)+=fTemp_matrix_nsd_x_nsd(A,l)*fFe(i,Abar)*fFp_inverse(B,Abar);
                    }
                    row++;
                }
            }
            col++;
        }
    }


}

void FSMicromorphic2_3DT:: Form_IJp_11()
{

    int row=0;
    int col=0;
    IJp_11=0.0;


    fTemp_matrix_nsd_x_nsd2.MultABCT(fFe,SPK,fFe);
    fTemp_matrix_nsd_x_nsd.MultAB(fDeformation_Gradient_Inverse,fTemp_matrix_nsd_x_nsd2);

    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int A=0;A<3;A++)
            {
                for(int l=0;l<3;l++)
                {
                    //summation over the same term starts
                    for(int Abar=0;Abar<3;Abar++)
                    {
                          for(int Bbar=0;Bbar<3;Bbar++)
                          {
                        IJp_11(row,col)+=fTemp_matrix_nsd_x_nsd(A,l)*fdFYchidSIGMA(Abar,Bbar)*(fFe(i,Bbar)*fFp_inverse(B,Abar)+fFe(i,Abar)*fFp_inverse(B,Bbar));
                       }
                    }
                    row++;
                }
            }
            col++;
        }
    }

}
void FSMicromorphic2_3DT:: Form_IJp_12()
{

    int row=0;
    int col=0;
    IJp_12=0.0;

    fTemp_matrix_nsd_x_nsd2.MultABCT(fFe,SPK,fFe);
    fTemp_matrix_nsd_x_nsd.MultAB(fDeformation_Gradient_Inverse,fTemp_matrix_nsd_x_nsd2);


    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int A=0;A<3;A++)
            {
                for(int l=0;l<3;l++)
                {
                    //summation over the same term starts
                    for(int Abar=0;Abar<3;Abar++)
                    {
                        IJp_12(row,col)+=fTemp_matrix_nsd_x_nsd(A,l)*fChie(i,Abar)*fFp_inverse(B,Abar);
                    }
                    row++;
                }
            }
            col++;
        }
    }

}
void FSMicromorphic2_3DT:: Form_IJp_13()
{

    int row=0;
    int col=0;
    IJp_13=0.0;

    fTemp_matrix_nsd_x_nsd2.MultABCT(fFe,SPK,fFe);
    fTemp_matrix_nsd_x_nsd.MultAB(fDeformation_Gradient_Inverse,fTemp_matrix_nsd_x_nsd2);



    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int A=0;A<3;A++)
            {
                for(int l=0;l<3;l++)
                {
                    //summation over the same term starts
                    for(int Abar=0;Abar<3;Abar++)
                    {
                        IJp_13(row,col)+=fTemp_matrix_nsd_x_nsd(A,l)*fFe(i,Abar)*fChip_inverse(B,Abar);
                    }
                    row++;
                }
            }
            col++;
        }
    }

}
void FSMicromorphic2_3DT:: Form_IJp_14()
{

    int row=0;
    int col=0;
    IJp_14=0.0;

    fTemp_matrix_nsd_x_nsd2.MultABCT(fFe,SPK,fFe);
    fTemp_matrix_nsd_x_nsd.MultAB(fDeformation_Gradient_Inverse,fTemp_matrix_nsd_x_nsd2);

    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int A=0;A<3;A++)
            {
                for(int l=0;l<3;l++)
                {
                    //summation over the same term starts
                    for(int Abar=0;Abar<3;Abar++)
                    {
                          for(int Bbar=0;Bbar<3;Bbar++)
                          {
                        IJp_14(row,col)+=fTemp_matrix_nsd_x_nsd(A,l)*fdFYchidSIGMA(Abar,Bbar)*fChie(i,Bbar)*fFp_inverse(B,Abar);
                       }
                    }
                    row++;
                }
            }
            col++;
        }
    }
}

void FSMicromorphic2_3DT:: Form_IJp_15()
{

    int row=0;
    int col=0;
    IJp_15=0.0;

    fTemp_matrix_nsd_x_nsd2.MultABCT(fFe,SPK,fFe);
    fTemp_matrix_nsd_x_nsd.MultAB(fDeformation_Gradient_Inverse,fTemp_matrix_nsd_x_nsd2);

    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int A=0;A<3;A++)
            {
                for(int l=0;l<3;l++)
                {
                    //summation over the same term starts
                    for(int Abar=0;Abar<3;Abar++)
                    {
                          for(int Bbar=0;Bbar<3;Bbar++)
                          {
                        IJp_15(row,col)+=fTemp_matrix_nsd_x_nsd(A,l)*fdFYchidSIGMA(Abar,Bbar)*fFe(i,Abar)*fChip_inverse(B,Bbar);
                       }
                    }
                    row++;
                }
            }
            col++;
        }
    }


}


void FSMicromorphic2_3DT:: Form_IJp_16()
{

    int row=0;
    int col=0;
    IJp_16=0.0;

    fTemp_matrix_nsd_x_nsd2.MultABCT(fFe,SPK,fFe);
    fTemp_matrix_nsd_x_nsd.MultAB(fDeformation_Gradient_Inverse,fTemp_matrix_nsd_x_nsd2);

    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int A=0;A<3;A++)
            {
                for(int l=0;l<3;l++)
                {
                    //summation over the same term starts
                    for(int Abar=0;Abar<3;Abar++)
                    {
                          for(int Bbar=0;Bbar<3;Bbar++)
                          {
                        IJp_16(row,col)+=fTemp_matrix_nsd_x_nsd(A,l)*fdFYchidSIGMA(Abar,Bbar)*fChie(i,Abar)*fFp_inverse(B,Bbar);
                       }
                    }
                    row++;
                }
            }
            col++;
        }
    }
}



void FSMicromorphic2_3DT:: Form_IJp_17()
{

    int row=0;
    int col=0;
    IJp_17=0.0;

    fTemp_matrix_nsd_x_nsd2.MultABCT(fFe,SPK,fFe);
    fTemp_matrix_nsd_x_nsd.MultAB(fDeformation_Gradient_Inverse,fTemp_matrix_nsd_x_nsd2);

    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int A=0;A<3;A++)
            {
                for(int l=0;l<3;l++)
                {
                    //summation over the same term starts
                    for(int Abar=0;Abar<3;Abar++)
                    {
                          for(int Bbar=0;Bbar<3;Bbar++)
                          {
                        IJp_17(row,col)+=fTemp_matrix_nsd_x_nsd(A,l)*fdFYchidSIGMA(Abar,Bbar)*fFe(i,Bbar)*fChip_inverse(B,Abar);
                       }
                    }
                    row++;
                }
            }
            col++;
        }
    }
}



void FSMicromorphic2_3DT:: Form_I1e_1()
{
    int row=0;
    int col=0;
    I1e_1=0.0;

    for(int R=0;R<3;R++)
    {
        for(int m=0;m<3;m++)
        {
            row=0;

            for(int A=0;A<3;A++)
            {
                for(int l=0;l<3;l++)
                {
                    //summation over the same term
                    for(int k=0;k<3;k++)
                    {
                        for(int Kbar=0;Kbar<3;Kbar++)
                        {
                            for(int Lbar=0;Lbar<3;Lbar++)
                            {
                                I1e_1(row,col)+=fDeformation_Gradient_Inverse(A,m)*fDeformation_Gradient_Inverse(R,k)
                                *fFe(k,Kbar)*SPK(Kbar,Lbar)*fFe(l,Lbar);
                            }
                        }
                    }
                    row++;
                }
            }
            col++;
        }
    }

}

void FSMicromorphic2_3DT:: Form_I2e_1()
{
    int row=0;
    int col=0;
    I2e_1=0.0;

    for(int M=0;M<3;M++)
    {
        for(int k=0;k<3;k++)
        {
            row=0;
            for(int A=0;A<3;A++)
            {
                for(int l=0;l<3;l++)
                {
                    //summation over the same term stars here
                    for(int Kbar=0;Kbar<3;Kbar++)
                    {
                        for(int Lbar=0;Lbar<3;Lbar++)
                        {
                            I2e_1(row,col)+=fDeformation_Gradient_Inverse(A,k)*fFp_inverse(M,Kbar)
                            *SPK(Kbar,Lbar)*fFe(l,Lbar);
                        }
                    }
                    row++;
                }
            }
            col++;
        }
    }

}


void FSMicromorphic2_3DT:: Form_I2p_2()
{
    int row=0;
    int col=0;
    I2p_2=0.0;

    fFp_inverse.Inverse(fFp);
    fCe_n_inverse.Inverse(fCe_n);
    fTemp_matrix_nsd_x_nsd2.MultATBC(fdGdS_tr,fFp_n,fFp_inverse);
    fTemp_matrix_nsd_x_nsd.MultABC(fFe,fCe_n_inverse,fTemp_matrix_nsd_x_nsd2);


    for(int M=0;M<3;M++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int A=0;A<3;A++)
            {
                for(int l=0;l<3;l++)
                {
                    //summation over the same term
                    for(int k=0;k<3;k++)
                    {
                        for(int Kbar=0;Kbar<3;Kbar++)
                        {
                            for(int Lbar=0;Lbar<3;Lbar++)
                            {
                                for(int Nbar=0;Nbar<3;Nbar++)
                                {
                                    I2p_2(row,col)+=fDeformation_Gradient_Inverse(A,k)*fTemp_matrix_nsd_x_nsd(k,Kbar)
                                    *SPK(Kbar,Lbar)*fFe(l,Lbar)*fFe(i,Nbar)*fFp_inverse(M,Nbar);
                                }
                            }
                        }
                    }
                    row++;
                }
            }
            col++;
        }
    }

}

void FSMicromorphic2_3DT:: Form_I2p_3()
{
    int row=0;
    int col=0;
    I2p_3=0.0;

    fFp_inverse.Inverse(fFp);
    fCe_n_inverse.Inverse(fCe_n);
    fTemp_matrix_nsd_x_nsd2.MultATBC(fdGdS_tr,fFp_n,fFp_inverse);
    fTemp_matrix_nsd_x_nsd.MultABC(fFe,fCe_n_inverse,fTemp_matrix_nsd_x_nsd2);

    for(int M=0;M<3;M++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int A=0;A<3;A++)
            {
                for(int l=0;l<3;l++)
                {
                    //summation over the same term
                    for(int k=0;k<3;k++)
                    {
                        for(int Kbar=0;Kbar<3;Kbar++)
                        {
                            for(int Lbar=0;Lbar<3;Lbar++)
                            {
                                for(int Mbar=0;Mbar<3;Mbar++)
                                {
                                    for(int Nbar=0;Nbar<3;Nbar++)
                                    {
                                        I2p_3(row,col)+=fDeformation_Gradient_Inverse(A,k)*fTemp_matrix_nsd_x_nsd(k,Kbar)
                                        *SPK(Kbar,Lbar)*fFe(l,Lbar)*fdFYdS(Mbar,Nbar)*fFe(i,Nbar)*fFp_inverse(M,Mbar);
                                    }
                                }
                            }
                        }
                    }
                    row++;
                }
            }
            col++;
        }
    }

}

void FSMicromorphic2_3DT:: Form_I2p_4()
{
    int row=0;
    int col=0;
    I2p_4=0.0;

    fFp_inverse.Inverse(fFp);
    fCe_n_inverse.Inverse(fCe_n);
    //fdGdS_tr_transpose.Transpose(fdGdS_tr);
    //fTemp_matrix_nsd_x_nsd2.MultABC(fdGdS_tr_transpose,fFp_n,fFp_inverse);
    fTemp_matrix_nsd_x_nsd2.MultATBC(fdGdS_tr,fFp_n,fFp_inverse);
    fTemp_matrix_nsd_x_nsd.MultABC(fFe,fCe_n_inverse,fTemp_matrix_nsd_x_nsd2);

    for(int M=0;M<3;M++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int A=0;A<3;A++)
            {
                for(int l=0;l<3;l++)
                {
                    //summation over the same term
                    for(int k=0;k<3;k++)
                    {
                        for(int Kbar=0;Kbar<3;Kbar++)
                        {
                            for(int Lbar=0;Lbar<3;Lbar++)
                            {
                                for(int Mbar=0;Mbar<3;Mbar++)
                                {
                                    for(int Nbar=0;Nbar<3;Nbar++)
                                    {
                                        I2p_4(row,col)+=fDeformation_Gradient_Inverse(A,k)*fTemp_matrix_nsd_x_nsd(k,Kbar)
                                        *SPK(Kbar,Lbar)*fFe(l,Lbar)*fdFYdS(Mbar,Nbar)*fFe(i,Mbar)*fFp_inverse(M,Nbar);
                                    }
                                }
                            }
                        }
                    }
                    row++;
                }
            }
            col++;
        }
    }

}


void FSMicromorphic2_3DT:: Form_fA4()
{
	fTemp_matrix_nsd_x_nsd = 0.0;
	fTemp_matrix_nsd_x_nsd2 = 0.0;
	fA4 = 0.0;


    fTemp_matrix_nsd_x_nsd.MultABC(fDeformation_Gradient_Inverse,fFe,fCe_n_inverse);
    fTemp_matrix_nsd_x_nsd2.MultATBC(fdGdS_tr,fFp_n,fFp_inverse);
    fA4.MultAB(fTemp_matrix_nsd_x_nsd,fTemp_matrix_nsd_x_nsd2);
    fTemp_matrix_nsd_x_nsd.MultABCT(fA4,SPK,fFe);
    fA4=fTemp_matrix_nsd_x_nsd;

}


void FSMicromorphic2_3DT:: Form_I2p_5()
{
    int row=0;
    int col=0;
    I2p_5=0.0;

    for(int M=0;M<3;M++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int A=0;A<3;A++)
            {
                for(int l=0;l<3;l++)
                {
                    //summation over the same term
                    for(int Abar=0;Abar<3;Abar++)
                    {
                        I2p_5(row,col)+=fA4(A,l)*fChie(i,Abar)*fFp_inverse(M,Abar);
                    }
                    row++;
                }
            }
            col++;
        }
    }

}


void FSMicromorphic2_3DT:: Form_I2p_6()
{
    int row=0;
    int col=0;
    I2p_6=0.0;

    for(int M=0;M<3;M++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int A=0;A<3;A++)
            {
                for(int l=0;l<3;l++)
                {
                    //summation over the same term
                    for(int Mbar=0;Mbar<3;Mbar++)
                    {
                        for(int Nbar=0;Nbar<3;Nbar++)
                        {
                            I2p_6(row,col)+=fA4(A,l)*fdFYdS(Mbar,Nbar)*fChie(i,Nbar)*fFp_inverse(M,Mbar);
                        }
                    }
                    row++;
                }
            }
            col++;
        }
    }
}

void FSMicromorphic2_3DT:: Form_I2p_7()
{
    int row=0;
    int col=0;
    I2p_7=0.0;

    for(int M=0;M<3;M++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int A=0;A<3;A++)
            {
                for(int l=0;l<3;l++)
                {
                    //summation over the same term
                    for(int Mbar=0;Mbar<3;Mbar++)
                    {
                        for(int Nbar=0;Nbar<3;Nbar++)
                        {
                            I2p_7(row,col)+=fA4(A,l)*fdFYdS(Mbar,Nbar)*fChie(i,Mbar)*fFp_inverse(M,Nbar);
                        }
                    }
                    row++;
                }
            }
            col++;
        }
    }

}

void FSMicromorphic2_3DT:: Form_I2p_8()
{
    int row=0;
    int col=0;
    I2p_8=0.0;

    for(int M=0;M<3;M++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int A=0;A<3;A++)
            {
                for(int l=0;l<3;l++)
                {
                    //summation over the same term
                    for(int Abar=0;Abar<3;Abar++)
                    {
                        I2p_8(row,col)+=fA4(A,l)*fFe(i,Abar)*fChip_inverse(M,Abar);
                    }
                    row++;
                }
            }
            col++;
        }
    }

}

void FSMicromorphic2_3DT:: Form_I2p_9()
{
    int row=0;
    int col=0;
    I2p_9=0.0;

    for(int M=0;M<3;M++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int A=0;A<3;A++)
            {
                for(int l=0;l<3;l++)
                {
                    //summation over the same term
                    for(int Abar=0;Abar<3;Abar++)
                    {
                        for(int Bbar=0;Bbar<3;Bbar++)
                        {
                            I2p_9(row,col)+=fA4(A,l)*fdFYdS(Abar,Bbar)*fFe(i,Abar)*fChip_inverse(M,Bbar);
                        }
                    }
                    row++;
                }
            }
            col++;
        }
    }

}

void FSMicromorphic2_3DT:: Form_I2p_10()
{
    int row=0;
    int col=0;
    I2p_10=0.0;

    for(int M=0;M<3;M++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int A=0;A<3;A++)
            {
                for(int l=0;l<3;l++)
                {
                    //summation over the same term
                    for(int Abar=0;Abar<3;Abar++)
                    {
                        for(int Bbar=0;Bbar<3;Bbar++)
                        {
                            I2p_10(row,col)+=fA4(A,l)*fdFYdS(Abar,Bbar)*fFe(i,Bbar)*fChip_inverse(M,Abar);
                        }
                    }
                    row++;
                }
            }
            col++;
        }
    }

}


void FSMicromorphic2_3DT:: Form_I2p_11()
{

    int row=0;
    int col=0;
    I2p_11=0.0;



    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int A=0;A<3;A++)
            {
                for(int l=0;l<3;l++)
                {
                    //summation over the same term starts
                    for(int Abar=0;Abar<3;Abar++)
                    {
                        I2p_11(row,col)+=fA4(A,l)*fFe(i,Abar)*fFp_inverse(B,Abar);
                    }
                    row++;
                }
            }
            col++;
        }
    }


}
void FSMicromorphic2_3DT:: Form_I2p_12()
{

    int row=0;
    int col=0;
    I2p_12=0.0;




    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int A=0;A<3;A++)
            {
                for(int l=0;l<3;l++)
                {
                    //summation over the same term starts
                    for(int Abar=0;Abar<3;Abar++)
                    {
                          for(int Bbar=0;Bbar<3;Bbar++)
                          {
                        I2p_12(row,col)+=fA4(A,l)*fdFYchidSIGMA(Abar,Bbar)*(fFe(i,Bbar)*fFp_inverse(B,Abar)+fFe(i,Abar)*fFp_inverse(B,Bbar));
                       }
                    }
                    row++;
                }
            }
            col++;
        }
    }

}
void FSMicromorphic2_3DT:: Form_I2p_13()
{

    int row=0;
    int col=0;
    I2p_13=0.0;


    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int A=0;A<3;A++)
            {
                for(int l=0;l<3;l++)
                {
                    //summation over the same term starts
                    for(int Abar=0;Abar<3;Abar++)
                    {
                        I2p_13(row,col)+=fA4(A,l)*fChie(i,Abar)*fFp_inverse(B,Abar);
                    }
                    row++;
                }
            }
            col++;
        }
    }

}
void FSMicromorphic2_3DT:: Form_I2p_14()
{

    int row=0;
    int col=0;
    I2p_14=0.0;




    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int A=0;A<3;A++)
            {
                for(int l=0;l<3;l++)
                {
                    //summation over the same term starts
                    for(int Abar=0;Abar<3;Abar++)
                    {
                        I2p_14(row,col)+=fA4(A,l)*fFe(i,Abar)*fChip_inverse(B,Abar);
                    }
                    row++;
                }
            }
            col++;
        }
    }

}
void FSMicromorphic2_3DT:: Form_I2p_15()
{

    int row=0;
    int col=0;
    I2p_15=0.0;



    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int A=0;A<3;A++)
            {
                for(int l=0;l<3;l++)
                {
                    //summation over the same term starts
                    for(int Abar=0;Abar<3;Abar++)
                    {
                          for(int Bbar=0;Bbar<3;Bbar++)
                          {
                        I2p_15(row,col)+=fA4(A,l)*fdFYchidSIGMA(Abar,Bbar)*fChie(i,Bbar)*fFp_inverse(B,Abar);
                          }
                    }
                    row++;
                }
            }
            col++;
        }
    }
}

void FSMicromorphic2_3DT:: Form_I2p_16()
{

    int row=0;
    int col=0;
    I2p_16=0.0;



    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int A=0;A<3;A++)
            {
                for(int l=0;l<3;l++)
                {
                    //summation over the same term starts
                    for(int Abar=0;Abar<3;Abar++)
                    {
                          for(int Bbar=0;Bbar<3;Bbar++)
                          {
                        I2p_16(row,col)+=fA4(A,l)*fdFYchidSIGMA(Abar,Bbar)*fFe(i,Abar)*fChip_inverse(B,Bbar);
                       }
                    }
                    row++;
                }
            }
            col++;
        }
    }


}


void FSMicromorphic2_3DT:: Form_I2p_17()
{

    int row=0;
    int col=0;
    I2p_17=0.0;


    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int A=0;A<3;A++)
            {
                for(int l=0;l<3;l++)
                {
                    //summation over the same term starts
                    for(int Abar=0;Abar<3;Abar++)
                    {
                          for(int Bbar=0;Bbar<3;Bbar++)
                          {
                        I2p_17(row,col)+=fA4(A,l)*fdFYchidSIGMA(Abar,Bbar)*fChie(i,Abar)*fFp_inverse(B,Bbar);
                       }
                    }
                    row++;
                }
            }
            col++;
        }
    }
}



void FSMicromorphic2_3DT:: Form_I2p_18()
{

    int row=0;
    int col=0;
    I2p_18=0.0;


    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int A=0;A<3;A++)
            {
                for(int l=0;l<3;l++)
                {
                    //summation over the same term starts
                    for(int Abar=0;Abar<3;Abar++)
                    {
                          for(int Bbar=0;Bbar<3;Bbar++)
                          {
                        I2p_18(row,col)+=fA4(A,l)*fdFYchidSIGMA(Abar,Bbar)*fFe(i,Bbar)*fChip_inverse(B,Abar);
                          }
                    }
                    row++;
                }
            }
            col++;
        }
    }
}











void FSMicromorphic2_3DT:: Form_I3e_1()
{
    int row=0;
    int col=0;
    I3e_1=0.0;

    for(int M=0;M<3;M++)
    {
        for(int i=0;i<3;i++)
        {
            //row
            row=0;
            for(int A=0; A<3;A++)
            {
                for(int l=0;l<3;l++)
                {
                    //summation over the same terms
                    for (int k=0;k<3;k++)
                    {
                        for(int Kbar=0;Kbar<3;Kbar++)
                        {
                            for(int Nbar=0;Nbar<3;Nbar++)
                            {
                                for(int Lbar=0;Lbar<3;Lbar++)
                                {
                                    I3e_1(row,col)+= fDeformation_Gradient_Inverse(A,k)*fFe(k,Kbar)
                                    *fFe(i,Nbar)*fFp_inverse(M,Nbar)*fIdentity_matrix(Kbar,Lbar)
                                    *fFe(l,Lbar);
                                }
                            }
                        }
                    }
                    row++;
                }
            }
            col++;
        }
    }


}


void FSMicromorphic2_3DT:: Form_I3e_2()
{
    int row=0;
    int col=0;
    I3e_2=0.0;

    for(int M=0;M<3;M++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int A=0;A<3;A++)
            {
                for(int l=0;l<3;l++)
                {
                    //summation over the same term
                    for(int k=0;k<3;k++)
                    {
                        for(int Kbar=0;Kbar<3;Kbar++)
                        {
                            for(int Lbar=0;Lbar<3;Lbar++)
                            {
                                I3e_2(row,col)+=fDeformation_Gradient_Inverse(A,k)*fFe(k,Kbar)
                                *fFe(i,Lbar)*fFp_inverse(M,Kbar)*fFe(l,Lbar);
                            }
                        }
                    }
                    row++;
                }
            }
            col++;
        }
    }

}


void FSMicromorphic2_3DT:: Form_I3e_3()
{
    int row=0;
    int col=0;
    I3e_3=0.0;

    for(int M=0;M<3;M++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int N=0;N<3;N++)
            {
                for(int l=0;l<3;l++)
                {
                    //summation over the same term
                    for(int k=0;k<3;k++)
                    {
                        for(int Kbar=0;Kbar<3;Kbar++)
                        {
                            for(int Lbar=0;Lbar<3;Lbar++)
                            {
                                I3e_3(row,col)+=fDeformation_Gradient_Inverse(N,k)*fFe(k,Kbar)
                                *fFe(i,Kbar)*fFp_inverse(M,Lbar)*fFe(l,Lbar);
                            }
                        }
                    }
                    row++;
                }
            }
            col++;
        }
    }

}

void FSMicromorphic2_3DT:: Form_I3p_4()
{
    int row=0;
    int col=0;
    I3p_4=0.0;

    for(int M=0;M<3;M++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int A=0;A<3;A++)
            {
                for(int l=0;l<3;l++)
                {
                    //summation over the same term
                    for(int Kbar=0;Kbar<3;Kbar++)
                    {
                        for(int Lbar=0;Lbar<3;Lbar++)
                        {
                            for(int Nbar=0;Nbar<3;Nbar++)
                            {
                                for(int k=0;k<3;k++)
                                {
                                    I3p_4(row,col)+=fDeformation_Gradient_Inverse(A,k)*fFe(k,Kbar)
                                    *fFe(l,Lbar)*fIdentity_matrix(Kbar,Lbar)
                                    *fFe(i,Nbar)*fFp_inverse(M,Nbar);
                                }
                            }
                        }
                    }
                    row++;
                }
            }
            col++;
        }
    }
} //end function



void FSMicromorphic2_3DT:: Form_I3p_5()
{
    int row=0;
    int col=0;
    I3p_5=0.0;

    for(int M=0;M<3;M++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int N=0;N<3;N++)
            {
                for(int l=0;l<3;l++)
                {
                    //summation over the same term
                    for(int Mbar=0;Mbar<3;Mbar++)
                    {
                        for(int Nbar=0;Nbar<3;Nbar++)
                        {
                            for(int Kbar=0;Kbar<3;Kbar++)
                            {
                                for(int Lbar=0;Lbar<3;Lbar++)
                                {
                                    for(int k=0;k<3;k++)
                                    {
                                        I3p_5(row,col)+=fDeformation_Gradient_Inverse(N,k)*fFe(k,Kbar)
                                        *fFe(i,Mbar)*fFp_inverse(M,Nbar)*fFe(l,Lbar)
                                        *fdFYdS(Mbar,Nbar)*fIdentity_matrix(Kbar,Lbar);
                                    }
                                }
                            }
                        }
                    }
                    row++;
                }
            }
            col++;
        }
    }

}


void FSMicromorphic2_3DT:: Form_I3p_6()
{
    int row=0;
    int col=0;
    I3p_6=0.0;

    for(int M=0;M<3;M++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int N=0;N<3;N++)
            {
                for(int l=0;l<3;l++)
                {
                    //summation over the same term
                    for(int Mbar=0;Mbar<3;Mbar++)
                    {
                        for(int Nbar=0;Nbar<3;Nbar++)
                        {
                            for(int Kbar=0;Kbar<3;Kbar++)
                            {
                                for(int Lbar=0;Lbar<3;Lbar++)
                                {
                                    for(int k=0;k<3;k++)
                                    {
                                        I3p_6(row,col)+=fDeformation_Gradient_Inverse(N,k)*fFe(k,Kbar)
                                        *fFe(i,Nbar)*fFp_inverse(M,Mbar)*fFe(l,Lbar)
                                        *fdFYdS(Mbar,Nbar)*fIdentity_matrix(Kbar,Lbar);
                                    }
                                }
                            }
                        }
                    }
                    row++;
                }
            }
            col++;
        }
    }

}

void FSMicromorphic2_3DT:: Form_I3p_7()
{
    int row=0;
    int col=0;
    I3p_7=0.0;

    for(int M=0;M<3;M++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int N=0;N<3;N++)
            {
                for(int l=0;l<3;l++)
                {
                    //summation over the same term
                    for(int k=0;k<3;k++)
                    {
                        for(int Kbar=0;Kbar<3;Kbar++)
                        {
                            for(int Lbar=0;Lbar<3;Lbar++)
                            {
                                for(int Abar=0;Abar<3;Abar++)
                                {
                                    I3p_7(row,col)+=fDeformation_Gradient_Inverse(N,k)*fFe(k,Kbar)
                                    *fA1(Lbar,Kbar)*fFe(l,Lbar)*fFe(i,Abar)*fFp_inverse(M,Abar);
                                }
                            }
                        }
                    }
                    row++;
                }
            }
            col++;
        }
    }

}


void FSMicromorphic2_3DT:: Form_I3p_8()
{
    int row=0;
    int col=0;
    I3p_8=0.0;

    for(int M=0;M<3;M++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int N=0;N<3;N++)
            {
                for(int l=0;l<3;l++)
                {
                    //summation over the same term
                    for(int k=0;k<3;k++)
                    {
                        for(int Kbar=0;Kbar<3;Kbar++)
                        {
                            for(int Lbar=0;Lbar<3;Lbar++)
                            {
                                for(int Mbar=0;Mbar<3;Mbar++)
                                {
                                    for(int Nbar=0;Nbar<3;Nbar++)
                                    {
                                        I3p_8(row,col)+=fDeformation_Gradient_Inverse(N,k)*fFe(k,Kbar)
                                        *fA1(Lbar,Kbar)*fFe(l,Lbar)*fdFYdS(Mbar,Nbar)*fFe(i,Nbar)
                                        *fFp_inverse(M,Mbar);
                                    }
                                }
                            }
                        }
                    }
                    row++;
                }
            }
            col++;
        }
    }

}



void FSMicromorphic2_3DT:: Form_I3p_9()
{
    int row=0;
    int col=0;
    I3p_9=0.0;

    for(int M=0;M<3;M++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int N=0;N<3;N++)
            {
                for(int l=0;l<3;l++)
                {
                    //summation over the same term
                    for(int k=0;k<3;k++)
                    {
                        for(int Kbar=0;Kbar<3;Kbar++)
                        {
                            for(int Lbar=0;Lbar<3;Lbar++)
                            {
                                for(int Mbar=0;Mbar<3;Mbar++)
                                {
                                    for(int Nbar=0;Nbar<3;Nbar++)
                                    {
                                        I3p_9(row,col)+=fDeformation_Gradient_Inverse(N,k)*fFe(k,Kbar)
                                        *fA1(Lbar,Kbar)*fFe(l,Lbar)*fdFYdS(Mbar,Nbar)*fFe(i,Mbar)
                                        *fFp_inverse(M,Nbar);
                                    }
                                }
                            }
                        }
                    }
                    row++;
                }
            }
            col++;
        }
    }

}


void FSMicromorphic2_3DT:: Form_I3p_10()
{
    int row=0;
    int col=0;
    I3p_10=0.0;

    for(int M=0;M<3;M++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int N=0;N<3;N++)
            {
                for(int l=0;l<3;l++)
                {
                    //summation over the same term
                    for(int k=0;k<3;k++)
                    {
                        for(int Kbar=0;Kbar<3;Kbar++)
                        {
                            for(int Lbar=0;Lbar<3;Lbar++)
                            {
                                for(int Abar=0;Abar<3;Abar++)
                                {
                                    I3p_10(row,col)+=fDeformation_Gradient_Inverse(N,k)*fFe(k,Kbar)
                                    *fA1(Kbar,Lbar)*fFe(l,Lbar)*fFe(i,Abar)
                                    *fFp_inverse(M,Abar);
                                }
                            }
                        }
                    }
                    row++;
                }
            }
            col++;
        }
    }

}



void FSMicromorphic2_3DT:: Form_I3p_11()
{
    int row=0;
    int col=0;
    I3p_11=0.0;

    for(int M=0;M<3;M++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int N=0;N<3;N++)
            {
                for(int l=0;l<3;l++)
                {
                    //summation over the same term
                    for(int Kbar=0;Kbar<3;Kbar++)
                    {
                        for(int Mbar=0;Mbar<3;Mbar++)
                        {
                            for(int Nbar=0;Nbar<3;Nbar++)
                            {
                                for(int k=0;k<3;k++)
                                {
                                    for(int Lbar=0;Lbar<3;Lbar++)
                                    {
                                        I3p_11(row,col)+=fDeformation_Gradient_Inverse(N,k)*fFe(k,Kbar)
                                        *fA1(Kbar,Lbar)*fFe(l,Lbar)*fdFYdS(Mbar,Nbar)*fFe(i,Nbar)
                                        *fFp_inverse(M,Mbar);
                                    }
                                }
                            }
                        }
                    }
                    row++;
                }
            }
            col++;
        }
    }

}


void FSMicromorphic2_3DT:: Form_I3p_12()
{
    int row=0;
    int col=0;
    I3p_12=0.0;

    for(int M=0;M<3;M++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int N=0;N<3;N++)
            {
                for(int l=0;l<3;l++)
                {
                    //summation over the same term
                    for(int Kbar=0;Kbar<3;Kbar++)
                    {
                        for(int Mbar=0;Mbar<3;Mbar++)
                        {
                            for(int Nbar=0;Nbar<3;Nbar++)
                            {
                                for(int k=0;k<3;k++)
                                {
                                    for(int Lbar=0;Lbar<3;Lbar++)
                                    {
                                        I3p_12(row,col)+=fDeformation_Gradient_Inverse(N,k)*fFe(k,Kbar)
                                        *fA1(Kbar,Lbar)*fFe(l,Lbar)*fdFYdS(Mbar,Nbar)*fFe(i,Mbar)
                                        *fFp_inverse(M,Nbar);
                                    }
                                }
                            }
                        }
                    }
                    row++;
                }
            }
            col++;
        }
    }

}


void FSMicromorphic2_3DT:: Form_I3e_13()
{
    int row=0;
    int col=0;
    I3e_13=0.0;
    fTemp_matrix_nsd_x_nsd2.MultABCT(fFe,fIdentity_matrix,fFe);
    fTemp_matrix_nsd_x_nsd.MultAB(fDeformation_Gradient_Inverse,fTemp_matrix_nsd_x_nsd2);
    for(int M=0;M<3;M++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int A=0;A<3;A++)
            {
                for(int l=0;l<3;l++)
                {
                    //summation over the same term
                    for(int Abar=0;Abar<3;Abar++)
                    {
                        I3e_13(row,col)+=fTemp_matrix_nsd_x_nsd(A,l)*fChie(i,Abar)*fFp_inverse(M,Abar);
                    }
                    row++;
                }
            }
            col++;
        }
    }

}

void FSMicromorphic2_3DT:: Form_I3e_14()
{
    int row=0;
    int col=0;
    I3e_14=0.0;
    for(int M=0;M<3;M++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int A=0;A<3;A++)
            {
                for(int l=0;l<3;l++)
                {
                    //summation over the same term
                    for(int Kbar=0;Kbar<3;Kbar++)
                    {
                        for(int Lbar=0;Lbar<3;Lbar++)
                        {
                            for(int k=0;k<3;k++)
                            {
                                I3e_14(row,col)+=fDeformation_Gradient_Inverse(A,k)*fFe(k,Kbar)*fFe(l,Lbar)
                                                *fChie(i,Lbar)*fFp_inverse(M,Kbar);
                            }
                        }
                    }
                    row++;
                }
            }
            col++;
        }
    }

}

void FSMicromorphic2_3DT:: Form_I3e_15()
{
    int row=0;
    int col=0;
    I3e_15=0.0;
    for(int M=0;M<3;M++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int A=0;A<3;A++)
            {
                for(int l=0;l<3;l++)
                {
                    //summation over the same term
                    for(int Kbar=0;Kbar<3;Kbar++)
                    {
                        for(int Lbar=0;Lbar<3;Lbar++)
                        {
                            for(int k=0;k<3;k++)
                            {
                                I3e_15(row,col)+=fDeformation_Gradient_Inverse(A,k)*fFe(k,Kbar)*fFe(l,Lbar)
                                                *fChie(i,Kbar)*fFp_inverse(M,Lbar);
                            }
                        }
                    }
                    row++;
                }
            }
            col++;
        }
    }

}

void FSMicromorphic2_3DT:: Form_I3p_16()
{
    int row=0;
    int col=0;
    I3p_16=0.0;
    fTemp_matrix_nsd_x_nsd2.MultABCT(fFe,fIdentity_matrix,fFe);
    fTemp_matrix_nsd_x_nsd.MultAB(fDeformation_Gradient_Inverse,fTemp_matrix_nsd_x_nsd2);


    for(int M=0;M<3;M++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int A=0;A<3;A++)
            {
                for(int l=0;l<3;l++)
                {
                    //summation over the same term
                    for(int Abar=0;Abar<3;Abar++)
                    {
                        I3p_16(row,col)+=fTemp_matrix_nsd_x_nsd(A,l)*fChie(i,Abar)*fFp_inverse(M,Abar);
                    }
                    row++;
                }
            }
            col++;
        }
    }

}

void FSMicromorphic2_3DT:: Form_I3p_17()
{
    int row=0;
    int col=0;
    I3p_17=0.0;
    fTemp_matrix_nsd_x_nsd2.MultABCT(fFe,fIdentity_matrix,fFe);
    fTemp_matrix_nsd_x_nsd.MultAB(fDeformation_Gradient_Inverse,fTemp_matrix_nsd_x_nsd2);


    for(int M=0;M<3;M++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int A=0;A<3;A++)
            {
                for(int l=0;l<3;l++)
                {
                    //summation over the same term
                    for(int Nbar=0;Nbar<3;Nbar++)
                    {
                        for(int Mbar=0;Mbar<3;Mbar++)
                        {
                            I3p_17(row,col)+=fTemp_matrix_nsd_x_nsd(A,l)*fdFYdS(Mbar,Nbar)*fChie(i,Nbar)*fFp_inverse(M,Mbar);
                        }
                    }
                    row++;
                }
            }
            col++;
        }
    }

}


void FSMicromorphic2_3DT:: Form_I3p_18()
{
    int row=0;
    int col=0;
    I3p_18=0.0;
    fTemp_matrix_nsd_x_nsd2.MultABCT(fFe,fIdentity_matrix,fFe);
    fTemp_matrix_nsd_x_nsd.MultAB(fDeformation_Gradient_Inverse,fTemp_matrix_nsd_x_nsd2);


    for(int M=0;M<3;M++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int A=0;A<3;A++)
            {
                for(int l=0;l<3;l++)
                {
                    //summation over the same term
                    for(int Nbar=0;Nbar<3;Nbar++)
                    {
                        for(int Mbar=0;Mbar<3;Mbar++)
                        {
                            I3p_18(row,col)+=fTemp_matrix_nsd_x_nsd(A,l)*fdFYdS(Mbar,Nbar)*fChie(i,Mbar)*fFp_inverse(M,Nbar);
                        }
                    }
                    row++;
                }
            }
            col++;
        }
    }

}
void FSMicromorphic2_3DT:: Form_I3p_19()
{
    int row=0;
    int col=0;
    I3p_19=0.0;
    fTemp_matrix_nsd_x_nsd.Transpose(fA1);
    fTemp_matrix_nsd_x_nsd+=fA1;
    fTemp_matrix_nsd_x_nsd2.MultABCT(fFe,fTemp_matrix_nsd_x_nsd,fFe);
    fTemp_matrix_nsd_x_nsd.MultAB(fDeformation_Gradient_Inverse,fTemp_matrix_nsd_x_nsd2);

//  fTemp_matrix_nsd_x_nsd2.MultABC(fDeformation_Gradient_Inverse,fFe,fTemp_matrix_nsd_x_nsd);
//  fTemp_matrix_nsd_x_nsd.MultABT(fTemp_matrix_nsd_x_nsd2,fFe);


    for(int M=0;M<3;M++)
        {
            for(int i=0;i<3;i++)
            {
                row=0;
                for(int A=0;A<3;A++)
                {
                    for(int l=0;l<3;l++)
                    {
                        //summation over the same term
                        for(int Abar=0;Abar<3;Abar++)
                        {
                            I3p_19(row,col)+=fTemp_matrix_nsd_x_nsd(A,l)*fChie(i,Abar)*fFp_inverse(M,Abar);
                        }
                        row++;
                    }
                }
                col++;
            }
        }
}

void FSMicromorphic2_3DT:: Form_I3p_20()
{
    int row=0;
    int col=0;
    I3p_20=0.0;
    fTemp_matrix_nsd_x_nsd.Transpose(fA1);
    fTemp_matrix_nsd_x_nsd+=fA1;
    fTemp_matrix_nsd_x_nsd2.MultABCT(fFe,fTemp_matrix_nsd_x_nsd,fFe);
    fTemp_matrix_nsd_x_nsd.MultAB(fDeformation_Gradient_Inverse,fTemp_matrix_nsd_x_nsd2);

    for(int M=0;M<3;M++)
        {
            for(int i=0;i<3;i++)
            {
                row=0;
                for(int A=0;A<3;A++)
                {
                    for(int l=0;l<3;l++)
                    {
                        //summation over the same term
                        for(int Mbar=0;Mbar<3;Mbar++)
                        {
                            for(int Nbar=0;Nbar<3;Nbar++)
                            {
                                I3p_20(row,col)+=fTemp_matrix_nsd_x_nsd(A,l)*fdFYdS(Mbar,Nbar)*fChie(i,Nbar)*fFp_inverse(M,Mbar);
                            }
                        }
                        row++;
                    }
                }
                col++;
            }
        }
}


void FSMicromorphic2_3DT:: Form_I3p_21()
{
    int row=0;
    int col=0;
    I3p_21=0.0;
    fTemp_matrix_nsd_x_nsd.Transpose(fA1);
    fTemp_matrix_nsd_x_nsd+=fA1;
    fTemp_matrix_nsd_x_nsd2.MultABCT(fFe,fTemp_matrix_nsd_x_nsd,fFe);
    fTemp_matrix_nsd_x_nsd.MultAB(fDeformation_Gradient_Inverse,fTemp_matrix_nsd_x_nsd2);

    for(int M=0;M<3;M++)
        {
            for(int i=0;i<3;i++)
            {
                row=0;
                for(int A=0;A<3;A++)
                {
                    for(int l=0;l<3;l++)
                    {
                        //summation over the same term
                        for(int Mbar=0;Mbar<3;Mbar++)
                        {
                            for(int Nbar=0;Nbar<3;Nbar++)
                            {
                                I3p_21(row,col)+=fTemp_matrix_nsd_x_nsd(A,l)*fdFYdS(Mbar,Nbar)*fChie(i,Mbar)*fFp_inverse(M,Nbar);
                            }
                        }
                        row++;
                    }
                }
                col++;
            }
        }
}

void FSMicromorphic2_3DT:: Form_I3p_22()
{
    int row=0;
    int col=0;
    I3p_22=0.0;

    fTemp_matrix_nsd_x_nsd2.MultABCT(fFe,fIdentity_matrix,fFe);
    fTemp_matrix_nsd_x_nsd.MultAB(fDeformation_Gradient_Inverse,fTemp_matrix_nsd_x_nsd2);

//  fTemp_matrix_nsd_x_nsd2.MultABC(fDeformation_Gradient_Inverse,fFe,fIdentity_matrix);
//  fTemp_matrix_nsd_x_nsd.MultABT(fTemp_matrix_nsd_x_nsd2,fFe);

    for(int M=0;M<3;M++)
        {
            for(int i=0;i<3;i++)
            {
                row=0;
                for(int A=0;A<3;A++)
                {
                    for(int l=0;l<3;l++)
                    {
                        //summation over the same term
                        for(int Abar=0;Abar<3;Abar++)
                        {
                            I3p_22(row,col)+=fTemp_matrix_nsd_x_nsd(A,l)*fFe(i,Abar)*fFp_inverse(M,Abar);
                        }
                        row++;
                    }
                }
                col++;
            }
        }
}


void FSMicromorphic2_3DT:: Form_I3p_23()
{
    int row=0;
    int col=0;
    I3p_23=0.0;

    fTemp_matrix_nsd_x_nsd2.MultABCT(fFe,fIdentity_matrix,fFe);
    fTemp_matrix_nsd_x_nsd.MultAB(fDeformation_Gradient_Inverse,fTemp_matrix_nsd_x_nsd2);

    for(int M=0;M<3;M++)
        {
            for(int i=0;i<3;i++)
            {
                row=0;
                for(int A=0;A<3;A++)
                {
                    for(int l=0;l<3;l++)
                    {
                        //summation over the same term
                        for(int Mbar=0;Mbar<3;Mbar++)
                        {
                            for(int Nbar=0;Nbar<3;Nbar++)
                            {
                                I3p_23(row,col)+=fTemp_matrix_nsd_x_nsd(A,l)*fdFYdS(Mbar,Nbar)
                                                *(fFe(i,Mbar)*fFp_inverse(M,Nbar)+fFe(i,Nbar)*fFp_inverse(M,Mbar));
                            }
                        }
                        row++;
                    }
                }
                col++;
            }
        }
}


void FSMicromorphic2_3DT:: Form_I3p_24()
{
    int row=0;
    int col=0;
    I3p_24=0.0;

    fTemp_matrix_nsd_x_nsd2.MultABCT(fFe,fIdentity_matrix,fFe);
    fTemp_matrix_nsd_x_nsd.MultAB(fDeformation_Gradient_Inverse,fTemp_matrix_nsd_x_nsd2);

    for(int M=0;M<3;M++)
        {
            for(int i=0;i<3;i++)
            {
                row=0;
                for(int A=0;A<3;A++)
                {
                    for(int l=0;l<3;l++)
                    {
                        //summation over the same term
                        for(int Abar=0;Abar<3;Abar++)
                        {
                            I3p_24(row,col)+=fTemp_matrix_nsd_x_nsd(A,l)*fChie(i,Abar)*fFp_inverse(M,Abar);
                        }
                        row++;
                    }
                }
                col++;
            }
        }
}

void FSMicromorphic2_3DT:: Form_I3p_25()
{
    int row=0;
    int col=0;
    I3p_25=0.0;

    fTemp_matrix_nsd_x_nsd2.MultABC(fDeformation_Gradient_Inverse,fFe,fIdentity_matrix);
    fTemp_matrix_nsd_x_nsd.MultABT(fTemp_matrix_nsd_x_nsd2,fFe);

    for(int M=0;M<3;M++)
        {
            for(int i=0;i<3;i++)
            {
                row=0;
                for(int A=0;A<3;A++)
                {
                    for(int l=0;l<3;l++)
                    {
                        //summation over the same term
                        for(int Mbar=0;Mbar<3;Mbar++)
                        {
                            for(int Nbar=0;Nbar<3;Nbar++)
                            {
                                I3p_25(row,col)+=fTemp_matrix_nsd_x_nsd(A,l)*fdFYdS(Mbar,Nbar)
                                                *fChie(i,Nbar)*fFp_inverse(M,Mbar);
                            }
                        }
                        row++;
                    }
                }
                col++;
            }
        }
}

void FSMicromorphic2_3DT:: Form_I3p_26()
{
    int row=0;
    int col=0;
    I3p_26=0.0;

    fTemp_matrix_nsd_x_nsd2.MultABCT(fFe,fIdentity_matrix,fFe);
    fTemp_matrix_nsd_x_nsd.MultAB(fDeformation_Gradient_Inverse,fTemp_matrix_nsd_x_nsd2);

    for(int M=0;M<3;M++)
        {
            for(int i=0;i<3;i++)
            {
                row=0;
                for(int A=0;A<3;A++)
                {
                    for(int l=0;l<3;l++)
                    {
                        //summation over the same term
                        for(int Mbar=0;Mbar<3;Mbar++)
                        {
                            for(int Nbar=0;Nbar<3;Nbar++)
                            {
                                I3p_26(row,col)+=fTemp_matrix_nsd_x_nsd(A,l)*fdFYdS(Mbar,Nbar)
                                                *fChie(i,Mbar)*fFp_inverse(M,Nbar);
                            }
                        }
                        row++;
                    }
                }
                col++;
            }
        }
}

void FSMicromorphic2_3DT:: Form_I3p_27()
{
    int row=0;
    int col=0;
    I3p_27=0.0;

    fTemp_matrix_nsd_x_nsd2.MultABCT(fDeformation_Gradient_Inverse,fFe,fN1);
    fTemp_matrix_nsd_x_nsd.MultABT(fTemp_matrix_nsd_x_nsd2,fFe);

    for(int M=0;M<3;M++)
        {
            for(int i=0;i<3;i++)
            {
                row=0;
                for(int A=0;A<3;A++)
                {
                    for(int l=0;l<3;l++)
                    {
                        //summation over the same term
                        for(int Abar=0;Abar<3;Abar++)
                        {
                            I3p_27(row,col)+=fTemp_matrix_nsd_x_nsd(A,l)*fFe(i,Abar)*fFp_inverse(M,Abar);
                        }
                        row++;
                    }
                }
                col++;
            }
        }
}

void FSMicromorphic2_3DT:: Form_I3p_28()
{
    int row=0;
    int col=0;
    I3p_28=0.0;

    fTemp_matrix_nsd_x_nsd2.MultABCT(fDeformation_Gradient_Inverse,fFe,fN1);
    fTemp_matrix_nsd_x_nsd.MultABT(fTemp_matrix_nsd_x_nsd2,fFe);

    for(int M=0;M<3;M++)
        {
            for(int i=0;i<3;i++)
            {
                row=0;
                for(int A=0;A<3;A++)
                {
                    for(int l=0;l<3;l++)
                    {
                        //summation over the same term
                        for(int Mbar=0;Mbar<3;Mbar++)
                        {
                            for(int Nbar=0;Nbar<3;Nbar++)
                            {
                                I3p_28(row,col)+=fTemp_matrix_nsd_x_nsd(A,l)*fdFYdS(Mbar,Nbar)
                                                *(fFe(i,Mbar)*fFp_inverse(M,Nbar)+fFe(i,Nbar)*fFp_inverse(M,Mbar));
                            }
                        }
                        row++;
                    }
                }
                col++;
            }
        }
}

void FSMicromorphic2_3DT:: Form_I3p_29()
{
    int row=0;
    int col=0;
    I3p_29=0.0;

    fTemp_matrix_nsd_x_nsd2.MultABCT(fDeformation_Gradient_Inverse,fFe,fN1);
    fTemp_matrix_nsd_x_nsd.MultABT(fTemp_matrix_nsd_x_nsd2,fFe);

    for(int M=0;M<3;M++)
        {
            for(int i=0;i<3;i++)
            {
                row=0;
                for(int A=0;A<3;A++)
                {
                    for(int l=0;l<3;l++)
                    {
                        //summation over the same term
                        for(int Abar=0;Abar<3;Abar++)
                        {
                            I3p_29(row,col)+=fTemp_matrix_nsd_x_nsd(A,l)*fChie(i,Abar)*fFp_inverse(M,Abar);
                        }
                        row++;
                    }
                }
                col++;
            }
        }
}


void FSMicromorphic2_3DT:: Form_I3p_30()
{
    int row=0;
    int col=0;
    I3p_30=0.0;

    fTemp_matrix_nsd_x_nsd2.MultABCT(fDeformation_Gradient_Inverse,fFe,fN1);
    fTemp_matrix_nsd_x_nsd.MultABT(fTemp_matrix_nsd_x_nsd2,fFe);

    for(int M=0;M<3;M++)
        {
            for(int i=0;i<3;i++)
            {
                row=0;
                for(int A=0;A<3;A++)
                {
                    for(int l=0;l<3;l++)
                    {
                        //summation over the same term
                        for(int Mbar=0;Mbar<3;Mbar++)
                        {
                            for(int Nbar=0;Nbar<3;Nbar++)
                            {
                                I3p_30(row,col)+=fTemp_matrix_nsd_x_nsd(A,l)*fdFYdS(Mbar,Nbar)
                                                *fChie(i,Nbar)*fFp_inverse(M,Mbar);
                            }
                        }
                        row++;
                    }
                }
                col++;
            }
        }
}


void FSMicromorphic2_3DT:: Form_I3p_31()
{
    int row=0;
    int col=0;
    I3p_31=0.0;

    fTemp_matrix_nsd_x_nsd2.MultABCT(fDeformation_Gradient_Inverse,fFe,fN1);
    fTemp_matrix_nsd_x_nsd.MultABT(fTemp_matrix_nsd_x_nsd2,fFe);

    for(int M=0;M<3;M++)
        {
            for(int i=0;i<3;i++)
            {
                row=0;
                for(int A=0;A<3;A++)
                {
                    for(int l=0;l<3;l++)
                    {
                        //summation over the same term
                        for(int Mbar=0;Mbar<3;Mbar++)
                        {
                            for(int Nbar=0;Nbar<3;Nbar++)
                            {
                                I3p_31(row,col)+=fTemp_matrix_nsd_x_nsd(A,l)*fdFYdS(Mbar,Nbar)
                                                *fChie(i,Mbar)*fFp_inverse(M,Nbar);
                            }
                        }
                        row++;
                    }
                }
                col++;
            }
        }
}


void FSMicromorphic2_3DT:: Form_I3p_32()
{
    int row=0;
    int col=0;
    I3p_32=0.0;

    fTemp_matrix_nsd_x_nsd2.MultABC(fDeformation_Gradient_Inverse,fFe,fN1);
    fTemp_matrix_nsd_x_nsd.MultABT(fTemp_matrix_nsd_x_nsd2,fFe);

    for(int M=0;M<3;M++)
        {
            for(int i=0;i<3;i++)
            {
                row=0;
                for(int A=0;A<3;A++)
                {
                    for(int l=0;l<3;l++)
                    {
                        //summation over the same term
                        for(int Abar=0;Abar<3;Abar++)
                        {
                            I3p_32(row,col)+=fTemp_matrix_nsd_x_nsd(A,l)*fFe(i,Abar)*fFp_inverse(M,Abar);
                        }
                        row++;
                    }
                }
                col++;
            }
        }
}

void FSMicromorphic2_3DT:: Form_I3p_33()
{
    int row=0;
    int col=0;
    I3p_33=0.0;

    fTemp_matrix_nsd_x_nsd2.MultABC(fDeformation_Gradient_Inverse,fFe,fN1);
    fTemp_matrix_nsd_x_nsd.MultABT(fTemp_matrix_nsd_x_nsd2,fFe);

    for(int M=0;M<3;M++)
        {
            for(int i=0;i<3;i++)
            {
                row=0;
                for(int A=0;A<3;A++)
                {
                    for(int l=0;l<3;l++)
                    {
                        //summation over the same term
                        for(int Mbar=0;Mbar<3;Mbar++)
                        {
                            for(int Nbar=0;Nbar<3;Nbar++)
                            {
                                I3p_33(row,col)+=fTemp_matrix_nsd_x_nsd(A,l)*fdFYdS(Mbar,Nbar)*(fFe(i,Nbar)*fFp_inverse(M,Mbar)+fFe(i,Mbar)*fFp_inverse(M,Nbar));
                            }
                        }
                        row++;
                    }
                }
                col++;
            }
        }
}

void FSMicromorphic2_3DT:: Form_I3p_34()
{
    int row=0;
    int col=0;
    I3p_34=0.0;

    fTemp_matrix_nsd_x_nsd2.MultABC(fDeformation_Gradient_Inverse,fFe,fN1);
    fTemp_matrix_nsd_x_nsd.MultABT(fTemp_matrix_nsd_x_nsd2,fFe);

    for(int M=0;M<3;M++)
        {
            for(int i=0;i<3;i++)
            {
                row=0;
                for(int A=0;A<3;A++)
                {
                    for(int l=0;l<3;l++)
                    {
                        //summation over the same term
                        for(int Abar=0;Abar<3;Abar++)
                        {
                            I3p_34(row,col)+=fTemp_matrix_nsd_x_nsd(A,l)*fChie(i,Abar)*fFp_inverse(M,Abar);
                        }
                        row++;
                    }
                }
                col++;
            }
        }
}


void FSMicromorphic2_3DT:: Form_I3p_35()
{
    int row=0;
    int col=0;
    I3p_35=0.0;

    fTemp_matrix_nsd_x_nsd2.MultABC(fDeformation_Gradient_Inverse,fFe,fN1);
    fTemp_matrix_nsd_x_nsd.MultABT(fTemp_matrix_nsd_x_nsd2,fFe);

    for(int M=0;M<3;M++)
        {
            for(int i=0;i<3;i++)
            {
                row=0;
                for(int A=0;A<3;A++)
                {
                    for(int l=0;l<3;l++)
                    {
                        //summation over the same term
                        for(int Mbar=0;Mbar<3;Mbar++)
                        {
                            for(int Nbar=0;Nbar<3;Nbar++)
                            {
                                I3p_35(row,col)+=fTemp_matrix_nsd_x_nsd(A,l)*fdFYdS(Mbar,Nbar)*fChie(i,Nbar)*fFp_inverse(M,Mbar);
                            }
                        }
                        row++;
                    }
                }
                col++;
            }
        }
}

void FSMicromorphic2_3DT:: Form_I3p_36()
{
    int row=0;
    int col=0;
    I3p_36=0.0;

    fTemp_matrix_nsd_x_nsd2.MultABC(fDeformation_Gradient_Inverse,fFe,fN1);
    fTemp_matrix_nsd_x_nsd.MultABT(fTemp_matrix_nsd_x_nsd2,fFe);

    for(int M=0;M<3;M++)
        {
            for(int i=0;i<3;i++)
            {
                row=0;
                for(int A=0;A<3;A++)
                {
                    for(int l=0;l<3;l++)
                    {
                        //summation over the same term
                        for(int Mbar=0;Mbar<3;Mbar++)
                        {
                            for(int Nbar=0;Nbar<3;Nbar++)
                            {
                                I3p_36(row,col)+=fTemp_matrix_nsd_x_nsd(A,l)*fdFYdS(Mbar,Nbar)*fChie(i,Mbar)*fFp_inverse(M,Nbar);
                            }
                        }
                        row++;
                    }
                }
                col++;
            }
        }
}


void FSMicromorphic2_3DT:: Form_I3e_37()
{
    int row=0;
    int col=0;
    I3e_37=0.0;

    fTemp_matrix_nsd_x_nsd2.MultABCT(fFe,fIdentity_matrix,fFe);
    fTemp_matrix_nsd_x_nsd.MultAB(fDeformation_Gradient_Inverse,fTemp_matrix_nsd_x_nsd2);

    for(int M=0;M<3;M++)
        {
            for(int i=0;i<3;i++)
            {
                row=0;
                for(int A=0;A<3;A++)
                {
                    for(int l=0;l<3;l++)
                    {
                        //summation over the same term
                        for(int Abar=0;Abar<3;Abar++)
                        {
                            I3e_37(row,col)+=fTemp_matrix_nsd_x_nsd(A,l)*fFe(i,Abar)*fChip_inverse(M,Abar);
                        }
                        row++;
                    }
                }
                col++;
            }
        }
}

void FSMicromorphic2_3DT:: Form_I3e_38()
{
    int row=0;
    int col=0;
    I3e_38=0.0;

    fTemp_matrix_nsd_x_nsd.MultABCT(fDeformation_Gradient_Inverse,fFe,fFe);
    fTemp_matrix_nsd_x_nsd2.MultABT(fFe,fChip_inverse);

    for(int M=0;M<3;M++)
        {
            for(int i=0;i<3;i++)
            {
                row=0;
                for(int A=0;A<3;A++)
                {
                    for(int l=0;l<3;l++)
                    {
                        //summation over the same term
                        I3e_38(row,col)+=fTemp_matrix_nsd_x_nsd(A,i)*fTemp_matrix_nsd_x_nsd2(l,M);
                        row++;
                    }
                }
                col++;
            }
        }
}

void FSMicromorphic2_3DT:: Form_I3e_39()
{
    int row=0;
    int col=0;
    I3e_39=0.0;

    fTemp_matrix_nsd_x_nsd.MultABCT(fDeformation_Gradient_Inverse,fFe,fChip_inverse);
    fTemp_matrix_nsd_x_nsd2.MultABT(fFe,fFe);

    for(int M=0;M<3;M++)
        {
            for(int i=0;i<3;i++)
            {
                row=0;
                for(int A=0;A<3;A++)
                {
                    for(int l=0;l<3;l++)
                    {
                        //summation over the same term
                        I3e_39(row,col)+=fTemp_matrix_nsd_x_nsd(A,M)*fTemp_matrix_nsd_x_nsd2(l,i);
                        row++;
                    }
                }
                col++;
            }
        }
}

void FSMicromorphic2_3DT:: Form_I3p_40()
{
    int row=0;
    int col=0;
    I3p_40=0.0;

    fTemp_matrix_nsd_x_nsd2.MultABCT(fFe,fIdentity_matrix,fFe);
    fTemp_matrix_nsd_x_nsd.MultAB(fDeformation_Gradient_Inverse,fTemp_matrix_nsd_x_nsd2);

    for(int M=0;M<3;M++)
        {
            for(int i=0;i<3;i++)
            {
                row=0;
                for(int A=0;A<3;A++)
                {
                    for(int l=0;l<3;l++)
                    {

                        //summation over the same term
                        for(int Abar=0;Abar<3;Abar++)
                        {
                            I3p_40(row,col)+=fTemp_matrix_nsd_x_nsd(A,l)*fFe(i,Abar)*fChip_inverse(M,Abar);
                        }
                        row++;
                    }
                }
                col++;
            }
        }
}

void FSMicromorphic2_3DT:: Form_I3p_41()
{
    int row=0;
    int col=0;
    I3p_41=0.0;

    fTemp_matrix_nsd_x_nsd2.MultABCT(fFe,fIdentity_matrix,fFe);
    fTemp_matrix_nsd_x_nsd.MultAB(fDeformation_Gradient_Inverse,fTemp_matrix_nsd_x_nsd2);

    for(int M=0;M<3;M++)
        {
            for(int i=0;i<3;i++)
            {
                row=0;
                for(int A=0;A<3;A++)
                {
                    for(int l=0;l<3;l++)
                    {

                        //summation over the same term
                        for(int Abar=0;Abar<3;Abar++)
                        {
                            for(int Bbar=0;Bbar<3;Bbar++)
                            {
                                I3p_41(row,col)+=fTemp_matrix_nsd_x_nsd(A,l)*fdFYdS(Abar,Bbar)*fFe(i,Abar)*fChip_inverse(M,Bbar);
                            }
                        }
                        row++;
                    }
                }
                col++;
            }
        }
}

void FSMicromorphic2_3DT:: Form_I3p_42()
{
    int row=0;
    int col=0;
    I3p_42=0.0;

    fTemp_matrix_nsd_x_nsd2.MultABCT(fFe,fIdentity_matrix,fFe);
    fTemp_matrix_nsd_x_nsd.MultAB(fDeformation_Gradient_Inverse,fTemp_matrix_nsd_x_nsd2);

    for(int M=0;M<3;M++)
        {
            for(int i=0;i<3;i++)
            {
                row=0;
                for(int A=0;A<3;A++)
                {
                    for(int l=0;l<3;l++)
                    {

                        //summation over the same term
                        for(int Abar=0;Abar<3;Abar++)
                        {
                            for(int Bbar=0;Bbar<3;Bbar++)
                            {
                                I3p_42(row,col)+=fTemp_matrix_nsd_x_nsd(A,l)*fdFYdS(Abar,Bbar)*fFe(i,Bbar)*fChip_inverse(M,Abar);
                            }
                        }
                        row++;
                    }
                }
                col++;
            }
        }
}


void FSMicromorphic2_3DT:: Form_I3p_43()
{
    int row=0;
    int col=0;
    I3p_43=0.0;

    fTemp_matrix_nsd_x_nsd=fA1;
    fTemp_matrix_nsd_x_nsd2.Transpose(fA1);
    fTemp_matrix_nsd_x_nsd+=fTemp_matrix_nsd_x_nsd2;

    fTemp_matrix_nsd_x_nsd2.MultABCT(fFe,fTemp_matrix_nsd_x_nsd,fFe);
    fTemp_matrix_nsd_x_nsd.MultAB(fDeformation_Gradient_Inverse,fTemp_matrix_nsd_x_nsd2);

    for(int M=0;M<3;M++)
        {
            for(int i=0;i<3;i++)
            {
                row=0;
                for(int A=0;A<3;A++)
                {
                    for(int l=0;l<3;l++)
                    {

                        //summation over the same term
                        for(int Abar=0;Abar<3;Abar++)
                        {
                            I3p_43(row,col)+=fTemp_matrix_nsd_x_nsd(A,l)*fFe(i,Abar)*fChip_inverse(M,Abar);
                        }
                        row++;
                    }
                }
                col++;
            }
        }
}


void FSMicromorphic2_3DT:: Form_I3p_44()
{
    int row=0;
    int col=0;
    I3p_44=0.0;

    fTemp_matrix_nsd_x_nsd=fA1;
    fTemp_matrix_nsd_x_nsd2.Transpose(fA1);
    fTemp_matrix_nsd_x_nsd+=fTemp_matrix_nsd_x_nsd2;

    fTemp_matrix_nsd_x_nsd2.MultABCT(fFe,fTemp_matrix_nsd_x_nsd,fFe);
    fTemp_matrix_nsd_x_nsd.MultAB(fDeformation_Gradient_Inverse,fTemp_matrix_nsd_x_nsd2);

    for(int M=0;M<3;M++)
        {
            for(int i=0;i<3;i++)
            {
                row=0;
                for(int A=0;A<3;A++)
                {
                    for(int l=0;l<3;l++)
                    {

                        //summation over the same term
                        for(int Abar=0;Abar<3;Abar++)
                        {
                            for(int Bbar=0;Bbar<3;Bbar++)
                            {
                                I3p_44(row,col)+=fTemp_matrix_nsd_x_nsd(A,l)*fdFYdS(Abar,Bbar)*fFe(i,Abar)*fChip_inverse(M,Bbar);
                            }
                        }
                        row++;
                    }
                }
                col++;
            }
        }
}

void FSMicromorphic2_3DT:: Form_I3p_45()
{
    int row=0;
    int col=0;
    I3p_45=0.0;

    fTemp_matrix_nsd_x_nsd=fA1;
    fTemp_matrix_nsd_x_nsd2.Transpose(fA1);
    fTemp_matrix_nsd_x_nsd+=fTemp_matrix_nsd_x_nsd2;

    fTemp_matrix_nsd_x_nsd2.MultABCT(fFe,fTemp_matrix_nsd_x_nsd,fFe);
    fTemp_matrix_nsd_x_nsd.MultAB(fDeformation_Gradient_Inverse,fTemp_matrix_nsd_x_nsd2);

    for(int M=0;M<3;M++)
        {
            for(int i=0;i<3;i++)
            {
                row=0;
                for(int A=0;A<3;A++)
                {
                    for(int l=0;l<3;l++)
                    {

                        //summation over the same term
                        for(int Abar=0;Abar<3;Abar++)
                        {
                            for(int Bbar=0;Bbar<3;Bbar++)
                            {
                                I3p_45(row,col)+=fTemp_matrix_nsd_x_nsd(A,l)*fdFYdS(Abar,Bbar)*fFe(i,Bbar)*fChip_inverse(M,Abar);
                            }
                        }
                        row++;
                    }
                }
                col++;
            }
        }
}


void FSMicromorphic2_3DT:: Form_I3p_46()
{
    int row=0;
    int col=0;
    I3p_46=0.0;

    fTemp_matrix_nsd_x_nsd2.MultABCT(fFe,fIdentity_matrix,fFe);
    fTemp_matrix_nsd_x_nsd.MultAB(fDeformation_Gradient_Inverse,fTemp_matrix_nsd_x_nsd2);

    for(int M=0;M<3;M++)
        {
            for(int i=0;i<3;i++)
            {
                row=0;
                for(int A=0;A<3;A++)
                {
                    for(int l=0;l<3;l++)
                    {

                        //summation over the same term
                        for(int Abar=0;Abar<3;Abar++)
                        {
                            I3p_46(row,col)+=fTemp_matrix_nsd_x_nsd(A,l)*fFe(i,Abar)*fChip_inverse(M,Abar);
                        }
                        row++;
                    }
                }
                col++;
            }
        }
}


void FSMicromorphic2_3DT:: Form_I3p_47()
{
    int row=0;
    int col=0;
    I3p_47=0.0;

    fTemp_matrix_nsd_x_nsd2.MultABCT(fFe,fIdentity_matrix,fFe);
    fTemp_matrix_nsd_x_nsd.MultAB(fDeformation_Gradient_Inverse,fTemp_matrix_nsd_x_nsd2);

    for(int M=0;M<3;M++)
        {
            for(int i=0;i<3;i++)
            {
                row=0;
                for(int A=0;A<3;A++)
                {
                    for(int l=0;l<3;l++)
                    {

                        //summation over the same term
                        for(int Abar=0;Abar<3;Abar++)
                        {
                            for(int Bbar=0;Bbar<3;Bbar++)
                            {
                                I3p_47(row,col)+=fTemp_matrix_nsd_x_nsd(A,l)*fdFYdS(Abar,Bbar)*fFe(i,Abar)*fChip_inverse(M,Bbar);
                            }
                        }
                        row++;
                    }
                }
                col++;
            }
        }
}

void FSMicromorphic2_3DT:: Form_I3p_48()
{
    int row=0;
    int col=0;
    I3p_48=0.0;

    fTemp_matrix_nsd_x_nsd2.MultABCT(fFe,fIdentity_matrix,fFe);
    fTemp_matrix_nsd_x_nsd.MultAB(fDeformation_Gradient_Inverse,fTemp_matrix_nsd_x_nsd2);

    for(int M=0;M<3;M++)
        {
            for(int i=0;i<3;i++)
            {
                row=0;
                for(int A=0;A<3;A++)
                {
                    for(int l=0;l<3;l++)
                    {

                        //summation over the same term
                        for(int Abar=0;Abar<3;Abar++)
                        {
                            for(int Bbar=0;Bbar<3;Bbar++)
                            {
                                I3p_48(row,col)+=fTemp_matrix_nsd_x_nsd(A,l)*fdFYdS(Abar,Bbar)*fFe(i,Bbar)*fChip_inverse(M,Abar);
                            }
                        }
                        row++;
                    }
                }
                col++;
            }
        }
}


void FSMicromorphic2_3DT:: Form_I3p_49()
{
    int row=0;
    int col=0;
    I3p_49=0.0;

    fTemp_matrix_nsd_x_nsd2.MultABCT(fDeformation_Gradient_Inverse,fFe,fN1);
    fTemp_matrix_nsd_x_nsd.MultABT(fTemp_matrix_nsd_x_nsd2,fFe);

    for(int M=0;M<3;M++)
        {
            for(int i=0;i<3;i++)
            {
                row=0;
                for(int A=0;A<3;A++)
                {
                    for(int l=0;l<3;l++)
                    {

                        //summation over the same term
                        for(int Abar=0;Abar<3;Abar++)
                        {
                            I3p_49(row,col)+=fTemp_matrix_nsd_x_nsd(A,l)*fFe(i,Abar)*fChip_inverse(M,Abar);
                        }
                        row++;
                    }
                }
                col++;
            }
        }
}



void FSMicromorphic2_3DT:: Form_I3p_50()
{
    int row=0;
    int col=0;
    I3p_50=0.0;

    fTemp_matrix_nsd_x_nsd2.MultABCT(fDeformation_Gradient_Inverse,fFe,fN1);
    fTemp_matrix_nsd_x_nsd.MultABT(fTemp_matrix_nsd_x_nsd2,fFe);

    for(int M=0;M<3;M++)
        {
            for(int i=0;i<3;i++)
            {
                row=0;
                for(int A=0;A<3;A++)
                {
                    for(int l=0;l<3;l++)
                    {

                        //summation over the same term
                        for(int Abar=0;Abar<3;Abar++)
                        {
                            for(int Bbar=0;Bbar<3;Bbar++)
                            {
                                I3p_50(row,col)+=fTemp_matrix_nsd_x_nsd(A,l)*fdFYdS(Abar,Bbar)*fFe(i,Abar)*fChip_inverse(M,Bbar);
                            }
                        }
                        row++;
                    }
                }
                col++;
            }
        }
}

void FSMicromorphic2_3DT:: Form_I3p_51()
{
    int row=0;
    int col=0;
    I3p_51=0.0;

    fTemp_matrix_nsd_x_nsd2.MultABCT(fDeformation_Gradient_Inverse,fFe,fN1);
    fTemp_matrix_nsd_x_nsd.MultABT(fTemp_matrix_nsd_x_nsd2,fFe);

    for(int M=0;M<3;M++)
        {
            for(int i=0;i<3;i++)
            {
                row=0;
                for(int A=0;A<3;A++)
                {
                    for(int l=0;l<3;l++)
                    {

                        //summation over the same term
                        for(int Abar=0;Abar<3;Abar++)
                        {
                            for(int Bbar=0;Bbar<3;Bbar++)
                            {
                                I3p_51(row,col)+=fTemp_matrix_nsd_x_nsd(A,l)*fdFYdS(Abar,Bbar)*fFe(i,Bbar)*fChip_inverse(M,Abar);
                            }
                        }
                        row++;
                    }
                }
                col++;
            }
        }
}


void FSMicromorphic2_3DT:: Form_I3p_52()
{
    int row=0;
    int col=0;
    I3p_52=0.0;

    fTemp_matrix_nsd_x_nsd2.MultABC(fDeformation_Gradient_Inverse,fFe,fN1);
    fTemp_matrix_nsd_x_nsd.MultABT(fTemp_matrix_nsd_x_nsd2,fFe);

    for(int M=0;M<3;M++)
        {
            for(int i=0;i<3;i++)
            {
                row=0;
                for(int A=0;A<3;A++)
                {
                    for(int l=0;l<3;l++)
                    {

                        //summation over the same term
                        for(int Abar=0;Abar<3;Abar++)
                        {
                            I3p_52(row,col)+=fTemp_matrix_nsd_x_nsd(A,l)*fFe(i,Abar)*fChip_inverse(M,Abar);
                        }
                        row++;
                    }
                }
                col++;
            }
        }
}

void FSMicromorphic2_3DT:: Form_I3p_53()
{
    int row=0;
    int col=0;
    I3p_53=0.0;

    fTemp_matrix_nsd_x_nsd2.MultABC(fDeformation_Gradient_Inverse,fFe,fN1);
    fTemp_matrix_nsd_x_nsd.MultABT(fTemp_matrix_nsd_x_nsd2,fFe);

    for(int M=0;M<3;M++)
        {
            for(int i=0;i<3;i++)
            {
                row=0;
                for(int A=0;A<3;A++)
                {
                    for(int l=0;l<3;l++)
                    {

                        //summation over the same term
                        for(int Abar=0;Abar<3;Abar++)
                        {
                            for(int Bbar=0;Bbar<3;Bbar++)
                            {
                                I3p_53(row,col)+=fTemp_matrix_nsd_x_nsd(A,l)*fdFYdS(Abar,Bbar)*fFe(i,Abar)*fChip_inverse(M,Bbar);
                            }
                        }
                        row++;
                    }
                }
                col++;
            }
        }
}

void FSMicromorphic2_3DT:: Form_I3p_54()
{
    int row=0;
    int col=0;
    I3p_54=0.0;

    fTemp_matrix_nsd_x_nsd2.MultABC(fDeformation_Gradient_Inverse,fFe,fN1);
    fTemp_matrix_nsd_x_nsd.MultABT(fTemp_matrix_nsd_x_nsd2,fFe);

    for(int M=0;M<3;M++)
        {
            for(int i=0;i<3;i++)
            {
                row=0;
                for(int A=0;A<3;A++)
                {
                    for(int l=0;l<3;l++)
                    {

                        //summation over the same term
                        for(int Abar=0;Abar<3;Abar++)
                        {
                            for(int Bbar=0;Bbar<3;Bbar++)
                            {
                                I3p_54(row,col)+=fTemp_matrix_nsd_x_nsd(A,l)*fdFYdS(Abar,Bbar)*fFe(i,Bbar)*fChip_inverse(M,Abar);
                            }
                        }
                        row++;
                    }
                }
                col++;
            }
        }
}


void FSMicromorphic2_3DT:: Form_I3p_55()
{

    int row=0;
    int col=0;
    I3p_55=0.0;

    fTemp_matrix_nsd_x_nsd2.MultABCT(fFe,fIdentity_matrix,fFe);
    fTemp_matrix_nsd_x_nsd.MultAB(fDeformation_Gradient_Inverse,fTemp_matrix_nsd_x_nsd2);


     for(int B=0;B<3;B++)
        {
            for(int i=0;i<3;i++)
            {
                row=0;
                for(int A=0;A<3;A++)
                {
                    for(int l=0;l<3;l++)
                    {

                        //summation over the same term
                        for(int Abar=0;Abar<3;Abar++)
                        {
                            I3p_55(row,col)+=fTemp_matrix_nsd_x_nsd(A,l)*fFe(i,Abar)*fFp_inverse(B,Abar);

                        }
                        row++;
                    }
                }
                col++;
            }
        }

}

void FSMicromorphic2_3DT:: Form_I3p_56()
{

    int row=0;
    int col=0;
    I3p_56=0.0;

    fTemp_matrix_nsd_x_nsd2.MultABCT(fFe,fIdentity_matrix,fFe);
    fTemp_matrix_nsd_x_nsd.MultAB(fDeformation_Gradient_Inverse,fTemp_matrix_nsd_x_nsd2);


     for(int B=0;B<3;B++)
        {
            for(int i=0;i<3;i++)
            {
                row=0;
                for(int A=0;A<3;A++)
                {
                    for(int l=0;l<3;l++)
                    {

                        //summation over the same term
                        for(int Abar=0;Abar<3;Abar++)
                        {
                        for(int Bbar=0;Bbar<3;Bbar++)
                            {

                            I3p_56(row,col)+=fTemp_matrix_nsd_x_nsd(A,l)*fdFYchidSIGMA(Abar,Bbar)*(fFe(i,Bbar)*fFp_inverse(B,Abar)+fFe(i,Abar)*fFp_inverse(B,Bbar));
                            }
                        }
                        row++;
                    }
                }
                col++;
            }
        }

}

void FSMicromorphic2_3DT:: Form_I3p_57()
{

    int row=0;
    int col=0;
    I3p_57=0.0;

    fTemp_matrix_nsd_x_nsd2.MultABCT(fFe,fIdentity_matrix,fFe);
    fTemp_matrix_nsd_x_nsd.MultAB(fDeformation_Gradient_Inverse,fTemp_matrix_nsd_x_nsd2);


     for(int B=0;B<3;B++)
        {
            for(int i=0;i<3;i++)
            {
                row=0;
                for(int A=0;A<3;A++)
                {
                    for(int l=0;l<3;l++)
                    {

                        //summation over the same term
                        for(int Abar=0;Abar<3;Abar++)
                        {
                                   I3p_57(row,col)+=fTemp_matrix_nsd_x_nsd(A,l)*fChie(i,Abar)*fFp_inverse(B,Abar);

                        }
                        row++;
                    }
                }
                col++;
            }
        }

}



void FSMicromorphic2_3DT:: Form_I3p_58()
{

    int row=0;
    int col=0;
    I3p_58=0.0;

    fTemp_matrix_nsd_x_nsd2.MultABCT(fFe,fIdentity_matrix,fFe);
    fTemp_matrix_nsd_x_nsd.MultAB(fDeformation_Gradient_Inverse,fTemp_matrix_nsd_x_nsd2);


     for(int B=0;B<3;B++)
        {
            for(int i=0;i<3;i++)
            {
                row=0;
                for(int A=0;A<3;A++)
                {
                    for(int l=0;l<3;l++)
                    {

                        //summation over the same term
                        for(int Abar=0;Abar<3;Abar++)
                        {
                                   I3p_58(row,col)+=fTemp_matrix_nsd_x_nsd(A,l)*fFe(i,Abar)*fChip_inverse(B,Abar);

                        }
                        row++;
                    }
                }
                col++;
            }
        }

}


void FSMicromorphic2_3DT:: Form_I3p_59()
{

    int row=0;
    int col=0;
    I3p_59=0.0;

    fTemp_matrix_nsd_x_nsd2.MultABCT(fFe,fIdentity_matrix,fFe);
    fTemp_matrix_nsd_x_nsd.MultAB(fDeformation_Gradient_Inverse,fTemp_matrix_nsd_x_nsd2);


     for(int B=0;B<3;B++)
        {
            for(int i=0;i<3;i++)
            {
                row=0;
                for(int A=0;A<3;A++)
                {
                    for(int l=0;l<3;l++)
                    {

                        //summation over the same term
                        for(int Abar=0;Abar<3;Abar++)
                        {
                            for(int Bbar=0;Bbar<3;Bbar++)
                            {
                               I3p_59(row,col)+=fTemp_matrix_nsd_x_nsd(A,l)*fdFYchidSIGMA(Abar,Bbar)*fChie(i,Bbar)*fFp_inverse(B,Abar);
                            }
                        }
                        row++;
                    }
                }
                col++;
            }
        }

}

void FSMicromorphic2_3DT:: Form_I3p_60()
{

    int row=0;
    int col=0;
    I3p_60=0.0;

    fTemp_matrix_nsd_x_nsd2.MultABCT(fFe,fIdentity_matrix,fFe);
    fTemp_matrix_nsd_x_nsd.MultAB(fDeformation_Gradient_Inverse,fTemp_matrix_nsd_x_nsd2);


     for(int B=0;B<3;B++)
        {
            for(int i=0;i<3;i++)
            {
                row=0;
                for(int A=0;A<3;A++)
                {
                    for(int l=0;l<3;l++)
                    {

                        //summation over the same term
                        for(int Abar=0;Abar<3;Abar++)
                        {
                            for(int Bbar=0;Bbar<3;Bbar++)
                            {
                               I3p_60(row,col)+=fTemp_matrix_nsd_x_nsd(A,l)*fdFYchidSIGMA(Abar,Bbar)*fFe(i,Abar)*fChip_inverse(B,Bbar);
                            }
                        }
                        row++;
                    }
                }
                col++;
            }
        }

}

void FSMicromorphic2_3DT:: Form_I3p_61()
{

    int row=0;
    int col=0;
    I3p_61=0.0;

    fTemp_matrix_nsd_x_nsd2.MultABCT(fFe,fIdentity_matrix,fFe);
    fTemp_matrix_nsd_x_nsd.MultAB(fDeformation_Gradient_Inverse,fTemp_matrix_nsd_x_nsd2);


     for(int B=0;B<3;B++)
        {
            for(int i=0;i<3;i++)
            {
                row=0;
                for(int A=0;A<3;A++)
                {
                    for(int l=0;l<3;l++)
                    {

                        //summation over the same term
                        for(int Abar=0;Abar<3;Abar++)
                        {
                            for(int Bbar=0;Bbar<3;Bbar++)
                            {
                               I3p_61(row,col)+=fTemp_matrix_nsd_x_nsd(A,l)*fdFYchidSIGMA(Abar,Bbar)*fChie(i,Abar)*fFp_inverse(B,Bbar);
                            }
                        }
                        row++;
                    }
                }
                col++;
            }
        }

}



void FSMicromorphic2_3DT:: Form_I3p_62()
{

    int row=0;
    int col=0;
    I3p_62=0.0;

    fTemp_matrix_nsd_x_nsd2.MultABCT(fFe,fIdentity_matrix,fFe);
    fTemp_matrix_nsd_x_nsd.MultAB(fDeformation_Gradient_Inverse,fTemp_matrix_nsd_x_nsd2);


     for(int B=0;B<3;B++)
        {
            for(int i=0;i<3;i++)
            {
                row=0;
                for(int A=0;A<3;A++)
                {
                    for(int l=0;l<3;l++)
                    {

                        //summation over the same term
                        for(int Abar=0;Abar<3;Abar++)
                        {
                            for(int Bbar=0;Bbar<3;Bbar++)
                            {
                               I3p_62(row,col)+=fTemp_matrix_nsd_x_nsd(A,l)*fdFYchidSIGMA(Abar,Bbar)*fFe(i,Bbar)*fChip_inverse(B,Abar);
                            }
                        }
                        row++;
                    }
                }
                col++;
            }
        }

}



void FSMicromorphic2_3DT:: Form_I3p_63()
{

    int row=0;
    int col=0;
    I3p_63=0.0;

    fTemp_matrix_nsd_x_nsd2.MultABCT(fFe,fD1,fFe);
    fTemp_matrix_nsd_x_nsd.MultAB(fDeformation_Gradient_Inverse,fTemp_matrix_nsd_x_nsd2);


     for(int B=0;B<3;B++)
        {
            for(int i=0;i<3;i++)
            {
                row=0;
                for(int A=0;A<3;A++)
                {
                    for(int l=0;l<3;l++)
                    {

                        //summation over the same term
                        for(int Abar=0;Abar<3;Abar++)
                        {
                            I3p_63(row,col)+=fTemp_matrix_nsd_x_nsd(A,l)*fFe(i,Abar)*fFp_inverse(B,Abar);

                        }
                        row++;
                    }
                }
                col++;
            }
        }

}

void FSMicromorphic2_3DT:: Form_I3p_64()
{

    int row=0;
    int col=0;
    I3p_64=0.0;

    fTemp_matrix_nsd_x_nsd2.MultABCT(fFe,fD1,fFe);
    fTemp_matrix_nsd_x_nsd.MultAB(fDeformation_Gradient_Inverse,fTemp_matrix_nsd_x_nsd2);


     for(int B=0;B<3;B++)
        {
            for(int i=0;i<3;i++)
            {
                row=0;
                for(int A=0;A<3;A++)
                {
                    for(int l=0;l<3;l++)
                    {

                        //summation over the same term
                        for(int Abar=0;Abar<3;Abar++)
                        {
                        for(int Bbar=0;Bbar<3;Bbar++)
                            {

                            I3p_64(row,col)+=fTemp_matrix_nsd_x_nsd(A,l)*fdFYchidSIGMA(Abar,Bbar)*(fFe(i,Bbar)*fFp_inverse(B,Abar)+fFe(i,Abar)*fFp_inverse(B,Bbar));
                            }
                        }
                        row++;
                    }
                }
                col++;
            }
        }

}

void FSMicromorphic2_3DT:: Form_I3p_65()
{

    int row=0;
    int col=0;
    I3p_65=0.0;

    fTemp_matrix_nsd_x_nsd2.MultABCT(fFe,fD1,fFe);
    fTemp_matrix_nsd_x_nsd.MultAB(fDeformation_Gradient_Inverse,fTemp_matrix_nsd_x_nsd2);


     for(int B=0;B<3;B++)
        {
            for(int i=0;i<3;i++)
            {
                row=0;
                for(int A=0;A<3;A++)
                {
                    for(int l=0;l<3;l++)
                    {

                        //summation over the same term
                        for(int Abar=0;Abar<3;Abar++)
                        {
                                   I3p_65(row,col)+=fTemp_matrix_nsd_x_nsd(A,l)*fChie(i,Abar)*fFp_inverse(B,Abar);

                        }
                        row++;
                    }
                }
                col++;
            }
        }

}



void FSMicromorphic2_3DT:: Form_I3p_66()
{

    int row=0;
    int col=0;
    I3p_66=0.0;

    fTemp_matrix_nsd_x_nsd2.MultABCT(fFe,fD1,fFe);
    fTemp_matrix_nsd_x_nsd.MultAB(fDeformation_Gradient_Inverse,fTemp_matrix_nsd_x_nsd2);


     for(int B=0;B<3;B++)
        {
            for(int i=0;i<3;i++)
            {
                row=0;
                for(int A=0;A<3;A++)
                {
                    for(int l=0;l<3;l++)
                    {

                        //summation over the same term
                        for(int Abar=0;Abar<3;Abar++)
                        {
                                   I3p_66(row,col)+=fTemp_matrix_nsd_x_nsd(A,l)*fFe(i,Abar)*fChip_inverse(B,Abar);

                        }
                        row++;
                    }
                }
                col++;
            }
        }

}


void FSMicromorphic2_3DT:: Form_I3p_67()
{

    int row=0;
    int col=0;
    I3p_67=0.0;

    fTemp_matrix_nsd_x_nsd2.MultABCT(fFe,fD1,fFe);
    fTemp_matrix_nsd_x_nsd.MultAB(fDeformation_Gradient_Inverse,fTemp_matrix_nsd_x_nsd2);


     for(int B=0;B<3;B++)
        {
            for(int i=0;i<3;i++)
            {
                row=0;
                for(int A=0;A<3;A++)
                {
                    for(int l=0;l<3;l++)
                    {

                        //summation over the same term
                        for(int Abar=0;Abar<3;Abar++)
                        {
                            for(int Bbar=0;Bbar<3;Bbar++)
                            {
                               I3p_67(row,col)+=fTemp_matrix_nsd_x_nsd(A,l)*fdFYchidSIGMA(Abar,Bbar)*fChie(i,Bbar)*fFp_inverse(B,Abar);
                            }
                        }
                        row++;
                    }
                }
                col++;
            }
        }

}

void FSMicromorphic2_3DT:: Form_I3p_68()
{

    int row=0;
    int col=0;
    I3p_68=0.0;

    fTemp_matrix_nsd_x_nsd2.MultABCT(fFe,fD1,fFe);
    fTemp_matrix_nsd_x_nsd.MultAB(fDeformation_Gradient_Inverse,fTemp_matrix_nsd_x_nsd2);


     for(int B=0;B<3;B++)
        {
            for(int i=0;i<3;i++)
            {
                row=0;
                for(int A=0;A<3;A++)
                {
                    for(int l=0;l<3;l++)
                    {

                        //summation over the same term
                        for(int Abar=0;Abar<3;Abar++)
                        {
                            for(int Bbar=0;Bbar<3;Bbar++)
                            {
                               I3p_68(row,col)+=fTemp_matrix_nsd_x_nsd(A,l)*fdFYchidSIGMA(Abar,Bbar)*fFe(i,Abar)*fChip_inverse(B,Bbar);
                            }
                        }
                        row++;
                    }
                }
                col++;
            }
        }

}

void FSMicromorphic2_3DT:: Form_I3p_69()
{

    int row=0;
    int col=0;
    I3p_69=0.0;

    fTemp_matrix_nsd_x_nsd2.MultABCT(fFe,fD1,fFe);
    fTemp_matrix_nsd_x_nsd.MultAB(fDeformation_Gradient_Inverse,fTemp_matrix_nsd_x_nsd2);


     for(int B=0;B<3;B++)
        {
            for(int i=0;i<3;i++)
            {
                row=0;
                for(int A=0;A<3;A++)
                {
                    for(int l=0;l<3;l++)
                    {

                        //summation over the same term
                        for(int Abar=0;Abar<3;Abar++)
                        {
                            for(int Bbar=0;Bbar<3;Bbar++)
                            {
                               I3p_69(row,col)+=fTemp_matrix_nsd_x_nsd(A,l)*fdFYchidSIGMA(Abar,Bbar)*fChie(i,Abar)*fFp_inverse(B,Bbar);
                            }
                        }
                        row++;
                    }
                }
                col++;
            }
        }

}



void FSMicromorphic2_3DT:: Form_I3p_70()
{

    int row=0;
    int col=0;
    I3p_70=0.0;

    fTemp_matrix_nsd_x_nsd2.MultABCT(fFe,fD1,fFe);
    fTemp_matrix_nsd_x_nsd.MultAB(fDeformation_Gradient_Inverse,fTemp_matrix_nsd_x_nsd2);


     for(int B=0;B<3;B++)
        {
            for(int i=0;i<3;i++)
            {
                row=0;
                for(int A=0;A<3;A++)
                {
                    for(int l=0;l<3;l++)
                    {

                        //summation over the same term
                        for(int Abar=0;Abar<3;Abar++)
                        {
                            for(int Bbar=0;Bbar<3;Bbar++)
                            {
                               I3p_70(row,col)+=fTemp_matrix_nsd_x_nsd(A,l)*fdFYchidSIGMA(Abar,Bbar)*fFe(i,Bbar)*fChip_inverse(B,Abar);
                            }
                        }
                        row++;
                    }
                }
                col++;
            }
        }

}




void FSMicromorphic2_3DT:: Form_I3p_71()
{

    int row=0;
    int col=0;
    I3p_71=0.0;

    fTemp_matrix_nsd_x_nsd.Transpose(fD1);
    fTemp_matrix_nsd_x_nsd2.MultABCT(fFe,fTemp_matrix_nsd_x_nsd,fFe);
    fTemp_matrix_nsd_x_nsd.MultAB(fDeformation_Gradient_Inverse,fTemp_matrix_nsd_x_nsd2);


     for(int B=0;B<3;B++)
        {
            for(int i=0;i<3;i++)
            {
                row=0;
                for(int A=0;A<3;A++)
                {
                    for(int l=0;l<3;l++)
                    {

                        //summation over the same term
                        for(int Abar=0;Abar<3;Abar++)
                        {
                            I3p_71(row,col)+=fTemp_matrix_nsd_x_nsd(A,l)*fFe(i,Abar)*fFp_inverse(B,Abar);

                        }
                        row++;
                    }
                }
                col++;
            }
        }

}

void FSMicromorphic2_3DT:: Form_I3p_72()
{

    int row=0;
    int col=0;
    I3p_72=0.0;

    fTemp_matrix_nsd_x_nsd.Transpose(fD1);
    fTemp_matrix_nsd_x_nsd2.MultABCT(fFe,fTemp_matrix_nsd_x_nsd,fFe);
    fTemp_matrix_nsd_x_nsd.MultAB(fDeformation_Gradient_Inverse,fTemp_matrix_nsd_x_nsd2);


     for(int B=0;B<3;B++)
        {
            for(int i=0;i<3;i++)
            {
                row=0;
                for(int A=0;A<3;A++)
                {
                    for(int l=0;l<3;l++)
                    {

                        //summation over the same term
                        for(int Abar=0;Abar<3;Abar++)
                        {
                        for(int Bbar=0;Bbar<3;Bbar++)
                            {

                            I3p_72(row,col)+=fTemp_matrix_nsd_x_nsd(A,l)*fdFYchidSIGMA(Abar,Bbar)*(fFe(i,Bbar)*fFp_inverse(B,Abar)+fFe(i,Abar)*fFp_inverse(B,Bbar));
                            }
                        }
                        row++;
                    }
                }
                col++;
            }
        }

}

void FSMicromorphic2_3DT:: Form_I3p_73()
{

    int row=0;
    int col=0;
    I3p_73=0.0;

    fTemp_matrix_nsd_x_nsd.Transpose(fD1);
    fTemp_matrix_nsd_x_nsd2.MultABCT(fFe,fTemp_matrix_nsd_x_nsd,fFe);
    fTemp_matrix_nsd_x_nsd.MultAB(fDeformation_Gradient_Inverse,fTemp_matrix_nsd_x_nsd2);


     for(int B=0;B<3;B++)
        {
            for(int i=0;i<3;i++)
            {
                row=0;
                for(int A=0;A<3;A++)
                {
                    for(int l=0;l<3;l++)
                    {

                        //summation over the same term
                        for(int Abar=0;Abar<3;Abar++)
                        {
                                   I3p_73(row,col)+=fTemp_matrix_nsd_x_nsd(A,l)*fChie(i,Abar)*fFp_inverse(B,Abar);

                        }
                        row++;
                    }
                }
                col++;
            }
        }

}



void FSMicromorphic2_3DT:: Form_I3p_74()
{

    int row=0;
    int col=0;
    I3p_74=0.0;
    fTemp_matrix_nsd_x_nsd.Transpose(fD1);
    fTemp_matrix_nsd_x_nsd2.MultABCT(fFe,fTemp_matrix_nsd_x_nsd,fFe);
    fTemp_matrix_nsd_x_nsd.MultAB(fDeformation_Gradient_Inverse,fTemp_matrix_nsd_x_nsd2);


     for(int B=0;B<3;B++)
        {
            for(int i=0;i<3;i++)
            {
                row=0;
                for(int A=0;A<3;A++)
                {
                    for(int l=0;l<3;l++)
                    {

                        //summation over the same term
                        for(int Abar=0;Abar<3;Abar++)
                        {
                                   I3p_74(row,col)+=fTemp_matrix_nsd_x_nsd(A,l)*fFe(i,Abar)*fChip_inverse(B,Abar);

                        }
                        row++;
                    }
                }
                col++;
            }
        }

}


void FSMicromorphic2_3DT:: Form_I3p_75()
{

    int row=0;
    int col=0;
    I3p_75=0.0;

    fTemp_matrix_nsd_x_nsd.Transpose(fD1);
    fTemp_matrix_nsd_x_nsd2.MultABCT(fFe,fTemp_matrix_nsd_x_nsd,fFe);
    fTemp_matrix_nsd_x_nsd.MultAB(fDeformation_Gradient_Inverse,fTemp_matrix_nsd_x_nsd2);

     for(int B=0;B<3;B++)
        {
            for(int i=0;i<3;i++)
            {
                row=0;
                for(int A=0;A<3;A++)
                {
                    for(int l=0;l<3;l++)
                    {

                        //summation over the same term
                        for(int Abar=0;Abar<3;Abar++)
                        {
                            for(int Bbar=0;Bbar<3;Bbar++)
                            {
                               I3p_75(row,col)+=fTemp_matrix_nsd_x_nsd(A,l)*fdFYchidSIGMA(Abar,Bbar)*fChie(i,Bbar)*fFp_inverse(B,Abar);
                            }
                        }
                        row++;
                    }
                }
                col++;
            }
        }

}

void FSMicromorphic2_3DT:: Form_I3p_76()
{

    int row=0;
    int col=0;
    I3p_76=0.0;

    fTemp_matrix_nsd_x_nsd.Transpose(fD1);
    fTemp_matrix_nsd_x_nsd2.MultABCT(fFe,fTemp_matrix_nsd_x_nsd,fFe);
    fTemp_matrix_nsd_x_nsd.MultAB(fDeformation_Gradient_Inverse,fTemp_matrix_nsd_x_nsd2);


     for(int B=0;B<3;B++)
        {
            for(int i=0;i<3;i++)
            {
                row=0;
                for(int A=0;A<3;A++)
                {
                    for(int l=0;l<3;l++)
                    {

                        //summation over the same term
                        for(int Abar=0;Abar<3;Abar++)
                        {
                            for(int Bbar=0;Bbar<3;Bbar++)
                            {
                               I3p_76(row,col)+=fTemp_matrix_nsd_x_nsd(A,l)*fdFYchidSIGMA(Abar,Bbar)*fFe(i,Abar)*fChip_inverse(B,Bbar);
                            }
                        }
                        row++;
                    }
                }
                col++;
            }
        }

}

void FSMicromorphic2_3DT:: Form_I3p_77()
{

    int row=0;
    int col=0;
    I3p_77=0.0;

    fTemp_matrix_nsd_x_nsd.Transpose(fD1);
    fTemp_matrix_nsd_x_nsd2.MultABCT(fFe,fTemp_matrix_nsd_x_nsd,fFe);
    fTemp_matrix_nsd_x_nsd.MultAB(fDeformation_Gradient_Inverse,fTemp_matrix_nsd_x_nsd2);

     for(int B=0;B<3;B++)
        {
            for(int i=0;i<3;i++)
            {
                row=0;
                for(int A=0;A<3;A++)
                {
                    for(int l=0;l<3;l++)
                    {

                        //summation over the same term
                        for(int Abar=0;Abar<3;Abar++)
                        {
                            for(int Bbar=0;Bbar<3;Bbar++)
                            {
                               I3p_77(row,col)+=fTemp_matrix_nsd_x_nsd(A,l)*fdFYchidSIGMA(Abar,Bbar)*fChie(i,Abar)*fFp_inverse(B,Bbar);
                            }
                        }
                        row++;
                    }
                }
                col++;
            }
        }

}



void FSMicromorphic2_3DT:: Form_I3p_78()
{

    int row=0;
    int col=0;
    I3p_78=0.0;

    fTemp_matrix_nsd_x_nsd.Transpose(fD1);
    fTemp_matrix_nsd_x_nsd2.MultABCT(fFe,fTemp_matrix_nsd_x_nsd,fFe);
    fTemp_matrix_nsd_x_nsd.MultAB(fDeformation_Gradient_Inverse,fTemp_matrix_nsd_x_nsd2);

     for(int B=0;B<3;B++)
        {
            for(int i=0;i<3;i++)
            {
                row=0;
                for(int A=0;A<3;A++)
                {
                    for(int l=0;l<3;l++)
                    {

                        //summation over the same term
                        for(int Abar=0;Abar<3;Abar++)
                        {
                            for(int Bbar=0;Bbar<3;Bbar++)
                            {
                               I3p_78(row,col)+=fTemp_matrix_nsd_x_nsd(A,l)*fdFYchidSIGMA(Abar,Bbar)*fFe(i,Bbar)*fChip_inverse(B,Abar);
                            }
                        }
                        row++;
                    }
                }
                col++;
            }
        }

}



void FSMicromorphic2_3DT:: Form_I3p_79()
{

    int row=0;
    int col=0;
    I3p_79=0.0;

    fTemp_matrix_nsd_x_nsd2.MultABCT(fFe,fIdentity_matrix,fFe);
    fTemp_matrix_nsd_x_nsd.MultAB(fDeformation_Gradient_Inverse,fTemp_matrix_nsd_x_nsd2);

    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int A=0;A<3;A++)
            {
                for(int l=0;l<3;l++)
                {
                    //summation over the same term starts
                    for(int Abar=0;Abar<3;Abar++)
                    {
                        I3p_79(row,col)+=fTemp_matrix_nsd_x_nsd(A,l)*fFe(i,Abar)*fFp_inverse(B,Abar);
                    }
                    row++;
                }
            }
            col++;
        }
    }


}

void FSMicromorphic2_3DT:: Form_I3p_80()
{

    int row=0;
    int col=0;
    I3p_80=0.0;

    fTemp_matrix_nsd_x_nsd2.MultABCT(fFe,fIdentity_matrix,fFe);
    fTemp_matrix_nsd_x_nsd.MultAB(fDeformation_Gradient_Inverse,fTemp_matrix_nsd_x_nsd2);

    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int A=0;A<3;A++)
            {
                for(int l=0;l<3;l++)
                {
                    //summation over the same term starts
                    for(int Abar=0;Abar<3;Abar++)
                    {
                          for(int Bbar=0;Bbar<3;Bbar++)
                          {
                        I3p_80(row,col)+=fTemp_matrix_nsd_x_nsd(A,l)*fdFYchidSIGMA(Abar,Bbar)*(fFe(i,Bbar)*fFp_inverse(B,Abar)+fFe(i,Abar)*fFp_inverse(B,Bbar));
                       }
                    }
                    row++;
                }
            }
            col++;
        }
    }

}
void FSMicromorphic2_3DT:: Form_I3p_81()
{

    int row=0;
    int col=0;
    I3p_81=0.0;

    fTemp_matrix_nsd_x_nsd2.MultABCT(fFe,fIdentity_matrix,fFe);
    fTemp_matrix_nsd_x_nsd.MultAB(fDeformation_Gradient_Inverse,fTemp_matrix_nsd_x_nsd2);


    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int A=0;A<3;A++)
            {
                for(int l=0;l<3;l++)
                {
                    //summation over the same term starts
                    for(int Abar=0;Abar<3;Abar++)
                    {
                        I3p_81(row,col)+=fTemp_matrix_nsd_x_nsd(A,l)*fChie(i,Abar)*fFp_inverse(B,Abar);
                    }
                    row++;
                }
            }
            col++;
        }
    }

}
void FSMicromorphic2_3DT:: Form_I3p_82()
{

    int row=0;
    int col=0;
    I3p_82=0.0;

    fTemp_matrix_nsd_x_nsd2.MultABCT(fFe,fIdentity_matrix,fFe);
    fTemp_matrix_nsd_x_nsd.MultAB(fDeformation_Gradient_Inverse,fTemp_matrix_nsd_x_nsd2);



    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int A=0;A<3;A++)
            {
                for(int l=0;l<3;l++)
                {
                    //summation over the same term starts
                    for(int Abar=0;Abar<3;Abar++)
                    {
                        I3p_82(row,col)+=fTemp_matrix_nsd_x_nsd(A,l)*fFe(i,Abar)*fChip_inverse(B,Abar);
                    }
                    row++;
                }
            }
            col++;
        }
    }

}
void FSMicromorphic2_3DT:: Form_I3p_83()
{

    int row=0;
    int col=0;
    I3p_83=0.0;

    fTemp_matrix_nsd_x_nsd2.MultABCT(fFe,fIdentity_matrix,fFe);
    fTemp_matrix_nsd_x_nsd.MultAB(fDeformation_Gradient_Inverse,fTemp_matrix_nsd_x_nsd2);

    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int A=0;A<3;A++)
            {
                for(int l=0;l<3;l++)
                {
                    //summation over the same term starts
                    for(int Abar=0;Abar<3;Abar++)
                    {
                          for(int Bbar=0;Bbar<3;Bbar++)
                          {
                        I3p_83(row,col)+=fTemp_matrix_nsd_x_nsd(A,l)*fdFYchidSIGMA(Abar,Bbar)*fChie(i,Bbar)*fFp_inverse(B,Abar);
                       }
                    }
                    row++;
                }
            }
            col++;
        }
    }
}

void FSMicromorphic2_3DT:: Form_I3p_84()
{

    int row=0;
    int col=0;
    I3p_84=0.0;

    fTemp_matrix_nsd_x_nsd2.MultABCT(fFe,fIdentity_matrix,fFe);
    fTemp_matrix_nsd_x_nsd.MultAB(fDeformation_Gradient_Inverse,fTemp_matrix_nsd_x_nsd2);

    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int A=0;A<3;A++)
            {
                for(int l=0;l<3;l++)
                {
                    //summation over the same term starts
                    for(int Abar=0;Abar<3;Abar++)
                    {
                          for(int Bbar=0;Bbar<3;Bbar++)
                          {
                        I3p_84(row,col)+=fTemp_matrix_nsd_x_nsd(A,l)*fdFYchidSIGMA(Abar,Bbar)*fFe(i,Abar)*fChip_inverse(B,Bbar);
                       }
                    }
                    row++;
                }
            }
            col++;
        }
    }


}


void FSMicromorphic2_3DT:: Form_I3p_85()
{

    int row=0;
    int col=0;
    I3p_85=0.0;

    fTemp_matrix_nsd_x_nsd2.MultABCT(fFe,fIdentity_matrix,fFe);
    fTemp_matrix_nsd_x_nsd.MultAB(fDeformation_Gradient_Inverse,fTemp_matrix_nsd_x_nsd2);

    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int A=0;A<3;A++)
            {
                for(int l=0;l<3;l++)
                {
                    //summation over the same term starts
                    for(int Abar=0;Abar<3;Abar++)
                    {
                          for(int Bbar=0;Bbar<3;Bbar++)
                          {
                       I3p_85(row,col)+=fTemp_matrix_nsd_x_nsd(A,l)*fdFYchidSIGMA(Abar,Bbar)*fChie(i,Abar)*fFp_inverse(B,Bbar);
                       }
                    }
                    row++;
                }
            }
            col++;
        }
    }
}



void FSMicromorphic2_3DT:: Form_I3p_86()
{

    int row=0;
    int col=0;
    I3p_86=0.0;

    fTemp_matrix_nsd_x_nsd2.MultABCT(fFe,fIdentity_matrix,fFe);
    fTemp_matrix_nsd_x_nsd.MultAB(fDeformation_Gradient_Inverse,fTemp_matrix_nsd_x_nsd2);

    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int A=0;A<3;A++)
            {
                for(int l=0;l<3;l++)
                {
                    //summation over the same term starts
                    for(int Abar=0;Abar<3;Abar++)
                    {
                          for(int Bbar=0;Bbar<3;Bbar++)
                          {
                        I3p_86(row,col)+=fTemp_matrix_nsd_x_nsd(A,l)*fdFYchidSIGMA(Abar,Bbar)*fFe(i,Bbar)*fChip_inverse(B,Abar);
                       }
                    }
                    row++;
                }
            }
            col++;
        }
    }
}


void FSMicromorphic2_3DT:: Form_I3p_87()
{

    int row=0;
    int col=0;
    I3p_87=0.0;

    fTemp_matrix_nsd_x_nsd2.Transpose(fA1);
    fTemp_matrix_nsd_x_nsd=fA1;
    fTemp_matrix_nsd_x_nsd+=fTemp_matrix_nsd_x_nsd2;
    fTemp_matrix_nsd_x_nsd2.MultABCT(fFe,fTemp_matrix_nsd_x_nsd,fFe);
    fTemp_matrix_nsd_x_nsd.MultAB(fDeformation_Gradient_Inverse,fTemp_matrix_nsd_x_nsd2);


    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int A=0;A<3;A++)
            {
                for(int l=0;l<3;l++)
                {
                    //summation over the same term starts
                    for(int Abar=0;Abar<3;Abar++)
                    {
                        I3p_87(row,col)+=fTemp_matrix_nsd_x_nsd(A,l)*fFe(i,Abar)*fFp_inverse(B,Abar);
                    }
                    row++;
                }
            }
            col++;
        }
    }


}

void FSMicromorphic2_3DT:: Form_I3p_88()
{

    int row=0;
    int col=0;
    I3p_88=0.0;

    fTemp_matrix_nsd_x_nsd2.Transpose(fA1);
    fTemp_matrix_nsd_x_nsd=fA1;
    fTemp_matrix_nsd_x_nsd+=fTemp_matrix_nsd_x_nsd2;
    fTemp_matrix_nsd_x_nsd2.MultABCT(fFe,fTemp_matrix_nsd_x_nsd,fFe);
    fTemp_matrix_nsd_x_nsd.MultAB(fDeformation_Gradient_Inverse,fTemp_matrix_nsd_x_nsd2);

    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int A=0;A<3;A++)
            {
                for(int l=0;l<3;l++)
                {
                    //summation over the same term starts
                    for(int Abar=0;Abar<3;Abar++)
                    {
                          for(int Bbar=0;Bbar<3;Bbar++)
                          {
                        I3p_88(row,col)+=fTemp_matrix_nsd_x_nsd(A,l)*fdFYchidSIGMA(Abar,Bbar)*(fFe(i,Bbar)*fFp_inverse(B,Abar)+fFe(i,Abar)*fFp_inverse(B,Bbar));
                       }
                    }
                    row++;
                }
            }
            col++;
        }
    }

}
void FSMicromorphic2_3DT:: Form_I3p_89()
{

    int row=0;
    int col=0;
    I3p_89=0.0;

    fTemp_matrix_nsd_x_nsd2.Transpose(fA1);
    fTemp_matrix_nsd_x_nsd=fA1;
    fTemp_matrix_nsd_x_nsd+=fTemp_matrix_nsd_x_nsd2;
    fTemp_matrix_nsd_x_nsd2.MultABCT(fFe,fTemp_matrix_nsd_x_nsd,fFe);
    fTemp_matrix_nsd_x_nsd.MultAB(fDeformation_Gradient_Inverse,fTemp_matrix_nsd_x_nsd2);

    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int A=0;A<3;A++)
            {
                for(int l=0;l<3;l++)
                {
                    //summation over the same term starts
                    for(int Abar=0;Abar<3;Abar++)
                    {
                        I3p_89(row,col)+=fTemp_matrix_nsd_x_nsd(A,l)*fChie(i,Abar)*fFp_inverse(B,Abar);
                    }
                    row++;
                }
            }
            col++;
        }
    }

}
void FSMicromorphic2_3DT:: Form_I3p_90()
{

    int row=0;
    int col=0;
    I3p_90=0.0;

    fTemp_matrix_nsd_x_nsd2.Transpose(fA1);
    fTemp_matrix_nsd_x_nsd=fA1;
    fTemp_matrix_nsd_x_nsd+=fTemp_matrix_nsd_x_nsd2;
    fTemp_matrix_nsd_x_nsd2.MultABCT(fFe,fTemp_matrix_nsd_x_nsd,fFe);
    fTemp_matrix_nsd_x_nsd.MultAB(fDeformation_Gradient_Inverse,fTemp_matrix_nsd_x_nsd2);



    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int A=0;A<3;A++)
            {
                for(int l=0;l<3;l++)
                {
                    //summation over the same term starts
                    for(int Abar=0;Abar<3;Abar++)
                    {
                        I3p_90(row,col)+=fTemp_matrix_nsd_x_nsd(A,l)*fFe(i,Abar)*fChip_inverse(B,Abar);
                    }
                    row++;
                }
            }
            col++;
        }
    }

}
void FSMicromorphic2_3DT:: Form_I3p_91()
{

    int row=0;
    int col=0;
    I3p_91=0.0;

    fTemp_matrix_nsd_x_nsd2.Transpose(fA1);
    fTemp_matrix_nsd_x_nsd=fA1;
    fTemp_matrix_nsd_x_nsd+=fTemp_matrix_nsd_x_nsd2;
    fTemp_matrix_nsd_x_nsd2.MultABCT(fFe,fTemp_matrix_nsd_x_nsd,fFe);
    fTemp_matrix_nsd_x_nsd.MultAB(fDeformation_Gradient_Inverse,fTemp_matrix_nsd_x_nsd2);

    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int A=0;A<3;A++)
            {
                for(int l=0;l<3;l++)
                {
                    //summation over the same term starts
                    for(int Abar=0;Abar<3;Abar++)
                    {
                          for(int Bbar=0;Bbar<3;Bbar++)
                          {
                        I3p_91(row,col)+=fTemp_matrix_nsd_x_nsd(A,l)*fdFYchidSIGMA(Abar,Bbar)*fChie(i,Bbar)*fFp_inverse(B,Abar);
                       }
                    }
                    row++;
                }
            }
            col++;
        }
    }
}

void FSMicromorphic2_3DT:: Form_I3p_92()
{

    int row=0;
    int col=0;
    I3p_92=0.0;

    fTemp_matrix_nsd_x_nsd2.Transpose(fA1);
    fTemp_matrix_nsd_x_nsd=fA1;
    fTemp_matrix_nsd_x_nsd+=fTemp_matrix_nsd_x_nsd2;
    fTemp_matrix_nsd_x_nsd2.MultABCT(fFe,fTemp_matrix_nsd_x_nsd,fFe);
    fTemp_matrix_nsd_x_nsd.MultAB(fDeformation_Gradient_Inverse,fTemp_matrix_nsd_x_nsd2);

    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int A=0;A<3;A++)
            {
                for(int l=0;l<3;l++)
                {
                    //summation over the same term starts
                    for(int Abar=0;Abar<3;Abar++)
                    {
                          for(int Bbar=0;Bbar<3;Bbar++)
                          {
                        I3p_92(row,col)+=fTemp_matrix_nsd_x_nsd(A,l)*fdFYchidSIGMA(Abar,Bbar)*fFe(i,Abar)*fChip_inverse(B,Bbar);
                       }
                    }
                    row++;
                }
            }
            col++;
        }
    }


}


void FSMicromorphic2_3DT:: Form_I3p_93()
{

    int row=0;
    int col=0;
    I3p_93=0.0;

    fTemp_matrix_nsd_x_nsd2.Transpose(fA1);
    fTemp_matrix_nsd_x_nsd=fA1;
    fTemp_matrix_nsd_x_nsd+=fTemp_matrix_nsd_x_nsd2;
    fTemp_matrix_nsd_x_nsd2.MultABCT(fFe,fTemp_matrix_nsd_x_nsd,fFe);
    fTemp_matrix_nsd_x_nsd.MultAB(fDeformation_Gradient_Inverse,fTemp_matrix_nsd_x_nsd2);

    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int A=0;A<3;A++)
            {
                for(int l=0;l<3;l++)
                {
                    //summation over the same term starts
                    for(int Abar=0;Abar<3;Abar++)
                    {
                          for(int Bbar=0;Bbar<3;Bbar++)
                          {
                       I3p_93(row,col)+=fTemp_matrix_nsd_x_nsd(A,l)*fdFYchidSIGMA(Abar,Bbar)*fChie(i,Abar)*fFp_inverse(B,Bbar);
                       }
                    }
                    row++;
                }
            }
            col++;
        }
    }
}



void FSMicromorphic2_3DT:: Form_I3p_94()
{

    int row=0;
    int col=0;
    I3p_94=0.0;

    fTemp_matrix_nsd_x_nsd2.Transpose(fA1);
    fTemp_matrix_nsd_x_nsd=fA1;
    fTemp_matrix_nsd_x_nsd+=fTemp_matrix_nsd_x_nsd2;
    fTemp_matrix_nsd_x_nsd2.MultABCT(fFe,fTemp_matrix_nsd_x_nsd,fFe);
    fTemp_matrix_nsd_x_nsd.MultAB(fDeformation_Gradient_Inverse,fTemp_matrix_nsd_x_nsd2);

    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int A=0;A<3;A++)
            {
                for(int l=0;l<3;l++)
                {
                    //summation over the same term starts
                    for(int Abar=0;Abar<3;Abar++)
                    {
                          for(int Bbar=0;Bbar<3;Bbar++)
                          {
                       I3p_94(row,col)+=fTemp_matrix_nsd_x_nsd(A,l)*fdFYchidSIGMA(Abar,Bbar)*fFe(i,Bbar)*fChip_inverse(B,Abar);
                       }
                    }
                    row++;
                }
            }
            col++;
        }
    }
}


void FSMicromorphic2_3DT:: Form_I3p_95()
{

    int row=0;
    int col=0;
    I3p_95=0.0;

    fTemp_matrix_nsd_x_nsd2.MultABCT(fFe,fIdentity_matrix,fFe);
    fTemp_matrix_nsd_x_nsd.MultAB(fDeformation_Gradient_Inverse,fTemp_matrix_nsd_x_nsd2);

    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int A=0;A<3;A++)
            {
                for(int l=0;l<3;l++)
                {
                    //summation over the same term starts
                    for(int Abar=0;Abar<3;Abar++)
                    {
                        I3p_95(row,col)+=fTemp_matrix_nsd_x_nsd(A,l)*fFe(i,Abar)*fFp_inverse(B,Abar);
                    }
                    row++;
                }
            }
            col++;
        }
    }


}

void FSMicromorphic2_3DT:: Form_I3p_96()
{

    int row=0;
    int col=0;
    I3p_96=0.0;

    fTemp_matrix_nsd_x_nsd2.MultABCT(fFe,fIdentity_matrix,fFe);
    fTemp_matrix_nsd_x_nsd.MultAB(fDeformation_Gradient_Inverse,fTemp_matrix_nsd_x_nsd2);

    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int A=0;A<3;A++)
            {
                for(int l=0;l<3;l++)
                {
                    //summation over the same term starts
                    for(int Abar=0;Abar<3;Abar++)
                    {
                          for(int Bbar=0;Bbar<3;Bbar++)
                          {
                        I3p_96(row,col)+=fTemp_matrix_nsd_x_nsd(A,l)*fdFYchidSIGMA(Abar,Bbar)*(fFe(i,Bbar)*fFp_inverse(B,Abar)+fFe(i,Abar)*fFp_inverse(B,Bbar));
                       }
                    }
                    row++;
                }
            }
            col++;
        }
    }

}
void FSMicromorphic2_3DT:: Form_I3p_97()
{

    int row=0;
    int col=0;
    I3p_97=0.0;

    fTemp_matrix_nsd_x_nsd2.MultABCT(fFe,fIdentity_matrix,fFe);
    fTemp_matrix_nsd_x_nsd.MultAB(fDeformation_Gradient_Inverse,fTemp_matrix_nsd_x_nsd2);


    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int A=0;A<3;A++)
            {
                for(int l=0;l<3;l++)
                {
                    //summation over the same term starts
                    for(int Abar=0;Abar<3;Abar++)
                    {
                        I3p_97(row,col)+=fTemp_matrix_nsd_x_nsd(A,l)*fChie(i,Abar)*fFp_inverse(B,Abar);
                    }
                    row++;
                }
            }
            col++;
        }
    }

}
void FSMicromorphic2_3DT:: Form_I3p_98()
{

    int row=0;
    int col=0;
    I3p_98=0.0;

    fTemp_matrix_nsd_x_nsd2.MultABCT(fFe,fIdentity_matrix,fFe);
    fTemp_matrix_nsd_x_nsd.MultAB(fDeformation_Gradient_Inverse,fTemp_matrix_nsd_x_nsd2);



    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int A=0;A<3;A++)
            {
                for(int l=0;l<3;l++)
                {
                    //summation over the same term starts
                    for(int Abar=0;Abar<3;Abar++)
                    {
                        I3p_98(row,col)+=fTemp_matrix_nsd_x_nsd(A,l)*fFe(i,Abar)*fChip_inverse(B,Abar);
                    }
                    row++;
                }
            }
            col++;
        }
    }

}
void FSMicromorphic2_3DT:: Form_I3p_99()
{

    int row=0;
    int col=0;
    I3p_99=0.0;

    fTemp_matrix_nsd_x_nsd2.MultABCT(fFe,fIdentity_matrix,fFe);
    fTemp_matrix_nsd_x_nsd.MultAB(fDeformation_Gradient_Inverse,fTemp_matrix_nsd_x_nsd2);

    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int A=0;A<3;A++)
            {
                for(int l=0;l<3;l++)
                {
                    //summation over the same term starts
                    for(int Abar=0;Abar<3;Abar++)
                    {
                          for(int Bbar=0;Bbar<3;Bbar++)
                          {
                        I3p_99(row,col)+=fTemp_matrix_nsd_x_nsd(A,l)*fdFYchidSIGMA(Abar,Bbar)*fChie(i,Bbar)*fFp_inverse(B,Abar);
                       }
                    }
                    row++;
                }
            }
            col++;
        }
    }
}

void FSMicromorphic2_3DT:: Form_I3p_100()
{

    int row=0;
    int col=0;
    I3p_100=0.0;

    fTemp_matrix_nsd_x_nsd2.MultABCT(fFe,fIdentity_matrix,fFe);
    fTemp_matrix_nsd_x_nsd.MultAB(fDeformation_Gradient_Inverse,fTemp_matrix_nsd_x_nsd2);

    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int A=0;A<3;A++)
            {
                for(int l=0;l<3;l++)
                {
                    //summation over the same term starts
                    for(int Abar=0;Abar<3;Abar++)
                    {
                          for(int Bbar=0;Bbar<3;Bbar++)
                          {
                        I3p_100(row,col)+=fTemp_matrix_nsd_x_nsd(A,l)*fdFYchidSIGMA(Abar,Bbar)*fFe(i,Abar)*fChip_inverse(B,Bbar);
                       }
                    }
                    row++;
                }
            }
            col++;
        }
    }


}


void FSMicromorphic2_3DT:: Form_I3p_101()
{

    int row=0;
    int col=0;
    I3p_101=0.0;

    fTemp_matrix_nsd_x_nsd2.MultABCT(fFe,fIdentity_matrix,fFe);
    fTemp_matrix_nsd_x_nsd.MultAB(fDeformation_Gradient_Inverse,fTemp_matrix_nsd_x_nsd2);

    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int A=0;A<3;A++)
            {
                for(int l=0;l<3;l++)
                {
                    //summation over the same term starts
                    for(int Abar=0;Abar<3;Abar++)
                    {
                          for(int Bbar=0;Bbar<3;Bbar++)
                          {
                       I3p_101(row,col)+=fTemp_matrix_nsd_x_nsd(A,l)*fdFYchidSIGMA(Abar,Bbar)*fChie(i,Abar)*fFp_inverse(B,Bbar);
                       }
                    }
                    row++;
                }
            }
            col++;
        }
    }
}



void FSMicromorphic2_3DT:: Form_I3p_102()
{

    int row=0;
    int col=0;
    I3p_102=0.0;

    fTemp_matrix_nsd_x_nsd2.MultABCT(fFe,fIdentity_matrix,fFe);
    fTemp_matrix_nsd_x_nsd.MultAB(fDeformation_Gradient_Inverse,fTemp_matrix_nsd_x_nsd2);

    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int A=0;A<3;A++)
            {
                for(int l=0;l<3;l++)
                {
                    //summation over the same term starts
                    for(int Abar=0;Abar<3;Abar++)
                    {
                          for(int Bbar=0;Bbar<3;Bbar++)
                          {
                        I3p_102(row,col)+=fTemp_matrix_nsd_x_nsd(A,l)*fdFYchidSIGMA(Abar,Bbar)*fFe(i,Bbar)*fChip_inverse(B,Abar);
                       }
                    }
                    row++;
                }
            }
            col++;
        }
    }
}



void FSMicromorphic2_3DT:: Form_I3p_103()
{

    int row=0;
    int col=0;
    I3p_103=0.0;

    fTemp_matrix_nsd_x_nsd2.MultABCT(fFe,fIdentity_matrix,fFe);
    fTemp_matrix_nsd_x_nsd.MultAB(fDeformation_Gradient_Inverse,fTemp_matrix_nsd_x_nsd2);

    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int A=0;A<3;A++)
            {
                for(int l=0;l<3;l++)
                {
                    //summation over the same term starts
                    for(int Abar=0;Abar<3;Abar++)
                    {
                      I3p_103(row,col)+=fTemp_matrix_nsd_x_nsd(A,l)*fFe(i,Abar)*fFp_inverse(B,Abar);

                    }
                    row++;
                }
            }
            col++;
        }
    }
}


void FSMicromorphic2_3DT:: Form_I3p_104()
{

    int row=0;
    int col=0;
    I3p_104=0.0;

    fTemp_matrix_nsd_x_nsd2.MultABCT(fFe,fIdentity_matrix,fFe);
    fTemp_matrix_nsd_x_nsd.MultAB(fDeformation_Gradient_Inverse,fTemp_matrix_nsd_x_nsd2);

    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int A=0;A<3;A++)
            {
                for(int l=0;l<3;l++)
                {
                    //summation over the same term starts
                    for(int Abar=0;Abar<3;Abar++)
                    {
                      for(int Bbar=0;Bbar<3;Bbar++)
                      {
                           I3p_104(row,col)+=fTemp_matrix_nsd_x_nsd(A,l)*fdFYdS(Abar,Bbar)
                           *(fFe(i,Bbar)*fFp_inverse(B,Abar)+fFe(i,Abar)*fFp_inverse(B,Bbar));
                      }
                    }
                    row++;
                }
            }
            col++;
        }
    }
}



void FSMicromorphic2_3DT:: Form_I3p_105()
{

    int row=0;
    int col=0;
    I3p_105=0.0;

    fTemp_matrix_nsd_x_nsd2.MultABCT(fFe,fIdentity_matrix,fFe);
    fTemp_matrix_nsd_x_nsd.MultAB(fDeformation_Gradient_Inverse,fTemp_matrix_nsd_x_nsd2);

    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int A=0;A<3;A++)
            {
                for(int l=0;l<3;l++)
                {
                    //summation over the same term starts
                    for(int Abar=0;Abar<3;Abar++)
                    {
                         I3p_105(row,col)+=fTemp_matrix_nsd_x_nsd(A,l)*fChie(i,Abar)*fFp_inverse(B,Abar);

                    }
                    row++;
                }
            }
            col++;
        }
    }
}


void FSMicromorphic2_3DT:: Form_I3p_106()
{

    int row=0;
    int col=0;
    I3p_106=0.0;

    fTemp_matrix_nsd_x_nsd2.MultABCT(fFe,fIdentity_matrix,fFe);
    fTemp_matrix_nsd_x_nsd.MultAB(fDeformation_Gradient_Inverse,fTemp_matrix_nsd_x_nsd2);

    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int A=0;A<3;A++)
            {
                for(int l=0;l<3;l++)
                {
                    //summation over the same term starts
                    for(int Abar=0;Abar<3;Abar++)
                    {
                         I3p_106(row,col)+=fTemp_matrix_nsd_x_nsd(A,l)*fFe(i,Abar)*fChip_inverse(B,Abar);

                    }
                    row++;
                }
            }
            col++;
        }
    }
}


void FSMicromorphic2_3DT:: Form_I3p_107()
{

    int row=0;
    int col=0;
    I3p_107=0.0;

    fTemp_matrix_nsd_x_nsd2.MultABCT(fFe,fIdentity_matrix,fFe);
    fTemp_matrix_nsd_x_nsd.MultAB(fDeformation_Gradient_Inverse,fTemp_matrix_nsd_x_nsd2);

    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int A=0;A<3;A++)
            {
                for(int l=0;l<3;l++)
                {
                    //summation over the same term starts
                    for(int Abar=0;Abar<3;Abar++)
                    {
                        for(int Bbar=0;Bbar<3;Bbar++)
                        {
                         I3p_107(row,col)+=fTemp_matrix_nsd_x_nsd(A,l)*fdFYdS(Abar,Bbar)*fChie(i,Bbar)*fFp_inverse(B,Abar);
                    }
                    }
                    row++;
                }
            }
            col++;
        }
    }
}


void FSMicromorphic2_3DT:: Form_I3p_108()
{

    int row=0;
    int col=0;
    I3p_108=0.0;

    fTemp_matrix_nsd_x_nsd2.MultABCT(fFe,fIdentity_matrix,fFe);
    fTemp_matrix_nsd_x_nsd.MultAB(fDeformation_Gradient_Inverse,fTemp_matrix_nsd_x_nsd2);

    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int A=0;A<3;A++)
            {
                for(int l=0;l<3;l++)
                {
                    //summation over the same term starts
                    for(int Abar=0;Abar<3;Abar++)
                    {
                        for(int Bbar=0;Bbar<3;Bbar++)
                        {
                         I3p_108(row,col)+=fTemp_matrix_nsd_x_nsd(A,l)*fdFYdS(Abar,Bbar)*fFe(i,Abar)*fChip_inverse(B,Bbar);
                    }
                    }
                    row++;
                }
            }
            col++;
        }
    }
}



void FSMicromorphic2_3DT:: Form_I3p_109()
{

    int row=0;
    int col=0;
    I3p_109=0.0;

    fTemp_matrix_nsd_x_nsd2.MultABCT(fFe,fIdentity_matrix,fFe);
    fTemp_matrix_nsd_x_nsd.MultAB(fDeformation_Gradient_Inverse,fTemp_matrix_nsd_x_nsd2);

    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int A=0;A<3;A++)
            {
                for(int l=0;l<3;l++)
                {
                    //summation over the same term starts
                    for(int Abar=0;Abar<3;Abar++)
                    {
                        for(int Bbar=0;Bbar<3;Bbar++)
                        {
                         I3p_109(row,col)+=fTemp_matrix_nsd_x_nsd(A,l)*fdFYdS(Abar,Bbar)*fChie(i,Abar)*fFp_inverse(B,Bbar);
                    }
                    }
                    row++;
                }
            }
            col++;
        }
    }
}


void FSMicromorphic2_3DT:: Form_I3p_110()
{

    int row=0;
    int col=0;
    I3p_110=0.0;

    fTemp_matrix_nsd_x_nsd2.MultABCT(fFe,fIdentity_matrix,fFe);
    fTemp_matrix_nsd_x_nsd.MultAB(fDeformation_Gradient_Inverse,fTemp_matrix_nsd_x_nsd2);

    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int A=0;A<3;A++)
            {
                for(int l=0;l<3;l++)
                {
                    //summation over the same term starts
                    for(int Abar=0;Abar<3;Abar++)
                    {
                        for(int Bbar=0;Bbar<3;Bbar++)
                        {
                         I3p_110(row,col)+=fTemp_matrix_nsd_x_nsd(A,l)*fdFYdS(Abar,Bbar)*fFe(i,Bbar)*fChip_inverse(B,Abar);
                    }
                    }
                    row++;
                }
            }
            col++;
        }
    }
}


void FSMicromorphic2_3DT:: Form_I3p_111()
{

    int row=0;
    int col=0;
    I3p_111=0.0;

    fTemp_matrix_nsd_x_nsd.Transpose(fN1);
    fTemp_matrix_nsd_x_nsd2.MultABCT(fFe,fTemp_matrix_nsd_x_nsd,fFe);
    fTemp_matrix_nsd_x_nsd.MultAB(fDeformation_Gradient_Inverse,fTemp_matrix_nsd_x_nsd2);

    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int A=0;A<3;A++)
            {
                for(int l=0;l<3;l++)
                {
                    //summation over the same term starts
                    for(int Abar=0;Abar<3;Abar++)
                    {
                        I3p_111(row,col)+=fTemp_matrix_nsd_x_nsd(A,l)*fFe(i,Abar)*fFp_inverse(B,Abar);
                    }
                    row++;
                }
            }
            col++;
        }
    }


}

void FSMicromorphic2_3DT:: Form_I3p_112()
{

    int row=0;
    int col=0;
    I3p_112=0.0;

    fTemp_matrix_nsd_x_nsd.Transpose(fN1);
    fTemp_matrix_nsd_x_nsd2.MultABCT(fFe,fTemp_matrix_nsd_x_nsd,fFe);
    fTemp_matrix_nsd_x_nsd.MultAB(fDeformation_Gradient_Inverse,fTemp_matrix_nsd_x_nsd2);
    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int A=0;A<3;A++)
            {
                for(int l=0;l<3;l++)
                {
                    //summation over the same term starts
                    for(int Abar=0;Abar<3;Abar++)
                    {
                          for(int Bbar=0;Bbar<3;Bbar++)
                          {
                        I3p_112(row,col)+=fTemp_matrix_nsd_x_nsd(A,l)*fdFYchidSIGMA(Abar,Bbar)*(fFe(i,Bbar)*fFp_inverse(B,Abar)+fFe(i,Abar)*fFp_inverse(B,Bbar));
                       }
                    }
                    row++;
                }
            }
            col++;
        }
    }

}
void FSMicromorphic2_3DT:: Form_I3p_113()
{

    int row=0;
    int col=0;
    I3p_113=0.0;

    fTemp_matrix_nsd_x_nsd.Transpose(fN1);
    fTemp_matrix_nsd_x_nsd2.MultABCT(fFe,fTemp_matrix_nsd_x_nsd,fFe);
    fTemp_matrix_nsd_x_nsd.MultAB(fDeformation_Gradient_Inverse,fTemp_matrix_nsd_x_nsd2);

    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int A=0;A<3;A++)
            {
                for(int l=0;l<3;l++)
                {
                    //summation over the same term starts
                    for(int Abar=0;Abar<3;Abar++)
                    {
                        I3p_113(row,col)+=fTemp_matrix_nsd_x_nsd(A,l)*fChie(i,Abar)*fFp_inverse(B,Abar);
                    }
                    row++;
                }
            }
            col++;
        }
    }

}
void FSMicromorphic2_3DT:: Form_I3p_114()
{

    int row=0;
    int col=0;
    I3p_114=0.0;

    fTemp_matrix_nsd_x_nsd.Transpose(fN1);
    fTemp_matrix_nsd_x_nsd2.MultABCT(fFe,fTemp_matrix_nsd_x_nsd,fFe);
    fTemp_matrix_nsd_x_nsd.MultAB(fDeformation_Gradient_Inverse,fTemp_matrix_nsd_x_nsd2);

    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int A=0;A<3;A++)
            {
                for(int l=0;l<3;l++)
                {
                    //summation over the same term starts
                    for(int Abar=0;Abar<3;Abar++)
                    {
                        I3p_114(row,col)+=fTemp_matrix_nsd_x_nsd(A,l)*fFe(i,Abar)*fChip_inverse(B,Abar);
                    }
                    row++;
                }
            }
            col++;
        }
    }

}
void FSMicromorphic2_3DT:: Form_I3p_115()
{

    int row=0;
    int col=0;
    I3p_115=0.0;
    fTemp_matrix_nsd_x_nsd.Transpose(fN1);
    fTemp_matrix_nsd_x_nsd2.MultABCT(fFe,fTemp_matrix_nsd_x_nsd,fFe);
    fTemp_matrix_nsd_x_nsd.MultAB(fDeformation_Gradient_Inverse,fTemp_matrix_nsd_x_nsd2);

    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int A=0;A<3;A++)
            {
                for(int l=0;l<3;l++)
                {
                    //summation over the same term starts
                    for(int Abar=0;Abar<3;Abar++)
                    {
                          for(int Bbar=0;Bbar<3;Bbar++)
                          {
                        I3p_115(row,col)+=fTemp_matrix_nsd_x_nsd(A,l)*fdFYchidSIGMA(Abar,Bbar)*fChie(i,Bbar)*fFp_inverse(B,Abar);
                       }
                    }
                    row++;
                }
            }
            col++;
        }
    }
}

void FSMicromorphic2_3DT:: Form_I3p_116()
{

    int row=0;
    int col=0;
    I3p_116=0.0;

    fTemp_matrix_nsd_x_nsd.Transpose(fN1);
    fTemp_matrix_nsd_x_nsd2.MultABCT(fFe,fTemp_matrix_nsd_x_nsd,fFe);
    fTemp_matrix_nsd_x_nsd.MultAB(fDeformation_Gradient_Inverse,fTemp_matrix_nsd_x_nsd2);

    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int A=0;A<3;A++)
            {
                for(int l=0;l<3;l++)
                {
                    //summation over the same term starts
                    for(int Abar=0;Abar<3;Abar++)
                    {
                          for(int Bbar=0;Bbar<3;Bbar++)
                          {
                        I3p_116(row,col)+=fTemp_matrix_nsd_x_nsd(A,l)*fdFYchidSIGMA(Abar,Bbar)*fFe(i,Abar)*fChip_inverse(B,Bbar);
                       }
                    }
                    row++;
                }
            }
            col++;
        }
    }


}


void FSMicromorphic2_3DT:: Form_I3p_117()
{

    int row=0;
    int col=0;
    I3p_117=0.0;

    fTemp_matrix_nsd_x_nsd.Transpose(fN1);
    fTemp_matrix_nsd_x_nsd2.MultABCT(fFe,fTemp_matrix_nsd_x_nsd,fFe);
    fTemp_matrix_nsd_x_nsd.MultAB(fDeformation_Gradient_Inverse,fTemp_matrix_nsd_x_nsd2);

    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int A=0;A<3;A++)
            {
                for(int l=0;l<3;l++)
                {
                    //summation over the same term starts
                    for(int Abar=0;Abar<3;Abar++)
                    {
                          for(int Bbar=0;Bbar<3;Bbar++)
                          {
                       I3p_117(row,col)+=fTemp_matrix_nsd_x_nsd(A,l)*fdFYchidSIGMA(Abar,Bbar)*fChie(i,Abar)*fFp_inverse(B,Bbar);
                       }
                    }
                    row++;
                }
            }
            col++;
        }
    }
}



void FSMicromorphic2_3DT:: Form_I3p_118()
{

    int row=0;
    int col=0;
    I3p_118=0.0;

    fTemp_matrix_nsd_x_nsd.Transpose(fN1);
    fTemp_matrix_nsd_x_nsd2.MultABCT(fFe,fTemp_matrix_nsd_x_nsd,fFe);
    fTemp_matrix_nsd_x_nsd.MultAB(fDeformation_Gradient_Inverse,fTemp_matrix_nsd_x_nsd2);

    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int A=0;A<3;A++)
            {
                for(int l=0;l<3;l++)
                {
                    //summation over the same term starts
                    for(int Abar=0;Abar<3;Abar++)
                    {
                          for(int Bbar=0;Bbar<3;Bbar++)
                          {
                        I3p_118(row,col)+=fTemp_matrix_nsd_x_nsd(A,l)*fdFYchidSIGMA(Abar,Bbar)*fFe(i,Bbar)*fChip_inverse(B,Abar);
                       }
                    }
                    row++;
                }
            }
            col++;
        }
    }
}


void FSMicromorphic2_3DT:: Form_I3p_119()
{

    int row=0;
    int col=0;
    I3p_119=0.0;

    fTemp_matrix_nsd_x_nsd2.MultABCT(fFe,fN1,fFe);
    fTemp_matrix_nsd_x_nsd.MultAB(fDeformation_Gradient_Inverse,fTemp_matrix_nsd_x_nsd2);

    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int A=0;A<3;A++)
            {
                for(int l=0;l<3;l++)
                {
                    //summation over the same term starts
                    for(int Abar=0;Abar<3;Abar++)
                    {
                        I3p_119(row,col)+=fTemp_matrix_nsd_x_nsd(A,l)*fFe(i,Abar)*fFp_inverse(B,Abar);
                    }
                    row++;
                }
            }
            col++;
        }
    }


}

void FSMicromorphic2_3DT:: Form_I3p_120()
{

    int row=0;
    int col=0;
    I3p_120=0.0;

    fTemp_matrix_nsd_x_nsd2.MultABCT(fFe,fN1,fFe);
    fTemp_matrix_nsd_x_nsd.MultAB(fDeformation_Gradient_Inverse,fTemp_matrix_nsd_x_nsd2);

    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int A=0;A<3;A++)
            {
                for(int l=0;l<3;l++)
                {
                    //summation over the same term starts
                    for(int Abar=0;Abar<3;Abar++)
                    {
                          for(int Bbar=0;Bbar<3;Bbar++)
                          {
                        I3p_120(row,col)+=fTemp_matrix_nsd_x_nsd(A,l)*fdFYchidSIGMA(Abar,Bbar)*(fFe(i,Bbar)*fFp_inverse(B,Abar)+fFe(i,Abar)*fFp_inverse(B,Bbar));
                       }
                    }
                    row++;
                }
            }
            col++;
        }
    }

}
void FSMicromorphic2_3DT:: Form_I3p_121()
{

    int row=0;
    int col=0;
    I3p_121=0.0;

    fTemp_matrix_nsd_x_nsd2.MultABCT(fFe,fN1,fFe);
    fTemp_matrix_nsd_x_nsd.MultAB(fDeformation_Gradient_Inverse,fTemp_matrix_nsd_x_nsd2);

    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int A=0;A<3;A++)
            {
                for(int l=0;l<3;l++)
                {
                    //summation over the same term starts
                    for(int Abar=0;Abar<3;Abar++)
                    {
                        I3p_121(row,col)+=fTemp_matrix_nsd_x_nsd(A,l)*fChie(i,Abar)*fFp_inverse(B,Abar);
                    }
                    row++;
                }
            }
            col++;
        }
    }

}
void FSMicromorphic2_3DT:: Form_I3p_122()
{

    int row=0;
    int col=0;
    I3p_122=0.0;

    fTemp_matrix_nsd_x_nsd2.MultABCT(fFe,fN1,fFe);
    fTemp_matrix_nsd_x_nsd.MultAB(fDeformation_Gradient_Inverse,fTemp_matrix_nsd_x_nsd2);

    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int A=0;A<3;A++)
            {
                for(int l=0;l<3;l++)
                {
                    //summation over the same term starts
                    for(int Abar=0;Abar<3;Abar++)
                    {
                        I3p_122(row,col)+=fTemp_matrix_nsd_x_nsd(A,l)*fFe(i,Abar)*fChip_inverse(B,Abar);
                    }
                    row++;
                }
            }
            col++;
        }
    }

}
void FSMicromorphic2_3DT:: Form_I3p_123()
{

    int row=0;
    int col=0;
    I3p_123=0.0;
    fTemp_matrix_nsd_x_nsd2.MultABCT(fFe,fN1,fFe);
    fTemp_matrix_nsd_x_nsd.MultAB(fDeformation_Gradient_Inverse,fTemp_matrix_nsd_x_nsd2);

    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int A=0;A<3;A++)
            {
                for(int l=0;l<3;l++)
                {
                    //summation over the same term starts
                    for(int Abar=0;Abar<3;Abar++)
                    {
                          for(int Bbar=0;Bbar<3;Bbar++)
                          {
                        I3p_123(row,col)+=fTemp_matrix_nsd_x_nsd(A,l)*fdFYchidSIGMA(Abar,Bbar)*fChie(i,Bbar)*fFp_inverse(B,Abar);
                       }
                    }
                    row++;
                }
            }
            col++;
        }
    }
}

void FSMicromorphic2_3DT:: Form_I3p_124()
{

    int row=0;
    int col=0;
    I3p_124=0.0;

    fTemp_matrix_nsd_x_nsd2.MultABCT(fFe,fN1,fFe);
    fTemp_matrix_nsd_x_nsd.MultAB(fDeformation_Gradient_Inverse,fTemp_matrix_nsd_x_nsd2);

    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int A=0;A<3;A++)
            {
                for(int l=0;l<3;l++)
                {
                    //summation over the same term starts
                    for(int Abar=0;Abar<3;Abar++)
                    {
                          for(int Bbar=0;Bbar<3;Bbar++)
                          {
                        I3p_124(row,col)+=fTemp_matrix_nsd_x_nsd(A,l)*fdFYchidSIGMA(Abar,Bbar)*fFe(i,Abar)*fChip_inverse(B,Bbar);
                       }
                    }
                    row++;
                }
            }
            col++;
        }
    }


}


void FSMicromorphic2_3DT:: Form_I3p_125()
{

    int row=0;
    int col=0;
    I3p_125=0.0;

    fTemp_matrix_nsd_x_nsd2.MultABCT(fFe,fN1,fFe);
    fTemp_matrix_nsd_x_nsd.MultAB(fDeformation_Gradient_Inverse,fTemp_matrix_nsd_x_nsd2);

    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int A=0;A<3;A++)
            {
                for(int l=0;l<3;l++)
                {
                    //summation over the same term starts
                    for(int Abar=0;Abar<3;Abar++)
                    {
                          for(int Bbar=0;Bbar<3;Bbar++)
                          {
                       I3p_125(row,col)+=fTemp_matrix_nsd_x_nsd(A,l)*fdFYchidSIGMA(Abar,Bbar)*fChie(i,Abar)*fFp_inverse(B,Bbar);
                       }
                    }
                    row++;
                }
            }
            col++;
        }
    }
}



void FSMicromorphic2_3DT:: Form_I3p_126()
{

    int row=0;
    int col=0;
    I3p_126=0.0;


    fTemp_matrix_nsd_x_nsd2.MultABCT(fFe,fN1,fFe);
    fTemp_matrix_nsd_x_nsd.MultAB(fDeformation_Gradient_Inverse,fTemp_matrix_nsd_x_nsd2);

    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int A=0;A<3;A++)
            {
                for(int l=0;l<3;l++)
                {
                    //summation over the same term starts
                    for(int Abar=0;Abar<3;Abar++)
                    {
                          for(int Bbar=0;Bbar<3;Bbar++)
                          {
                        I3p_126(row,col)+=fTemp_matrix_nsd_x_nsd(A,l)*fdFYchidSIGMA(Abar,Bbar)*fFe(i,Bbar)*fChip_inverse(B,Abar);
                       }
                    }
                    row++;
                }
            }
            col++;
        }
    }
}



void FSMicromorphic2_3DT:: Form_I3p_127()
{

    int row=0;
    int col=0;
    I3p_127=0.0;

    fTemp_matrix_nsd_x_nsd2.MultABCT(fFe,fD1,fFe);
    fTemp_matrix_nsd_x_nsd.MultAB(fDeformation_Gradient_Inverse,fTemp_matrix_nsd_x_nsd2);

    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int A=0;A<3;A++)
            {
                for(int l=0;l<3;l++)
                {
                    //summation over the same term starts
                    for(int Abar=0;Abar<3;Abar++)
                    {
                      I3p_127(row,col)+=fTemp_matrix_nsd_x_nsd(A,l)*fFe(i,Abar)*fFp_inverse(B,Abar);

                    }
                    row++;
                }
            }
            col++;
        }
    }
}


void FSMicromorphic2_3DT:: Form_I3p_128()
{

    int row=0;
    int col=0;
    I3p_128=0.0;

    fTemp_matrix_nsd_x_nsd2.MultABCT(fFe,fD1,fFe);
    fTemp_matrix_nsd_x_nsd.MultAB(fDeformation_Gradient_Inverse,fTemp_matrix_nsd_x_nsd2);

    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int A=0;A<3;A++)
            {
                for(int l=0;l<3;l++)
                {
                    //summation over the same term starts
                    for(int Abar=0;Abar<3;Abar++)
                    {
                      for(int Bbar=0;Bbar<3;Bbar++)
                      {
                           I3p_128(row,col)+=fTemp_matrix_nsd_x_nsd(A,l)*fdFYdS(Abar,Bbar)
                           *(fFe(i,Bbar)*fFp_inverse(B,Abar)+fFe(i,Abar)*fFp_inverse(B,Bbar));
                      }
                    }
                    row++;
                }
            }
            col++;
        }
    }
}



void FSMicromorphic2_3DT:: Form_I3p_129()
{

    int row=0;
    int col=0;
    I3p_129=0.0;
    fTemp_matrix_nsd_x_nsd2.MultABCT(fFe,fD1,fFe);
    fTemp_matrix_nsd_x_nsd.MultAB(fDeformation_Gradient_Inverse,fTemp_matrix_nsd_x_nsd2);

    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int A=0;A<3;A++)
            {
                for(int l=0;l<3;l++)
                {
                    //summation over the same term starts
                    for(int Abar=0;Abar<3;Abar++)
                    {
                         I3p_129(row,col)+=fTemp_matrix_nsd_x_nsd(A,l)*fChie(i,Abar)*fFp_inverse(B,Abar);

                    }
                    row++;
                }
            }
            col++;
        }
    }
}


void FSMicromorphic2_3DT:: Form_I3p_130()
{

    int row=0;
    int col=0;
    I3p_130=0.0;

    fTemp_matrix_nsd_x_nsd2.MultABCT(fFe,fD1,fFe);
    fTemp_matrix_nsd_x_nsd.MultAB(fDeformation_Gradient_Inverse,fTemp_matrix_nsd_x_nsd2);

    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int A=0;A<3;A++)
            {
                for(int l=0;l<3;l++)
                {
                    //summation over the same term starts
                    for(int Abar=0;Abar<3;Abar++)
                    {
                         I3p_130(row,col)+=fTemp_matrix_nsd_x_nsd(A,l)*fFe(i,Abar)*fChip_inverse(B,Abar);

                    }
                    row++;
                }
            }
            col++;
        }
    }
}


void FSMicromorphic2_3DT:: Form_I3p_131()
{

    int row=0;
    int col=0;
    I3p_131=0.0;

    fTemp_matrix_nsd_x_nsd2.MultABCT(fFe,fD1,fFe);
    fTemp_matrix_nsd_x_nsd.MultAB(fDeformation_Gradient_Inverse,fTemp_matrix_nsd_x_nsd2);

    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int A=0;A<3;A++)
            {
                for(int l=0;l<3;l++)
                {
                    //summation over the same term starts
                    for(int Abar=0;Abar<3;Abar++)
                    {
                        for(int Bbar=0;Bbar<3;Bbar++)
                        {
                         I3p_131(row,col)+=fTemp_matrix_nsd_x_nsd(A,l)*fdFYdS(Abar,Bbar)*fChie(i,Bbar)*fFp_inverse(B,Abar);
                    }
                    }
                    row++;
                }
            }
            col++;
        }
    }
}


void FSMicromorphic2_3DT:: Form_I3p_132()
{

    int row=0;
    int col=0;
    I3p_132=0.0;

    fTemp_matrix_nsd_x_nsd2.MultABCT(fFe,fD1,fFe);
    fTemp_matrix_nsd_x_nsd.MultAB(fDeformation_Gradient_Inverse,fTemp_matrix_nsd_x_nsd2);

    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int A=0;A<3;A++)
            {
                for(int l=0;l<3;l++)
                {
                    //summation over the same term starts
                    for(int Abar=0;Abar<3;Abar++)
                    {
                        for(int Bbar=0;Bbar<3;Bbar++)
                        {
                         I3p_132(row,col)+=fTemp_matrix_nsd_x_nsd(A,l)*fdFYdS(Abar,Bbar)*fFe(i,Abar)*fChip_inverse(B,Bbar);
                    }
                    }
                    row++;
                }
            }
            col++;
        }
    }
}



void FSMicromorphic2_3DT:: Form_I3p_133()
{

    int row=0;
    int col=0;
    I3p_133=0.0;

    fTemp_matrix_nsd_x_nsd2.MultABCT(fFe,fD1,fFe);
    fTemp_matrix_nsd_x_nsd.MultAB(fDeformation_Gradient_Inverse,fTemp_matrix_nsd_x_nsd2);
    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int A=0;A<3;A++)
            {
                for(int l=0;l<3;l++)
                {
                    //summation over the same term starts
                    for(int Abar=0;Abar<3;Abar++)
                    {
                        for(int Bbar=0;Bbar<3;Bbar++)
                        {
                         I3p_133(row,col)+=fTemp_matrix_nsd_x_nsd(A,l)*fdFYdS(Abar,Bbar)*fChie(i,Abar)*fFp_inverse(B,Bbar);
                    }
                    }
                    row++;
                }
            }
            col++;
        }
    }
}


void FSMicromorphic2_3DT:: Form_I3p_134()
{

    int row=0;
    int col=0;
    I3p_134=0.0;

    fTemp_matrix_nsd_x_nsd2.MultABCT(fFe,fD1,fFe);
    fTemp_matrix_nsd_x_nsd.MultAB(fDeformation_Gradient_Inverse,fTemp_matrix_nsd_x_nsd2);

    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int A=0;A<3;A++)
            {
                for(int l=0;l<3;l++)
                {
                    //summation over the same term starts
                    for(int Abar=0;Abar<3;Abar++)
                    {
                        for(int Bbar=0;Bbar<3;Bbar++)
                        {
                         I3p_134(row,col)+=fTemp_matrix_nsd_x_nsd(A,l)*fdFYdS(Abar,Bbar)*fFe(i,Bbar)*fChip_inverse(B,Abar);
                    }
                    }
                    row++;
                }
            }
            col++;
        }
    }
}


void FSMicromorphic2_3DT:: Form_I3p_135()
{

    int row=0;
    int col=0;
    I3p_135=0.0;

    fTemp_matrix_nsd_x_nsd.Transpose(fD1);
    fTemp_matrix_nsd_x_nsd2.MultABCT(fFe,fTemp_matrix_nsd_x_nsd,fFe);
    fTemp_matrix_nsd_x_nsd.MultAB(fDeformation_Gradient_Inverse,fTemp_matrix_nsd_x_nsd2);

    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int A=0;A<3;A++)
            {
                for(int l=0;l<3;l++)
                {
                    //summation over the same term starts
                    for(int Abar=0;Abar<3;Abar++)
                    {
                      I3p_135(row,col)+=fTemp_matrix_nsd_x_nsd(A,l)*fFe(i,Abar)*fFp_inverse(B,Abar);

                    }
                    row++;
                }
            }
            col++;
        }
    }
}


void FSMicromorphic2_3DT:: Form_I3p_136()
{

    int row=0;
    int col=0;
    I3p_136=0.0;

    fTemp_matrix_nsd_x_nsd.Transpose(fD1);
    fTemp_matrix_nsd_x_nsd2.MultABCT(fFe,fTemp_matrix_nsd_x_nsd,fFe);
    fTemp_matrix_nsd_x_nsd.MultAB(fDeformation_Gradient_Inverse,fTemp_matrix_nsd_x_nsd2);

    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int A=0;A<3;A++)
            {
                for(int l=0;l<3;l++)
                {
                    //summation over the same term starts
                    for(int Abar=0;Abar<3;Abar++)
                    {
                      for(int Bbar=0;Bbar<3;Bbar++)
                      {
                           I3p_136(row,col)+=fTemp_matrix_nsd_x_nsd(A,l)*fdFYdS(Abar,Bbar)
                           *(fFe(i,Bbar)*fFp_inverse(B,Abar)+fFe(i,Abar)*fFp_inverse(B,Bbar));
                      }
                    }
                    row++;
                }
            }
            col++;
        }
    }
}



void FSMicromorphic2_3DT:: Form_I3p_137()
{

    int row=0;
    int col=0;
    I3p_137=0.0;
    fTemp_matrix_nsd_x_nsd.Transpose(fD1);
    fTemp_matrix_nsd_x_nsd2.MultABCT(fFe,fTemp_matrix_nsd_x_nsd,fFe);
    fTemp_matrix_nsd_x_nsd.MultAB(fDeformation_Gradient_Inverse,fTemp_matrix_nsd_x_nsd2);

    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int A=0;A<3;A++)
            {
                for(int l=0;l<3;l++)
                {
                    //summation over the same term starts
                    for(int Abar=0;Abar<3;Abar++)
                    {
                         I3p_137(row,col)+=fTemp_matrix_nsd_x_nsd(A,l)*fChie(i,Abar)*fFp_inverse(B,Abar);

                    }
                    row++;
                }
            }
            col++;
        }
    }
}


void FSMicromorphic2_3DT:: Form_I3p_138()
{

    int row=0;
    int col=0;
    I3p_138=0.0;

    fTemp_matrix_nsd_x_nsd.Transpose(fD1);
    fTemp_matrix_nsd_x_nsd2.MultABCT(fFe,fTemp_matrix_nsd_x_nsd,fFe);
    fTemp_matrix_nsd_x_nsd.MultAB(fDeformation_Gradient_Inverse,fTemp_matrix_nsd_x_nsd2);

    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int A=0;A<3;A++)
            {
                for(int l=0;l<3;l++)
                {
                    //summation over the same term starts
                    for(int Abar=0;Abar<3;Abar++)
                    {
                         I3p_138(row,col)+=fTemp_matrix_nsd_x_nsd(A,l)*fFe(i,Abar)*fChip_inverse(B,Abar);

                    }
                    row++;
                }
            }
            col++;
        }
    }
}


void FSMicromorphic2_3DT:: Form_I3p_139()
{

    int row=0;
    int col=0;
    I3p_139=0.0;
    fTemp_matrix_nsd_x_nsd.Transpose(fD1);
    fTemp_matrix_nsd_x_nsd2.MultABCT(fFe,fTemp_matrix_nsd_x_nsd,fFe);
    fTemp_matrix_nsd_x_nsd.MultAB(fDeformation_Gradient_Inverse,fTemp_matrix_nsd_x_nsd2);
    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int A=0;A<3;A++)
            {
                for(int l=0;l<3;l++)
                {
                    //summation over the same term starts
                    for(int Abar=0;Abar<3;Abar++)
                    {
                        for(int Bbar=0;Bbar<3;Bbar++)
                        {
                         I3p_139(row,col)+=fTemp_matrix_nsd_x_nsd(A,l)*fdFYdS(Abar,Bbar)*fChie(i,Bbar)*fFp_inverse(B,Abar);
                    }
                    }
                    row++;
                }
            }
            col++;
        }
    }
}


void FSMicromorphic2_3DT:: Form_I3p_140()
{

    int row=0;
    int col=0;
    I3p_140=0.0;

    fTemp_matrix_nsd_x_nsd.Transpose(fD1);
    fTemp_matrix_nsd_x_nsd2.MultABCT(fFe,fTemp_matrix_nsd_x_nsd,fFe);
    fTemp_matrix_nsd_x_nsd.MultAB(fDeformation_Gradient_Inverse,fTemp_matrix_nsd_x_nsd2);
    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int A=0;A<3;A++)
            {
                for(int l=0;l<3;l++)
                {
                    //summation over the same term starts
                    for(int Abar=0;Abar<3;Abar++)
                    {
                        for(int Bbar=0;Bbar<3;Bbar++)
                        {
                         I3p_140(row,col)+=fTemp_matrix_nsd_x_nsd(A,l)*fdFYdS(Abar,Bbar)*fFe(i,Abar)*fChip_inverse(B,Bbar);
                    }
                    }
                    row++;
                }
            }
            col++;
        }
    }
}



void FSMicromorphic2_3DT:: Form_I3p_141()
{

    int row=0;
    int col=0;
    I3p_141=0.0;

    fTemp_matrix_nsd_x_nsd.Transpose(fD1);
    fTemp_matrix_nsd_x_nsd2.MultABCT(fFe,fTemp_matrix_nsd_x_nsd,fFe);
    fTemp_matrix_nsd_x_nsd.MultAB(fDeformation_Gradient_Inverse,fTemp_matrix_nsd_x_nsd2);
    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int A=0;A<3;A++)
            {
                for(int l=0;l<3;l++)
                {
                    //summation over the same term starts
                    for(int Abar=0;Abar<3;Abar++)
                    {
                        for(int Bbar=0;Bbar<3;Bbar++)
                        {
                         I3p_141(row,col)+=fTemp_matrix_nsd_x_nsd(A,l)*fdFYdS(Abar,Bbar)*fChie(i,Abar)*fFp_inverse(B,Bbar);
                    }
                    }
                    row++;
                }
            }
            col++;
        }
    }
}


void FSMicromorphic2_3DT:: Form_I3p_142()
{

    int row=0;
    int col=0;
    I3p_142=0.0;

    fTemp_matrix_nsd_x_nsd.Transpose(fD1);
    fTemp_matrix_nsd_x_nsd2.MultABCT(fFe,fTemp_matrix_nsd_x_nsd,fFe);
    fTemp_matrix_nsd_x_nsd.MultAB(fDeformation_Gradient_Inverse,fTemp_matrix_nsd_x_nsd2);

    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int A=0;A<3;A++)
            {
                for(int l=0;l<3;l++)
                {
                    //summation over the same term starts
                    for(int Abar=0;Abar<3;Abar++)
                    {
                        for(int Bbar=0;Bbar<3;Bbar++)
                        {
                         I3p_142(row,col)+=fTemp_matrix_nsd_x_nsd(A,l)*fdFYdS(Abar,Bbar)*fFe(i,Bbar)*fChip_inverse(B,Abar);
                    }
                    }
                    row++;
                }
            }
            col++;
        }
    }
}







void FSMicromorphic2_3DT:: Form_I4e_1()
{
    int row=0;
    int col=0;
    I4e_1=0.0;

    fTemp_matrix_nsd_x_nsd2.MultABCT(fFe,SPK,fFp_inverse);
    fTemp_matrix_nsd_x_nsd.MultAB(fDeformation_Gradient_Inverse,fTemp_matrix_nsd_x_nsd2);

    for(int N=0;N<3;N++)
    {
        for(int l=0;l<3;l++)
        {
            row=l;
            for(int A=0;A<3;A++)
            {
                //summation over the same term

                I4e_1(row,col)+=fTemp_matrix_nsd_x_nsd(A,N);
                row=row+3;
            }
            col++;
        }
    }


}


void FSMicromorphic2_3DT:: Form_I4p_2()
{
    int row=0;
    int col=0;
    I4p_2=0.0;

    fFp_inverse.Inverse(fFp);
    fCe_n_inverse.Inverse(fCe_n);
    //fdGdS_tr_transpose.Transpose(fdGdS_tr);
    //fTemp_matrix_nsd_x_nsd2.MultABC(fdGdS_tr_transpose,fFp_n,fFp_inverse);
    fTemp_matrix_nsd_x_nsd2.MultATBC(fdGdS_tr,fFp_n,fFp_inverse);
    fTemp_matrix_nsd_x_nsd.MultABC(fFe,fCe_n_inverse,fTemp_matrix_nsd_x_nsd2);

    // fTemp_matrix_nsd_x_nsd2.Inverse(fFeT);
    // fTemp_matrix_nsd_x_nsd.MultAB(fTemp_matrix_nsd_x_nsd2,fA1);

        for(int M=0;M<3;M++)
        {
            for(int i=0;i<3;i++)
            {
                row=0;
                for(int N=0; N<3;N++)
                {
                    for(int l=0;l<3;l++)
                    {
                        //summation over the same term
                        for(int k=0;k<3;k++)
                        {
                            for(int Lbar=0;Lbar<3;Lbar++)
                            {
                                for(int Kbar=0;Kbar<3;Kbar++)
                                {
                                    for(int Nbar=0;Nbar<3;Nbar++)
                                    {
                                        I4p_2(row,col)+=fDeformation_Gradient_Inverse(N,k)*fFe(k,Kbar)
                                        *SPK(Kbar,Lbar)*fTemp_matrix_nsd_x_nsd(l,Lbar)
                                        *fFe(i,Nbar)*fFp_inverse(M,Nbar);
                                    }
                                }
                            }
                        }
                        row++;
                    }
                }
                col++;
            }
        }

}

void FSMicromorphic2_3DT:: Form_I4p_3()
{
    int row=0;
    int col=0;
    I4p_3=0.0;

    fFp_inverse.Inverse(fFp);
    fCe_n_inverse.Inverse(fCe_n);
    //fdGdS_tr_transpose.Transpose(fdGdS_tr);
    //fTemp_matrix_nsd_x_nsd2.MultABC(fdGdS_tr_transpose,fFp_n,fFp_inverse);
    fTemp_matrix_nsd_x_nsd2.MultATBC(fdGdS_tr,fFp_n,fFp_inverse);
    fTemp_matrix_nsd_x_nsd.MultABC(fFe,fCe_n_inverse,fTemp_matrix_nsd_x_nsd2);

    // fTemp_matrix_nsd_x_nsd2.Inverse(fFeT);
    // fTemp_matrix_nsd_x_nsd.MultAB(fTemp_matrix_nsd_x_nsd2,fA1);

        for(int M=0;M<3;M++)
        {
            for(int i=0;i<3;i++)
            {
                row=0;
                for(int N=0; N<3;N++)
                {
                    for(int l=0;l<3;l++)
                    {
                        //summation over the same term
                        for(int k=0;k<3;k++)
                        {
                            for(int Lbar=0;Lbar<3;Lbar++)
                            {
                                for(int Kbar=0;Kbar<3;Kbar++)
                                {
                                    for(int Nbar=0;Nbar<3;Nbar++)
                                    {
                                        for(int Mbar=0;Mbar<3;Mbar++)
                                        {
                                            I4p_3(row,col)+=fDeformation_Gradient_Inverse(N,k)*fFe(k,Kbar)
                                            *SPK(Kbar,Lbar)*fTemp_matrix_nsd_x_nsd(l,Lbar)
                                            *fdFYdS(Mbar,Nbar)*fFe(i,Mbar)*fFp_inverse(M,Nbar);
                                        }
                                    }
                                }
                            }
                        }
                        row++;
                    }
                }
                col++;
            }
        }

}


void FSMicromorphic2_3DT:: Form_I4p_4()
{
    int row=0;
    int col=0;
    I4p_4=0.0;

    fFp_inverse.Inverse(fFp);
    fCe_n_inverse.Inverse(fCe_n);
    //fdGdS_tr_transpose.Transpose(fdGdS_tr);
    //fTemp_matrix_nsd_x_nsd2.MultABC(fdGdS_tr_transpose,fFp_n,fFp_inverse);
    fTemp_matrix_nsd_x_nsd2.MultATBC(fdGdS_tr,fFp_n,fFp_inverse);
    fTemp_matrix_nsd_x_nsd.MultABC(fFe,fCe_n_inverse,fTemp_matrix_nsd_x_nsd2);

    //fTemp_matrix_nsd_x_nsd2.Inverse(fFeT);
    //fTemp_matrix_nsd_x_nsd.MultAB(fTemp_matrix_nsd_x_nsd2,fA1);

    for(int M=0;M<3;M++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int N=0; N<3;N++)
            {
                for(int l=0;l<3;l++)
                {
                    //summation over the same term
                    for(int k=0;k<3;k++)
                    {
                        for(int Lbar=0;Lbar<3;Lbar++)
                        {
                            for(int Kbar=0;Kbar<3;Kbar++)
                            {
                                for(int Nbar=0;Nbar<3;Nbar++)
                                {
                                    for(int Mbar=0;Mbar<3;Mbar++)
                                    {
                                        I4p_4(row,col)+=fDeformation_Gradient_Inverse(N,k)*fFe(k,Kbar)
                                        *SPK(Kbar,Lbar)*fTemp_matrix_nsd_x_nsd(l,Lbar)
                                        *fdFYdS(Mbar,Nbar)*fFe(i,Nbar)*fFp_inverse(M,Mbar);
                                    }
                                }
                            }
                        }
                    }
                    row++;
                }
            }
            col++;
        }
    }

}


void FSMicromorphic2_3DT:: Form_I4p_5()
{
    int row=0;
    int col=0;
    I4p_5=0.0;
    fTemp_matrix_nsd_x_nsd2.MultATBC(fdGdS_tr,fFp_n,fFp_inverse);
    fTemp_matrix_nsd_x_nsd.MultABC(fFe,fCe_n_inverse,fTemp_matrix_nsd_x_nsd2);
    fTemp_matrix_nsd_x_nsd2.MultABCT(fFe,SPK,fTemp_matrix_nsd_x_nsd);
    fTemp_matrix_nsd_x_nsd.MultAB(fDeformation_Gradient_Inverse,fTemp_matrix_nsd_x_nsd2);
    for(int M=0;M<3;M++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int A=0; A<3;A++)
            {
                for(int l=0;l<3;l++)
                {
                    //summation over the same term
                    for(int Abar=0;Abar<3;Abar++)
                    {
                        I4p_5(row,col)+=fTemp_matrix_nsd_x_nsd(A,l)*fChie(i,Abar)*fFp_inverse(M,Abar);
                    }
                    row++;
                }
            }
            col++;
        }
    }

}

void FSMicromorphic2_3DT:: Form_I4p_6()
{
    int row=0;
    int col=0;
    I4p_6=0.0;
    fTemp_matrix_nsd_x_nsd2.MultATBC(fdGdS_tr,fFp_n,fFp_inverse);
    fTemp_matrix_nsd_x_nsd.MultABC(fFe,fCe_n_inverse,fTemp_matrix_nsd_x_nsd2);
    fTemp_matrix_nsd_x_nsd2.MultABT(SPK,fTemp_matrix_nsd_x_nsd);
    fTemp_matrix_nsd_x_nsd.MultABC(fDeformation_Gradient_Inverse,fFe,fTemp_matrix_nsd_x_nsd2);
    for(int M=0;M<3;M++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int A=0;A<3;A++)
            {
                for(int l=0;l<3;l++)
                {
                    //summation over the same term
                    for(int Mbar=0;Mbar<3;Mbar++)
                    {
                        for(int Nbar=0;Nbar<3;Nbar++)
                        {
                            I4p_6(row,col)+=fTemp_matrix_nsd_x_nsd(A,l)*fdFYdS(Mbar,Nbar)*fChie(i,Nbar)*fFp_inverse(M,Mbar);
                        }
                    }
                    row++;
                }
            }
            col++;
        }
    }

}

void FSMicromorphic2_3DT:: Form_I4p_7()
{
    int row=0;
    int col=0;
    I4p_7=0.0;
    fTemp_matrix_nsd_x_nsd2.MultATBC(fdGdS_tr,fFp_n,fFp_inverse);
    fTemp_matrix_nsd_x_nsd.MultABC(fFe,fCe_n_inverse,fTemp_matrix_nsd_x_nsd2);
    fTemp_matrix_nsd_x_nsd2.MultABT(SPK,fTemp_matrix_nsd_x_nsd);
    fTemp_matrix_nsd_x_nsd.MultABC(fDeformation_Gradient_Inverse,fFe,fTemp_matrix_nsd_x_nsd2);
    for(int M=0;M<3;M++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int A=0;A<3;A++)
            {
                for(int l=0;l<3;l++)
                {
                    //summation over the same term
                    for(int Mbar=0;Mbar<3;Mbar++)
                    {
                        for(int Nbar=0;Nbar<3;Nbar++)
                        {
                            I4p_7(row,col)+=fTemp_matrix_nsd_x_nsd(A,l)*fdFYdS(Mbar,Nbar)*fChie(i,Mbar)*fFp_inverse(M,Nbar);
                        }
                    }
                    row++;
                }
            }
            col++;
        }
    }

}


void FSMicromorphic2_3DT:: Form_I4p_8()
{
    int row=0;
    int col=0;
    I4p_8=0.0;
    fTemp_matrix_nsd_x_nsd2.MultATBC(fdGdS_tr,fFp_n,fFp_inverse);
    fTemp_matrix_nsd_x_nsd.MultABC(fFe,fCe_n_inverse,fTemp_matrix_nsd_x_nsd2);
    fTemp_matrix_nsd_x_nsd2.MultABCT(fFe,SPK,fTemp_matrix_nsd_x_nsd);
    fTemp_matrix_nsd_x_nsd.MultAB(fDeformation_Gradient_Inverse,fTemp_matrix_nsd_x_nsd2);
    for(int M=0;M<3;M++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int A=0; A<3;A++)
            {
                for(int l=0;l<3;l++)
                {
                    //summation over the same term
                    for(int Abar=0;Abar<3;Abar++)
                    {
                        I4p_8(row,col)+=fTemp_matrix_nsd_x_nsd(A,l)*fFe(i,Abar)*fChip_inverse(M,Abar);
                    }
                    row++;
                }
            }
            col++;
        }
    }

}

void FSMicromorphic2_3DT:: Form_I4p_9()
{
    int row=0;
    int col=0;
    I4p_9=0.0;
    fTemp_matrix_nsd_x_nsd2.MultATBC(fdGdS_tr,fFp_n,fFp_inverse);
    fTemp_matrix_nsd_x_nsd.MultABC(fFe,fCe_n_inverse,fTemp_matrix_nsd_x_nsd2);
    fTemp_matrix_nsd_x_nsd2.MultABT(SPK,fTemp_matrix_nsd_x_nsd);
    fTemp_matrix_nsd_x_nsd.MultABC(fDeformation_Gradient_Inverse,fFe,fTemp_matrix_nsd_x_nsd2);
    for(int M=0;M<3;M++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int A=0; A<3;A++)
            {
                for(int l=0;l<3;l++)
                {
                    //summation over the same term
                    for(int Abar=0;Abar<3;Abar++)
                    {
                        for(int Bbar=0;Bbar<3;Bbar++)
                        {
                            I4p_9(row,col)+=fTemp_matrix_nsd_x_nsd(A,l)*fdFYdS(Abar,Bbar)*fFe(i,Abar)*fChip_inverse(M,Bbar);
                        }
                    }
                    row++;
                }
            }
            col++;
        }
    }

}

void FSMicromorphic2_3DT:: Form_I4p_10()
{
    int row=0;
    int col=0;
    I4p_10=0.0;
    fTemp_matrix_nsd_x_nsd2.MultATBC(fdGdS_tr,fFp_n,fFp_inverse);
    fTemp_matrix_nsd_x_nsd.MultABC(fFe,fCe_n_inverse,fTemp_matrix_nsd_x_nsd2);
    fTemp_matrix_nsd_x_nsd2.MultABT(SPK,fTemp_matrix_nsd_x_nsd);
    fTemp_matrix_nsd_x_nsd.MultABC(fDeformation_Gradient_Inverse,fFe,fTemp_matrix_nsd_x_nsd2);

    for(int M=0;M<3;M++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int A=0; A<3;A++)
            {
                for(int l=0;l<3;l++)
                {
                    //summation over the same term
                    for(int Abar=0;Abar<3;Abar++)
                    {
                        for(int Bbar=0;Bbar<3;Bbar++)
                        {
                            I4p_10(row,col)+=fTemp_matrix_nsd_x_nsd(A,l)*fdFYdS(Abar,Bbar)*fFe(i,Bbar)*fChip_inverse(M,Abar);
                        }
                    }
                    row++;
                }
            }
            col++;
        }
    }

}



void FSMicromorphic2_3DT:: Form_I4p_11()
{

    int row=0;
    int col=0;
    I4p_11=0.0;

    fTemp_matrix_nsd_x_nsd2.MultATBC(fdGdS_tr,fFp_n,fFp_inverse);
    fTemp_matrix_nsd_x_nsd.MultABC(fFe,fCe_n_inverse,fTemp_matrix_nsd_x_nsd2);
    fTemp_matrix_nsd_x_nsd2.MultABT(SPK,fTemp_matrix_nsd_x_nsd);
    fTemp_matrix_nsd_x_nsd.MultABC(fDeformation_Gradient_Inverse,fFe,fTemp_matrix_nsd_x_nsd2);

    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int A=0;A<3;A++)
            {
                for(int l=0;l<3;l++)
                {
                    //summation over the same term starts
                    for(int Abar=0;Abar<3;Abar++)
                    {
                       I4p_11(row,col)+=fTemp_matrix_nsd_x_nsd(A,l)*fFe(i,Abar)*fFp_inverse(B,Abar);
                    }
                    row++;
                }
            }
            col++;
        }
    }


}

void FSMicromorphic2_3DT:: Form_I4p_12()
{

    int row=0;
    int col=0;
    I4p_12=0.0;

    fTemp_matrix_nsd_x_nsd2.MultATBC(fdGdS_tr,fFp_n,fFp_inverse);
    fTemp_matrix_nsd_x_nsd.MultABC(fFe,fCe_n_inverse,fTemp_matrix_nsd_x_nsd2);
    fTemp_matrix_nsd_x_nsd2.MultABT(SPK,fTemp_matrix_nsd_x_nsd);
    fTemp_matrix_nsd_x_nsd.MultABC(fDeformation_Gradient_Inverse,fFe,fTemp_matrix_nsd_x_nsd2);
    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int A=0;A<3;A++)
            {
                for(int l=0;l<3;l++)
                {
                    //summation over the same term starts
                    for(int Abar=0;Abar<3;Abar++)
                    {
                          for(int Bbar=0;Bbar<3;Bbar++)
                          {
                        I4p_12(row,col)+=fTemp_matrix_nsd_x_nsd(A,l)*fdFYchidSIGMA(Abar,Bbar)*(fFe(i,Bbar)*fFp_inverse(B,Abar)+fFe(i,Abar)*fFp_inverse(B,Bbar));
                       }
                    }
                    row++;
                }
            }
            col++;
        }
    }

}
void FSMicromorphic2_3DT:: Form_I4p_13()
{

    int row=0;
    int col=0;
   I4p_13=0.0;

    fTemp_matrix_nsd_x_nsd2.MultATBC(fdGdS_tr,fFp_n,fFp_inverse);
    fTemp_matrix_nsd_x_nsd.MultABC(fFe,fCe_n_inverse,fTemp_matrix_nsd_x_nsd2);
    fTemp_matrix_nsd_x_nsd2.MultABT(SPK,fTemp_matrix_nsd_x_nsd);
    fTemp_matrix_nsd_x_nsd.MultABC(fDeformation_Gradient_Inverse,fFe,fTemp_matrix_nsd_x_nsd2);
    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int A=0;A<3;A++)
            {
                for(int l=0;l<3;l++)
                {
                    //summation over the same term starts
                    for(int Abar=0;Abar<3;Abar++)
                    {
                        I4p_13(row,col)+=fTemp_matrix_nsd_x_nsd(A,l)*fChie(i,Abar)*fFp_inverse(B,Abar);
                    }
                    row++;
                }
            }
            col++;
        }
    }

}
void FSMicromorphic2_3DT:: Form_I4p_14()
{

    int row=0;
    int col=0;
    I4p_14=0.0;

    fTemp_matrix_nsd_x_nsd2.MultATBC(fdGdS_tr,fFp_n,fFp_inverse);
    fTemp_matrix_nsd_x_nsd.MultABC(fFe,fCe_n_inverse,fTemp_matrix_nsd_x_nsd2);
    fTemp_matrix_nsd_x_nsd2.MultABT(SPK,fTemp_matrix_nsd_x_nsd);
    fTemp_matrix_nsd_x_nsd.MultABC(fDeformation_Gradient_Inverse,fFe,fTemp_matrix_nsd_x_nsd2);

    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int A=0;A<3;A++)
            {
                for(int l=0;l<3;l++)
                {
                    //summation over the same term starts
                    for(int Abar=0;Abar<3;Abar++)
                    {
                        I4p_14(row,col)+=fTemp_matrix_nsd_x_nsd(A,l)*fFe(i,Abar)*fChip_inverse(B,Abar);
                    }
                    row++;
                }
            }
            col++;
        }
    }

}
void FSMicromorphic2_3DT:: Form_I4p_15()
{

    int row=0;
    int col=0;
    I4p_15=0.0;

    fTemp_matrix_nsd_x_nsd2.MultATBC(fdGdS_tr,fFp_n,fFp_inverse);
    fTemp_matrix_nsd_x_nsd.MultABC(fFe,fCe_n_inverse,fTemp_matrix_nsd_x_nsd2);
    fTemp_matrix_nsd_x_nsd2.MultABT(SPK,fTemp_matrix_nsd_x_nsd);
    fTemp_matrix_nsd_x_nsd.MultABC(fDeformation_Gradient_Inverse,fFe,fTemp_matrix_nsd_x_nsd2);

    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int A=0;A<3;A++)
            {
                for(int l=0;l<3;l++)
                {
                    //summation over the same term starts
                    for(int Abar=0;Abar<3;Abar++)
                    {
                          for(int Bbar=0;Bbar<3;Bbar++)
                          {
                        I4p_15(row,col)+=fTemp_matrix_nsd_x_nsd(A,l)*fdFYchidSIGMA(Abar,Bbar)*fChie(i,Bbar)*fFp_inverse(B,Abar);
                       }
                    }
                    row++;
                }
            }
            col++;
        }
    }
}

void FSMicromorphic2_3DT:: Form_I4p_16()
{

    int row=0;
    int col=0;
    I4p_16=0.0;

    fTemp_matrix_nsd_x_nsd2.MultATBC(fdGdS_tr,fFp_n,fFp_inverse);
    fTemp_matrix_nsd_x_nsd.MultABC(fFe,fCe_n_inverse,fTemp_matrix_nsd_x_nsd2);
    fTemp_matrix_nsd_x_nsd2.MultABT(SPK,fTemp_matrix_nsd_x_nsd);
    fTemp_matrix_nsd_x_nsd.MultABC(fDeformation_Gradient_Inverse,fFe,fTemp_matrix_nsd_x_nsd2);

    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int A=0;A<3;A++)
            {
                for(int l=0;l<3;l++)
                {
                    //summation over the same term starts
                    for(int Abar=0;Abar<3;Abar++)
                    {
                          for(int Bbar=0;Bbar<3;Bbar++)
                          {
                        I4p_16(row,col)+=fTemp_matrix_nsd_x_nsd(A,l)*fdFYchidSIGMA(Abar,Bbar)*fFe(i,Abar)*fChip_inverse(B,Bbar);
                       }
                    }
                    row++;
                }
            }
            col++;
        }
    }


}


void FSMicromorphic2_3DT:: Form_I4p_17()
{

    int row=0;
    int col=0;
    I4p_17=0.0;

    fTemp_matrix_nsd_x_nsd2.MultATBC(fdGdS_tr,fFp_n,fFp_inverse);
    fTemp_matrix_nsd_x_nsd.MultABC(fFe,fCe_n_inverse,fTemp_matrix_nsd_x_nsd2);
    fTemp_matrix_nsd_x_nsd2.MultABT(SPK,fTemp_matrix_nsd_x_nsd);
    fTemp_matrix_nsd_x_nsd.MultABC(fDeformation_Gradient_Inverse,fFe,fTemp_matrix_nsd_x_nsd2);

    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int A=0;A<3;A++)
            {
                for(int l=0;l<3;l++)
                {
                    //summation over the same term starts
                    for(int Abar=0;Abar<3;Abar++)
                    {
                          for(int Bbar=0;Bbar<3;Bbar++)
                          {
                       I4p_17(row,col)+=fTemp_matrix_nsd_x_nsd(A,l)*fdFYchidSIGMA(Abar,Bbar)*fChie(i,Abar)*fFp_inverse(B,Bbar);
                       }
                    }
                    row++;
                }
            }
            col++;
        }
    }
}



void FSMicromorphic2_3DT:: Form_I4p_18()
{

    int row=0;
    int col=0;
    I4p_18=0.0;

    fTemp_matrix_nsd_x_nsd2.MultATBC(fdGdS_tr,fFp_n,fFp_inverse);
    fTemp_matrix_nsd_x_nsd.MultABC(fFe,fCe_n_inverse,fTemp_matrix_nsd_x_nsd2);
    fTemp_matrix_nsd_x_nsd2.MultABT(SPK,fTemp_matrix_nsd_x_nsd);
    fTemp_matrix_nsd_x_nsd.MultABC(fDeformation_Gradient_Inverse,fFe,fTemp_matrix_nsd_x_nsd2);

    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int A=0;A<3;A++)
            {
                for(int l=0;l<3;l++)
                {
                    //summation over the same term starts
                    for(int Abar=0;Abar<3;Abar++)
                    {
                          for(int Bbar=0;Bbar<3;Bbar++)
                          {
                        I4p_18(row,col)+=fTemp_matrix_nsd_x_nsd(A,l)*fdFYchidSIGMA(Abar,Bbar)*fFe(i,Bbar)*fChip_inverse(B,Abar);
                       }
                    }
                    row++;
                }
            }
            col++;
        }
    }
}

//////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////The terms added as a result of variation of trial flow rule/////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////
void FSMicromorphic2_3DT:: Form_I2p_trial_1()
{

    int row=0;
    int col=0;
    I2p_trial_1=0.0;

    for(int I=0;I<3;I++)
    {
        for(int l=0;l<3;l++)
        {
            row=0;
            for(int L=0;L<3;L++)
            {
                for(int k=0;k<3;k++)
                {
                    for(int j=0;j<3;j++)
                    {
						for(int Lbar=0;Lbar<3;Lbar++)
						{
							for(int pbar=0;pbar<3;pbar++)
							{
								for(int P=0;P<3;P++)
								{
									for(int Qbar=0;Qbar<3;Qbar++)
									{
										for(int Nbar=0;Nbar<3;Nbar++)
										{
											for(int Mbar=0;Mbar<3;Mbar++)
											{
												  I2p_trial_1(row,col)+=fDeformation_Gradient_Inverse(L,j)*fFp_inverse(P,Lbar)*fCe_n_inverse(Lbar,pbar)*fFp_inverse(I,Qbar)
												  *fFe_tr(l,pbar)*fFp_n(Qbar,P)*fFe(j,Mbar)*SPK(Mbar,Nbar)*fFe(k,Nbar);
											}
										}
									}
								}
							}
						}
                    }
                row++;
                }
            }
        col++;
        }
    }
}

void FSMicromorphic2_3DT:: Form_I2p_trial_2()
{

    int row=0;
    int col=0;
    I2p_trial_2=0.0;

    for(int I=0;I<3;I++)
    {
        for(int l=0;l<3;l++)
        {
            row=0;
            for(int L=0;L<3;L++)
            {
                for(int k=0;k<3;k++)
                {
                    for(int j=0;j<3;j++)
                    {
						for(int Lbar=0;Lbar<3;Lbar++)
						{
							for(int pbar=0;pbar<3;pbar++)
							{
								for(int P=0;P<3;P++)
								{
									for(int Qbar=0;Qbar<3;Qbar++)
									{
										for(int Nbar=0;Nbar<3;Nbar++)
										{
											for(int Mbar=0;Mbar<3;Mbar++)
											{
												  I2p_trial_2(row,col)+=fDeformation_Gradient_Inverse(L,j)*fFp_inverse(P,Lbar)*fCe_n_inverse(Lbar,pbar)*fFe_tr(l,Qbar)
												  *fFp_inverse(I,pbar)*fFp_n(Qbar,P)*fFe(j,Mbar)*SPK(Mbar,Nbar)*fFe(k,Nbar);
											}
										}
									}
								}
							}
						}
                    }
                row++;
                }
            }
        col++;
        }
    }
}


void FSMicromorphic2_3DT:: Form_I2p_trial_3()
{

    int row=0;
    int col=0;
    I2p_trial_3=0.0;

    for(int I=0;I<3;I++)
    {
        for(int l=0;l<3;l++)
        {
            row=0;
            for(int L=0;L<3;L++)
            {
                for(int k=0;k<3;k++)
                {
                    for(int j=0;j<3;j++)
                    {
						for(int Lbar=0;Lbar<3;Lbar++)
						{
							for(int pbar=0;pbar<3;pbar++)
							{
								for(int P=0;P<3;P++)
								{
									for(int Abar=0;Abar<3;Abar++)
									{
										for(int Nbar=0;Nbar<3;Nbar++)
										{
											for(int Mbar=0;Mbar<3;Mbar++)
											{
												  I2p_trial_3(row,col)+=fDeformation_Gradient_Inverse(L,j)*fFp_inverse(P,Lbar)*fCe_n_inverse(Lbar,pbar)*fFp_inverse(I,Abar)
												  *fFe_tr(l,Abar)*fFp_n(pbar,P)*fFe(j,Mbar)*SPK(Mbar,Nbar)*fFe(k,Nbar);
											}
										}
									}
								}
							}
						}
                    }
                row++;
                }
            }
        col++;
        }
    }
}


void FSMicromorphic2_3DT:: Form_I2p_trial_4()
{

    int row=0;
    int col=0;
    I2p_trial_4=0.0;

    for(int I=0;I<3;I++)
    {
        for(int l=0;l<3;l++)
        {
            row=0;
            for(int L=0;L<3;L++)
            {
                for(int k=0;k<3;k++)
                {
                    for(int j=0;j<3;j++)
                    {
						for(int Lbar=0;Lbar<3;Lbar++)
						{
							for(int pbar=0;pbar<3;pbar++)
							{
								for(int P=0;P<3;P++)
								{
									for(int Qbar=0;Qbar<3;Qbar++)
									{
										for(int Abar=0;Abar<3;Abar++)
										{
											for(int Bbar=0;Bbar<3;Bbar++)
											{
												for(int Nbar=0;Nbar<3;Nbar++)
												{
													for(int Mbar=0;Mbar<3;Mbar++)
													{
														  I2p_trial_4(row,col)+=fDeformation_Gradient_Inverse(L,j)*fFp_inverse(P,Lbar)*fCe_n_inverse(Lbar,pbar)*fFp_inverse(I,Abar)
														  *fFe_tr(l,Bbar)*fdevSPK_tr(Abar,Bbar)*fdevSPK_tr(Qbar,pbar)*fFp_n(Qbar,P)*fFe(j,Mbar)*SPK(Mbar,Nbar)*fFe(k,Nbar);
													}
												}
											}
										}
									}
								}
							}
						}
                    }
                row++;
                }
            }
        col++;
        }
    }
}


void FSMicromorphic2_3DT:: Form_I2p_trial_5()
{

    int row=0;
    int col=0;
    I2p_trial_5=0.0;

    for(int I=0;I<3;I++)
    {
        for(int l=0;l<3;l++)
        {
            row=0;
            for(int L=0;L<3;L++)
            {
                for(int k=0;k<3;k++)
                {
                    for(int j=0;j<3;j++)
                    {
						for(int Lbar=0;Lbar<3;Lbar++)
						{
							for(int pbar=0;pbar<3;pbar++)
							{
								for(int P=0;P<3;P++)
								{
									for(int Qbar=0;Qbar<3;Qbar++)
									{
										for(int Abar=0;Abar<3;Abar++)
										{
											for(int Bbar=0;Bbar<3;Bbar++)
											{
												for(int Nbar=0;Nbar<3;Nbar++)
												{
													for(int Mbar=0;Mbar<3;Mbar++)
													{
														  I2p_trial_5(row,col)+=fDeformation_Gradient_Inverse(L,j)*fFp_inverse(P,Lbar)*fCe_n_inverse(Lbar,pbar)*fFe_tr(l,Abar)
														  *fFp_inverse(I,Bbar)*fdevSPK_tr(Abar,Bbar)*fdevSPK_tr(Qbar,pbar)*fFp_n(Qbar,P)*fFe(j,Mbar)*SPK(Mbar,Nbar)*fFe(k,Nbar);
													}
												}
											}
										}
									}
								}
							}
						}
                    }
                row++;
                }
            }
        col++;
        }
    }
}



void FSMicromorphic2_3DT:: Form_I2p_trial_1_5()
{

    int row=0;
    int col=0;
    I2p_trial_1 = 0.0;
    I2p_trial_2 = 0.0;
    I2p_trial_3 = 0.0;
    I2p_trial_4 = 0.0;
    I2p_trial_5 = 0.0;


    fTemp_matrix_nsd_x_nsd = 0.0;
    fTemp_matrix_nsd_x_nsd2 = 0.0;
    fTemp_matrix_nsd_x_nsd3 = 0.0;

    fTemp_matrix_nsd_x_nsd.MultABCT(fFe,SPK,fFe);
    fTemp_matrix_nsd_x_nsd2.MultAB(fDeformation_Gradient_Inverse,fTemp_matrix_nsd_x_nsd);

    fTemp_matrix_nsd_x_nsd3.MultABC(fFp_n,fFp_inverse,fCe_n_inverse);

    for(int I=0;I<3;I++)
    {
        for(int l=0;l<3;l++)
        {
            row=0;
            for(int L=0;L<3;L++)
            {
                for(int k=0;k<3;k++)
                {
					for(int pbar=0;pbar<3;pbar++)
					{
						for(int Qbar=0;Qbar<3;Qbar++)
						{
							  I2p_trial_1(row,col)+= fTemp_matrix_nsd_x_nsd3(Qbar,pbar)*fFp_inverse(I,Qbar)
							  *fFe_tr(l,pbar)*fTemp_matrix_nsd_x_nsd2(L,k);
						}
					}
                row++;
                }
            }
        col++;
        }
    }

    row=0;
    col=0;

    for(int I=0;I<3;I++)
    {
        for(int l=0;l<3;l++)
        {
            row=0;
            for(int L=0;L<3;L++)
            {
                for(int k=0;k<3;k++)
                {
					for(int pbar=0;pbar<3;pbar++)
					{
						for(int Qbar=0;Qbar<3;Qbar++)
						{
							  I2p_trial_2(row,col)+= fTemp_matrix_nsd_x_nsd3(Qbar,pbar)*fFe_tr(l,Qbar)
							  *fFp_inverse(I,pbar)*fTemp_matrix_nsd_x_nsd2(L,k);
						}
					}
                row++;
                }
            }
        col++;
        }
    }


    row=0;
    col=0;

    for(int I=0;I<3;I++)
    {
        for(int l=0;l<3;l++)
        {
            row=0;
            for(int L=0;L<3;L++)
            {
                for(int k=0;k<3;k++)
                {
					for(int Abar=0;Abar<3;Abar++)
					{
						for(int pbar=0;pbar<3;pbar++)
						{
							for(int Qbar=0;Qbar<3;Qbar++)
							{
								  I2p_trial_3(row,col)+= fTemp_matrix_nsd_x_nsd3(Qbar,pbar)*fFp_inverse(I,Abar)
								  *fFe_tr(l,Abar)*fIdentity_matrix(pbar,Qbar)*fTemp_matrix_nsd_x_nsd2(L,k);
							}
						}
					}
                row++;
                }
            }
        col++;
        }
    }


    row=0;
    col=0;

    for(int I=0;I<3;I++)
    {
        for(int l=0;l<3;l++)
        {
            row=0;
            for(int L=0;L<3;L++)
            {
                for(int k=0;k<3;k++)
                {
					for(int Abar=0;Abar<3;Abar++)
					{
						for(int Bbar=0;Bbar<3;Bbar++)
						{
							for(int pbar=0;pbar<3;pbar++)
							{
								for(int Qbar=0;Qbar<3;Qbar++)
								{
									  I2p_trial_4(row,col)+= fTemp_matrix_nsd_x_nsd3(Qbar,pbar)*fFp_inverse(I,Abar)
									  *fFe_tr(l,Bbar)*fdevSPK_tr(Abar,Bbar)*fdevSPK_tr(Qbar,pbar)*fTemp_matrix_nsd_x_nsd2(L,k);
								}
							}
						}
					}
                row++;
                }
            }
        col++;
        }
    }

    row=0;
    col=0;

    for(int I=0;I<3;I++)
    {
        for(int l=0;l<3;l++)
        {
            row=0;
            for(int L=0;L<3;L++)
            {
                for(int k=0;k<3;k++)
                {
					for(int Abar=0;Abar<3;Abar++)
					{
						for(int Bbar=0;Bbar<3;Bbar++)
						{
							for(int pbar=0;pbar<3;pbar++)
							{
								for(int Qbar=0;Qbar<3;Qbar++)
								{
									  I2p_trial_5(row,col)+= fTemp_matrix_nsd_x_nsd3(Qbar,pbar)*fFe_tr(l,Abar)
									  *fFp_inverse(I,Bbar)*fdevSPK_tr(Abar,Bbar)*fdevSPK_tr(Qbar,pbar)*fTemp_matrix_nsd_x_nsd2(L,k);
								}
							}
						}
					}
                row++;
                }
            }
        col++;
        }
    }
}
















void FSMicromorphic2_3DT:: Form_I3p_trial_1()
{

    int row=0;
    int col=0;
    I3p_trial_1=0.0;

    for(int I=0;I<3;I++)
    {
        for(int l=0;l<3;l++)
        {
            row=0;
            for(int L=0;L<3;L++)
            {
                for(int k=0;k<3;k++)
                {
                    for(int j=0;j<3;j++)
                    {
						for(int Lbar=0;Lbar<3;Lbar++)
						{
							for(int pbar=0;pbar<3;pbar++)
							{
								for(int P=0;P<3;P++)
								{
									for(int Qbar=0;Qbar<3;Qbar++)
									{
										for(int Nbar=0;Nbar<3;Nbar++)
										{
											for(int Mbar=0;Mbar<3;Mbar++)
											{
												  I3p_trial_1(row,col)+=fDeformation_Gradient_Inverse(L,j)*fFe(j,Lbar)*fCe_n_inverse(Lbar,pbar)*fFp_inverse(I,Qbar)
												  *fFe_tr(l,pbar)*fFp_n(Qbar,P)*fFp_inverse(P,Mbar)*SPK(Mbar,Nbar)*fFe(k,Nbar);
											}
										}
									}
								}
							}
						}
                    }
                row++;
                }
            }
        col++;
        }
    }
}


void FSMicromorphic2_3DT:: Form_I3p_trial_2()
{

    int row=0;
    int col=0;
    I3p_trial_2=0.0;

    for(int I=0;I<3;I++)
    {
        for(int l=0;l<3;l++)
        {
            row=0;
            for(int L=0;L<3;L++)
            {
                for(int k=0;k<3;k++)
                {
                    for(int j=0;j<3;j++)
                    {
						for(int Lbar=0;Lbar<3;Lbar++)
						{
							for(int pbar=0;pbar<3;pbar++)
							{
								for(int P=0;P<3;P++)
								{
									for(int Qbar=0;Qbar<3;Qbar++)
									{
										for(int Nbar=0;Nbar<3;Nbar++)
										{
											for(int Mbar=0;Mbar<3;Mbar++)
											{
												  I3p_trial_2(row,col)+=fDeformation_Gradient_Inverse(L,j)*fFe(j,Lbar)*fCe_n_inverse(Lbar,pbar)*fFe_tr(l,Qbar)
												  *fFp_inverse(I,pbar)*fFp_n(Qbar,P)*fFp_inverse(P,Mbar)*SPK(Mbar,Nbar)*fFe(k,Nbar);
											}
										}
									}
								}
							}
						}
                    }
                row++;
                }
            }
        col++;
        }
    }
}


void FSMicromorphic2_3DT:: Form_I3p_trial_3()
{

    int row=0;
    int col=0;
    I3p_trial_3=0.0;

    for(int I=0;I<3;I++)
    {
        for(int l=0;l<3;l++)
        {
            row=0;
            for(int L=0;L<3;L++)
            {
                for(int k=0;k<3;k++)
                {
                    for(int j=0;j<3;j++)
                    {
						for(int Lbar=0;Lbar<3;Lbar++)
						{
							for(int pbar=0;pbar<3;pbar++)
							{
								for(int Abar=0;Abar<3;Abar++)
								{
									for(int P=0;P<3;P++)
									{
										for(int Nbar=0;Nbar<3;Nbar++)
										{
											for(int Mbar=0;Mbar<3;Mbar++)
											{
												  I3p_trial_3(row,col)+=fDeformation_Gradient_Inverse(L,j)*fFe(j,Lbar)*fCe_n_inverse(Lbar,pbar)*fFp_inverse(I,Abar)
												  *fFe_tr(l,Abar)*fFp_n(pbar,P)*fFp_inverse(P,Mbar)*SPK(Mbar,Nbar)*fFe(k,Nbar);
											}
										}
									}
								}
							}
						}
                    }
                row++;
                }
            }
        col++;
        }
    }
}


void FSMicromorphic2_3DT:: Form_I3p_trial_4()
{

    int row=0;
    int col=0;
    I3p_trial_4=0.0;

    for(int I=0;I<3;I++)
    {
        for(int l=0;l<3;l++)
        {
            row=0;
            for(int L=0;L<3;L++)
            {
                for(int k=0;k<3;k++)
                {
                    for(int j=0;j<3;j++)
                    {
						for(int Lbar=0;Lbar<3;Lbar++)
						{
							for(int pbar=0;pbar<3;pbar++)
							{
								for(int P=0;P<3;P++)
								{
									for(int Qbar=0;Qbar<3;Qbar++)
									{
										for(int Abar=0;Abar<3;Abar++)
										{
											for(int Bbar=0;Bbar<3;Bbar++)
											{
												for(int Nbar=0;Nbar<3;Nbar++)
												{
													for(int Mbar=0;Mbar<3;Mbar++)
													{
														  I3p_trial_4(row,col)+=fDeformation_Gradient_Inverse(L,j)*fFe(j,Lbar)*fCe_n_inverse(Lbar,pbar)*fFp_inverse(I,Abar)
														  *fFe_tr(l,Bbar)*fdevSPK_tr(Abar,Bbar)*fdevSPK_tr(Qbar,pbar)*fFp_n(Qbar,P)*fFp_inverse(P,Mbar)*SPK(Mbar,Nbar)*fFe(k,Nbar);
													}
												}
											}
										}
									}
								}
							}
						}
                    }
                row++;
                }
            }
        col++;
        }
    }
}


void FSMicromorphic2_3DT:: Form_I3p_trial_5()
{

    int row=0;
    int col=0;
    I3p_trial_5=0.0;

    for(int I=0;I<3;I++)
    {
        for(int l=0;l<3;l++)
        {
            row=0;
            for(int L=0;L<3;L++)
            {
                for(int k=0;k<3;k++)
                {
                    for(int j=0;j<3;j++)
                    {
						for(int Lbar=0;Lbar<3;Lbar++)
						{
							for(int pbar=0;pbar<3;pbar++)
							{
								for(int P=0;P<3;P++)
								{
									for(int Qbar=0;Qbar<3;Qbar++)
									{
										for(int Abar=0;Abar<3;Abar++)
										{
											for(int Bbar=0;Bbar<3;Bbar++)
											{
												for(int Nbar=0;Nbar<3;Nbar++)
												{
													for(int Mbar=0;Mbar<3;Mbar++)
													{
														  I3p_trial_5(row,col)+=fDeformation_Gradient_Inverse(L,j)*fFe(j,Lbar)*fCe_n_inverse(Lbar,pbar)*fFe_tr(l,Abar)
														  *fFp_inverse(I,Bbar)*fdevSPK_tr(Abar,Bbar)*fdevSPK_tr(Qbar,pbar)*fFp_n(Qbar,P)*fFp_inverse(P,Mbar)*SPK(Mbar,Nbar)*fFe(k,Nbar);
													}
												}
											}
										}
									}
								}
							}
						}
                    }
                row++;
                }
            }
        col++;
        }
    }
}



void FSMicromorphic2_3DT:: Form_I3p_trial_1_5()
{

    int row=0;
    int col=0;
    I3p_trial_1 = 0.0;
    I3p_trial_2 = 0.0;
    I3p_trial_3 = 0.0;
    I3p_trial_4 = 0.0;
    I3p_trial_5 = 0.0;


    fTemp_matrix_nsd_x_nsd = 0.0;
    fTemp_matrix_nsd_x_nsd2 = 0.0;
    fTemp_matrix_nsd_x_nsd3 = 0.0;

    fTemp_matrix_nsd_x_nsd.MultABCT(fFp_inverse,SPK,fFe);
    fTemp_matrix_nsd_x_nsd2.MultAB(fFp_n,fTemp_matrix_nsd_x_nsd);

    fTemp_matrix_nsd_x_nsd3.MultABC(fDeformation_Gradient_Inverse,fFe,fCe_n_inverse);

    for(int I=0;I<3;I++)
    {
        for(int l=0;l<3;l++)
        {
            row=0;
            for(int L=0;L<3;L++)
            {
                for(int k=0;k<3;k++)
                {
					for(int pbar=0;pbar<3;pbar++)
					{
						for(int Qbar=0;Qbar<3;Qbar++)
						{
							  I3p_trial_1(row,col)+= fTemp_matrix_nsd_x_nsd3(L,pbar)*fFp_inverse(I,Qbar)
							  *fFe_tr(l,pbar)*fTemp_matrix_nsd_x_nsd2(Qbar,k);
						}
					}
                row++;
                }
            }
        col++;
        }
    }

    row=0;
    col=0;

    for(int I=0;I<3;I++)
    {
        for(int l=0;l<3;l++)
        {
            row=0;
            for(int L=0;L<3;L++)
            {
                for(int k=0;k<3;k++)
                {
					for(int pbar=0;pbar<3;pbar++)
					{
						for(int Qbar=0;Qbar<3;Qbar++)
						{
							  I3p_trial_2(row,col)+= fTemp_matrix_nsd_x_nsd3(L,pbar)*fFe_tr(l,Qbar)
							  *fFp_inverse(I,pbar)*fTemp_matrix_nsd_x_nsd2(Qbar,k);
						}
					}
                row++;
                }
            }
        col++;
        }
    }


    row=0;
    col=0;

    for(int I=0;I<3;I++)
    {
        for(int l=0;l<3;l++)
        {
            row=0;
            for(int L=0;L<3;L++)
            {
                for(int k=0;k<3;k++)
                {
					for(int Abar=0;Abar<3;Abar++)
					{
						for(int pbar=0;pbar<3;pbar++)
						{
							for(int Qbar=0;Qbar<3;Qbar++)
							{
								  I3p_trial_3(row,col)+= fTemp_matrix_nsd_x_nsd3(L,pbar)*fFp_inverse(I,Abar)
								  *fFe_tr(l,Abar)*fIdentity_matrix(pbar,Qbar)*fTemp_matrix_nsd_x_nsd2(Qbar,k);
							}
						}
					}
                row++;
                }
            }
        col++;
        }
    }


    row=0;
    col=0;

    for(int I=0;I<3;I++)
    {
        for(int l=0;l<3;l++)
        {
            row=0;
            for(int L=0;L<3;L++)
            {
                for(int k=0;k<3;k++)
                {
					for(int Abar=0;Abar<3;Abar++)
					{
						for(int Bbar=0;Bbar<3;Bbar++)
						{
							for(int pbar=0;pbar<3;pbar++)
							{
								for(int Qbar=0;Qbar<3;Qbar++)
								{
									  I3p_trial_4(row,col)+= fTemp_matrix_nsd_x_nsd3(L,pbar)*fFp_inverse(I,Abar)
									  *fFe_tr(l,Bbar)*fdevSPK_tr(Abar,Bbar)*fdevSPK_tr(Qbar,pbar)*fTemp_matrix_nsd_x_nsd2(Qbar,k);
								}
							}
						}
					}
                row++;
                }
            }
        col++;
        }
    }

    row=0;
    col=0;

    for(int I=0;I<3;I++)
    {
        for(int l=0;l<3;l++)
        {
            row=0;
            for(int L=0;L<3;L++)
            {
                for(int k=0;k<3;k++)
                {
					for(int Abar=0;Abar<3;Abar++)
					{
						for(int Bbar=0;Bbar<3;Bbar++)
						{
							for(int pbar=0;pbar<3;pbar++)
							{
								for(int Qbar=0;Qbar<3;Qbar++)
								{
									  I3p_trial_5(row,col)+= fTemp_matrix_nsd_x_nsd3(L,pbar)*fFe_tr(l,Abar)
									  *fFp_inverse(I,Bbar)*fdevSPK_tr(Abar,Bbar)*fdevSPK_tr(Qbar,pbar)*fTemp_matrix_nsd_x_nsd2(Qbar,k);
								}
							}
						}
					}
                row++;
                }
            }
        col++;
        }
    }
}






void FSMicromorphic2_3DT:: Form_I4p_trial_1()
{

    int row=0;
    int col=0;
    I4p_trial_1=0.0;

    for(int I=0;I<3;I++)
    {
        for(int l=0;l<3;l++)
        {
            row=0;
            for(int L=0;L<3;L++)
            {
                for(int k=0;k<3;k++)
                {
                    for(int j=0;j<3;j++)
                    {
						for(int Lbar=0;Lbar<3;Lbar++)
						{
							for(int pbar=0;pbar<3;pbar++)
							{
								for(int P=0;P<3;P++)
								{
									for(int i=0;i<3;i++)
									{
										for(int Qbar=0;Qbar<3;Qbar++)
										{
											for(int Nbar=0;Nbar<3;Nbar++)
											{
												for(int Kbar=0;Kbar<3;Kbar++)
												{
													  I4p_trial_1(row,col)+=fDeformation_Gradient_Inverse(L,j)*fFe(j,Nbar)*fFe(i,Lbar)*fCe_n_inverse(Lbar,pbar)*fFp_inverse(I,Qbar)
													  *fFe_tr(l,pbar)*fFp_n(Qbar,P)*fFp_inverse(P,Kbar)*fFe(i,Kbar)*fFe(k,Nbar);
												}
											}
										}
									}
								}
							}
						}
                    }
                row++;
                }
            }
        col++;
        }
    }
}


void FSMicromorphic2_3DT:: Form_I4p_trial_2()
{

    int row=0;
    int col=0;
    I4p_trial_2=0.0;

    for(int I=0;I<3;I++)
    {
        for(int l=0;l<3;l++)
        {
            row=0;
            for(int L=0;L<3;L++)
            {
                for(int k=0;k<3;k++)
                {
                    for(int j=0;j<3;j++)
                    {
						for(int Lbar=0;Lbar<3;Lbar++)
						{
							for(int pbar=0;pbar<3;pbar++)
							{
								for(int P=0;P<3;P++)
								{
									for(int i=0;i<3;i++)
									{
										for(int Qbar=0;Qbar<3;Qbar++)
										{
											for(int Nbar=0;Nbar<3;Nbar++)
											{
												for(int Kbar=0;Kbar<3;Kbar++)
												{
													  I4p_trial_2(row,col)+=fDeformation_Gradient_Inverse(L,j)*fFe(j,Nbar)*fFe(i,Lbar)*fCe_n_inverse(Lbar,pbar)*fFe_tr(l,Qbar)
													  *fFp_inverse(I,pbar)*fFp_n(Qbar,P)*fFp_inverse(P,Kbar)*fFe(i,Kbar)*fFe(k,Nbar);
												}
											}
										}
									}
								}
							}
						}
                    }
                row++;
                }
            }
        col++;
        }
    }
}


void FSMicromorphic2_3DT:: Form_I4p_trial_3()
{

    int row=0;
    int col=0;
    I4p_trial_3=0.0;

    for(int I=0;I<3;I++)
    {
        for(int l=0;l<3;l++)
        {
            row=0;
            for(int L=0;L<3;L++)
            {
                for(int k=0;k<3;k++)
                {
                    for(int j=0;j<3;j++)
                    {
						for(int Lbar=0;Lbar<3;Lbar++)
						{
							for(int Abar=0;Abar<3;Abar++)
							{
								for(int P=0;P<3;P++)
								{
									for(int i=0;i<3;i++)
									{
										for(int Qbar=0;Qbar<3;Qbar++)
										{
											for(int Nbar=0;Nbar<3;Nbar++)
											{
												for(int Kbar=0;Kbar<3;Kbar++)
												{
													  I4p_trial_3(row,col)+=fDeformation_Gradient_Inverse(L,j)*fFe(j,Nbar)*fFe(i,Lbar)*fCe_n_inverse(Lbar,Qbar)*fFp_inverse(I,Abar)
													  *fFe_tr(l,Abar)*fFp_n(Qbar,P)*fFp_inverse(P,Kbar)*fFe(i,Kbar)*fFe(k,Nbar);
												}
											}
										}
									}
								}
							}
						}
                    }
                row++;
                }
            }
        col++;
        }
    }
}



void FSMicromorphic2_3DT:: Form_I4p_trial_4()
{

    int row=0;
    int col=0;
    I4p_trial_4=0.0;

    for(int I=0;I<3;I++)
    {
        for(int l=0;l<3;l++)
        {
            row=0;
            for(int L=0;L<3;L++)
            {
                for(int k=0;k<3;k++)
                {
                    for(int j=0;j<3;j++)
                    {
						for(int Lbar=0;Lbar<3;Lbar++)
						{
							for(int Abar=0;Abar<3;Abar++)
							{
								for(int Bbar=0;Bbar<3;Bbar++)
								{
									for(int P=0;P<3;P++)
									{
										for(int i=0;i<3;i++)
										{
											for(int pbar=0;pbar<3;pbar++)
											{
												for(int Qbar=0;Qbar<3;Qbar++)
												{
													for(int Nbar=0;Nbar<3;Nbar++)
													{
														for(int Kbar=0;Kbar<3;Kbar++)
														{
															  I4p_trial_4(row,col)+=fDeformation_Gradient_Inverse(L,j)*fFe(j,Nbar)*fFe(i,Lbar)*fCe_n_inverse(Lbar,pbar)*fFp_inverse(I,Abar)
															  *fFe_tr(l,Bbar)*fdevSPK_tr(Abar,Bbar)*fdevSPK_tr(Qbar,pbar)*fFp_n(Qbar,P)*fFp_inverse(P,Kbar)*fFe(i,Kbar)*fFe(k,Nbar);
														}
													}
												}
											}
										}
									}
								}
							}
						}
                    }
                row++;
                }
            }
        col++;
        }
    }
}


void FSMicromorphic2_3DT:: Form_I4p_trial_5()
{

    int row=0;
    int col=0;
    I4p_trial_5=0.0;

    for(int I=0;I<3;I++)
    {
        for(int l=0;l<3;l++)
        {
            row=0;
            for(int L=0;L<3;L++)
            {
                for(int k=0;k<3;k++)
                {
                    for(int j=0;j<3;j++)
                    {
						for(int Lbar=0;Lbar<3;Lbar++)
						{
							for(int Abar=0;Abar<3;Abar++)
							{
								for(int Bbar=0;Bbar<3;Bbar++)
								{
									for(int P=0;P<3;P++)
									{
										for(int i=0;i<3;i++)
										{
											for(int pbar=0;pbar<3;pbar++)
											{
												for(int Qbar=0;Qbar<3;Qbar++)
												{
													for(int Nbar=0;Nbar<3;Nbar++)
													{
														for(int Kbar=0;Kbar<3;Kbar++)
														{
															  I4p_trial_5(row,col)+=fDeformation_Gradient_Inverse(L,j)*fFe(j,Nbar)*fFe(i,Lbar)*fCe_n_inverse(Lbar,pbar)*fFe_tr(l,Abar)
															  *fFp_inverse(I,Bbar)*fdevSPK_tr(Abar,Bbar)*fdevSPK_tr(Qbar,pbar)*fFp_n(Qbar,P)*fFp_inverse(P,Kbar)*fFe(i,Kbar)*fFe(k,Nbar);
														}
													}
												}
											}
										}
									}
								}
							}
						}
                    }
                row++;
                }
            }
        col++;
        }
    }
}


void FSMicromorphic2_3DT:: Form_I4p_trial_1_5()
{

    int row=0;
    int col=0;
    I4p_trial_1 = 0.0;
    I4p_trial_2 = 0.0;
    I4p_trial_3 = 0.0;
    I4p_trial_4 = 0.0;
    I4p_trial_5 = 0.0;


    fTemp_matrix_nsd_x_nsd = 0.0;
    fTemp_matrix_nsd_x_nsd2 = 0.0;
    fTemp_matrix_nsd_x_nsd3 = 0.0;

    fTemp_matrix_nsd_x_nsd.MultABCT(fDeformation_Gradient_Inverse,fFe,fFe);
    fTemp_matrix_nsd_x_nsd3.MultABCT(fFp_n,fFp_inverse,fFe);

    for(int I=0;I<3;I++)
    {
        for(int l=0;l<3;l++)
        {
            row=0;
            for(int L=0;L<3;L++)
            {
                for(int k=0;k<3;k++)
                {
					for(int i=0;i<3;i++)
					{
						for(int Lbar=0;Lbar<3;Lbar++)
						{
							for(int pbar=0;pbar<3;pbar++)
							{
								for(int Qbar=0;Qbar<3;Qbar++)
								{
									  I4p_trial_1(row,col)+= fTemp_matrix_nsd_x_nsd3(Qbar,i)*fFp_inverse(I,Qbar)*fFe(i,Lbar)*fCe_n_inverse(Lbar,pbar)
									  *fFe_tr(l,pbar)*fTemp_matrix_nsd_x_nsd(L,k);
								}
							}
						}
					}
                row++;
                }
            }
        col++;
        }
    }

    row=0;
    col=0;

    for(int I=0;I<3;I++)
    {
        for(int l=0;l<3;l++)
        {
            row=0;
            for(int L=0;L<3;L++)
            {
                for(int k=0;k<3;k++)
                {
					for(int i=0;i<3;i++)
					{
						for(int Lbar=0;Lbar<3;Lbar++)
						{
							for(int pbar=0;pbar<3;pbar++)
							{
								for(int Qbar=0;Qbar<3;Qbar++)
								{
									  I4p_trial_2(row,col)+= fTemp_matrix_nsd_x_nsd3(Qbar,i)*fFe_tr(l,Qbar)*fFe(i,Lbar)*fCe_n_inverse(Lbar,pbar)
									  *fFp_inverse(I,pbar)*fTemp_matrix_nsd_x_nsd(L,k);
								}
							}
						}
					}
                row++;
                }
            }
        col++;
        }
    }


    row=0;
    col=0;

    for(int I=0;I<3;I++)
    {
        for(int l=0;l<3;l++)
        {
            row=0;
            for(int L=0;L<3;L++)
            {
                for(int k=0;k<3;k++)
                {
					for(int i=0;i<3;i++)
					{
						for(int Lbar=0;Lbar<3;Lbar++)
						{
							for(int Abar=0;Abar<3;Abar++)
							{
								for(int pbar=0;pbar<3;pbar++)
								{
									for(int Qbar=0;Qbar<3;Qbar++)
									{
										  I4p_trial_3(row,col)+= fTemp_matrix_nsd_x_nsd3(Qbar,i)*fFp_inverse(I,Abar)*fFe(i,Lbar)*fCe_n_inverse(Lbar,pbar)
										  *fFe_tr(l,Abar)*fIdentity_matrix(pbar,Qbar)*fTemp_matrix_nsd_x_nsd(L,k);
									}
								}
							}
						}
					}
                row++;
                }
            }
        col++;
        }
    }


    row=0;
    col=0;

    for(int I=0;I<3;I++)
    {
        for(int l=0;l<3;l++)
        {
            row=0;
            for(int L=0;L<3;L++)
            {
                for(int k=0;k<3;k++)
                {
					for(int i=0;i<3;i++)
					{
						for(int Lbar=0;Lbar<3;Lbar++)
						{
							for(int Abar=0;Abar<3;Abar++)
							{
								for(int Bbar=0;Bbar<3;Bbar++)
								{
									for(int pbar=0;pbar<3;pbar++)
									{
										for(int Qbar=0;Qbar<3;Qbar++)
										{
											  I4p_trial_4(row,col)+= fTemp_matrix_nsd_x_nsd3(Qbar,i)*fFp_inverse(I,Abar)*fFe(i,Lbar)*fCe_n_inverse(Lbar,pbar)
											  *fFe_tr(l,Bbar)*fdevSPK_tr(Abar,Bbar)*fdevSPK_tr(Qbar,pbar)*fTemp_matrix_nsd_x_nsd(L,k);
										}
									}
								}
							}
						}
					}
                row++;
                }
            }
        col++;
        }
    }

    row=0;
    col=0;

    for(int I=0;I<3;I++)
    {
        for(int l=0;l<3;l++)
        {
            row=0;
            for(int L=0;L<3;L++)
            {
                for(int k=0;k<3;k++)
                {
					for(int i=0;i<3;i++)
					{
						for(int Lbar=0;Lbar<3;Lbar++)
						{
							for(int Abar=0;Abar<3;Abar++)
							{
								for(int Bbar=0;Bbar<3;Bbar++)
								{
									for(int pbar=0;pbar<3;pbar++)
									{
										for(int Qbar=0;Qbar<3;Qbar++)
										{
											  I4p_trial_5(row,col)+= fTemp_matrix_nsd_x_nsd3(Qbar,i)*fFe_tr(l,Abar)*fFe(i,Lbar)*fCe_n_inverse(Lbar,pbar)
											  *fFp_inverse(I,Bbar)*fdevSPK_tr(Abar,Bbar)*fdevSPK_tr(Qbar,pbar)*fTemp_matrix_nsd_x_nsd(L,k);
										}
									}
								}
							}
						}
					}
                row++;
                }
            }
        col++;
        }
    }
}





void FSMicromorphic2_3DT:: Form_I4p_trial_6()
{

    int row=0;
    int col=0;
    I4p_trial_6=0.0;

    for(int I=0;I<3;I++)
    {
        for(int l=0;l<3;l++)
        {
            row=0;
            for(int L=0;L<3;L++)
            {
                for(int k=0;k<3;k++)
                {
                    for(int j=0;j<3;j++)
                    {
						for(int Lbar=0;Lbar<3;Lbar++)
						{
							for(int pbar=0;pbar<3;pbar++)
							{
								for(int P=0;P<3;P++)
								{
									for(int i=0;i<3;i++)
									{
										for(int Qbar=0;Qbar<3;Qbar++)
										{
											for(int Nbar=0;Nbar<3;Nbar++)
											{
												for(int Mbar=0;Mbar<3;Mbar++)
												{
													  I4p_trial_6(row,col)+=fDeformation_Gradient_Inverse(L,j)*fFe(j,Mbar)*fFe(i,Lbar)*fCe_n_inverse(Lbar,pbar)*fFp_inverse(I,Qbar)
													  *fFe_tr(l,pbar)*fFp_n(Qbar,P)*fFp_inverse(P,Mbar)*fFe(i,Nbar)*fFe(k,Nbar);
												}
											}
										}
									}
								}
							}
						}
                    }
                row++;
                }
            }
        col++;
        }
    }
}


void FSMicromorphic2_3DT:: Form_I4p_trial_7()
{

    int row=0;
    int col=0;
    I4p_trial_7=0.0;

    for(int I=0;I<3;I++)
    {
        for(int l=0;l<3;l++)
        {
            row=0;
            for(int L=0;L<3;L++)
            {
                for(int k=0;k<3;k++)
                {
                    for(int j=0;j<3;j++)
                    {
						for(int Lbar=0;Lbar<3;Lbar++)
						{
							for(int pbar=0;pbar<3;pbar++)
							{
								for(int P=0;P<3;P++)
								{
									for(int i=0;i<3;i++)
									{
										for(int Qbar=0;Qbar<3;Qbar++)
										{
											for(int Nbar=0;Nbar<3;Nbar++)
											{
												for(int Mbar=0;Mbar<3;Mbar++)
												{
													  I4p_trial_7(row,col)+=fDeformation_Gradient_Inverse(L,j)*fFe(j,Mbar)*fFe(i,Lbar)*fCe_n_inverse(Lbar,pbar)*fFe_tr(l,Qbar)
													  *fFp_inverse(I,pbar)*fFp_n(Qbar,P)*fFp_inverse(P,Mbar)*fFe(i,Nbar)*fFe(k,Nbar);
												}
											}
										}
									}
								}
							}
						}
                    }
                row++;
                }
            }
        col++;
        }
    }
}



void FSMicromorphic2_3DT:: Form_I4p_trial_8()
{

    int row=0;
    int col=0;
    I4p_trial_8=0.0;

    for(int I=0;I<3;I++)
    {
        for(int l=0;l<3;l++)
        {
            row=0;
            for(int L=0;L<3;L++)
            {
                for(int k=0;k<3;k++)
                {
                    for(int j=0;j<3;j++)
                    {
						for(int Lbar=0;Lbar<3;Lbar++)
						{
							for(int Abar=0;Abar<3;Abar++)
							{
								for(int P=0;P<3;P++)
								{
									for(int i=0;i<3;i++)
									{
										for(int Qbar=0;Qbar<3;Qbar++)
										{
											for(int Nbar=0;Nbar<3;Nbar++)
											{
												for(int Mbar=0;Mbar<3;Mbar++)
												{
													  I4p_trial_8(row,col)+=fDeformation_Gradient_Inverse(L,j)*fFe(j,Mbar)*fFe(i,Lbar)*fCe_n_inverse(Lbar,Qbar)*fFp_inverse(I,Abar)
													  *fFe_tr(l,Abar)*fFp_n(Qbar,P)*fFp_inverse(P,Mbar)*fFe(i,Nbar)*fFe(k,Nbar);
												}
											}
										}
									}
								}
							}
						}
                    }
                row++;
                }
            }
        col++;
        }
    }
}



void FSMicromorphic2_3DT:: Form_I4p_trial_9()
{

    int row=0;
    int col=0;
    I4p_trial_9=0.0;

    for(int I=0;I<3;I++)
    {
        for(int l=0;l<3;l++)
        {
            row=0;
            for(int L=0;L<3;L++)
            {
                for(int k=0;k<3;k++)
                {
                    for(int j=0;j<3;j++)
                    {
						for(int Lbar=0;Lbar<3;Lbar++)
						{
							for(int Abar=0;Abar<3;Abar++)
							{
								for(int Bbar=0;Bbar<3;Bbar++)
								{
									for(int P=0;P<3;P++)
									{
										for(int i=0;i<3;i++)
										{
											for(int Qbar=0;Qbar<3;Qbar++)
											{
												for(int pbar=0;pbar<3;pbar++)
												{
													for(int Nbar=0;Nbar<3;Nbar++)
													{
														for(int Mbar=0;Mbar<3;Mbar++)
														{
															  I4p_trial_9(row,col)+=fDeformation_Gradient_Inverse(L,j)*fFe(j,Mbar)*fFe(i,Lbar)*fCe_n_inverse(Lbar,pbar)*fFp_inverse(I,Abar)
															  *fFe_tr(l,Bbar)*fdevSPK_tr(Abar,Bbar)*fdevSPK_tr(Qbar,pbar)*fFp_n(Qbar,P)*fFp_inverse(P,Mbar)*fFe(i,Nbar)*fFe(k,Nbar);
														}
													}
												}
											}
										}
									}
								}
							}
						}
                    }
                row++;
                }
            }
        col++;
        }
    }
}



void FSMicromorphic2_3DT:: Form_I4p_trial_10()
{

    int row=0;
    int col=0;
    I4p_trial_10=0.0;

    for(int I=0;I<3;I++)
    {
        for(int l=0;l<3;l++)
        {
            row=0;
            for(int L=0;L<3;L++)
            {
                for(int k=0;k<3;k++)
                {
                    for(int j=0;j<3;j++)
                    {
						for(int Lbar=0;Lbar<3;Lbar++)
						{
							for(int Abar=0;Abar<3;Abar++)
							{
								for(int Bbar=0;Bbar<3;Bbar++)
								{
									for(int P=0;P<3;P++)
									{
										for(int i=0;i<3;i++)
										{
											for(int Qbar=0;Qbar<3;Qbar++)
											{
												for(int pbar=0;pbar<3;pbar++)
												{
													for(int Nbar=0;Nbar<3;Nbar++)
													{
														for(int Mbar=0;Mbar<3;Mbar++)
														{
															  I4p_trial_10(row,col)+=fDeformation_Gradient_Inverse(L,j)*fFe(j,Mbar)*fFe(i,Lbar)*fCe_n_inverse(Lbar,pbar)*fFe_tr(l,Abar)
															  *fFp_inverse(I,Bbar)*fdevSPK_tr(Abar,Bbar)*fdevSPK_tr(Qbar,pbar)*fFp_n(Qbar,P)*fFp_inverse(P,Mbar)*fFe(i,Nbar)*fFe(k,Nbar);
														}
													}
												}
											}
										}
									}
								}
							}
						}
                    }
                row++;
                }
            }
        col++;
        }
    }
}



void FSMicromorphic2_3DT:: Form_I4p_trial_6_10()
{

    int row=0;
    int col=0;
    I4p_trial_6 = 0.0;
    I4p_trial_7 = 0.0;
    I4p_trial_8 = 0.0;
    I4p_trial_9 = 0.0;
    I4p_trial_10 = 0.0;


    fTemp_matrix_nsd_x_nsd = 0.0;
    fTemp_matrix_nsd_x_nsd2 = 0.0;
    fTemp_matrix_nsd_x_nsd3 = 0.0;
    fTemp_matrix_nsd_x_nsd4 = 0.0;

    fTemp_matrix_nsd_x_nsd.MultABCT(fDeformation_Gradient_Inverse,fFe,fFp_inverse);

    fTemp_matrix_nsd_x_nsd2.MultAB(fFe,fCe_n_inverse);
    fTemp_matrix_nsd_x_nsd3.MultABT(fFe,fFe);
    fTemp_matrix_nsd_x_nsd4.MultATB(fTemp_matrix_nsd_x_nsd2,fTemp_matrix_nsd_x_nsd3);


    for(int I=0;I<3;I++)
    {
        for(int l=0;l<3;l++)
        {
            row=0;
            for(int L=0;L<3;L++)
            {
                for(int k=0;k<3;k++)
                {
					for(int N=0;N<3;N++)
					{
						for(int pbar=0;pbar<3;pbar++)
						{
							for(int Qbar=0;Qbar<3;Qbar++)
							{
								  I4p_trial_6(row,col)+= fTemp_matrix_nsd_x_nsd4(pbar,k)*fFp_inverse(I,Qbar)
								  *fFe_tr(l,pbar)*fTemp_matrix_nsd_x_nsd(L,N)*fFp_n(Qbar,N);
							}
						}
					}
                row++;
                }
            }
        col++;
        }
    }

    row=0;
    col=0;

    for(int I=0;I<3;I++)
    {
        for(int l=0;l<3;l++)
        {
            row=0;
            for(int L=0;L<3;L++)
            {
                for(int k=0;k<3;k++)
                {
					for(int N=0;N<3;N++)
					{
						for(int pbar=0;pbar<3;pbar++)
						{
							for(int Qbar=0;Qbar<3;Qbar++)
							{
								  I4p_trial_7(row,col)+= fTemp_matrix_nsd_x_nsd4(pbar,k)*fFe_tr(l,Qbar)
								  *fFp_inverse(I,pbar)*fTemp_matrix_nsd_x_nsd(L,N)*fFp_n(Qbar,N);
							}
						}
					}
                row++;
                }
            }
        col++;
        }
    }


    row=0;
    col=0;

    for(int I=0;I<3;I++)
    {
        for(int l=0;l<3;l++)
        {
            row=0;
            for(int L=0;L<3;L++)
            {
                for(int k=0;k<3;k++)
                {
					for(int N=0;N<3;N++)
					{
						for(int Abar=0;Abar<3;Abar++)
						{
							for(int pbar=0;pbar<3;pbar++)
							{
								for(int Qbar=0;Qbar<3;Qbar++)
								{
									  I4p_trial_8(row,col)+= fTemp_matrix_nsd_x_nsd4(pbar,k)*fFp_inverse(I,Abar)
									  *fFe_tr(l,Abar)*fIdentity_matrix(pbar,Qbar)*fTemp_matrix_nsd_x_nsd(L,N)*fFp_n(Qbar,N);
								}
							}
						}
					}
                row++;
                }
            }
        col++;
        }
    }


    row=0;
    col=0;

    for(int I=0;I<3;I++)
    {
        for(int l=0;l<3;l++)
        {
            row=0;
            for(int L=0;L<3;L++)
            {
                for(int k=0;k<3;k++)
                {
					for(int N=0;N<3;N++)
					{
						for(int Abar=0;Abar<3;Abar++)
						{
							for(int Bbar=0;Bbar<3;Bbar++)
							{
								for(int pbar=0;pbar<3;pbar++)
								{
									for(int Qbar=0;Qbar<3;Qbar++)
									{
										  I4p_trial_9(row,col)+= fTemp_matrix_nsd_x_nsd4(pbar,k)*fFp_inverse(I,Abar)
										  *fFe_tr(l,Bbar)*fdevSPK_tr(Abar,Bbar)*fdevSPK_tr(Qbar,pbar)*fTemp_matrix_nsd_x_nsd(L,N)*fFp_n(Qbar,N);
									}
								}
							}
						}
					}
                row++;
                }
            }
        col++;
        }
    }

    row=0;
    col=0;

    for(int I=0;I<3;I++)
    {
        for(int l=0;l<3;l++)
        {
            row=0;
            for(int L=0;L<3;L++)
            {
                for(int k=0;k<3;k++)
                {
					for(int N=0;N<3;N++)
					{
						for(int Abar=0;Abar<3;Abar++)
						{
							for(int Bbar=0;Bbar<3;Bbar++)
							{
								for(int pbar=0;pbar<3;pbar++)
								{
									for(int Qbar=0;Qbar<3;Qbar++)
									{
										  I4p_trial_10(row,col)+= fTemp_matrix_nsd_x_nsd4(pbar,k)*fFe_tr(l,Abar)
										  *fFp_inverse(I,Bbar)*fdevSPK_tr(Abar,Bbar)*fdevSPK_tr(Qbar,pbar)*fTemp_matrix_nsd_x_nsd(L,N)*fFp_n(Qbar,N);
									}
								}
							}
						}
					}
                row++;
                }
            }
        col++;
        }
    }
}



void FSMicromorphic2_3DT:: Form_I4p_trial_11_15()
{

    int row=0;
    int col=0;
    I4p_trial_11 = 0.0;
    I4p_trial_12 = 0.0;
    I4p_trial_13 = 0.0;
    I4p_trial_14 = 0.0;
    I4p_trial_15 = 0.0;


    fTemp_matrix_nsd_x_nsd = 0.0;
    fTemp_matrix_nsd_x_nsd2 = 0.0;
    fTemp_matrix_nsd_x_nsd3 = 0.0;

    fTemp_matrix_nsd_x_nsd.MultATBC(fFe,fFe,fCe_n_inverse);
    fTemp_matrix_nsd_x_nsd2.MultABC(fDeformation_Gradient_Inverse,fFe,fTemp_matrix_nsd_x_nsd);

    fTemp_matrix_nsd_x_nsd3.MultABCT(fFp_n,fFp_inverse,fFe);


    for(int I=0;I<3;I++)
    {
        for(int l=0;l<3;l++)
        {
            row=0;
            for(int L=0;L<3;L++)
            {
                for(int k=0;k<3;k++)
                {
					for(int pbar=0;pbar<3;pbar++)
					{
						for(int Qbar=0;Qbar<3;Qbar++)
						{
							  I4p_trial_11(row,col)+= fTemp_matrix_nsd_x_nsd2(L,pbar)*fFp_inverse(I,Qbar)
							  *fFe_tr(l,pbar)*fTemp_matrix_nsd_x_nsd3(Qbar,k);
						}
					}
                row++;
                }
            }
        col++;
        }
    }

    row=0;
    col=0;

    for(int I=0;I<3;I++)
    {
        for(int l=0;l<3;l++)
        {
            row=0;
            for(int L=0;L<3;L++)
            {
                for(int k=0;k<3;k++)
                {
					for(int pbar=0;pbar<3;pbar++)
					{
						for(int Qbar=0;Qbar<3;Qbar++)
						{
							  I4p_trial_12(row,col)+= fTemp_matrix_nsd_x_nsd2(L,pbar)*fFe_tr(l,Qbar)
							  *fFp_inverse(I,pbar)*fTemp_matrix_nsd_x_nsd3(Qbar,k);
						}
					}
                row++;
                }
            }
        col++;
        }
    }


    row=0;
    col=0;

    for(int I=0;I<3;I++)
    {
        for(int l=0;l<3;l++)
        {
            row=0;
            for(int L=0;L<3;L++)
            {
                for(int k=0;k<3;k++)
                {
					for(int Abar=0;Abar<3;Abar++)
					{
						for(int pbar=0;pbar<3;pbar++)
						{
							for(int Qbar=0;Qbar<3;Qbar++)
							{
								  I4p_trial_13(row,col)+= fTemp_matrix_nsd_x_nsd2(L,pbar)*fFp_inverse(I,Abar)
								  *fFe_tr(l,Abar)*fIdentity_matrix(pbar,Qbar)*fTemp_matrix_nsd_x_nsd3(Qbar,k);
							}
						}
					}
                row++;
                }
            }
        col++;
        }
    }


    row=0;
    col=0;

    for(int I=0;I<3;I++)
    {
        for(int l=0;l<3;l++)
        {
            row=0;
            for(int L=0;L<3;L++)
            {
                for(int k=0;k<3;k++)
                {
					for(int Abar=0;Abar<3;Abar++)
					{
						for(int Bbar=0;Bbar<3;Bbar++)
						{
							for(int pbar=0;pbar<3;pbar++)
							{
								for(int Qbar=0;Qbar<3;Qbar++)
								{
									  I4p_trial_14(row,col)+= fTemp_matrix_nsd_x_nsd2(L,pbar)*fFp_inverse(I,Abar)
									  *fFe_tr(l,Bbar)*fdevSPK_tr(Abar,Bbar)*fdevSPK_tr(Qbar,pbar)*fTemp_matrix_nsd_x_nsd3(Qbar,k);
								}
							}
						}
					}
                row++;
                }
            }
        col++;
        }
    }

    row=0;
    col=0;

    for(int I=0;I<3;I++)
    {
        for(int l=0;l<3;l++)
        {
            row=0;
            for(int L=0;L<3;L++)
            {
                for(int k=0;k<3;k++)
                {
					for(int Abar=0;Abar<3;Abar++)
					{
						for(int Bbar=0;Bbar<3;Bbar++)
						{
							for(int pbar=0;pbar<3;pbar++)
							{
								for(int Qbar=0;Qbar<3;Qbar++)
								{
									  I4p_trial_15(row,col)+= fTemp_matrix_nsd_x_nsd2(L,pbar)*fFe_tr(l,Abar)
									  *fFp_inverse(I,Bbar)*fdevSPK_tr(Abar,Bbar)*fdevSPK_tr(Qbar,pbar)*fTemp_matrix_nsd_x_nsd3(Qbar,k);
								}
							}
						}
					}
                row++;
                }
            }
        col++;
        }
    }
}





void FSMicromorphic2_3DT:: Form_I4p_trial_11()
{

    int row=0;
    int col=0;
    I4p_trial_11=0.0;

    for(int I=0;I<3;I++)
    {
        for(int l=0;l<3;l++)
        {
            row=0;
            for(int L=0;L<3;L++)
            {
                for(int k=0;k<3;k++)
                {
                    for(int j=0;j<3;j++)
                    {
						for(int Lbar=0;Lbar<3;Lbar++)
						{
							for(int pbar=0;pbar<3;pbar++)
							{
								for(int P=0;P<3;P++)
								{
									for(int i=0;i<3;i++)
									{
										for(int Qbar=0;Qbar<3;Qbar++)
										{
											for(int Nbar=0;Nbar<3;Nbar++)
											{
												for(int Mbar=0;Mbar<3;Mbar++)
												{
													  I4p_trial_11(row,col)+=fDeformation_Gradient_Inverse(L,j)*fFe(j,Mbar)*fFe(i,Mbar)*fFe(i,Lbar)*fCe_n_inverse(Lbar,pbar)*fFp_inverse(I,Qbar)
													  *fFe_tr(l,pbar)*fFp_n(Qbar,P)*fFp_inverse(P,Nbar)*fFe(k,Nbar);
												}
											}
										}
									}
								}
							}
						}
                    }
                row++;
                }
            }
        col++;
        }
    }
}



void FSMicromorphic2_3DT:: Form_I4p_trial_12()
{

    int row=0;
    int col=0;
    I4p_trial_12=0.0;

    for(int I=0;I<3;I++)
    {
        for(int l=0;l<3;l++)
        {
            row=0;
            for(int L=0;L<3;L++)
            {
                for(int k=0;k<3;k++)
                {
                    for(int j=0;j<3;j++)
                    {
						for(int Lbar=0;Lbar<3;Lbar++)
						{
							for(int pbar=0;pbar<3;pbar++)
							{
								for(int P=0;P<3;P++)
								{
									for(int i=0;i<3;i++)
									{
										for(int Qbar=0;Qbar<3;Qbar++)
										{
											for(int Nbar=0;Nbar<3;Nbar++)
											{
												for(int Mbar=0;Mbar<3;Mbar++)
												{
													  I4p_trial_12(row,col)+=fDeformation_Gradient_Inverse(L,j)*fFe(j,Mbar)*fFe(i,Mbar)*fFe(i,Lbar)*fCe_n_inverse(Lbar,pbar)*fFe_tr(l,Qbar)
													  *fFp_inverse(I,pbar)*fFp_n(Qbar,P)*fFp_inverse(P,Nbar)*fFe(k,Nbar);
												}
											}
										}
									}
								}
							}
						}
                    }
                row++;
                }
            }
        col++;
        }
    }
}


void FSMicromorphic2_3DT:: Form_I4p_trial_13()
{

    int row=0;
    int col=0;
    I4p_trial_13=0.0;

    for(int I=0;I<3;I++)
    {
        for(int l=0;l<3;l++)
        {
            row=0;
            for(int L=0;L<3;L++)
            {
                for(int k=0;k<3;k++)
                {
                    for(int j=0;j<3;j++)
                    {
						for(int Lbar=0;Lbar<3;Lbar++)
						{
							for(int Abar=0;Abar<3;Abar++)
							{
								for(int P=0;P<3;P++)
								{
									for(int i=0;i<3;i++)
									{
										for(int Qbar=0;Qbar<3;Qbar++)
										{
											for(int Nbar=0;Nbar<3;Nbar++)
											{
												for(int Mbar=0;Mbar<3;Mbar++)
												{
													  I4p_trial_13(row,col)+=fDeformation_Gradient_Inverse(L,j)*fFe(j,Mbar)*fFe(i,Mbar)*fFe(i,Lbar)*fCe_n_inverse(Lbar,Qbar)*fFp_inverse(I,Abar)
													  *fFe_tr(l,Abar)*fFp_n(Qbar,P)*fFp_inverse(P,Nbar)*fFe(k,Nbar);
												}
											}
										}
									}
								}
							}
						}
                    }
                row++;
                }
            }
        col++;
        }
    }
}


void FSMicromorphic2_3DT:: Form_I4p_trial_14()
{

    int row=0;
    int col=0;
    I4p_trial_14=0.0;

    for(int I=0;I<3;I++)
    {
        for(int l=0;l<3;l++)
        {
            row=0;
            for(int L=0;L<3;L++)
            {
                for(int k=0;k<3;k++)
                {
                    for(int j=0;j<3;j++)
                    {
						for(int Lbar=0;Lbar<3;Lbar++)
						{
							for(int Abar=0;Abar<3;Abar++)
							{
								for(int Bbar=0;Bbar<3;Bbar++)
								{
									for(int P=0;P<3;P++)
									{
										for(int i=0;i<3;i++)
										{
											for(int Qbar=0;Qbar<3;Qbar++)
											{
												for(int pbar=0;pbar<3;pbar++)
												{
													for(int Nbar=0;Nbar<3;Nbar++)
													{
														for(int Mbar=0;Mbar<3;Mbar++)
														{
															  I4p_trial_14(row,col)+=fDeformation_Gradient_Inverse(L,j)*fFe(j,Mbar)*fFe(i,Mbar)*fFe(i,Lbar)*fCe_n_inverse(Lbar,pbar)*fFp_inverse(I,Abar)
															  *fFe_tr(l,Bbar)*fdevSPK_tr(Abar,Bbar)*fdevSPK_tr(Qbar,pbar)*fFp_n(Qbar,P)*fFp_inverse(P,Nbar)*fFe(k,Nbar);
														}
													}
												}
											}
										}
									}
								}
							}
						}
                    }
                row++;
                }
            }
        col++;
        }
    }
}


void FSMicromorphic2_3DT:: Form_I4p_trial_15()
{

    int row=0;
    int col=0;
    I4p_trial_15=0.0;

    for(int I=0;I<3;I++)
    {
        for(int l=0;l<3;l++)
        {
            row=0;
            for(int L=0;L<3;L++)
            {
                for(int k=0;k<3;k++)
                {
                    for(int j=0;j<3;j++)
                    {
						for(int Lbar=0;Lbar<3;Lbar++)
						{
							for(int Abar=0;Abar<3;Abar++)
							{
								for(int Bbar=0;Bbar<3;Bbar++)
								{
									for(int P=0;P<3;P++)
									{
										for(int i=0;i<3;i++)
										{
											for(int Qbar=0;Qbar<3;Qbar++)
											{
												for(int pbar=0;pbar<3;pbar++)
												{
													for(int Nbar=0;Nbar<3;Nbar++)
													{
														for(int Mbar=0;Mbar<3;Mbar++)
														{
															  I4p_trial_15(row,col)+=fDeformation_Gradient_Inverse(L,j)*fFe(j,Mbar)*fFe(i,Mbar)*fFe(i,Lbar)*fCe_n_inverse(Lbar,pbar)*fFe_tr(l,Abar)
															  *fFp_inverse(I,Bbar)*fdevSPK_tr(Abar,Bbar)*fdevSPK_tr(Qbar,pbar)*fFp_n(Qbar,P)*fFp_inverse(P,Nbar)*fFe(k,Nbar);
														}
													}
												}
											}
										}
									}
								}
							}
						}
                    }
                row++;
                }
            }
        col++;
        }
    }
}



void FSMicromorphic2_3DT:: Form_I5p_trial_1()
{

    int row=0;
    int col=0;
    I5p_trial_1=0.0;

    for(int I=0;I<3;I++)
    {
        for(int l=0;l<3;l++)
        {
            row=0;
            for(int L=0;L<3;L++)
            {
                for(int k=0;k<3;k++)
                {
                    for(int j=0;j<3;j++)
                    {
						for(int Lbar=0;Lbar<3;Lbar++)
						{
							for(int pbar=0;pbar<3;pbar++)
							{
								for(int P=0;P<3;P++)
								{
									for(int Qbar=0;Qbar<3;Qbar++)
									{
										for(int Nbar=0;Nbar<3;Nbar++)
										{
											for(int Mbar=0;Mbar<3;Mbar++)
											{
												  I5p_trial_1(row,col)+=fDeformation_Gradient_Inverse(L,j)*fFe(j,Mbar)*SPK(Mbar,Nbar)*fFe(k,Lbar)*fCe_n_inverse(Lbar,pbar)
												  *fFp_inverse(I,Qbar)*fFe_tr(l,pbar)*fFp_n(Qbar,P)*fFp_inverse(P,Nbar);
											}
										}
									}
								}
							}
						}
                    }
                row++;
                }
            }
        col++;
        }
    }
}


void FSMicromorphic2_3DT:: Form_I5p_trial_2()
{

    int row=0;
    int col=0;
    I5p_trial_2=0.0;

    for(int I=0;I<3;I++)
    {
        for(int l=0;l<3;l++)
        {
            row=0;
            for(int L=0;L<3;L++)
            {
                for(int k=0;k<3;k++)
                {
                    for(int j=0;j<3;j++)
                    {
						for(int Lbar=0;Lbar<3;Lbar++)
						{
							for(int pbar=0;pbar<3;pbar++)
							{
								for(int P=0;P<3;P++)
								{
									for(int Qbar=0;Qbar<3;Qbar++)
									{
										for(int Nbar=0;Nbar<3;Nbar++)
										{
											for(int Mbar=0;Mbar<3;Mbar++)
											{
												  I5p_trial_2(row,col)+=fDeformation_Gradient_Inverse(L,j)*fFe(j,Mbar)*SPK(Mbar,Nbar)*fFe(k,Lbar)*fCe_n_inverse(Lbar,pbar)*fFe_tr(l,Qbar)
												  *fFp_inverse(I,pbar)*fFp_n(Qbar,P)*fFp_inverse(P,Nbar);
											}
										}
									}
								}
							}
						}
                    }
                row++;
                }
            }
        col++;
        }
    }
}


void FSMicromorphic2_3DT:: Form_I5p_trial_3()
{

    int row=0;
    int col=0;
    I5p_trial_3=0.0;

    for(int I=0;I<3;I++)
    {
        for(int l=0;l<3;l++)
        {
            row=0;
            for(int L=0;L<3;L++)
            {
                for(int k=0;k<3;k++)
                {
                    for(int j=0;j<3;j++)
                    {
						for(int Lbar=0;Lbar<3;Lbar++)
						{
							for(int Abar=0;Abar<3;Abar++)
							{
								for(int Qbar=0;Qbar<3;Qbar++)
								{
									for(int P=0;P<3;P++)
									{
										for(int Nbar=0;Nbar<3;Nbar++)
										{
											for(int Mbar=0;Mbar<3;Mbar++)
											{
												  I5p_trial_3(row,col)+=fDeformation_Gradient_Inverse(L,j)*fFe(j,Mbar)*SPK(Mbar,Nbar)*fFe(k,Lbar)*fCe_n_inverse(Lbar,Qbar)
												  *fFp_inverse(I,Abar)*fFe_tr(l,Abar)*fFp_n(Qbar,P)*fFp_inverse(P,Nbar);
											}
										}
									}
								}
							}
						}
                    }
                row++;
                }
            }
        col++;
        }
    }
}


void FSMicromorphic2_3DT:: Form_I5p_trial_4()
{

    int row=0;
    int col=0;
    I5p_trial_4=0.0;

    for(int I=0;I<3;I++)
    {
        for(int l=0;l<3;l++)
        {
            row=0;
            for(int L=0;L<3;L++)
            {
                for(int k=0;k<3;k++)
                {
                    for(int j=0;j<3;j++)
                    {
						for(int Lbar=0;Lbar<3;Lbar++)
						{
							for(int pbar=0;pbar<3;pbar++)
							{
								for(int P=0;P<3;P++)
								{
									for(int Qbar=0;Qbar<3;Qbar++)
									{
										for(int Abar=0;Abar<3;Abar++)
										{
											for(int Bbar=0;Bbar<3;Bbar++)
											{
												for(int Nbar=0;Nbar<3;Nbar++)
												{
													for(int Mbar=0;Mbar<3;Mbar++)
													{
														  I5p_trial_4(row,col)+=fDeformation_Gradient_Inverse(L,j)*fFe(j,Mbar)*SPK(Mbar,Nbar)*fFe(k,Lbar)*fCe_n_inverse(Lbar,pbar)*fFp_inverse(I,Abar)
														  *fFe_tr(l,Bbar)*fdevSPK_tr(Abar,Bbar)*fdevSPK_tr(Qbar,pbar)*fFp_n(Qbar,P)*fFp_inverse(P,Nbar);
													}
												}
											}
										}
									}
								}
							}
						}
                    }
                row++;
                }
            }
        col++;
        }
    }
}


void FSMicromorphic2_3DT:: Form_I5p_trial_5()
{

    int row=0;
    int col=0;
    I5p_trial_5=0.0;

    for(int I=0;I<3;I++)
    {
        for(int l=0;l<3;l++)
        {
            row=0;
            for(int L=0;L<3;L++)
            {
                for(int k=0;k<3;k++)
                {
                    for(int j=0;j<3;j++)
                    {
						for(int Lbar=0;Lbar<3;Lbar++)
						{
							for(int pbar=0;pbar<3;pbar++)
							{
								for(int P=0;P<3;P++)
								{
									for(int Qbar=0;Qbar<3;Qbar++)
									{
										for(int Abar=0;Abar<3;Abar++)
										{
											for(int Bbar=0;Bbar<3;Bbar++)
											{
												for(int Nbar=0;Nbar<3;Nbar++)
												{
													for(int Mbar=0;Mbar<3;Mbar++)
													{
														  I5p_trial_5(row,col)+=fDeformation_Gradient_Inverse(L,j)*fFe(j,Mbar)*SPK(Mbar,Nbar)*fFe(k,Lbar)*fCe_n_inverse(Lbar,pbar)*fFe_tr(l,Abar)
														  *fFp_inverse(I,Bbar)*fdevSPK_tr(Abar,Bbar)*fdevSPK_tr(Qbar,pbar)*fFp_n(Qbar,P)*fFp_inverse(P,Nbar);
													}
												}
											}
										}
									}
								}
							}
						}
                    }
                row++;
                }
            }
        col++;
        }
    }
}



void FSMicromorphic2_3DT:: Form_I5p_trial_1_5()
{

    int row=0;
    int col=0;
    I5p_trial_1 = 0.0;
    I5p_trial_2 = 0.0;
    I5p_trial_3 = 0.0;
    I5p_trial_4 = 0.0;
    I5p_trial_5 = 0.0;


    fTemp_matrix_nsd_x_nsd = 0.0;
    fTemp_matrix_nsd_x_nsd2 = 0.0;
    fTemp_matrix_nsd_x_nsd3 = 0.0;

    fTemp_matrix_nsd_x_nsd.MultABC(fDeformation_Gradient_Inverse,fFe,SPK);
    fTemp_matrix_nsd_x_nsd2.MultAB(fFp_n,fFp_inverse);
    fTemp_matrix_nsd_x_nsd3.MultABT(fTemp_matrix_nsd_x_nsd,fTemp_matrix_nsd_x_nsd2);

    for(int I=0;I<3;I++)
    {
        for(int l=0;l<3;l++)
        {
            row=0;
            for(int L=0;L<3;L++)
            {
                for(int k=0;k<3;k++)
                {
					for(int Lbar=0;Lbar<3;Lbar++)
					{
						for(int pbar=0;pbar<3;pbar++)
						{
							for(int Qbar=0;Qbar<3;Qbar++)
							{
								  I5p_trial_1(row,col)+= fTemp_matrix_nsd_x_nsd3(L,Qbar)*fFp_inverse(I,Qbar)
								  *fFe_tr(l,pbar)*fFe(k,Lbar)*fCe_n_inverse(Lbar,pbar);
							}
						}
					}
                row++;
                }
            }
        col++;
        }
    }

    row=0;
    col=0;

    for(int I=0;I<3;I++)
    {
        for(int l=0;l<3;l++)
        {
            row=0;
            for(int L=0;L<3;L++)
            {
                for(int k=0;k<3;k++)
                {
					for(int Lbar=0;Lbar<3;Lbar++)
					{
						for(int pbar=0;pbar<3;pbar++)
						{
							for(int Qbar=0;Qbar<3;Qbar++)
							{
								  I5p_trial_2(row,col)+= fTemp_matrix_nsd_x_nsd3(L,Qbar)*fFe_tr(l,Qbar)
								  *fFp_inverse(I,pbar)*fFe(k,Lbar)*fCe_n_inverse(Lbar,pbar);
							}
						}
					}
                row++;
                }
            }
        col++;
        }
    }


    row=0;
    col=0;

    for(int I=0;I<3;I++)
    {
        for(int l=0;l<3;l++)
        {
            row=0;
            for(int L=0;L<3;L++)
            {
                for(int k=0;k<3;k++)
                {
					for(int Lbar=0;Lbar<3;Lbar++)
					{
						for(int Abar=0;Abar<3;Abar++)
						{
							for(int pbar=0;pbar<3;pbar++)
							{
								for(int Qbar=0;Qbar<3;Qbar++)
								{
									  I5p_trial_3(row,col)+= fTemp_matrix_nsd_x_nsd3(L,Qbar)*fFp_inverse(I,Abar)
									  *fFe_tr(l,Abar)*fIdentity_matrix(pbar,Qbar)*fFe(k,Lbar)*fCe_n_inverse(Lbar,pbar);
								}
							}
						}
					}
                row++;
                }
            }
        col++;
        }
    }


    row=0;
    col=0;

    for(int I=0;I<3;I++)
    {
        for(int l=0;l<3;l++)
        {
            row=0;
            for(int L=0;L<3;L++)
            {
                for(int k=0;k<3;k++)
                {
					for(int Lbar=0;Lbar<3;Lbar++)
					{
						for(int Abar=0;Abar<3;Abar++)
						{
							for(int Bbar=0;Bbar<3;Bbar++)
							{
								for(int pbar=0;pbar<3;pbar++)
								{
									for(int Qbar=0;Qbar<3;Qbar++)
									{
										  I5p_trial_4(row,col)+= fTemp_matrix_nsd_x_nsd3(L,Qbar)*fFp_inverse(I,Abar)
										  *fFe_tr(l,Bbar)*fdevSPK_tr(Abar,Bbar)*fdevSPK_tr(Qbar,pbar)*fFe(k,Lbar)*fCe_n_inverse(Lbar,pbar);
									}
								}
							}
						}
					}
                row++;
                }
            }
        col++;
        }
    }

    row=0;
    col=0;


    for(int I=0;I<3;I++)
    {
        for(int l=0;l<3;l++)
        {
            row=0;
            for(int L=0;L<3;L++)
            {
                for(int k=0;k<3;k++)
                {
					for(int Lbar=0;Lbar<3;Lbar++)
					{
						for(int Abar=0;Abar<3;Abar++)
						{
							for(int Bbar=0;Bbar<3;Bbar++)
							{
								for(int pbar=0;pbar<3;pbar++)
								{
									for(int Qbar=0;Qbar<3;Qbar++)
									{
										  I5p_trial_5(row,col)+= fTemp_matrix_nsd_x_nsd3(L,Qbar)*fFe_tr(l,Abar)
										  *fFp_inverse(I,Bbar)*fdevSPK_tr(Abar,Bbar)*fdevSPK_tr(Qbar,pbar)*fFe(k,Lbar)*fCe_n_inverse(Lbar,pbar);
									}
								}
							}
						}
					}
                row++;
                }
            }
        col++;
        }
    }
}



//////////////////The terms related to the variation of (dG/dS_tr) within the variation of Delgamma/////////////////////
void FSMicromorphic2_3DT:: Form_I_temp_DelGamma_dGdStrial()
{

    int row=0;
    int col=0;
    I_temp_DelGamma_dGdStrial_1=0.0;
    fTemp_matrix_nsd_x_nsd = 0.0;
    fTemp_matrix_nsd_x_nsd2 = 0.0;
    fTemp_matrix_nsd_x_nsd3 = 0.0;
    fTemp_matrix_nsd_x_nsd4 = 0.0;
    fTemp_matrix_nsd_x_nsd5 = 0.0;
    fTemp_matrix_nsd_x_nsd6 = 0.0;
    fTemp_matrix_nsd_x_nsd7 = 0.0;
    fTemp_matrix_nsd_x_nsd8 = 0.0;
    fTemp_matrix_nsd_x_nsd9 = 0.0;


		for(int l=0;l<3;l++)
		{
    	row=0;
           for(int I=0;I<3;I++)
           {
				for(int i=0;i<3;i++)
				{
					for(int Bbar=0;Bbar<3;Bbar++)
					{
						for(int N=0;N<3;N++)
						{
							for(int Qbar=0;Qbar<3;Qbar++)
							{
								for(int pbar=0;pbar<3;pbar++)
								{
									for(int Mbar=0;Mbar<3;Mbar++)
									{
										for(int Kbar=0;Kbar<3;Kbar++)
										{
											fTemp_matrix_nsd_x_nsd(row,col)+=fdFYdS(Kbar,Kbar)*fFe(i,Mbar)*fCe_n_inverse(Mbar,pbar)*fFe_tr(l,pbar)
											*fFp_inverse(I,Qbar)*fFp_n(Qbar,N)*fFp_inverse(N,Bbar)*fFe(i,Bbar);
										}
									}
								}
							}
						}
					}
				}
			   row++;
             }
           col++;
       }

		fTemp_matrix_nsd_x_nsd*= fMaterial_Params[kLambda];
		fTemp_matrix_nsd_x_nsd*= fMaterial_Params[kMu];
		fTemp_matrix_nsd_x_nsd*= Comp33;
		fTemp_matrix_nsd_x_nsd*= -1;
		I_temp_DelGamma_dGdStrial_1 = fTemp_matrix_nsd_x_nsd;

	row=0;
	col=0;

		for(int l=0;l<3;l++)
		{
    	row=0;
           for(int I=0;I<3;I++)
           {
				for(int i=0;i<3;i++)
				{
					for(int Bbar=0;Bbar<3;Bbar++)
					{
						for(int N=0;N<3;N++)
						{
							for(int pbar=0;pbar<3;pbar++)
							{
								for(int Mbar=0;Mbar<3;Mbar++)
								{
									for(int Nbar=0;Nbar<3;Nbar++)
									{
										for(int Kbar=0;Kbar<3;Kbar++)
										{
											fTemp_matrix_nsd_x_nsd2(row,col)+=fdFYdS(Kbar,Kbar)*fFe(i,Mbar)*fCe_n_inverse(Mbar,pbar)*fFp_inverse(I,Nbar)
											*fFe_tr(l,Nbar)*fFp_n(pbar,N)*fFp_inverse(N,Bbar)*fFe(i,Bbar);
										}
									}
								}
							}
						}
					}
				}
			   row++;
             }
           col++;
       }

		fTemp_matrix_nsd_x_nsd2*= fMaterial_Params[kLambda];
		fTemp_matrix_nsd_x_nsd2*= fMaterial_Params[kMu];
		fTemp_matrix_nsd_x_nsd2*= Comp33;
		fTemp_matrix_nsd_x_nsd2*= 2.0/3.0;
		I_temp_DelGamma_dGdStrial_1+= fTemp_matrix_nsd_x_nsd2;

		row=0;
		col=0;

		for(int l=0;l<3;l++)
		{
    	row=0;
           for(int I=0;I<3;I++)
           {
				for(int i=0;i<3;i++)
				{
					for(int Bbar=0;Bbar<3;Bbar++)
					{
						for(int N=0;N<3;N++)
						{
							for(int pbar=0;pbar<3;pbar++)
							{
								for(int Qbar=0;Qbar<3;Qbar++)
								{
									for(int Mbar=0;Mbar<3;Mbar++)
									{
										for(int Nbar=0;Nbar<3;Nbar++)
										{
											for(int Abar=0;Abar<3;Abar++)
											{
												for(int Kbar=0;Kbar<3;Kbar++)
												{
													fTemp_matrix_nsd_x_nsd3(row,col)+=fdFYdS(Kbar,Kbar)*fFe(i,Mbar)*fCe_n_inverse(Mbar,pbar)*fFp_inverse(I,Abar)
													*fFe_tr(l,Nbar)*fdevSPK_tr(Abar,Nbar)*fdevSPK_tr(Qbar,pbar)*fFp_n(Qbar,N)*fFp_inverse(N,Bbar)*fFe(i,Bbar);
												}
											}
										}
									}
								}
							}
						}
					}
				}
			   row++;
             }
           col++;
       }

		fTemp_matrix_nsd_x_nsd3*= fMaterial_Params[kLambda];
		fTemp_matrix_nsd_x_nsd3*= fMaterial_Params[kMu];
		fTemp_matrix_nsd_x_nsd3*= Comp44;
		I_temp_DelGamma_dGdStrial_1+= fTemp_matrix_nsd_x_nsd3;

		row=0;
		col=0;
////////////////////////////////////////////////////////////////////////////////////
	    for(int l=0;l<3;l++)
	       {
	    	row=0;
	           for(int I=0;I<3;I++)
	           {
					for(int i=0;i<3;i++)
					{
						for(int N=0;N<3;N++)
						{
							for(int Qbar=0;Qbar<3;Qbar++)
							{
								for(int pbar=0;pbar<3;pbar++)
								{
									for(int Mbar=0;Mbar<3;Mbar++)
									{
										for(int Kbar=0;Kbar<3;Kbar++)
										{
											for(int Lbar=0;Lbar<3;Lbar++)
											{
												fTemp_matrix_nsd_x_nsd4(row,col)+=fdFYdS(Kbar,Lbar)*fFe(i,Mbar)*fCe_n_inverse(Mbar,pbar)*fFp_inverse(I,Qbar)
												*fFe_tr(l,pbar)*fFp_n(Qbar,N)*fFp_inverse(N,Kbar)*fFe(i,Lbar);
											}
										}
									}
								}
							}
						}
					}
				row++;
	             }
	        col++;
	       }

		fTemp_matrix_nsd_x_nsd4*= fMaterial_Params[kMu];
		fTemp_matrix_nsd_x_nsd4*= fMaterial_Params[kMu];
		fTemp_matrix_nsd_x_nsd4*= Comp33;
		fTemp_matrix_nsd_x_nsd4*= -1;
		I_temp_DelGamma_dGdStrial_1+= fTemp_matrix_nsd_x_nsd4;

		row=0;
		col=0;

	    for(int l=0;l<3;l++)
	       {
	    	row=0;
	           for(int I=0;I<3;I++)
	           {
					for(int i=0;i<3;i++)
					{
						for(int N=0;N<3;N++)
						{
							for(int Qbar=0;Qbar<3;Qbar++)
							{
								for(int Bbar=0;Bbar<3;Bbar++)
								{
									for(int Mbar=0;Mbar<3;Mbar++)
									{
										for(int Kbar=0;Kbar<3;Kbar++)
										{
											for(int Lbar=0;Lbar<3;Lbar++)
											{
												fTemp_matrix_nsd_x_nsd5(row,col)+=fdFYdS(Kbar,Lbar)*fFe(i,Mbar)*fCe_n_inverse(Mbar,Qbar)*fFp_inverse(I,Bbar)
												*fFe_tr(l,Bbar)*fFp_n(Qbar,N)*fFp_inverse(N,Kbar)*fFe(i,Lbar);
											}
										}
									}
								}
							}
						}
					}
				   row++;
	             }
	           col++;
	       }

		fTemp_matrix_nsd_x_nsd5*= fMaterial_Params[kMu];
		fTemp_matrix_nsd_x_nsd5*= fMaterial_Params[kMu];
		fTemp_matrix_nsd_x_nsd5*= Comp33;
		fTemp_matrix_nsd_x_nsd5*= 2.0/3.0;
		I_temp_DelGamma_dGdStrial_1+= fTemp_matrix_nsd_x_nsd5;

		row=0;
		col=0;

	    for(int l=0;l<3;l++)
	       {
	    	row=0;
	           for(int I=0;I<3;I++)
	           {
					for(int i=0;i<3;i++)
					{
						for(int N=0;N<3;N++)
						{
							for(int Qbar=0;Qbar<3;Qbar++)
							{
								for(int pbar=0;pbar<3;pbar++)
								{
									for(int Mbar=0;Mbar<3;Mbar++)
									{
										for(int Kbar=0;Kbar<3;Kbar++)
										{
											for(int Lbar=0;Lbar<3;Lbar++)
											{
												for(int Abar=0;Abar<3;Abar++)
												{
													for(int Bbar=0;Bbar<3;Bbar++)
													{
														fTemp_matrix_nsd_x_nsd6(row,col)+=fdFYdS(Kbar,Lbar)*fFe(i,Mbar)*fCe_n_inverse(Mbar,pbar)*fFp_inverse(I,Bbar)
														*fFe_tr(l,Abar)*fdevSPK_tr(Bbar,Abar)*fdevSPK_tr(Qbar,pbar)*fFp_n(Qbar,N)*fFp_inverse(N,Kbar)*fFe(i,Lbar);
													}
												}
											}
										}
									}
								}
							}
						}
					}
				   row++;
	             }
	           col++;
	       }

		fTemp_matrix_nsd_x_nsd6*= fMaterial_Params[kMu];
		fTemp_matrix_nsd_x_nsd6*= fMaterial_Params[kMu];
		fTemp_matrix_nsd_x_nsd6*= Comp44;
		I_temp_DelGamma_dGdStrial_1+= fTemp_matrix_nsd_x_nsd6;

		row=0;
		col=0;
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	    for(int l=0;l<3;l++)
	       {
	    	row=0;
	           for(int I=0;I<3;I++)
	           {
					for(int i=0;i<3;i++)
					{
						for(int N=0;N<3;N++)
						{
							for(int Qbar=0;Qbar<3;Qbar++)
							{
								for(int pbar=0;pbar<3;pbar++)
								{
									for(int Mbar=0;Mbar<3;Mbar++)
									{
										for(int Kbar=0;Kbar<3;Kbar++)
										{
											for(int Lbar=0;Lbar<3;Lbar++)
											{
												fTemp_matrix_nsd_x_nsd7(row,col)+=fdFYdS(Kbar,Lbar)*fFe(i,Kbar)*fFe(i,Mbar)*fCe_n_inverse(Mbar,pbar)*fFp_inverse(I,Qbar)
												*fFe_tr(l,pbar)*fFp_n(Qbar,N)*fFp_inverse(N,Lbar);
											}
										}
									}
								}
							}
						}
					}
				   row++;
	             }
	           col++;
	        }

		fTemp_matrix_nsd_x_nsd7*= fMaterial_Params[kMu];
		fTemp_matrix_nsd_x_nsd7*= fMaterial_Params[kMu];
		fTemp_matrix_nsd_x_nsd7*= Comp33;
		fTemp_matrix_nsd_x_nsd7*= -1;
		I_temp_DelGamma_dGdStrial_1+= fTemp_matrix_nsd_x_nsd7;

		row=0;
		col=0;

	    for(int l=0;l<3;l++)
	       {
	    	row=0;
	           for(int I=0;I<3;I++)
	           {
					for(int i=0;i<3;i++)
					{
						for(int N=0;N<3;N++)
						{
							for(int Bbar=0;Bbar<3;Bbar++)
							{
								for(int Qbar=0;Qbar<3;Qbar++)
								{
									for(int Mbar=0;Mbar<3;Mbar++)
									{
										for(int Kbar=0;Kbar<3;Kbar++)
										{
											for(int Lbar=0;Lbar<3;Lbar++)
											{
												fTemp_matrix_nsd_x_nsd8(row,col)+=fdFYdS(Kbar,Lbar)*fFe(i,Kbar)*fFe(i,Mbar)*fCe_n_inverse(Mbar,Qbar)*fFp_inverse(I,Bbar)
												*fFe_tr(l,Bbar)*fFp_n(Qbar,N)*fFp_inverse(N,Lbar);
											}
										}
									}
								}
							}
						}
					}
				   row++;
	             }
	           col++;
	       }

		fTemp_matrix_nsd_x_nsd8*= fMaterial_Params[kMu];
		fTemp_matrix_nsd_x_nsd8*= fMaterial_Params[kMu];
		fTemp_matrix_nsd_x_nsd8*= Comp33;
		fTemp_matrix_nsd_x_nsd8*= 2.0/3.0;
		I_temp_DelGamma_dGdStrial_1+= fTemp_matrix_nsd_x_nsd8;

		row=0;
		col=0;

	    for(int l=0;l<3;l++)
	   {
		row=0;
		   for(int I=0;I<3;I++)
		   {
				for(int i=0;i<3;i++)
				{
					for(int N=0;N<3;N++)
					{
						for(int Qbar=0;Qbar<3;Qbar++)
						{
							for(int pbar=0;pbar<3;pbar++)
							{
								for(int Mbar=0;Mbar<3;Mbar++)
								{
									for(int Kbar=0;Kbar<3;Kbar++)
									{
										for(int Lbar=0;Lbar<3;Lbar++)
										{
											for(int Abar=0;Abar<3;Abar++)
											{
												for(int Bbar=0;Bbar<3;Bbar++)
												{
													fTemp_matrix_nsd_x_nsd9(row,col)+=fdFYdS(Kbar,Lbar)*fFe(i,Kbar)*fFe(i,Mbar)*fCe_n_inverse(Mbar,pbar)*fFp_inverse(I,Bbar)
													*fFe_tr(l,Abar)*fdevSPK_tr(Bbar,Abar)*fdevSPK_tr(Qbar,pbar)*fFp_n(Qbar,N)*fFp_inverse(N,Lbar);
												}
											}
										}
									}
								}
							}
						}
					}
				}
			   row++;
			 }
		   col++;
	   }

		fTemp_matrix_nsd_x_nsd9*= fMaterial_Params[kMu];
		fTemp_matrix_nsd_x_nsd9*= fMaterial_Params[kMu];
		fTemp_matrix_nsd_x_nsd9*= Comp44;
		I_temp_DelGamma_dGdStrial_1+= fTemp_matrix_nsd_x_nsd9;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void FSMicromorphic2_3DT:: Form_I_temp_DelGamma_dGdStrial_transpose()
{

    int row=0;
    int col=0;
    I_temp_DelGamma_dGdStrial_2=0.0;
    fTemp_matrix_nsd_x_nsd = 0.0;
    fTemp_matrix_nsd_x_nsd2 = 0.0;
    fTemp_matrix_nsd_x_nsd3 = 0.0;
    fTemp_matrix_nsd_x_nsd4 = 0.0;
    fTemp_matrix_nsd_x_nsd5 = 0.0;
    fTemp_matrix_nsd_x_nsd6 = 0.0;


    for(int I=0;I<3;I++)
        {
     	row=0;
            for(int l=0;l<3;l++)
            {
 				for(int i=0;i<3;i++)
 				{
 					for(int Bbar=0;Bbar<3;Bbar++)
 					{
 						for(int N=0;N<3;N++)
 						{
 							for(int Qbar=0;Qbar<3;Qbar++)
 							{
 								for(int pbar=0;pbar<3;pbar++)
 								{
 									for(int Mbar=0;Mbar<3;Mbar++)
 									{
 										for(int Kbar=0;Kbar<3;Kbar++)
 										{
 											fTemp_matrix_nsd_x_nsd(row,col)+=fdFYdS(Kbar,Kbar)*fFe(i,Mbar)*fCe_n_inverse(Mbar,pbar)*fFe_tr(l,Qbar)
 											*fFp_inverse(I,pbar)*fFp_n(Qbar,N)*fFp_inverse(N,Bbar)*fFe(i,Bbar);
 										}
 									}
 								}
 							}
 						}
 					}
 				}
 			   row++;
              }
            col++;
        }

	fTemp_matrix_nsd_x_nsd*= fMaterial_Params[kMu];
	fTemp_matrix_nsd_x_nsd*= fMaterial_Params[kLambda];
	fTemp_matrix_nsd_x_nsd*= Comp33;
	fTemp_matrix_nsd_x_nsd*= -1;
	I_temp_DelGamma_dGdStrial_2 = fTemp_matrix_nsd_x_nsd;

 	row=0;
 	col=0;

     for(int I=0;I<3;I++)
        {
     	row=0;
            for(int l=0;l<3;l++)
            {
 				for(int i=0;i<3;i++)
 				{
 					for(int Bbar=0;Bbar<3;Bbar++)
 					{
 						for(int N=0;N<3;N++)
 						{
 							for(int Qbar=0;Qbar<3;Qbar++)
 							{
								for(int pbar=0;pbar<3;pbar++)
								{
									for(int Mbar=0;Mbar<3;Mbar++)
									{
										for(int Nbar=0;Nbar<3;Nbar++)
										{
											for(int Abar=0;Abar<3;Abar++)
											{
												for(int Kbar=0;Kbar<3;Kbar++)
												{
													fTemp_matrix_nsd_x_nsd2(row,col)+=fdFYdS(Kbar,Kbar)*fFe(i,Mbar)*fCe_n_inverse(Mbar,pbar)*fFe_tr(l,Abar)*fFp_inverse(I,Nbar)
													*fdevSPK_tr(Abar,Nbar)*fdevSPK_tr(Qbar,pbar)*fFp_n(Qbar,N)*fFp_inverse(N,Bbar)*fFe(i,Bbar);
												}
											}
										}
									}
								}
 							}
 						}
 					}
 				}
 			   row++;
              }
            col++;
        }

 	fTemp_matrix_nsd_x_nsd2*= fMaterial_Params[kMu];
 	fTemp_matrix_nsd_x_nsd2*= fMaterial_Params[kLambda];
 	fTemp_matrix_nsd_x_nsd2*= Comp44;
 	I_temp_DelGamma_dGdStrial_2+= fTemp_matrix_nsd_x_nsd2;

  	row=0;
  	col=0;

    for(int I=0;I<3;I++)
       {
    	row=0;
           for(int l=0;l<3;l++)
           {
				for(int i=0;i<3;i++)
				{
					for(int N=0;N<3;N++)
					{
						for(int Qbar=0;Qbar<3;Qbar++)
						{
							for(int pbar=0;pbar<3;pbar++)
							{
								for(int Mbar=0;Mbar<3;Mbar++)
								{
									for(int Kbar=0;Kbar<3;Kbar++)
									{
										for(int Lbar=0;Lbar<3;Lbar++)
										{
											fTemp_matrix_nsd_x_nsd3(row,col)+=fdFYdS(Kbar,Lbar)*fFe(i,Mbar)*fCe_n_inverse(Mbar,pbar)*fFe_tr(l,Qbar)
											*fFp_inverse(I,pbar)*fFp_n(Qbar,N)*fFp_inverse(N,Kbar)*fFe(i,Lbar);
										}
									}
								}
							}
						}
					}
				}
			   row++;
             }
           col++;
       }

	fTemp_matrix_nsd_x_nsd3*= fMaterial_Params[kMu];
	fTemp_matrix_nsd_x_nsd3*= fMaterial_Params[kMu];
	fTemp_matrix_nsd_x_nsd3*= Comp33;
	fTemp_matrix_nsd_x_nsd3*= -1;
	I_temp_DelGamma_dGdStrial_2+= fTemp_matrix_nsd_x_nsd3;

	row=0;
	col=0;

    for(int I=0;I<3;I++)
   {
	row=0;
	   for(int l=0;l<3;l++)
	   {
			for(int i=0;i<3;i++)
			{
				for(int N=0;N<3;N++)
				{
					for(int Qbar=0;Qbar<3;Qbar++)
					{
						for(int pbar=0;pbar<3;pbar++)
						{
							for(int Mbar=0;Mbar<3;Mbar++)
							{
								for(int Kbar=0;Kbar<3;Kbar++)
								{
									for(int Lbar=0;Lbar<3;Lbar++)
									{
										for(int Abar=0;Abar<3;Abar++)
										{
											for(int Bbar=0;Bbar<3;Bbar++)
											{
												fTemp_matrix_nsd_x_nsd4(row,col)+=fdFYdS(Kbar,Lbar)*fFe(i,Mbar)*fCe_n_inverse(Mbar,pbar)*fFe_tr(l,Bbar)
												*fFp_inverse(I,Abar)*fdevSPK_tr(Bbar,Abar)*fdevSPK_tr(Qbar,pbar)*fFp_n(Qbar,N)*fFp_inverse(N,Kbar)*fFe(i,Lbar);
											}
										}
									}
								}
							}
						}
					}
				}
			}
		  row++;
	   }
	   col++;
   }

 	fTemp_matrix_nsd_x_nsd4*= fMaterial_Params[kMu];
 	fTemp_matrix_nsd_x_nsd4*= fMaterial_Params[kMu];
 	fTemp_matrix_nsd_x_nsd4*= Comp44;
 	I_temp_DelGamma_dGdStrial_2+= fTemp_matrix_nsd_x_nsd4;

	row=0;
	col=0;

    for(int I=0;I<3;I++)
       {
    	row=0;
           for(int l=0;l<3;l++)
           {
				for(int i=0;i<3;i++)
				{
					for(int N=0;N<3;N++)
					{
						for(int Qbar=0;Qbar<3;Qbar++)
						{
							for(int pbar=0;pbar<3;pbar++)
							{
								for(int Mbar=0;Mbar<3;Mbar++)
								{
									for(int Kbar=0;Kbar<3;Kbar++)
									{
										for(int Lbar=0;Lbar<3;Lbar++)
										{
											fTemp_matrix_nsd_x_nsd5(row,col)+=fdFYdS(Kbar,Lbar)*fFe(i,Kbar)*fFe(i,Mbar)*fCe_n_inverse(Mbar,pbar)*fFe_tr(l,Qbar)
											*fFp_inverse(I,pbar)*fFp_n(Qbar,N)*fFp_inverse(N,Lbar);
										}
									}
								}
							}
						}
					}
				}
			   row++;
             }
           col++;
       }

	fTemp_matrix_nsd_x_nsd5*= fMaterial_Params[kMu];
	fTemp_matrix_nsd_x_nsd5*= fMaterial_Params[kMu];
	fTemp_matrix_nsd_x_nsd5*= Comp33;
	fTemp_matrix_nsd_x_nsd5*= -1;
	I_temp_DelGamma_dGdStrial_2+= fTemp_matrix_nsd_x_nsd5;

	row=0;
	col=0;

    for(int I=0;I<3;I++)
    {
    	row=0;
	   for(int l=0;l<3;l++)
	   {
			for(int i=0;i<3;i++)
			{
				for(int N=0;N<3;N++)
				{
					for(int pbar=0;pbar<3;pbar++)
					{
						for(int Qbar=0;Qbar<3;Qbar++)
						{
							for(int Mbar=0;Mbar<3;Mbar++)
							{
								for(int Kbar=0;Kbar<3;Kbar++)
								{
									for(int Lbar=0;Lbar<3;Lbar++)
									{
										for(int Abar=0;Abar<3;Abar++)
										{
											for(int Bbar=0;Bbar<3;Bbar++)
											{
												fTemp_matrix_nsd_x_nsd6(row,col)+=fdFYdS(Kbar,Lbar)*fFe(i,Kbar)*fFe(i,Mbar)*fCe_n_inverse(Mbar,pbar)*fFe_tr(l,Bbar)
												*fFp_inverse(I,Abar)*fdevSPK_tr(Bbar,Abar)*fdevSPK_tr(Qbar,pbar)*fFp_n(Qbar,N)*fFp_inverse(N,Lbar);
											}
										}
									}
								}
							}
						}
					}
				}
			}
		row++;
	   }
	 col++;
   }

	fTemp_matrix_nsd_x_nsd6*= fMaterial_Params[kMu];
	fTemp_matrix_nsd_x_nsd6*= fMaterial_Params[kMu];
	fTemp_matrix_nsd_x_nsd6*= Comp44;
	I_temp_DelGamma_dGdStrial_2+= fTemp_matrix_nsd_x_nsd6;
}
////////////////////////////////////////////////////////////////////////////////////////////////////////

void FSMicromorphic2_3DT:: Form_I6p_trial_1()
{

    int row=0;
    int col=0;
    I6p_trial_1=0.0;

    for(int I=0;I<3;I++)
    {
        for(int l=0;l<3;l++)
        {
            row=0;
            for(int L=0;L<3;L++)
            {
                for(int k=0;k<3;k++)
                {
                    for(int j=0;j<3;j++)
                    {
						for(int Lbar=0;Lbar<3;Lbar++)
						{
							for(int pbar=0;pbar<3;pbar++)
							{
								for(int P=0;P<3;P++)
								{
									for(int Qbar=0;Qbar<3;Qbar++)
									{
										for(int Nbar=0;Nbar<3;Nbar++)
										{
											for(int Mbar=0;Mbar<3;Mbar++)
											{
												  I6p_trial_1(row,col)+=fDeformation_Gradient_Inverse(L,j)*fFp_inverse(P,Lbar)*fCe_n_inverse(Lbar,pbar)
												  *fdGdS_tr(Qbar,pbar)*fFp_n(Qbar,P)*fFe(j,Mbar)*SPK(Mbar,Nbar)*fFe(k,Nbar)*I_temp_DelGamma_dGdStrial_1(I,l);
											}
										}
									}
								}
							}
						}
                    }
                row++;
                }
            }
        col++;
        }
    }
}


void FSMicromorphic2_3DT:: Form_I6p_trial_2()
{

    int row=0;
    int col=0;
    I6p_trial_2=0.0;

    for(int I=0;I<3;I++)
    {
        for(int l=0;l<3;l++)
        {
            row=0;
            for(int L=0;L<3;L++)
            {
                for(int k=0;k<3;k++)
                {
                    for(int j=0;j<3;j++)
                    {
						for(int Lbar=0;Lbar<3;Lbar++)
						{
							for(int pbar=0;pbar<3;pbar++)
							{
								for(int P=0;P<3;P++)
								{
									for(int Qbar=0;Qbar<3;Qbar++)
									{
										for(int Nbar=0;Nbar<3;Nbar++)
										{
											for(int Mbar=0;Mbar<3;Mbar++)
											{
												  I6p_trial_2(row,col)+=fDeformation_Gradient_Inverse(L,j)*fFp_inverse(P,Lbar)*fCe_n_inverse(Lbar,pbar)
												  *fdGdS_tr(Qbar,pbar)*fFp_n(Qbar,P)*fFe(j,Mbar)*SPK(Mbar,Nbar)*fFe(k,Nbar)*I_temp_DelGamma_dGdStrial_2(l,I);
											}
										}
									}
								}
							}
						}
                    }
                row++;
                }
            }
        col++;
        }
    }
}






void FSMicromorphic2_3DT:: Form_I6p_trial_1_2()
{

    int row=0;
    int col=0;

    I6p_trial_1=0.0;
    I6p_trial_2=0.0;
    fTemp_matrix_nsd_x_nsd = 0.0;
    fTemp_matrix_nsd_x_nsd2 = 0.0;
    fTemp_matrix_nsd_x_nsd3 = 0.0;
    fTemp_matrix_nsd_x_nsd4 = 0.0;
    fTemp_matrix_one_x_one = 0.0;

    fTemp_matrix_nsd_x_nsd.MultABCT(fFe,SPK,fFe);
    fTemp_matrix_nsd_x_nsd2.MultAB(fDeformation_Gradient_Inverse,fTemp_matrix_nsd_x_nsd);

    fTemp_matrix_nsd_x_nsd3.MultABCT(fFp_inverse,fCe_n_inverse,fdGdS_tr);
    fTemp_matrix_nsd_x_nsd4.MultAB(fTemp_matrix_nsd_x_nsd3,fFp_n);
    fTemp_matrix_one_x_one = fTemp_matrix_nsd_x_nsd4.Trace();




    for(int I=0;I<3;I++)
    {
        for(int l=0;l<3;l++)
        {
            row=0;
            for(int L=0;L<3;L++)
            {
                for(int k=0;k<3;k++)
                {
				  I6p_trial_1(row,col)+= fTemp_matrix_nsd_x_nsd2(L,k)*I_temp_DelGamma_dGdStrial_1(I,l);
                row++;
                }
            }
        col++;
        }
    }

    I6p_trial_1*= fTemp_matrix_one_x_one;

    row=0;
    col=0;

    for(int I=0;I<3;I++)
    {
        for(int l=0;l<3;l++)
        {
            row=0;
            for(int L=0;L<3;L++)
            {
                for(int k=0;k<3;k++)
                {
				  I6p_trial_2(row,col)+= fTemp_matrix_nsd_x_nsd2(L,k)*I_temp_DelGamma_dGdStrial_2(l,I);
                row++;
                }
            }
        col++;
        }
    }

    I6p_trial_2*= fTemp_matrix_one_x_one;

}








void FSMicromorphic2_3DT:: Form_I7p_trial_1()
{

    int row=0;
    int col=0;
    I7p_trial_1=0.0;

    for(int I=0;I<3;I++)
    {
        for(int l=0;l<3;l++)
        {
            row=0;
            for(int L=0;L<3;L++)
            {
                for(int k=0;k<3;k++)
                {
                    for(int j=0;j<3;j++)
                    {
						for(int Lbar=0;Lbar<3;Lbar++)
						{
							for(int pbar=0;pbar<3;pbar++)
							{
								for(int N=0;N<3;N++)
								{
									for(int Qbar=0;Qbar<3;Qbar++)
									{
										for(int Nbar=0;Nbar<3;Nbar++)
										{
											for(int Mbar=0;Mbar<3;Mbar++)
											{
												  I7p_trial_1(row,col)+=fDeformation_Gradient_Inverse(L,j)*fFe(j,Lbar)*fCe_n_inverse(Lbar,pbar)
												  *fdGdS_tr(Qbar,pbar)*fFp_n(Qbar,N)*fFp_inverse(N,Mbar)*SPK(Mbar,Nbar)*fFe(k,Nbar)*I_temp_DelGamma_dGdStrial_1(I,l);
											}
										}
									}
								}
							}
						}
                    }
                row++;
                }
            }
        col++;
        }
    }
}


void FSMicromorphic2_3DT:: Form_I7p_trial_2()
{

    int row=0;
    int col=0;
    I7p_trial_2=0.0;

    for(int I=0;I<3;I++)
    {
        for(int l=0;l<3;l++)
        {
            row=0;
            for(int L=0;L<3;L++)
            {
                for(int k=0;k<3;k++)
                {
                    for(int j=0;j<3;j++)
                    {
						for(int Lbar=0;Lbar<3;Lbar++)
						{
							for(int pbar=0;pbar<3;pbar++)
							{
								for(int N=0;N<3;N++)
								{
									for(int Qbar=0;Qbar<3;Qbar++)
									{
										for(int Nbar=0;Nbar<3;Nbar++)
										{
											for(int Mbar=0;Mbar<3;Mbar++)
											{
												  I7p_trial_2(row,col)+=fDeformation_Gradient_Inverse(L,j)*fFe(j,Lbar)*fCe_n_inverse(Lbar,pbar)
												  *fdGdS_tr(Qbar,pbar)*fFp_n(Qbar,N)*fFp_inverse(N,Mbar)*SPK(Mbar,Nbar)*fFe(k,Nbar)*I_temp_DelGamma_dGdStrial_2(l,I);
											}
										}
									}
								}
							}
						}
                    }
                row++;
                }
            }
        col++;
        }
    }
}




void FSMicromorphic2_3DT:: Form_I7p_trial_1_2()
{

    int row=0;
    int col=0;

    I7p_trial_1=0.0;
    I7p_trial_2=0.0;
    fTemp_matrix_nsd_x_nsd = 0.0;
    fTemp_matrix_nsd_x_nsd2 = 0.0;
    fTemp_matrix_nsd_x_nsd3 = 0.0;
    fTemp_matrix_nsd_x_nsd4 = 0.0;
    fTemp_matrix_one_x_one = 0.0;

    fTemp_matrix_nsd_x_nsd.MultABCT(fFe,SPK,fFe);
    fTemp_matrix_nsd_x_nsd2.MultAB(fFp_n,fTemp_matrix_nsd_x_nsd);

    fTemp_matrix_nsd_x_nsd3.MultABCT(fFe,fCe_n_inverse,fdGdS_tr);
    fTemp_matrix_nsd_x_nsd4.MultAB(fDeformation_Gradient_Inverse,fTemp_matrix_nsd_x_nsd3);




    for(int I=0;I<3;I++)
    {
        for(int l=0;l<3;l++)
        {
            row=0;
            for(int L=0;L<3;L++)
            {
                for(int k=0;k<3;k++)
                {
                    for(int Qbar=0;Qbar<3;Qbar++)
                    {
                    	I7p_trial_1(row,col)+= fTemp_matrix_nsd_x_nsd2(Qbar,k)*fTemp_matrix_nsd_x_nsd4(L,Qbar)*I_temp_DelGamma_dGdStrial_1(I,l);
                    }
                row++;
                }
            }
        col++;
        }
    }


    row=0;
    col=0;

    for(int I=0;I<3;I++)
    {
        for(int l=0;l<3;l++)
        {
            row=0;
            for(int L=0;L<3;L++)
            {
                for(int k=0;k<3;k++)
                {
                    for(int Qbar=0;Qbar<3;Qbar++)
                    {
                    	I7p_trial_2(row,col)+= fTemp_matrix_nsd_x_nsd2(Qbar,k)*fTemp_matrix_nsd_x_nsd4(L,Qbar)*I_temp_DelGamma_dGdStrial_2(l,I);
                    }
                row++;
                }
            }
        col++;
        }
    }
}




void FSMicromorphic2_3DT:: Form_I8p_trial_1()
{

    int row=0;
    int col=0;
    I8p_trial_1=0.0;

    for(int I=0;I<3;I++)
    {
        for(int l=0;l<3;l++)
        {
            row=0;
            for(int L=0;L<3;L++)
            {
                for(int k=0;k<3;k++)
                {
                    for(int j=0;j<3;j++)
                    {
						for(int Lbar=0;Lbar<3;Lbar++)
						{
							for(int pbar=0;pbar<3;pbar++)
							{
								for(int N=0;N<3;N++)
								{
									for(int Qbar=0;Qbar<3;Qbar++)
									{
										for(int Nbar=0;Nbar<3;Nbar++)
										{
											for(int Mbar=0;Mbar<3;Mbar++)
											{
												  I8p_trial_1(row,col)+=fDeformation_Gradient_Inverse(L,j)*fFe(j,Mbar)*SPK(Mbar,Nbar)*fFe(k,Lbar)
												  *fCe_n_inverse(Lbar,pbar)*fdGdS_tr(Qbar,pbar)*fFp_n(Qbar,N)*fFp_inverse(N,Nbar)*I_temp_DelGamma_dGdStrial_1(I,l);
											}
										}
									}
								}
							}
						}
                    }
                row++;
                }
            }
        col++;
        }
    }
}


void FSMicromorphic2_3DT:: Form_I8p_trial_2()
{

    int row=0;
    int col=0;
    I8p_trial_2=0.0;

    for(int I=0;I<3;I++)
    {
        for(int l=0;l<3;l++)
        {
            row=0;
            for(int L=0;L<3;L++)
            {
                for(int k=0;k<3;k++)
                {
                    for(int j=0;j<3;j++)
                    {
						for(int Lbar=0;Lbar<3;Lbar++)
						{
							for(int pbar=0;pbar<3;pbar++)
							{
								for(int N=0;N<3;N++)
								{
									for(int Qbar=0;Qbar<3;Qbar++)
									{
										for(int Nbar=0;Nbar<3;Nbar++)
										{
											for(int Mbar=0;Mbar<3;Mbar++)
											{
												  I8p_trial_2(row,col)+=fDeformation_Gradient_Inverse(L,j)*fFe(j,Mbar)*SPK(Mbar,Nbar)*fFe(k,Lbar)
												  *fCe_n_inverse(Lbar,pbar)*fdGdS_tr(Qbar,pbar)*fFp_n(Qbar,N)*fFp_inverse(N,Nbar)*I_temp_DelGamma_dGdStrial_2(l,I);
											}
										}
									}
								}
							}
						}
                    }
                row++;
                }
            }
        col++;
        }
    }
}



void FSMicromorphic2_3DT:: Form_I8p_trial_1_2()
{

    int row=0;
    int col=0;

    I8p_trial_1=0.0;
    I8p_trial_2=0.0;
    fTemp_matrix_nsd_x_nsd = 0.0;
    fTemp_matrix_nsd_x_nsd2 = 0.0;
    fTemp_matrix_nsd_x_nsd3 = 0.0;
    fTemp_matrix_nsd_x_nsd4 = 0.0;


    fTemp_matrix_nsd_x_nsd.MultABC(fDeformation_Gradient_Inverse,fFe,SPK);

    fTemp_matrix_nsd_x_nsd3.MultATBC(fdGdS_tr,fFp_n,fFp_inverse);
    fTemp_matrix_nsd_x_nsd4.MultABC(fFe,fCe_n_inverse,fTemp_matrix_nsd_x_nsd3);




    for(int I=0;I<3;I++)
    {
        for(int l=0;l<3;l++)
        {
            row=0;
            for(int L=0;L<3;L++)
            {
                for(int k=0;k<3;k++)
                {
                    for(int Nbar=0;Nbar<3;Nbar++)
                    {
                    	I8p_trial_1(row,col)+= fTemp_matrix_nsd_x_nsd(L,Nbar)*fTemp_matrix_nsd_x_nsd4(k,Nbar)*I_temp_DelGamma_dGdStrial_1(I,l);
                    }
                row++;
                }
            }
        col++;
        }
    }


    row=0;
    col=0;

    for(int I=0;I<3;I++)
    {
        for(int l=0;l<3;l++)
        {
            row=0;
            for(int L=0;L<3;L++)
            {
                for(int k=0;k<3;k++)
                {
                    for(int Nbar=0;Nbar<3;Nbar++)
                    {
                    	I8p_trial_2(row,col)+= fTemp_matrix_nsd_x_nsd(L,Nbar)*fTemp_matrix_nsd_x_nsd4(k,Nbar)*I_temp_DelGamma_dGdStrial_2(l,I);
                    }
                row++;
                }
            }
        col++;
        }
    }
}









void FSMicromorphic2_3DT:: Form_I9p_trial_1()
{

    int row=0;
    int col=0;
    I9p_trial_1=0.0;

    for(int I=0;I<3;I++)
    {
        for(int l=0;l<3;l++)
        {
            row=0;
            for(int L=0;L<3;L++)
            {
                for(int k=0;k<3;k++)
                {
                    for(int i=0;i<3;i++)
                    {
						for(int j=0;j<3;j++)
						{
							for(int N=0;N<3;N++)
							{
								for(int Kbar=0;Kbar<3;Kbar++)
								{
									for(int Lbar=0;Lbar<3;Lbar++)
									{
										for(int pbar=0;pbar<3;pbar++)
										{
											for(int Qbar=0;Qbar<3;Qbar++)
											{
												for(int Mbar=0;Mbar<3;Mbar++)
												{
													  I9p_trial_1(row,col)+=fDeformation_Gradient_Inverse(L,j)*fFe(j,Mbar)*fFe(i,Lbar)*fCe_n_inverse(Lbar,pbar)
													  *fdGdS_tr(Qbar,pbar)*fFp_n(Qbar,N)*fFp_inverse(N,Kbar)*fFe(i,Kbar)*fFe(k,Mbar)*I_temp_DelGamma_dGdStrial_1(I,l);
												}
											}
										}
									}
								}
							}
						}
                    }
                row++;
                }
            }
        col++;
        }
    }
}


void FSMicromorphic2_3DT:: Form_I9p_trial_2()
{

    int row=0;
    int col=0;
    I9p_trial_2=0.0;

    for(int I=0;I<3;I++)
    {
        for(int l=0;l<3;l++)
        {
            row=0;
            for(int L=0;L<3;L++)
            {
                for(int k=0;k<3;k++)
                {
                    for(int i=0;i<3;i++)
                    {
						for(int j=0;j<3;j++)
						{
							for(int N=0;N<3;N++)
							{
								for(int Kbar=0;Kbar<3;Kbar++)
								{
									for(int Lbar=0;Lbar<3;Lbar++)
									{
										for(int pbar=0;pbar<3;pbar++)
										{
											for(int Qbar=0;Qbar<3;Qbar++)
											{
												for(int Mbar=0;Mbar<3;Mbar++)
												{
													  I9p_trial_2(row,col)+=fDeformation_Gradient_Inverse(L,j)*fFe(j,Mbar)*fFe(i,Lbar)*fCe_n_inverse(Lbar,pbar)
													  *fdGdS_tr(Qbar,pbar)*fFp_n(Qbar,N)*fFp_inverse(N,Kbar)*fFe(i,Kbar)*fFe(k,Mbar)*I_temp_DelGamma_dGdStrial_2(l,I);
												}
											}
										}
									}
								}
							}
						}
                    }
                row++;
                }
            }
        col++;
        }
    }
}



void FSMicromorphic2_3DT:: Form_I9p_trial_1_2()
{

    int row=0;
    int col=0;

    I9p_trial_1=0.0;
    I9p_trial_2=0.0;
    fTemp_matrix_nsd_x_nsd = 0.0;
    fTemp_matrix_nsd_x_nsd2 = 0.0;
    fTemp_matrix_nsd_x_nsd3 = 0.0;
    fTemp_matrix_nsd_x_nsd4 = 0.0;
    fTemp_matrix_one_x_one = 0.0;

    fTemp_matrix_nsd_x_nsd.MultABCT(fDeformation_Gradient_Inverse,fFe,fFe);

    fTemp_matrix_nsd_x_nsd2.MultABCT(fFp_n,fFp_inverse,fFe);
    fTemp_matrix_nsd_x_nsd3.MultATB(fdGdS_tr,fTemp_matrix_nsd_x_nsd2);
    fTemp_matrix_nsd_x_nsd2.MultAB(fFe,fCe_n_inverse);
    fTemp_matrix_nsd_x_nsd4.MultAB(fTemp_matrix_nsd_x_nsd2,fTemp_matrix_nsd_x_nsd3);

    fTemp_matrix_one_x_one = fTemp_matrix_nsd_x_nsd4.Trace();



    for(int I=0;I<3;I++)
    {
        for(int l=0;l<3;l++)
        {
            row=0;
            for(int L=0;L<3;L++)
            {
                for(int k=0;k<3;k++)
                {
                    	I9p_trial_1(row,col)+= fTemp_matrix_nsd_x_nsd(L,k)*I_temp_DelGamma_dGdStrial_1(I,l);
                row++;
                }
            }
        col++;
        }
    }

    I9p_trial_1*= fTemp_matrix_one_x_one;

    row=0;
    col=0;

    for(int I=0;I<3;I++)
    {
        for(int l=0;l<3;l++)
        {
            row=0;
            for(int L=0;L<3;L++)
            {
                for(int k=0;k<3;k++)
                {
                    	I9p_trial_2(row,col)+= fTemp_matrix_nsd_x_nsd(L,k)*I_temp_DelGamma_dGdStrial_2(l,I);
               row++;
                }
            }
        col++;
        }
    }

    I9p_trial_2*= fTemp_matrix_one_x_one;
}









void FSMicromorphic2_3DT:: Form_I10p_trial_1()
{

    int row=0;
    int col=0;
    I10p_trial_1=0.0;

    for(int I=0;I<3;I++)
    {
        for(int l=0;l<3;l++)
        {
            row=0;
            for(int L=0;L<3;L++)
            {
                for(int k=0;k<3;k++)
                {
                    for(int i=0;i<3;i++)
                    {
						for(int j=0;j<3;j++)
						{
							for(int N=0;N<3;N++)
							{
								for(int Nbar=0;Nbar<3;Nbar++)
								{
									for(int Lbar=0;Lbar<3;Lbar++)
									{
										for(int pbar=0;pbar<3;pbar++)
										{
											for(int Qbar=0;Qbar<3;Qbar++)
											{
												for(int Mbar=0;Mbar<3;Mbar++)
												{
													  I10p_trial_1(row,col)+=fDeformation_Gradient_Inverse(L,j)*fFe(j,Mbar)*fFe(i,Lbar)*fCe_n_inverse(Lbar,pbar)
													  *fdGdS_tr(Qbar,pbar)*fFp_n(Qbar,N)*fFp_inverse(N,Mbar)*fFe(i,Nbar)*fFe(k,Nbar)*I_temp_DelGamma_dGdStrial_1(I,l);
												}
											}
										}
									}
								}
							}
						}
                    }
                row++;
                }
            }
        col++;
        }
    }
}


void FSMicromorphic2_3DT:: Form_I10p_trial_2()
{

    int row=0;
    int col=0;
    I10p_trial_2=0.0;

    for(int I=0;I<3;I++)
    {
        for(int l=0;l<3;l++)
        {
            row=0;
            for(int L=0;L<3;L++)
            {
                for(int k=0;k<3;k++)
                {
                    for(int i=0;i<3;i++)
                    {
						for(int j=0;j<3;j++)
						{
							for(int N=0;N<3;N++)
							{
								for(int Nbar=0;Nbar<3;Nbar++)
								{
									for(int Lbar=0;Lbar<3;Lbar++)
									{
										for(int pbar=0;pbar<3;pbar++)
										{
											for(int Qbar=0;Qbar<3;Qbar++)
											{
												for(int Mbar=0;Mbar<3;Mbar++)
												{
													  I10p_trial_2(row,col)+=fDeformation_Gradient_Inverse(L,j)*fFe(j,Mbar)*fFe(i,Lbar)*fCe_n_inverse(Lbar,pbar)
													  *fdGdS_tr(Qbar,pbar)*fFp_n(Qbar,N)*fFp_inverse(N,Mbar)*fFe(i,Nbar)*fFe(k,Nbar)*I_temp_DelGamma_dGdStrial_2(l,I);
												}
											}
										}
									}
								}
							}
						}
                    }
                row++;
                }
            }
        col++;
        }
    }
}



void FSMicromorphic2_3DT:: Form_I10p_trial_1_2()
{

    int row=0;
    int col=0;

    I10p_trial_1=0.0;
    I10p_trial_2=0.0;
    fTemp_matrix_nsd_x_nsd = 0.0;
    fTemp_matrix_nsd_x_nsd2 = 0.0;
    fTemp_matrix_nsd_x_nsd3 = 0.0;
    fTemp_matrix_nsd_x_nsd4 = 0.0;
    fTemp_matrix_nsd_x_nsd5 = 0.0;

    fTemp_matrix_nsd_x_nsd.MultAB(fDeformation_Gradient_Inverse,fFe);

    fTemp_matrix_nsd_x_nsd2.MultATBC(fdGdS_tr,fFp_n,fFp_inverse);
    fTemp_matrix_nsd_x_nsd3.MultABC(fFe,fCe_n_inverse,fTemp_matrix_nsd_x_nsd2);
    fTemp_matrix_nsd_x_nsd2.MultABT(fFe,fFe);
    fTemp_matrix_nsd_x_nsd4.MultATB(fTemp_matrix_nsd_x_nsd3,fTemp_matrix_nsd_x_nsd2);
    fTemp_matrix_nsd_x_nsd5.MultAB(fTemp_matrix_nsd_x_nsd,fTemp_matrix_nsd_x_nsd4);




    for(int I=0;I<3;I++)
    {
        for(int l=0;l<3;l++)
        {
            row=0;
            for(int L=0;L<3;L++)
            {
                for(int k=0;k<3;k++)
                {
                    	I10p_trial_1(row,col)+= fTemp_matrix_nsd_x_nsd5(L,k)*I_temp_DelGamma_dGdStrial_1(I,l);
                row++;
                }
            }
        col++;
        }
    }


    row=0;
    col=0;

    for(int I=0;I<3;I++)
    {
        for(int l=0;l<3;l++)
        {
            row=0;
            for(int L=0;L<3;L++)
            {
                for(int k=0;k<3;k++)
                {
                    	I10p_trial_2(row,col)+= fTemp_matrix_nsd_x_nsd5(L,k)*I_temp_DelGamma_dGdStrial_2(l,I);
                row++;
                }
            }
        col++;
        }
    }
}




void FSMicromorphic2_3DT:: Form_I11p_trial_1()
{

    int row=0;
    int col=0;
    I11p_trial_1=0.0;

    for(int I=0;I<3;I++)
    {
        for(int l=0;l<3;l++)
        {
            row=0;
            for(int L=0;L<3;L++)
            {
                for(int k=0;k<3;k++)
                {
                    for(int i=0;i<3;i++)
                    {
						for(int j=0;j<3;j++)
						{
							for(int N=0;N<3;N++)
							{
								for(int Nbar=0;Nbar<3;Nbar++)
								{
									for(int Lbar=0;Lbar<3;Lbar++)
									{
										for(int pbar=0;pbar<3;pbar++)
										{
											for(int Qbar=0;Qbar<3;Qbar++)
											{
												for(int Mbar=0;Mbar<3;Mbar++)
												{
													  I11p_trial_1(row,col)+=fDeformation_Gradient_Inverse(L,j)*fFe(j,Mbar)*fFe(i,Mbar)*fFe(i,Lbar)*fCe_n_inverse(Lbar,pbar)
													  *fdGdS_tr(Qbar,pbar)*fFp_n(Qbar,N)*fFp_inverse(N,Nbar)*fFe(k,Nbar)*I_temp_DelGamma_dGdStrial_1(I,l);
												}
											}
										}
									}
								}
							}
						}
                    }
                row++;
                }
            }
        col++;
        }
    }
}


void FSMicromorphic2_3DT:: Form_I11p_trial_2()
{

    int row=0;
    int col=0;
    I11p_trial_2=0.0;

    for(int I=0;I<3;I++)
    {
        for(int l=0;l<3;l++)
        {
            row=0;
            for(int L=0;L<3;L++)
            {
                for(int k=0;k<3;k++)
                {
                    for(int i=0;i<3;i++)
                    {
						for(int j=0;j<3;j++)
						{
							for(int N=0;N<3;N++)
							{
								for(int Nbar=0;Nbar<3;Nbar++)
								{
									for(int Lbar=0;Lbar<3;Lbar++)
									{
										for(int pbar=0;pbar<3;pbar++)
										{
											for(int Qbar=0;Qbar<3;Qbar++)
											{
												for(int Mbar=0;Mbar<3;Mbar++)
												{
													  I11p_trial_2(row,col)+=fDeformation_Gradient_Inverse(L,j)*fFe(j,Mbar)*fFe(i,Mbar)*fFe(i,Lbar)*fCe_n_inverse(Lbar,pbar)
													  *fdGdS_tr(Qbar,pbar)*fFp_n(Qbar,N)*fFp_inverse(N,Nbar)*fFe(k,Nbar)*I_temp_DelGamma_dGdStrial_2(l,I);
												}
											}
										}
									}
								}
							}
						}
                    }
                row++;
                }
            }
        col++;
        }
    }
}




void FSMicromorphic2_3DT:: Form_I11p_trial_1_2()
{

    int row=0;
    int col=0;

    I11p_trial_1=0.0;
    I11p_trial_2=0.0;
    fTemp_matrix_nsd_x_nsd = 0.0;
    fTemp_matrix_nsd_x_nsd2 = 0.0;
    fTemp_matrix_nsd_x_nsd3 = 0.0;
    fTemp_matrix_nsd_x_nsd4 = 0.0;

    fTemp_matrix_nsd_x_nsd.MultABCT(fDeformation_Gradient_Inverse,fFe,fFe);

    fTemp_matrix_nsd_x_nsd2.MultABCT(fFe,fCe_n_inverse,fdGdS_tr);
    fTemp_matrix_nsd_x_nsd3.MultABCT(fFp_n,fFp_inverse,fFe);

    fTemp_matrix_nsd_x_nsd4.MultABC(fTemp_matrix_nsd_x_nsd,fTemp_matrix_nsd_x_nsd2,fTemp_matrix_nsd_x_nsd3);





    for(int I=0;I<3;I++)
    {
        for(int l=0;l<3;l++)
        {
            row=0;
            for(int L=0;L<3;L++)
            {
                for(int k=0;k<3;k++)
                {
                    	I11p_trial_1(row,col)+= fTemp_matrix_nsd_x_nsd4(L,k)*I_temp_DelGamma_dGdStrial_1(I,l);
                row++;
                }
            }
        col++;
        }
    }


    row=0;
    col=0;

    for(int I=0;I<3;I++)
    {
        for(int l=0;l<3;l++)
        {
            row=0;
            for(int L=0;L<3;L++)
            {
                for(int k=0;k<3;k++)
                {
                    	I11p_trial_2(row,col)+= fTemp_matrix_nsd_x_nsd4(L,k)*I_temp_DelGamma_dGdStrial_2(l,I);
                row++;
                }
            }
        col++;
        }
    }
}


////////////////////// The Micromorphic terms in dG/dStr in the balance of momentum Eq./////////////////////

void FSMicromorphic2_3DT:: Form_I12p_trial_1_10()
{

    int row=0;
    int col=0;

    I12p_trial_1=0.0;
    I12p_trial_2=0.0;
    I12p_trial_3=0.0;
    I12p_trial_4=0.0;
    I12p_trial_5=0.0;
    I12p_trial_6=0.0;
    I12p_trial_7=0.0;
    I12p_trial_8=0.0;
    I12p_trial_9=0.0;
    I12p_trial_10=0.0;

    fTemp_matrix_one_x_one = 0.0;
    fTemp_matrix_nsd_x_nsd = 0.0;
    fTemp_matrix_nsd_x_nsd2 = 0.0;
    fTemp_matrix_nsd_x_nsd3 = 0.0;
    fTemp_matrix_nsd_x_nsd4 = 0.0;

    fTemp_matrix_nsd_x_nsd.MultABCT(fFe,SPK,fFe);
    fTemp_matrix_nsd_x_nsd2.MultAB(fDeformation_Gradient_Inverse,fTemp_matrix_nsd_x_nsd);

    fTemp_matrix_nsd_x_nsd3.MultABCT(fFp_n,fFp_inverse,fCe_n_inverse);
    fTemp_matrix_one_x_one = fTemp_matrix_nsd_x_nsd3.Trace();


    for(int I=0;I<3;I++)
    {
        for(int l=0;l<3;l++)
        {
            row=0;
            for(int L=0;L<3;L++)
            {
                for(int k=0;k<3;k++)
                {
                    for(int pbar=0;pbar<3;pbar++)
                    {
                        for(int qbar=0;qbar<3;qbar++)
                        {
                    	I12p_trial_1(row,col)+= fTemp_matrix_nsd_x_nsd3(qbar,pbar)*fTemp_matrix_nsd_x_nsd2(L,k)*fFp_inverse(I,qbar)*fChie_tr(l,pbar);
                        }
                    }
                row++;
                }
            }
        col++;
        }
    }


    row=0;
    col=0;

    for(int I=0;I<3;I++)
    {
        for(int l=0;l<3;l++)
        {
            row=0;
            for(int L=0;L<3;L++)
            {
                for(int k=0;k<3;k++)
                {
                    for(int pbar=0;pbar<3;pbar++)
                    {
                        for(int qbar=0;qbar<3;qbar++)
                        {
                    	I12p_trial_2(row,col)+= fTemp_matrix_nsd_x_nsd3(qbar,pbar)*fTemp_matrix_nsd_x_nsd2(L,k)*fFe_tr(l,qbar)*fChip_inverse(I,pbar);
                        }
                    }
                row++;
                }
            }
        col++;
        }
    }



    row=0;
    col=0;

    for(int I=0;I<3;I++)
    {
        for(int l=0;l<3;l++)
        {
            row=0;
            for(int L=0;L<3;L++)
            {
                for(int k=0;k<3;k++)
                {
                    for(int pbar=0;pbar<3;pbar++)
                    {
                        for(int qbar=0;qbar<3;qbar++)
                        {
                    	I12p_trial_3(row,col)+= fTemp_matrix_nsd_x_nsd3(qbar,pbar)*fTemp_matrix_nsd_x_nsd2(L,k)*fFp_inverse(I,pbar)*fChie_tr(l,qbar);
                        }
                    }
                row++;
                }
            }
        col++;
        }
    }



    row=0;
    col=0;

    for(int I=0;I<3;I++)
    {
        for(int l=0;l<3;l++)
        {
            row=0;
            for(int L=0;L<3;L++)
            {
                for(int k=0;k<3;k++)
                {
                    for(int pbar=0;pbar<3;pbar++)
                    {
                        for(int qbar=0;qbar<3;qbar++)
                        {
                    	I12p_trial_4(row,col)+= fTemp_matrix_nsd_x_nsd3(qbar,pbar)*fTemp_matrix_nsd_x_nsd2(L,k)*fFe_tr(l,pbar)*fChip_inverse(I,qbar);
                        }
                    }
                row++;
                }
            }
        col++;
        }
    }



    row=0;
    col=0;

    for(int I=0;I<3;I++)
    {
        for(int l=0;l<3;l++)
        {
            row=0;
            for(int L=0;L<3;L++)
            {
                for(int k=0;k<3;k++)
                {
                    for(int Mbar=0;Mbar<3;Mbar++)
                    {
                    	I12p_trial_5(row,col)+= fTemp_matrix_nsd_x_nsd2(L,k)*fFp_inverse(I,Mbar)*fChie_tr(l,Mbar);
                    }
                row++;
                }
            }
        col++;
        }
    }
    I12p_trial_5*= fTemp_matrix_one_x_one;

    row=0;
    col=0;

    for(int I=0;I<3;I++)
    {
        for(int l=0;l<3;l++)
        {
            row=0;
            for(int L=0;L<3;L++)
            {
                for(int k=0;k<3;k++)
                {
                    for(int Mbar=0;Mbar<3;Mbar++)
                    {
                    	I12p_trial_6(row,col)+= fTemp_matrix_nsd_x_nsd2(L,k)*fFe_tr(l,Mbar)*fChip_inverse(I,Mbar);
                    }
                row++;
                }
            }
        col++;
        }
    }
    I12p_trial_6*= fTemp_matrix_one_x_one;

    row=0;
    col=0;

    for(int I=0;I<3;I++)
    {
        for(int l=0;l<3;l++)
        {
            row=0;
            for(int L=0;L<3;L++)
            {
                for(int k=0;k<3;k++)
                {
                    for(int Mbar=0;Mbar<3;Mbar++)
                    {
                        for(int Nbar=0;Nbar<3;Nbar++)
                        {
                            for(int qbar=0;qbar<3;qbar++)
                            {
                                for(int pbar=0;pbar<3;pbar++)
                                {
									I12p_trial_7(row,col)+= fTemp_matrix_nsd_x_nsd3(qbar,pbar)*fTemp_matrix_nsd_x_nsd2(L,k)*fFp_inverse(I,Mbar)*fChie_tr(l,Nbar)
									*fdevSPK_tr(Mbar,Nbar)*fdevSPK_tr(qbar,pbar);
                                }
                            }
                        }
                    }
                row++;
                }
            }
        col++;
        }
    }

    row=0;
    col=0;

    for(int I=0;I<3;I++)
    {
        for(int l=0;l<3;l++)
        {
            row=0;
            for(int L=0;L<3;L++)
            {
                for(int k=0;k<3;k++)
                {
                    for(int Mbar=0;Mbar<3;Mbar++)
                    {
                        for(int Nbar=0;Nbar<3;Nbar++)
                        {
                            for(int qbar=0;qbar<3;qbar++)
                            {
                                for(int pbar=0;pbar<3;pbar++)
                                {
									I12p_trial_8(row,col)+= fTemp_matrix_nsd_x_nsd3(qbar,pbar)*fTemp_matrix_nsd_x_nsd2(L,k)*fFe_tr(l,Mbar)*fChip_inverse(I,Nbar)
									*fdevSPK_tr(Mbar,Nbar)*fdevSPK_tr(qbar,pbar);
                                }
                            }
                        }
                    }
                row++;
                }
            }
        col++;
        }
    }


    row=0;
    col=0;

    for(int I=0;I<3;I++)
    {
        for(int l=0;l<3;l++)
        {
            row=0;
            for(int L=0;L<3;L++)
            {
                for(int k=0;k<3;k++)
                {
                    for(int Mbar=0;Mbar<3;Mbar++)
                    {
                        for(int Nbar=0;Nbar<3;Nbar++)
                        {
                            for(int qbar=0;qbar<3;qbar++)
                            {
                                for(int pbar=0;pbar<3;pbar++)
                                {
									I12p_trial_9(row,col)+= fTemp_matrix_nsd_x_nsd3(qbar,pbar)*fTemp_matrix_nsd_x_nsd2(L,k)*fFp_inverse(I,Nbar)*fChie_tr(l,Mbar)
									*fdevSPK_tr(Mbar,Nbar)*fdevSPK_tr(qbar,pbar);
                                }
                            }
                        }
                    }
                row++;
                }
            }
        col++;
        }
    }


    row=0;
    col=0;

    for(int I=0;I<3;I++)
    {
        for(int l=0;l<3;l++)
        {
            row=0;
            for(int L=0;L<3;L++)
            {
                for(int k=0;k<3;k++)
                {
                    for(int Mbar=0;Mbar<3;Mbar++)
                    {
                        for(int Nbar=0;Nbar<3;Nbar++)
                        {
                            for(int qbar=0;qbar<3;qbar++)
                            {
                                for(int pbar=0;pbar<3;pbar++)
                                {
									I12p_trial_10(row,col)+= fTemp_matrix_nsd_x_nsd3(qbar,pbar)*fTemp_matrix_nsd_x_nsd2(L,k)*fFe_tr(l,Nbar)*fChip_inverse(I,Mbar)
									*fdevSPK_tr(Mbar,Nbar)*fdevSPK_tr(qbar,pbar);
                                }
                            }
                        }
                    }
                row++;
                }
            }
        col++;
        }
    }
}


void FSMicromorphic2_3DT:: Form_I13p_trial_1_10()
{

    int row=0;
    int col=0;

    I13p_trial_1=0.0;
    I13p_trial_2=0.0;
    I13p_trial_3=0.0;
    I13p_trial_4=0.0;
    I13p_trial_5=0.0;
    I13p_trial_6=0.0;
    I13p_trial_7=0.0;
    I13p_trial_8=0.0;
    I13p_trial_9=0.0;
    I13p_trial_10=0.0;

    fTemp_matrix_one_x_one = 0.0;
    fTemp_matrix_nsd_x_nsd = 0.0;
    fTemp_matrix_nsd_x_nsd2 = 0.0;
    fTemp_matrix_nsd_x_nsd3 = 0.0;
    fTemp_matrix_nsd_x_nsd4 = 0.0;

    fTemp_matrix_nsd_x_nsd.MultABCT(fFp_inverse,SPK,fFe);
    fTemp_matrix_nsd_x_nsd2.MultAB(fFp_n,fTemp_matrix_nsd_x_nsd);

    fTemp_matrix_nsd_x_nsd3.MultABCT(fDeformation_Gradient_Inverse,fFe,fCe_n_inverse);
    fTemp_matrix_one_x_one = fTemp_matrix_nsd_x_nsd3.Trace();


    for(int I=0;I<3;I++)
    {
        for(int l=0;l<3;l++)
        {
            row=0;
            for(int L=0;L<3;L++)
            {
                for(int k=0;k<3;k++)
                {
                    for(int pbar=0;pbar<3;pbar++)
                    {
                        for(int qbar=0;qbar<3;qbar++)
                        {
                    	I13p_trial_1(row,col)+= fTemp_matrix_nsd_x_nsd3(qbar,k)*fTemp_matrix_nsd_x_nsd2(L,pbar)*fFp_inverse(I,qbar)*fChie_tr(l,pbar);
                        }
                    }
                row++;
                }
            }
        col++;
        }
    }


    row=0;
    col=0;

    for(int I=0;I<3;I++)
    {
        for(int l=0;l<3;l++)
        {
            row=0;
            for(int L=0;L<3;L++)
            {
                for(int k=0;k<3;k++)
                {
                    for(int pbar=0;pbar<3;pbar++)
                    {
                        for(int qbar=0;qbar<3;qbar++)
                        {
                    	I13p_trial_2(row,col)+= fTemp_matrix_nsd_x_nsd3(qbar,k)*fTemp_matrix_nsd_x_nsd2(L,pbar)*fFe_tr(l,qbar)*fChip_inverse(I,pbar);
                        }
                    }
                row++;
                }
            }
        col++;
        }
    }



    row=0;
    col=0;

    for(int I=0;I<3;I++)
    {
        for(int l=0;l<3;l++)
        {
            row=0;
            for(int L=0;L<3;L++)
            {
                for(int k=0;k<3;k++)
                {
                    for(int pbar=0;pbar<3;pbar++)
                    {
                        for(int qbar=0;qbar<3;qbar++)
                        {
                    	I13p_trial_3(row,col)+= fTemp_matrix_nsd_x_nsd3(qbar,k)*fTemp_matrix_nsd_x_nsd2(L,pbar)*fFp_inverse(I,pbar)*fChie_tr(l,qbar);
                        }
                    }
                row++;
                }
            }
        col++;
        }
    }



    row=0;
    col=0;

    for(int I=0;I<3;I++)
    {
        for(int l=0;l<3;l++)
        {
            row=0;
            for(int L=0;L<3;L++)
            {
                for(int k=0;k<3;k++)
                {
                    for(int pbar=0;pbar<3;pbar++)
                    {
                        for(int qbar=0;qbar<3;qbar++)
                        {
                    	I13p_trial_4(row,col)+= fTemp_matrix_nsd_x_nsd3(qbar,k)*fTemp_matrix_nsd_x_nsd2(L,pbar)*fFe_tr(l,pbar)*fChip_inverse(I,qbar);
                        }
                    }
                row++;
                }
            }
        col++;
        }
    }



    row=0;
    col=0;

    for(int I=0;I<3;I++)
    {
        for(int l=0;l<3;l++)
        {
            row=0;
            for(int L=0;L<3;L++)
            {
                for(int k=0;k<3;k++)
                {
                    for(int Mbar=0;Mbar<3;Mbar++)
                    {
                        for(int pbar=0;pbar<3;pbar++)
                        {
                    	I13p_trial_5(row,col)+= fTemp_matrix_nsd_x_nsd2(pbar,k)*fTemp_matrix_nsd_x_nsd3(L,pbar)*fFp_inverse(I,Mbar)*fChie_tr(l,Mbar);
                        }
                    }
                row++;
                }
            }
        col++;
        }
    }

    row=0;
    col=0;

    for(int I=0;I<3;I++)
    {
        for(int l=0;l<3;l++)
        {
            row=0;
            for(int L=0;L<3;L++)
            {
                for(int k=0;k<3;k++)
                {
                    for(int Mbar=0;Mbar<3;Mbar++)
                    {
                        for(int pbar=0;pbar<3;pbar++)
                        {
                    	I13p_trial_6(row,col)+= fTemp_matrix_nsd_x_nsd2(pbar,k)*fTemp_matrix_nsd_x_nsd3(L,pbar)*fFe_tr(l,Mbar)*fChip_inverse(I,Mbar);
                        }
                    }
                row++;
                }
            }
        col++;
        }
    }

    row=0;
    col=0;

    for(int I=0;I<3;I++)
    {
        for(int l=0;l<3;l++)
        {
            row=0;
            for(int L=0;L<3;L++)
            {
                for(int k=0;k<3;k++)
                {
                    for(int Mbar=0;Mbar<3;Mbar++)
                    {
                        for(int Nbar=0;Nbar<3;Nbar++)
                        {
                            for(int qbar=0;qbar<3;qbar++)
                            {
                                for(int pbar=0;pbar<3;pbar++)
                                {
									I13p_trial_7(row,col)+= fTemp_matrix_nsd_x_nsd3(L,pbar)*fTemp_matrix_nsd_x_nsd2(qbar,k)*fFp_inverse(I,Mbar)*fChie_tr(l,Nbar)
									*fdevSPK_tr(Mbar,Nbar)*fdevSPK_tr(qbar,pbar);
                                }
                            }
                        }
                    }
                row++;
                }
            }
        col++;
        }
    }

    row=0;
    col=0;

    for(int I=0;I<3;I++)
    {
        for(int l=0;l<3;l++)
        {
            row=0;
            for(int L=0;L<3;L++)
            {
                for(int k=0;k<3;k++)
                {
                    for(int Mbar=0;Mbar<3;Mbar++)
                    {
                        for(int Nbar=0;Nbar<3;Nbar++)
                        {
                            for(int qbar=0;qbar<3;qbar++)
                            {
                                for(int pbar=0;pbar<3;pbar++)
                                {
									I13p_trial_8(row,col)+= fTemp_matrix_nsd_x_nsd3(L,pbar)*fTemp_matrix_nsd_x_nsd2(qbar,k)*fFe_tr(l,Mbar)*fChip_inverse(I,Nbar)
									*fdevSPK_tr(Mbar,Nbar)*fdevSPK_tr(qbar,pbar);
                                }
                            }
                        }
                    }
                row++;
                }
            }
        col++;
        }
    }


    row=0;
    col=0;

    for(int I=0;I<3;I++)
    {
        for(int l=0;l<3;l++)
        {
            row=0;
            for(int L=0;L<3;L++)
            {
                for(int k=0;k<3;k++)
                {
                    for(int Mbar=0;Mbar<3;Mbar++)
                    {
                        for(int Nbar=0;Nbar<3;Nbar++)
                        {
                            for(int qbar=0;qbar<3;qbar++)
                            {
                                for(int pbar=0;pbar<3;pbar++)
                                {
									I13p_trial_9(row,col)+= fTemp_matrix_nsd_x_nsd3(L,pbar)*fTemp_matrix_nsd_x_nsd2(qbar,k)*fFp_inverse(I,Nbar)*fChie_tr(l,Mbar)
									*fdevSPK_tr(Mbar,Nbar)*fdevSPK_tr(qbar,pbar);
                                }
                            }
                        }
                    }
                row++;
                }
            }
        col++;
        }
    }


    row=0;
    col=0;

    for(int I=0;I<3;I++)
    {
        for(int l=0;l<3;l++)
        {
            row=0;
            for(int L=0;L<3;L++)
            {
                for(int k=0;k<3;k++)
                {
                    for(int Mbar=0;Mbar<3;Mbar++)
                    {
                        for(int Nbar=0;Nbar<3;Nbar++)
                        {
                            for(int qbar=0;qbar<3;qbar++)
                            {
                                for(int pbar=0;pbar<3;pbar++)
                                {
									I13p_trial_10(row,col)+= fTemp_matrix_nsd_x_nsd3(L,pbar)*fTemp_matrix_nsd_x_nsd2(qbar,k)*fFe_tr(l,Nbar)*fChip_inverse(I,Mbar)
									*fdevSPK_tr(Mbar,Nbar)*fdevSPK_tr(qbar,pbar);
                                }
                            }
                        }
                    }
                row++;
                }
            }
        col++;
        }
    }
}

void FSMicromorphic2_3DT:: Form_I14p_trial_1_10()
{

    int row=0;
    int col=0;

    I14p_trial_1=0.0;
    I14p_trial_2=0.0;
    I14p_trial_3=0.0;
    I14p_trial_4=0.0;
    I14p_trial_5=0.0;
    I14p_trial_6=0.0;
    I14p_trial_7=0.0;
    I14p_trial_8=0.0;
    I14p_trial_9=0.0;
    I14p_trial_10=0.0;

    fTemp_matrix_one_x_one = 0.0;
    fTemp_matrix_nsd_x_nsd = 0.0;
    fTemp_matrix_nsd_x_nsd2 = 0.0;
    fTemp_matrix_nsd_x_nsd3 = 0.0;
    fTemp_matrix_nsd_x_nsd4 = 0.0;

    fTemp_matrix_nsd_x_nsd2.MultAB(fFp_n,fFp_inverse);
    fTemp_matrix_nsd_x_nsd.MultABCT(fFe,SPK,fTemp_matrix_nsd_x_nsd2);
    fTemp_matrix_nsd_x_nsd2.MultAB(fDeformation_Gradient_Inverse,fTemp_matrix_nsd_x_nsd);

    fTemp_matrix_nsd_x_nsd3.MultAB(fFe,fCe_n_inverse);


    for(int I=0;I<3;I++)
    {
        for(int l=0;l<3;l++)
        {
            row=0;
            for(int L=0;L<3;L++)
            {
                for(int k=0;k<3;k++)
                {
                    for(int pbar=0;pbar<3;pbar++)
                    {
                        for(int qbar=0;qbar<3;qbar++)
                        {
                    	I14p_trial_1(row,col)+= fTemp_matrix_nsd_x_nsd3(k,pbar)*fTemp_matrix_nsd_x_nsd2(L,qbar)*fFp_inverse(I,qbar)*fChie_tr(l,pbar);
                        }
                    }
                row++;
                }
            }
        col++;
        }
    }


    row=0;
    col=0;

    for(int I=0;I<3;I++)
    {
        for(int l=0;l<3;l++)
        {
            row=0;
            for(int L=0;L<3;L++)
            {
                for(int k=0;k<3;k++)
                {
                    for(int pbar=0;pbar<3;pbar++)
                    {
                        for(int qbar=0;qbar<3;qbar++)
                        {
                    	I14p_trial_2(row,col)+= fTemp_matrix_nsd_x_nsd3(k,pbar)*fTemp_matrix_nsd_x_nsd2(L,qbar)*fFe_tr(l,qbar)*fChip_inverse(I,pbar);
                        }
                    }
                row++;
                }
            }
        col++;
        }
    }



    row=0;
    col=0;

    for(int I=0;I<3;I++)
    {
        for(int l=0;l<3;l++)
        {
            row=0;
            for(int L=0;L<3;L++)
            {
                for(int k=0;k<3;k++)
                {
                    for(int pbar=0;pbar<3;pbar++)
                    {
                        for(int qbar=0;qbar<3;qbar++)
                        {
                    	I14p_trial_3(row,col)+= fTemp_matrix_nsd_x_nsd3(k,pbar)*fTemp_matrix_nsd_x_nsd2(L,qbar)*fFp_inverse(I,pbar)*fChie_tr(l,qbar);
                        }
                    }
                row++;
                }
            }
        col++;
        }
    }



    row=0;
    col=0;

    for(int I=0;I<3;I++)
    {
        for(int l=0;l<3;l++)
        {
            row=0;
            for(int L=0;L<3;L++)
            {
                for(int k=0;k<3;k++)
                {
                    for(int pbar=0;pbar<3;pbar++)
                    {
                        for(int qbar=0;qbar<3;qbar++)
                        {
                    	I14p_trial_4(row,col)+= fTemp_matrix_nsd_x_nsd3(k,pbar)*fTemp_matrix_nsd_x_nsd2(L,qbar)*fFe_tr(l,pbar)*fChip_inverse(I,qbar);
                        }
                    }
                row++;
                }
            }
        col++;
        }
    }



    row=0;
    col=0;

    for(int I=0;I<3;I++)
    {
        for(int l=0;l<3;l++)
        {
            row=0;
            for(int L=0;L<3;L++)
            {
                for(int k=0;k<3;k++)
                {
                    for(int Mbar=0;Mbar<3;Mbar++)
                    {
                        for(int pbar=0;pbar<3;pbar++)
                        {
                    	I14p_trial_5(row,col)+= fTemp_matrix_nsd_x_nsd2(L,pbar)*fTemp_matrix_nsd_x_nsd3(k,pbar)*fFp_inverse(I,Mbar)*fChie_tr(l,Mbar);
                        }
                    }
                row++;
                }
            }
        col++;
        }
    }

    row=0;
    col=0;

    for(int I=0;I<3;I++)
    {
        for(int l=0;l<3;l++)
        {
            row=0;
            for(int L=0;L<3;L++)
            {
                for(int k=0;k<3;k++)
                {
                    for(int Mbar=0;Mbar<3;Mbar++)
                    {
                        for(int pbar=0;pbar<3;pbar++)
                        {
                    	I14p_trial_6(row,col)+= fTemp_matrix_nsd_x_nsd3(k,pbar)*fTemp_matrix_nsd_x_nsd2(L,pbar)*fFe_tr(l,Mbar)*fChip_inverse(I,Mbar);
                        }
                    }
                row++;
                }
            }
        col++;
        }
    }

    row=0;
    col=0;

    for(int I=0;I<3;I++)
    {
        for(int l=0;l<3;l++)
        {
            row=0;
            for(int L=0;L<3;L++)
            {
                for(int k=0;k<3;k++)
                {
                    for(int Mbar=0;Mbar<3;Mbar++)
                    {
                        for(int Nbar=0;Nbar<3;Nbar++)
                        {
                            for(int qbar=0;qbar<3;qbar++)
                            {
                                for(int pbar=0;pbar<3;pbar++)
                                {
									I14p_trial_7(row,col)+= fTemp_matrix_nsd_x_nsd3(k,pbar)*fTemp_matrix_nsd_x_nsd2(L,qbar)*fFp_inverse(I,Mbar)*fChie_tr(l,Nbar)
									*fdevSPK_tr(Mbar,Nbar)*fdevSPK_tr(qbar,pbar);
                                }
                            }
                        }
                    }
                row++;
                }
            }
        col++;
        }
    }

    row=0;
    col=0;

    for(int I=0;I<3;I++)
    {
        for(int l=0;l<3;l++)
        {
            row=0;
            for(int L=0;L<3;L++)
            {
                for(int k=0;k<3;k++)
                {
                    for(int Mbar=0;Mbar<3;Mbar++)
                    {
                        for(int Nbar=0;Nbar<3;Nbar++)
                        {
                            for(int qbar=0;qbar<3;qbar++)
                            {
                                for(int pbar=0;pbar<3;pbar++)
                                {
									I14p_trial_8(row,col)+= fTemp_matrix_nsd_x_nsd3(k,pbar)*fTemp_matrix_nsd_x_nsd2(L,qbar)*fFe_tr(l,Mbar)*fChip_inverse(I,Nbar)
									*fdevSPK_tr(Mbar,Nbar)*fdevSPK_tr(qbar,pbar);
                                }
                            }
                        }
                    }
                row++;
                }
            }
        col++;
        }
    }


    row=0;
    col=0;

    for(int I=0;I<3;I++)
    {
        for(int l=0;l<3;l++)
        {
            row=0;
            for(int L=0;L<3;L++)
            {
                for(int k=0;k<3;k++)
                {
                    for(int Mbar=0;Mbar<3;Mbar++)
                    {
                        for(int Nbar=0;Nbar<3;Nbar++)
                        {
                            for(int qbar=0;qbar<3;qbar++)
                            {
                                for(int pbar=0;pbar<3;pbar++)
                                {
									I14p_trial_9(row,col)+= fTemp_matrix_nsd_x_nsd3(k,pbar)*fTemp_matrix_nsd_x_nsd2(L,qbar)*fFp_inverse(I,Nbar)*fChie_tr(l,Mbar)
									*fdevSPK_tr(Mbar,Nbar)*fdevSPK_tr(qbar,pbar);
                                }
                            }
                        }
                    }
                row++;
                }
            }
        col++;
        }
    }


    row=0;
    col=0;

    for(int I=0;I<3;I++)
    {
        for(int l=0;l<3;l++)
        {
            row=0;
            for(int L=0;L<3;L++)
            {
                for(int k=0;k<3;k++)
                {
                    for(int Mbar=0;Mbar<3;Mbar++)
                    {
                        for(int Nbar=0;Nbar<3;Nbar++)
                        {
                            for(int qbar=0;qbar<3;qbar++)
                            {
                                for(int pbar=0;pbar<3;pbar++)
                                {
									I14p_trial_10(row,col)+= fTemp_matrix_nsd_x_nsd3(k,pbar)*fTemp_matrix_nsd_x_nsd2(L,qbar)*fFe_tr(l,Nbar)*fChip_inverse(I,Mbar)
									*fdevSPK_tr(Mbar,Nbar)*fdevSPK_tr(qbar,pbar);
                                }
                            }
                        }
                    }
                row++;
                }
            }
        col++;
        }
    }
}


void FSMicromorphic2_3DT:: Form_I15p_trial_1_10()
{

    int row=0;
    int col=0;

    I15p_trial_1=0.0;
    I15p_trial_2=0.0;
    I15p_trial_3=0.0;
    I15p_trial_4=0.0;
    I15p_trial_5=0.0;
    I15p_trial_6=0.0;
    I15p_trial_7=0.0;
    I15p_trial_8=0.0;
    I15p_trial_9=0.0;
    I15p_trial_10=0.0;

    fTemp_matrix_one_x_one = 0.0;
    fTemp_matrix_nsd_x_nsd = 0.0;
    fTemp_matrix_nsd_x_nsd2 = 0.0;
    fTemp_matrix_nsd_x_nsd3 = 0.0;
    fTemp_matrix_nsd_x_nsd4 = 0.0;

    fTemp_matrix_nsd_x_nsd2.MultABCT(fDeformation_Gradient_Inverse,fFe,fFe);
    fTemp_matrix_nsd_x_nsd.MultAB(fFe,fCe_n_inverse);
    fTemp_matrix_nsd_x_nsd4.MultABCT(fFp_n,fFp_inverse,fFe);
    fTemp_matrix_nsd_x_nsd3.MultAB(fTemp_matrix_nsd_x_nsd4,fTemp_matrix_nsd_x_nsd);
    fTemp_matrix_one_x_one = fTemp_matrix_nsd_x_nsd3.Trace();


    for(int I=0;I<3;I++)
    {
        for(int l=0;l<3;l++)
        {
            row=0;
            for(int L=0;L<3;L++)
            {
                for(int k=0;k<3;k++)
                {
                    for(int pbar=0;pbar<3;pbar++)
                    {
                        for(int qbar=0;qbar<3;qbar++)
                        {
                    	I15p_trial_1(row,col)+= fTemp_matrix_nsd_x_nsd3(qbar,pbar)*fTemp_matrix_nsd_x_nsd2(L,k)*fFp_inverse(I,qbar)*fChie_tr(l,pbar);
                        }
                    }
                row++;
                }
            }
        col++;
        }
    }


    row=0;
    col=0;

    for(int I=0;I<3;I++)
    {
        for(int l=0;l<3;l++)
        {
            row=0;
            for(int L=0;L<3;L++)
            {
                for(int k=0;k<3;k++)
                {
                    for(int pbar=0;pbar<3;pbar++)
                    {
                        for(int qbar=0;qbar<3;qbar++)
                        {
                    	I15p_trial_2(row,col)+= fTemp_matrix_nsd_x_nsd3(qbar,pbar)*fTemp_matrix_nsd_x_nsd2(L,k)*fFe_tr(l,qbar)*fChip_inverse(I,pbar);
                        }
                    }
                row++;
                }
            }
        col++;
        }
    }



    row=0;
    col=0;

    for(int I=0;I<3;I++)
    {
        for(int l=0;l<3;l++)
        {
            row=0;
            for(int L=0;L<3;L++)
            {
                for(int k=0;k<3;k++)
                {
                    for(int pbar=0;pbar<3;pbar++)
                    {
                        for(int qbar=0;qbar<3;qbar++)
                        {
                    	I15p_trial_3(row,col)+= fTemp_matrix_nsd_x_nsd3(qbar,pbar)*fTemp_matrix_nsd_x_nsd2(L,k)*fFp_inverse(I,pbar)*fChie_tr(l,qbar);
                        }
                    }
                row++;
                }
            }
        col++;
        }
    }



    row=0;
    col=0;

    for(int I=0;I<3;I++)
    {
        for(int l=0;l<3;l++)
        {
            row=0;
            for(int L=0;L<3;L++)
            {
                for(int k=0;k<3;k++)
                {
                    for(int pbar=0;pbar<3;pbar++)
                    {
                        for(int qbar=0;qbar<3;qbar++)
                        {
                    	I15p_trial_4(row,col)+= fTemp_matrix_nsd_x_nsd3(qbar,pbar)*fTemp_matrix_nsd_x_nsd2(L,k)*fFe_tr(l,pbar)*fChip_inverse(I,qbar);
                        }
                    }
                row++;
                }
            }
        col++;
        }
    }



    row=0;
    col=0;

    for(int I=0;I<3;I++)
    {
        for(int l=0;l<3;l++)
        {
            row=0;
            for(int L=0;L<3;L++)
            {
                for(int k=0;k<3;k++)
                {
                    for(int Mbar=0;Mbar<3;Mbar++)
                    {
                    	I15p_trial_5(row,col)+= fTemp_matrix_nsd_x_nsd2(L,k)*fFp_inverse(I,Mbar)*fChie_tr(l,Mbar);
                    }
                row++;
                }
            }
        col++;
        }
    }
    I15p_trial_5*= fTemp_matrix_one_x_one;

    row=0;
    col=0;

    for(int I=0;I<3;I++)
    {
        for(int l=0;l<3;l++)
        {
            row=0;
            for(int L=0;L<3;L++)
            {
                for(int k=0;k<3;k++)
                {
                    for(int Mbar=0;Mbar<3;Mbar++)
                    {
                    	I15p_trial_6(row,col)+= fTemp_matrix_nsd_x_nsd2(L,k)*fFe_tr(l,Mbar)*fChip_inverse(I,Mbar);
                    }
                row++;
                }
            }
        col++;
        }
    }
    I15p_trial_6*= fTemp_matrix_one_x_one;
    row=0;
    col=0;

    for(int I=0;I<3;I++)
    {
        for(int l=0;l<3;l++)
        {
            row=0;
            for(int L=0;L<3;L++)
            {
                for(int k=0;k<3;k++)
                {
                    for(int Mbar=0;Mbar<3;Mbar++)
                    {
                        for(int Nbar=0;Nbar<3;Nbar++)
                        {
                            for(int qbar=0;qbar<3;qbar++)
                            {
                                for(int pbar=0;pbar<3;pbar++)
                                {
									I15p_trial_7(row,col)+= fTemp_matrix_nsd_x_nsd3(qbar,pbar)*fTemp_matrix_nsd_x_nsd2(L,k)*fFp_inverse(I,Mbar)*fChie_tr(l,Nbar)
									*fdevSPK_tr(Mbar,Nbar)*fdevSPK_tr(qbar,pbar);
                                }
                            }
                        }
                    }
                row++;
                }
            }
        col++;
        }
    }

    row=0;
    col=0;

    for(int I=0;I<3;I++)
    {
        for(int l=0;l<3;l++)
        {
            row=0;
            for(int L=0;L<3;L++)
            {
                for(int k=0;k<3;k++)
                {
                    for(int Mbar=0;Mbar<3;Mbar++)
                    {
                        for(int Nbar=0;Nbar<3;Nbar++)
                        {
                            for(int qbar=0;qbar<3;qbar++)
                            {
                                for(int pbar=0;pbar<3;pbar++)
                                {
									I15p_trial_8(row,col)+= fTemp_matrix_nsd_x_nsd3(qbar,pbar)*fTemp_matrix_nsd_x_nsd2(L,k)*fFe_tr(l,Mbar)*fChip_inverse(I,Nbar)
									*fdevSPK_tr(Mbar,Nbar)*fdevSPK_tr(qbar,pbar);
                                }
                            }
                        }
                    }
                row++;
                }
            }
        col++;
        }
    }


    row=0;
    col=0;

    for(int I=0;I<3;I++)
    {
        for(int l=0;l<3;l++)
        {
            row=0;
            for(int L=0;L<3;L++)
            {
                for(int k=0;k<3;k++)
                {
                    for(int Mbar=0;Mbar<3;Mbar++)
                    {
                        for(int Nbar=0;Nbar<3;Nbar++)
                        {
                            for(int qbar=0;qbar<3;qbar++)
                            {
                                for(int pbar=0;pbar<3;pbar++)
                                {
									I15p_trial_9(row,col)+= fTemp_matrix_nsd_x_nsd3(qbar,pbar)*fTemp_matrix_nsd_x_nsd2(L,k)*fFp_inverse(I,Nbar)*fChie_tr(l,Mbar)
									*fdevSPK_tr(Mbar,Nbar)*fdevSPK_tr(qbar,pbar);
                                }
                            }
                        }
                    }
                row++;
                }
            }
        col++;
        }
    }


    row=0;
    col=0;

    for(int I=0;I<3;I++)
    {
        for(int l=0;l<3;l++)
        {
            row=0;
            for(int L=0;L<3;L++)
            {
                for(int k=0;k<3;k++)
                {
                    for(int Mbar=0;Mbar<3;Mbar++)
                    {
                        for(int Nbar=0;Nbar<3;Nbar++)
                        {
                            for(int qbar=0;qbar<3;qbar++)
                            {
                                for(int pbar=0;pbar<3;pbar++)
                                {
									I15p_trial_10(row,col)+= fTemp_matrix_nsd_x_nsd3(qbar,pbar)*fTemp_matrix_nsd_x_nsd2(L,k)*fFe_tr(l,Nbar)*fChip_inverse(I,Mbar)
									*fdevSPK_tr(Mbar,Nbar)*fdevSPK_tr(qbar,pbar);
                                }
                            }
                        }
                    }
                row++;
                }
            }
        col++;
        }
    }
}


void FSMicromorphic2_3DT:: Form_I16p_trial_1_10()
{

    int row=0;
    int col=0;

    I16p_trial_1=0.0;
    I16p_trial_2=0.0;
    I16p_trial_3=0.0;
    I16p_trial_4=0.0;
    I16p_trial_5=0.0;
    I16p_trial_6=0.0;
    I16p_trial_7=0.0;
    I16p_trial_8=0.0;
    I16p_trial_9=0.0;
    I16p_trial_10=0.0;

    fTemp_matrix_one_x_one = 0.0;
    fTemp_matrix_nsd_x_nsd = 0.0;
    fTemp_matrix_nsd_x_nsd2 = 0.0;
    fTemp_matrix_nsd_x_nsd3 = 0.0;
    fTemp_matrix_nsd_x_nsd4 = 0.0;

    fTemp_matrix_nsd_x_nsd.MultAB(fFp_n,fFp_inverse);
    fTemp_matrix_nsd_x_nsd2.MultABCT(fDeformation_Gradient_Inverse,fFe,fTemp_matrix_nsd_x_nsd);

    fTemp_matrix_nsd_x_nsd4.MultAB(fFe,fCe_n_inverse);
    fTemp_matrix_nsd_x_nsd.Transpose(fTemp_matrix_nsd_x_nsd4);
    fTemp_matrix_nsd_x_nsd3.MultABC(fTemp_matrix_nsd_x_nsd,fFe,fFe);



    for(int I=0;I<3;I++)
    {
        for(int l=0;l<3;l++)
        {
            row=0;
            for(int L=0;L<3;L++)
            {
                for(int k=0;k<3;k++)
                {
                    for(int pbar=0;pbar<3;pbar++)
                    {
                        for(int qbar=0;qbar<3;qbar++)
                        {
                    	I16p_trial_1(row,col)+= fTemp_matrix_nsd_x_nsd2(L,qbar)*fTemp_matrix_nsd_x_nsd3(pbar,k)*fFp_inverse(I,qbar)*fChie_tr(l,pbar);
                        }
                    }
                row++;
                }
            }
        col++;
        }
    }


    row=0;
    col=0;

    for(int I=0;I<3;I++)
    {
        for(int l=0;l<3;l++)
        {
            row=0;
            for(int L=0;L<3;L++)
            {
                for(int k=0;k<3;k++)
                {
                    for(int pbar=0;pbar<3;pbar++)
                    {
                        for(int qbar=0;qbar<3;qbar++)
                        {
                    	I16p_trial_2(row,col)+= fTemp_matrix_nsd_x_nsd2(L,qbar)*fTemp_matrix_nsd_x_nsd3(pbar,k)*fFe_tr(l,qbar)*fChip_inverse(I,pbar);
                        }
                    }
                row++;
                }
            }
        col++;
        }
    }



    row=0;
    col=0;

    for(int I=0;I<3;I++)
    {
        for(int l=0;l<3;l++)
        {
            row=0;
            for(int L=0;L<3;L++)
            {
                for(int k=0;k<3;k++)
                {
                    for(int pbar=0;pbar<3;pbar++)
                    {
                        for(int qbar=0;qbar<3;qbar++)
                        {
                    	I16p_trial_3(row,col)+= fTemp_matrix_nsd_x_nsd3(pbar,k)*fTemp_matrix_nsd_x_nsd2(L,qbar)*fFp_inverse(I,pbar)*fChie_tr(l,qbar);
                        }
                    }
                row++;
                }
            }
        col++;
        }
    }



    row=0;
    col=0;

    for(int I=0;I<3;I++)
    {
        for(int l=0;l<3;l++)
        {
            row=0;
            for(int L=0;L<3;L++)
            {
                for(int k=0;k<3;k++)
                {
                    for(int pbar=0;pbar<3;pbar++)
                    {
                        for(int qbar=0;qbar<3;qbar++)
                        {
                    	I16p_trial_4(row,col)+= fTemp_matrix_nsd_x_nsd3(pbar,k)*fTemp_matrix_nsd_x_nsd2(L,qbar)*fFe_tr(l,pbar)*fChip_inverse(I,qbar);
                        }
                    }
                row++;
                }
            }
        col++;
        }
    }



    row=0;
    col=0;

    for(int I=0;I<3;I++)
    {
        for(int l=0;l<3;l++)
        {
            row=0;
            for(int L=0;L<3;L++)
            {
                for(int k=0;k<3;k++)
                {
                    for(int Mbar=0;Mbar<3;Mbar++)
                    {
                        for(int qbar=0;qbar<3;qbar++)
                        {
                    	I16p_trial_5(row,col)+= fTemp_matrix_nsd_x_nsd2(L,qbar)*fTemp_matrix_nsd_x_nsd3(qbar,k)*fFp_inverse(I,Mbar)*fChie_tr(l,Mbar);
                        }
                    }
                row++;
                }
            }
        col++;
        }
    }

    row=0;
    col=0;

    for(int I=0;I<3;I++)
    {
        for(int l=0;l<3;l++)
        {
            row=0;
            for(int L=0;L<3;L++)
            {
                for(int k=0;k<3;k++)
                {
                    for(int Mbar=0;Mbar<3;Mbar++)
                    {
                        for(int qbar=0;qbar<3;qbar++)
                        {
                    	I16p_trial_6(row,col)+= fTemp_matrix_nsd_x_nsd2(L,qbar)*fTemp_matrix_nsd_x_nsd3(qbar,k)*fFe_tr(l,Mbar)*fChip_inverse(I,Mbar);
                        }
                    }
                row++;
                }
            }
        col++;
        }
    }

    row=0;
    col=0;

    for(int I=0;I<3;I++)
    {
        for(int l=0;l<3;l++)
        {
            row=0;
            for(int L=0;L<3;L++)
            {
                for(int k=0;k<3;k++)
                {
                    for(int Mbar=0;Mbar<3;Mbar++)
                    {
                        for(int Nbar=0;Nbar<3;Nbar++)
                        {
                            for(int qbar=0;qbar<3;qbar++)
                            {
                                for(int pbar=0;pbar<3;pbar++)
                                {
									I16p_trial_7(row,col)+= fTemp_matrix_nsd_x_nsd3(qbar,pbar)*fTemp_matrix_nsd_x_nsd2(L,k)*fFp_inverse(I,Mbar)*fChie_tr(l,Nbar)
									*fdevSPK_tr(Mbar,Nbar)*fdevSPK_tr(qbar,pbar);
                                }
                            }
                        }
                    }
                row++;
                }
            }
        col++;
        }
    }

    row=0;
    col=0;

    for(int I=0;I<3;I++)
    {
        for(int l=0;l<3;l++)
        {
            row=0;
            for(int L=0;L<3;L++)
            {
                for(int k=0;k<3;k++)
                {
                    for(int Mbar=0;Mbar<3;Mbar++)
                    {
                        for(int Nbar=0;Nbar<3;Nbar++)
                        {
                            for(int qbar=0;qbar<3;qbar++)
                            {
                                for(int pbar=0;pbar<3;pbar++)
                                {
									I16p_trial_8(row,col)+= fTemp_matrix_nsd_x_nsd3(qbar,pbar)*fTemp_matrix_nsd_x_nsd2(L,k)*fFe_tr(l,Mbar)*fChip_inverse(I,Nbar)
									*fdevSPK_tr(Mbar,Nbar)*fdevSPK_tr(qbar,pbar);
                                }
                            }
                        }
                    }
                row++;
                }
            }
        col++;
        }
    }


    row=0;
    col=0;

    for(int I=0;I<3;I++)
    {
        for(int l=0;l<3;l++)
        {
            row=0;
            for(int L=0;L<3;L++)
            {
                for(int k=0;k<3;k++)
                {
                    for(int Mbar=0;Mbar<3;Mbar++)
                    {
                        for(int Nbar=0;Nbar<3;Nbar++)
                        {
                            for(int qbar=0;qbar<3;qbar++)
                            {
                                for(int pbar=0;pbar<3;pbar++)
                                {
									I16p_trial_9(row,col)+= fTemp_matrix_nsd_x_nsd3(qbar,pbar)*fTemp_matrix_nsd_x_nsd2(L,k)*fFp_inverse(I,Nbar)*fChie_tr(l,Mbar)
									*fdevSPK_tr(Mbar,Nbar)*fdevSPK_tr(qbar,pbar);
                                }
                            }
                        }
                    }
                row++;
                }
            }
        col++;
        }
    }


    row=0;
    col=0;

    for(int I=0;I<3;I++)
    {
        for(int l=0;l<3;l++)
        {
            row=0;
            for(int L=0;L<3;L++)
            {
                for(int k=0;k<3;k++)
                {
                    for(int Mbar=0;Mbar<3;Mbar++)
                    {
                        for(int Nbar=0;Nbar<3;Nbar++)
                        {
                            for(int qbar=0;qbar<3;qbar++)
                            {
                                for(int pbar=0;pbar<3;pbar++)
                                {
									I16p_trial_10(row,col)+= fTemp_matrix_nsd_x_nsd3(qbar,pbar)*fTemp_matrix_nsd_x_nsd2(L,k)*fFe_tr(l,Nbar)*fChip_inverse(I,Mbar)
									*fdevSPK_tr(Mbar,Nbar)*fdevSPK_tr(qbar,pbar);
                                }
                            }
                        }
                    }
                row++;
                }
            }
        col++;
        }
    }
}



void FSMicromorphic2_3DT:: Form_I17p_trial_1_10()
{

    int row=0;
    int col=0;

    I17p_trial_1=0.0;
    I17p_trial_2=0.0;
    I17p_trial_3=0.0;
    I17p_trial_4=0.0;
    I17p_trial_5=0.0;
    I17p_trial_6=0.0;
    I17p_trial_7=0.0;
    I17p_trial_8=0.0;
    I17p_trial_9=0.0;
    I17p_trial_10=0.0;

    fTemp_matrix_one_x_one = 0.0;
    fTemp_matrix_nsd_x_nsd = 0.0;
    fTemp_matrix_nsd_x_nsd2 = 0.0;
    fTemp_matrix_nsd_x_nsd3 = 0.0;
    fTemp_matrix_nsd_x_nsd4 = 0.0;

    fTemp_matrix_nsd_x_nsd.MultABCT(fDeformation_Gradient_Inverse,fFe,fFe);
    fTemp_matrix_nsd_x_nsd2.MultABC(fTemp_matrix_nsd_x_nsd,fFe,fCe_n_inverse);

    fTemp_matrix_nsd_x_nsd3.MultABCT(fFp_n,fFp_inverse,fFe);




    for(int I=0;I<3;I++)
    {
        for(int l=0;l<3;l++)
        {
            row=0;
            for(int L=0;L<3;L++)
            {
                for(int k=0;k<3;k++)
                {
                    for(int pbar=0;pbar<3;pbar++)
                    {
                        for(int qbar=0;qbar<3;qbar++)
                        {
                    	I17p_trial_1(row,col)+= fTemp_matrix_nsd_x_nsd2(L,pbar)*fTemp_matrix_nsd_x_nsd3(qbar,k)*fFp_inverse(I,qbar)*fChie_tr(l,pbar);
                        }
                    }
                row++;
                }
            }
        col++;
        }
    }


    row=0;
    col=0;

    for(int I=0;I<3;I++)
    {
        for(int l=0;l<3;l++)
        {
            row=0;
            for(int L=0;L<3;L++)
            {
                for(int k=0;k<3;k++)
                {
                    for(int pbar=0;pbar<3;pbar++)
                    {
                        for(int qbar=0;qbar<3;qbar++)
                        {
                    	I17p_trial_2(row,col)+= fTemp_matrix_nsd_x_nsd2(L,pbar)*fTemp_matrix_nsd_x_nsd3(qbar,k)*fFe_tr(l,qbar)*fChip_inverse(I,pbar);
                        }
                    }
                row++;
                }
            }
        col++;
        }
    }



    row=0;
    col=0;

    for(int I=0;I<3;I++)
    {
        for(int l=0;l<3;l++)
        {
            row=0;
            for(int L=0;L<3;L++)
            {
                for(int k=0;k<3;k++)
                {
                    for(int pbar=0;pbar<3;pbar++)
                    {
                        for(int qbar=0;qbar<3;qbar++)
                        {
                    	I17p_trial_3(row,col)+= fTemp_matrix_nsd_x_nsd2(L,pbar)*fTemp_matrix_nsd_x_nsd3(qbar,k)*fFp_inverse(I,pbar)*fChie_tr(l,qbar);
                        }
                    }
                row++;
                }
            }
        col++;
        }
    }



    row=0;
    col=0;

    for(int I=0;I<3;I++)
    {
        for(int l=0;l<3;l++)
        {
            row=0;
            for(int L=0;L<3;L++)
            {
                for(int k=0;k<3;k++)
                {
                    for(int pbar=0;pbar<3;pbar++)
                    {
                        for(int qbar=0;qbar<3;qbar++)
                        {
                    	I17p_trial_4(row,col)+= fTemp_matrix_nsd_x_nsd2(L,pbar)*fTemp_matrix_nsd_x_nsd3(qbar,k)*fFe_tr(l,pbar)*fChip_inverse(I,qbar);
                        }
                    }
                row++;
                }
            }
        col++;
        }
    }



    row=0;
    col=0;

    for(int I=0;I<3;I++)
    {
        for(int l=0;l<3;l++)
        {
            row=0;
            for(int L=0;L<3;L++)
            {
                for(int k=0;k<3;k++)
                {
                    for(int Mbar=0;Mbar<3;Mbar++)
                    {
                        for(int qbar=0;qbar<3;qbar++)
                        {
                    	I17p_trial_5(row,col)+= fTemp_matrix_nsd_x_nsd2(L,qbar)*fTemp_matrix_nsd_x_nsd3(qbar,k)*fFp_inverse(I,Mbar)*fChie_tr(l,Mbar);
                        }
                    }
                row++;
                }
            }
        col++;
        }
    }

    row=0;
    col=0;

    for(int I=0;I<3;I++)
    {
        for(int l=0;l<3;l++)
        {
            row=0;
            for(int L=0;L<3;L++)
            {
                for(int k=0;k<3;k++)
                {
                    for(int Mbar=0;Mbar<3;Mbar++)
                    {
                        for(int qbar=0;qbar<3;qbar++)
                        {
                    	I17p_trial_6(row,col)+= fTemp_matrix_nsd_x_nsd2(L,qbar)*fTemp_matrix_nsd_x_nsd3(qbar,k)*fFe_tr(l,Mbar)*fChip_inverse(I,Mbar);
                        }
                    }
                row++;
                }
            }
        col++;
        }
    }

    row=0;
    col=0;

    for(int I=0;I<3;I++)
    {
        for(int l=0;l<3;l++)
        {
            row=0;
            for(int L=0;L<3;L++)
            {
                for(int k=0;k<3;k++)
                {
                    for(int Mbar=0;Mbar<3;Mbar++)
                    {
                        for(int Nbar=0;Nbar<3;Nbar++)
                        {
                            for(int qbar=0;qbar<3;qbar++)
                            {
                                for(int pbar=0;pbar<3;pbar++)
                                {
									I17p_trial_7(row,col)+= fTemp_matrix_nsd_x_nsd2(L,pbar)*fTemp_matrix_nsd_x_nsd3(qbar,k)*fFp_inverse(I,Mbar)*fChie_tr(l,Nbar)
									*fdevSPK_tr(Mbar,Nbar)*fdevSPK_tr(qbar,pbar);
                                }
                            }
                        }
                    }
                row++;
                }
            }
        col++;
        }
    }

    row=0;
    col=0;

    for(int I=0;I<3;I++)
    {
        for(int l=0;l<3;l++)
        {
            row=0;
            for(int L=0;L<3;L++)
            {
                for(int k=0;k<3;k++)
                {
                    for(int Mbar=0;Mbar<3;Mbar++)
                    {
                        for(int Nbar=0;Nbar<3;Nbar++)
                        {
                            for(int qbar=0;qbar<3;qbar++)
                            {
                                for(int pbar=0;pbar<3;pbar++)
                                {
									I17p_trial_8(row,col)+= fTemp_matrix_nsd_x_nsd2(L,pbar)*fTemp_matrix_nsd_x_nsd3(qbar,k)*fFe_tr(l,Mbar)*fChip_inverse(I,Nbar)
									*fdevSPK_tr(Mbar,Nbar)*fdevSPK_tr(qbar,pbar);
                                }
                            }
                        }
                    }
                row++;
                }
            }
        col++;
        }
    }


    row=0;
    col=0;

    for(int I=0;I<3;I++)
    {
        for(int l=0;l<3;l++)
        {
            row=0;
            for(int L=0;L<3;L++)
            {
                for(int k=0;k<3;k++)
                {
                    for(int Mbar=0;Mbar<3;Mbar++)
                    {
                        for(int Nbar=0;Nbar<3;Nbar++)
                        {
                            for(int qbar=0;qbar<3;qbar++)
                            {
                                for(int pbar=0;pbar<3;pbar++)
                                {
									I17p_trial_9(row,col)+= fTemp_matrix_nsd_x_nsd2(L,pbar)*fTemp_matrix_nsd_x_nsd3(qbar,k)*fFp_inverse(I,Nbar)*fChie_tr(l,Mbar)
									*fdevSPK_tr(Mbar,Nbar)*fdevSPK_tr(qbar,pbar);
                                }
                            }
                        }
                    }
                row++;
                }
            }
        col++;
        }
    }


    row=0;
    col=0;

    for(int I=0;I<3;I++)
    {
        for(int l=0;l<3;l++)
        {
            row=0;
            for(int L=0;L<3;L++)
            {
                for(int k=0;k<3;k++)
                {
                    for(int Mbar=0;Mbar<3;Mbar++)
                    {
                        for(int Nbar=0;Nbar<3;Nbar++)
                        {
                            for(int qbar=0;qbar<3;qbar++)
                            {
                                for(int pbar=0;pbar<3;pbar++)
                                {
									I17p_trial_10(row,col)+= fTemp_matrix_nsd_x_nsd2(L,pbar)*fTemp_matrix_nsd_x_nsd3(qbar,k)*fFe_tr(l,Nbar)*fChip_inverse(I,Mbar)
									*fdevSPK_tr(Mbar,Nbar)*fdevSPK_tr(qbar,pbar);
                                }
                            }
                        }
                    }
                row++;
                }
            }
        col++;
        }
    }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////

void FSMicromorphic2_3DT :: Form_IIJp_1()
{
    int row=0;
    int col=0;
    IIJp_1=0.0;
    fTemp_matrix_nsd_x_nsd.MultABCT(fFe,SIGMA_S,fFe);
    for(int M=0;M<3;M++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    //summation over the same term starts
                    for(int Abar=0;Abar<3;Abar++)
                    {
                        IIJp_1(row,col)+=fTemp_matrix_nsd_x_nsd(m,l)*fFe(i,Abar)*fFp_inverse(M,Abar);
                    }
                    row++;
                }
            }
            col++;
        }
    }


}


void FSMicromorphic2_3DT:: Form_IIJp_2()
{
    int row=0;
    int col=0;
    IIJp_2=0.0;
    fTemp_matrix_nsd_x_nsd.MultABCT(fFe,SIGMA_S,fFe);
    for(int M=0;M<3;M++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    //summation over the same term starts
                    for(int Nbar=0;Nbar<3;Nbar++)
					 {
                        for(int Mbar=0;Mbar<3;Mbar++)
						 {
                            IIJp_2(row,col)+=fTemp_matrix_nsd_x_nsd(m,l)*fdFYdS(Mbar,Nbar)
                            *(fFe(i,Nbar)*fFp_inverse(M,Mbar)+fFe(i,Mbar)*fFp_inverse(M,Nbar));
						 }
					 }
					 row++;
                }
            }
            col++;
        }
    }

}




void FSMicromorphic2_3DT:: Form_IIJp_3()
{
    int row=0;
    int col=0;
    IIJp_3=0.0;
    fTemp_matrix_nsd_x_nsd.MultABCT(fFe,SIGMA_S,fFe);
    for(int M=0;M<3;M++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    //summation over the same term starts
                    for(int Abar=0;Abar<3;Abar++)
                    {
                        IIJp_3(row,col)+=fTemp_matrix_nsd_x_nsd(m,l)*fChie(i,Abar)*fFp_inverse(M,Abar);
                    }
                    row++;
                }
            }
            col++;
        }
    }

}




void FSMicromorphic2_3DT:: Form_IIJp_4()
{
    int row=0;
    int col=0;
    IIJp_4=0.0;
    fTemp_matrix_nsd_x_nsd.MultABCT(fFe,SIGMA_S,fFe);

    for(int M=0;M<3;M++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {

                    //summation over the same term starts
                    for(int Mbar=0;Mbar<3;Mbar++)
                    {
                        for(int Nbar=0;Nbar<3;Nbar++)
                        {
                            IIJp_4(row,col)+=fTemp_matrix_nsd_x_nsd(m,l)*fdFYdS(Mbar,Nbar)*fChie(i,Nbar)*fFp_inverse(M,Mbar);
                        }
                    }
                    row++;
                }
            }
            col++;
        }
    }

}

void FSMicromorphic2_3DT:: Form_IIJp_5()
{
    int row=0;
    int col=0;
    IIJp_5=0.0;
    fTemp_matrix_nsd_x_nsd.MultABCT(fFe,SIGMA_S,fFe);

    for(int M=0;M<3;M++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    //summation over the same term starts
                    for(int Mbar=0;Mbar<3;Mbar++)
                    {
                        for(int Nbar=0;Nbar<3;Nbar++)
                        {
                            IIJp_5(row,col)+=fTemp_matrix_nsd_x_nsd(m,l)*fdFYdS(Mbar,Nbar)*fChie(i,Mbar)*fFp_inverse(M,Nbar);
                        }
                    }
                    row++;
                }
            }
            col++;
        }
    }

}

void FSMicromorphic2_3DT:: Form_IIJp_6()
{
    int row=0;
    int col=0;
    IIJp_6=0.0;
    fTemp_matrix_nsd_x_nsd.MultABCT(fFe,SIGMA_S,fFe);

    for(int M=0;M<3;M++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    //summation over the same term starts
                    for(int Abar=0;Abar<3;Abar++)
                    {
                        IIJp_6(row,col)+=fTemp_matrix_nsd_x_nsd(m,l)*fFe(i,Abar)*fChip_inverse(M,Abar);
                    }
                    row++;
                }
            }
            col++;
        }
    }

}

void FSMicromorphic2_3DT:: Form_IIJp_7()
{
    int row=0;
    int col=0;
    IIJp_7=0.0;
    fTemp_matrix_nsd_x_nsd.MultABCT(fFe,SIGMA_S,fFe);

    for(int M=0;M<3;M++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    //summation over the same term starts
                    for(int Abar=0;Abar<3;Abar++)
                    {
                        for(int Bbar=0;Bbar<3;Bbar++)
                        {
                            IIJp_7(row,col)+=fTemp_matrix_nsd_x_nsd(m,l)*fdFYdS(Abar,Bbar)*fFe(i,Abar)*fChip_inverse(M,Bbar);
                        }
                    }
                    row++;
                }
            }
            col++;
        }
    }

}
void FSMicromorphic2_3DT:: Form_IIJp_8()
{
    int row=0;
    int col=0;
    IIJp_8=0.0;
    fTemp_matrix_nsd_x_nsd.MultABCT(fFe,SIGMA_S,fFe);

    for(int M=0;M<3;M++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    //summation over the same term starts
                    for(int Abar=0;Abar<3;Abar++)
                    {
                        for(int Bbar=0;Bbar<3;Bbar++)
                        {
                            IIJp_8(row,col)+=fTemp_matrix_nsd_x_nsd(m,l)*fdFYdS(Abar,Bbar)*fFe(i,Bbar)*fChip_inverse(M,Abar);
                        }
                    }
                    row++;
                }
            }
            col++;
        }
    }

}






void FSMicromorphic2_3DT:: Form_IIJp_9()
{

    int row=0;
    int col=0;
    IIJp_9=0.0;

    fTemp_matrix_nsd_x_nsd.MultABCT(fFe,SIGMA_S,fFe);

    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    //summation over the same term starts
                    for(int Abar=0;Abar<3;Abar++)
                    {
                        IIJp_9(row,col)+=fTemp_matrix_nsd_x_nsd(m,l)*fFe(i,Abar)*fFp_inverse(B,Abar);
                    }
                    row++;
                }
            }
            col++;
        }
    }


}

void FSMicromorphic2_3DT:: Form_IIJp_10()
{

    int row=0;
    int col=0;
    IIJp_10=0.0;


    fTemp_matrix_nsd_x_nsd.MultABCT(fFe,SIGMA_S,fFe);

    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    //summation over the same term starts
                    for(int Abar=0;Abar<3;Abar++)
                    {
                          for(int Bbar=0;Bbar<3;Bbar++)
                          {
                        	  IIJp_10(row,col)+=fTemp_matrix_nsd_x_nsd(m,l)*fdFYchidSIGMA(Abar,Bbar)*(fFe(i,Bbar)*fFp_inverse(B,Abar)+fFe(i,Abar)*fFp_inverse(B,Bbar));
                          }
                    }
                    row++;
                }
            }
            col++;
        }
    }

}
void FSMicromorphic2_3DT:: Form_IIJp_11()
{

    int row=0;
    int col=0;
    IIJp_11=0.0;

    fTemp_matrix_nsd_x_nsd.MultABCT(fFe,SIGMA_S,fFe);


    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    //summation over the same term starts
                    for(int Abar=0;Abar<3;Abar++)
                    {
                        IIJp_11(row,col)+=fTemp_matrix_nsd_x_nsd(m,l)*fChie(i,Abar)*fFp_inverse(B,Abar);
                    }
                    row++;
                }
            }
            col++;
        }
    }

}
void FSMicromorphic2_3DT:: Form_IIJp_12()
{

    int row=0;
    int col=0;
    IIJp_12=0.0;

    fTemp_matrix_nsd_x_nsd.MultABCT(fFe,SIGMA_S,fFe);


    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    //summation over the same term starts
                    for(int Abar=0;Abar<3;Abar++)
                    {
                        IIJp_12(row,col)+=fTemp_matrix_nsd_x_nsd(m,l)*fFe(i,Abar)*fChip_inverse(B,Abar);
                    }
                    row++;
                }
            }
            col++;
        }
    }

}
void FSMicromorphic2_3DT:: Form_IIJp_13()
{

    int row=0;
    int col=0;
    IIJp_13=0.0;

    fTemp_matrix_nsd_x_nsd.MultABCT(fFe,SIGMA_S,fFe);

    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    //summation over the same term starts
                    for(int Abar=0;Abar<3;Abar++)
                    {
                          for(int Bbar=0;Bbar<3;Bbar++)
                          {
                        	  IIJp_13(row,col)+=fTemp_matrix_nsd_x_nsd(m,l)*fdFYchidSIGMA(Abar,Bbar)*fChie(i,Bbar)*fFp_inverse(B,Abar);
                          }
                    }
                    row++;
                }
            }
            col++;
        }
    }
}

void FSMicromorphic2_3DT:: Form_IIJp_14()
{

    int row=0;
    int col=0;
    IIJp_14=0.0;

    fTemp_matrix_nsd_x_nsd.MultABCT(fFe,SIGMA_S,fFe);

    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    //summation over the same term starts
                    for(int Abar=0;Abar<3;Abar++)
                    {
                          for(int Bbar=0;Bbar<3;Bbar++)
                          {
                        	  IIJp_14(row,col)+=fTemp_matrix_nsd_x_nsd(m,l)*fdFYchidSIGMA(Abar,Bbar)*fFe(i,Abar)*fChip_inverse(B,Bbar);
                          }
                    }
                    row++;
                }
            }
            col++;
        }
    }


}


void FSMicromorphic2_3DT:: Form_IIJp_15()
{

    int row=0;
    int col=0;
    IIJp_15=0.0;

    fTemp_matrix_nsd_x_nsd.MultABCT(fFe,SIGMA_S,fFe);

    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    //summation over the same term starts
                    for(int Abar=0;Abar<3;Abar++)
                    {
                          for(int Bbar=0;Bbar<3;Bbar++)
                          {
                        	  IIJp_15(row,col)+=fTemp_matrix_nsd_x_nsd(m,l)*fdFYchidSIGMA(Abar,Bbar)*fChie(i,Abar)*fFp_inverse(B,Bbar);
                          }
                    }
                    row++;
                }
            }
            col++;
        }
    }
}



void FSMicromorphic2_3DT:: Form_IIJp_16()
{

    int row=0;
    int col=0;
    IIJp_16=0.0;

    fTemp_matrix_nsd_x_nsd.MultABCT(fFe,SIGMA_S,fFe);

    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    //summation over the same term starts
                    for(int Abar=0;Abar<3;Abar++)
                    {
                          for(int Bbar=0;Bbar<3;Bbar++)
                          {
                        	  IIJp_16(row,col)+=fTemp_matrix_nsd_x_nsd(m,l)*fdFYchidSIGMA(Abar,Bbar)*fFe(i,Bbar)*fChip_inverse(B,Abar);
                          }
                    }
                    row++;
                }
            }
            col++;
        }
    }
}



void FSMicromorphic2_3DT:: Form_II2e_1()
{
    int row=0;
    int col=0;
    II2e_1=0.0;
    fTemp_matrix_nsd_x_nsd.MultABCT(fFp_inverse,SIGMA_S,fFe);

    for(int A=0;A<3;A++)
    {
        for(int m=0;m<3;m++)
        {
            row=m;
            for(int l=0;l<3;l++)
            {
                II2e_1(row,col)+=fTemp_matrix_nsd_x_nsd(A,l);
                row=row+3;
            }
            col++;
        }
    }

}


void FSMicromorphic2_3DT:: Form_II2p_2()
{
    int row=0;
    int col=0;
    II2p_2=0.0;

//  fFp_inverse.Inverse(fFp);
//  fCe_n_inverse.Inverse(fCe_n);
//  fdGdS_tr_transpose.Transpose(fdGdS_tr);
//  fTemp_matrix_nsd_x_nsd2.MultABC(fdGdS_tr_transpose,fFp_n,fFp_inverse);
    fTemp_matrix_nsd_x_nsd.MultATBC(fdGdS_tr,fFp_n,fFp_inverse);
    fTemp_matrix_nsd_x_nsd2.MultABC(fFe,fCe_n_inverse,fTemp_matrix_nsd_x_nsd);
    fTemp_matrix_nsd_x_nsd.MultABCT(fTemp_matrix_nsd_x_nsd2,SIGMA_S,fFe);

    for(int M=0;M<3;M++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    //summation over the same term
                    for(int Abar=0;Abar<3;Abar++)
                    {
                        II2p_2(row,col)+=fTemp_matrix_nsd_x_nsd(m,l)*fFe(i,Abar)*fFp_inverse(M,Abar);
                    }
                    row++;
                }
            }
            col++;
        }
    }

}

void FSMicromorphic2_3DT:: Form_II2p_3()
{
    int row=0;
    int col=0;
    II2p_3=0.0;

//  fFp_inverse.Inverse(fFp);
//  fCe_n_inverse.Inverse(fCe_n);
    fTemp_matrix_nsd_x_nsd.MultATBC(fdGdS_tr,fFp_n,fFp_inverse);
    fTemp_matrix_nsd_x_nsd2.MultABC(fFe,fCe_n_inverse,fTemp_matrix_nsd_x_nsd);
    fTemp_matrix_nsd_x_nsd.MultABCT(fTemp_matrix_nsd_x_nsd2,SIGMA_S,fFe);

    for(int M=0;M<3;M++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    //summation over the same term
                    for(int Mbar=0;Mbar<3;Mbar++)
                    {
                        for(int Nbar=0;Nbar<3;Nbar++)
                        {
                            II2p_3(row,col)+=fTemp_matrix_nsd_x_nsd(m,l)*fdFYdS(Mbar,Nbar)
                            *(fFe(i,Nbar)*fFp_inverse(M,Mbar)+fFe(i,Mbar)*fFp_inverse(M,Nbar));
                        }
                    }
                    row++;
                }
            }
            col++;
        }
    }

}



void FSMicromorphic2_3DT:: Form_II2p_4()
{
    int row=0;
    int col=0;
    II2p_4=0.0;
    fTemp_matrix_nsd_x_nsd.MultATBC(fdGdS_tr,fFp_n,fFp_inverse);
    fTemp_matrix_nsd_x_nsd2.MultABC(fFe,fCe_n_inverse,fTemp_matrix_nsd_x_nsd);
    fTemp_matrix_nsd_x_nsd.MultABCT(fTemp_matrix_nsd_x_nsd2,SIGMA_S,fFe);

    for(int M=0;M<3;M++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    //summation over the same term
                    for(int Abar=0;Abar<3;Abar++)
                    {
                        II2p_4(row,col)+=fTemp_matrix_nsd_x_nsd(m,l)*fChie(i,Abar)*fFp_inverse(M,Abar);
                    }
                    row++;
                }
            }
            col++;
        }
    }

}


void FSMicromorphic2_3DT:: Form_II2p_5()
{
    int row=0;
    int col=0;
    II2p_5=0.0;
    fTemp_matrix_nsd_x_nsd.MultATBC(fdGdS_tr,fFp_n,fFp_inverse);
    fTemp_matrix_nsd_x_nsd2.MultABC(fFe,fCe_n_inverse,fTemp_matrix_nsd_x_nsd);
    fTemp_matrix_nsd_x_nsd.MultABCT(fTemp_matrix_nsd_x_nsd2,SIGMA_S,fFe);
    for(int M=0;M<3;M++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    //summation over the same term
                    for(int Mbar=0;Mbar<3;Mbar++)
                    {
                        for(int Nbar=0;Nbar<3;Nbar++)
                        {
                            II2p_5(row,col)+=fTemp_matrix_nsd_x_nsd(m,l)*fdFYdS(Mbar,Nbar)*fChie(i,Nbar)*fFp_inverse(M,Mbar);
                        }
                    }
                    row++;
                }
            }
            col++;
        }
    }
}

void FSMicromorphic2_3DT:: Form_II2p_6()
{
    int row=0;
    int col=0;
    II2p_6=0.0;
    fTemp_matrix_nsd_x_nsd.MultATBC(fdGdS_tr,fFp_n,fFp_inverse);
    fTemp_matrix_nsd_x_nsd2.MultABC(fFe,fCe_n_inverse,fTemp_matrix_nsd_x_nsd);
    fTemp_matrix_nsd_x_nsd.MultABCT(fTemp_matrix_nsd_x_nsd2,SIGMA_S,fFe);
    for(int M=0;M<3;M++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    //summation over the same term
                    for(int Mbar=0;Mbar<3;Mbar++)
                    {
                        for(int Nbar=0;Nbar<3;Nbar++)
                        {
                            II2p_6(row,col)+=fTemp_matrix_nsd_x_nsd(m,l)*fdFYdS(Mbar,Nbar)*fChie(i,Mbar)*fFp_inverse(M,Nbar);
                        }
                    }
                    row++;
                }
            }
            col++;
        }
    }

}


void FSMicromorphic2_3DT:: Form_II2p_7()
{
    int row=0;
    int col=0;
    II2p_7=0.0;
    fTemp_matrix_nsd_x_nsd.MultATBC(fdGdS_tr,fFp_n,fFp_inverse);
    fTemp_matrix_nsd_x_nsd2.MultABC(fFe,fCe_n_inverse,fTemp_matrix_nsd_x_nsd);
    fTemp_matrix_nsd_x_nsd.MultABCT(fTemp_matrix_nsd_x_nsd2,SIGMA_S,fFe);
    for(int M=0;M<3;M++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    //summation over the same term
                    for(int Abar=0;Abar<3;Abar++)
                    {
                        II2p_7(row,col)+=fTemp_matrix_nsd_x_nsd(m,l)*fFe(i,Abar)*fChip_inverse(M,Abar);
                    }
                    row++;
                }
            }
            col++;
        }
    }

}

void FSMicromorphic2_3DT:: Form_II2p_8()
{
    int row=0;
    int col=0;
    II2p_8=0.0;
    fTemp_matrix_nsd_x_nsd.MultATBC(fdGdS_tr,fFp_n,fFp_inverse);
    fTemp_matrix_nsd_x_nsd2.MultABC(fFe,fCe_n_inverse,fTemp_matrix_nsd_x_nsd);
    fTemp_matrix_nsd_x_nsd.MultABCT(fTemp_matrix_nsd_x_nsd2,SIGMA_S,fFe);
    for(int M=0;M<3;M++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    //summation over the same term
                    for(int Abar=0;Abar<3;Abar++)
                    {
                        for(int Bbar=0;Bbar<3;Bbar++)
                        {
                            II2p_8(row,col)+=fTemp_matrix_nsd_x_nsd(m,l)*fdFYdS(Abar,Bbar)*fFe(i,Abar)*fChip_inverse(M,Bbar);
                        }
                    }
                    row++;
                }
            }
            col++;
        }
    }

}

void FSMicromorphic2_3DT:: Form_II2p_9()
{
    int row=0;
    int col=0;
    II2p_9=0.0;
    fTemp_matrix_nsd_x_nsd.MultATBC(fdGdS_tr,fFp_n,fFp_inverse);
    fTemp_matrix_nsd_x_nsd2.MultABC(fFe,fCe_n_inverse,fTemp_matrix_nsd_x_nsd);
    fTemp_matrix_nsd_x_nsd.MultABCT(fTemp_matrix_nsd_x_nsd2,SIGMA_S,fFe);
    for(int M=0;M<3;M++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    //summation over the same term
                    for(int Abar=0;Abar<3;Abar++)
                    {
                        for(int Bbar=0;Bbar<3;Bbar++)
                        {
                            II2p_9(row,col)+=fTemp_matrix_nsd_x_nsd(m,l)*fdFYdS(Abar,Bbar)*fFe(i,Bbar)*fChip_inverse(M,Abar);
                        }
                    }
                    row++;
                }
            }
            col++;
        }
    }

}





void FSMicromorphic2_3DT:: Form_II2p_10()
{

    int row=0;
    int col=0;
    II2p_10=0.0;

    fTemp_matrix_nsd_x_nsd.MultATBC(fdGdS_tr,fFp_n,fFp_inverse);
    fTemp_matrix_nsd_x_nsd2.MultABC(fFe,fCe_n_inverse,fTemp_matrix_nsd_x_nsd);
    fTemp_matrix_nsd_x_nsd.MultABCT(fTemp_matrix_nsd_x_nsd2,SIGMA_S,fFe);

    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    //summation over the same term starts
                    for(int Abar=0;Abar<3;Abar++)
                    {
                        II2p_10(row,col)+=fTemp_matrix_nsd_x_nsd(m,l)*fFe(i,Abar)*fFp_inverse(B,Abar);
                    }
                    row++;
                }
            }
            col++;
        }
    }


}

void FSMicromorphic2_3DT:: Form_II2p_11()
{

    int row=0;
    int col=0;
    II2p_11=0.0;


    fTemp_matrix_nsd_x_nsd.MultATBC(fdGdS_tr,fFp_n,fFp_inverse);
    fTemp_matrix_nsd_x_nsd2.MultABC(fFe,fCe_n_inverse,fTemp_matrix_nsd_x_nsd);
    fTemp_matrix_nsd_x_nsd.MultABCT(fTemp_matrix_nsd_x_nsd2,SIGMA_S,fFe);

    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    //summation over the same term starts
                    for(int Abar=0;Abar<3;Abar++)
                    {
                          for(int Bbar=0;Bbar<3;Bbar++)
                          {
                        	  II2p_11(row,col)+=fTemp_matrix_nsd_x_nsd(m,l)*fdFYchidSIGMA(Abar,Bbar)*(fFe(i,Bbar)*fFp_inverse(B,Abar)+fFe(i,Abar)*fFp_inverse(B,Bbar));
                          }
                    }
                    row++;
                }
            }
            col++;
        }
    }

}
void FSMicromorphic2_3DT:: Form_II2p_12()
{

    int row=0;
    int col=0;
    II2p_12=0.0;

    fTemp_matrix_nsd_x_nsd.MultATBC(fdGdS_tr,fFp_n,fFp_inverse);
    fTemp_matrix_nsd_x_nsd2.MultABC(fFe,fCe_n_inverse,fTemp_matrix_nsd_x_nsd);
    fTemp_matrix_nsd_x_nsd.MultABCT(fTemp_matrix_nsd_x_nsd2,SIGMA_S,fFe);


    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    //summation over the same term starts
                    for(int Abar=0;Abar<3;Abar++)
                    {
                        II2p_12(row,col)+=fTemp_matrix_nsd_x_nsd(m,l)*fChie(i,Abar)*fFp_inverse(B,Abar);
                    }
                    row++;
                }
            }
            col++;
        }
    }

}
void FSMicromorphic2_3DT:: Form_II2p_13()
{

    int row=0;
    int col=0;
    II2p_13=0.0;

    fTemp_matrix_nsd_x_nsd.MultATBC(fdGdS_tr,fFp_n,fFp_inverse);
    fTemp_matrix_nsd_x_nsd2.MultABC(fFe,fCe_n_inverse,fTemp_matrix_nsd_x_nsd);
    fTemp_matrix_nsd_x_nsd.MultABCT(fTemp_matrix_nsd_x_nsd2,SIGMA_S,fFe);

    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    //summation over the same term starts
                    for(int Abar=0;Abar<3;Abar++)
                    {
                        II2p_13(row,col)+=fTemp_matrix_nsd_x_nsd(m,l)*fFe(i,Abar)*fChip_inverse(B,Abar);
                    }
                    row++;
                }
            }
            col++;
        }
    }

}
void FSMicromorphic2_3DT:: Form_II2p_14()
{

    int row=0;
    int col=0;
    II2p_14=0.0;

    fTemp_matrix_nsd_x_nsd.MultATBC(fdGdS_tr,fFp_n,fFp_inverse);
    fTemp_matrix_nsd_x_nsd2.MultABC(fFe,fCe_n_inverse,fTemp_matrix_nsd_x_nsd);
    fTemp_matrix_nsd_x_nsd.MultABCT(fTemp_matrix_nsd_x_nsd2,SIGMA_S,fFe);

    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    //summation over the same term starts
                    for(int Abar=0;Abar<3;Abar++)
                    {
                          for(int Bbar=0;Bbar<3;Bbar++)
                          {
                        	  II2p_14(row,col)+=fTemp_matrix_nsd_x_nsd(m,l)*fdFYchidSIGMA(Abar,Bbar)*fChie(i,Bbar)*fFp_inverse(B,Abar);
                          }
                    }
                    row++;
                }
            }
            col++;
        }
    }
}

void FSMicromorphic2_3DT:: Form_II2p_15()
{

    int row=0;
    int col=0;
    II2p_15=0.0;

    fTemp_matrix_nsd_x_nsd.MultATBC(fdGdS_tr,fFp_n,fFp_inverse);
    fTemp_matrix_nsd_x_nsd2.MultABC(fFe,fCe_n_inverse,fTemp_matrix_nsd_x_nsd);
    fTemp_matrix_nsd_x_nsd.MultABCT(fTemp_matrix_nsd_x_nsd2,SIGMA_S,fFe);

    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    //summation over the same term starts
                    for(int Abar=0;Abar<3;Abar++)
                    {
                          for(int Bbar=0;Bbar<3;Bbar++)
                          {
                        	  II2p_15(row,col)+=fTemp_matrix_nsd_x_nsd(m,l)*fdFYchidSIGMA(Abar,Bbar)*fFe(i,Abar)*fChip_inverse(B,Bbar);
                          }
                    }
                    row++;
                }
            }
            col++;
        }
    }


}


void FSMicromorphic2_3DT:: Form_II2p_16()
{

    int row=0;
    int col=0;
    II2p_16=0.0;

    fTemp_matrix_nsd_x_nsd.MultATBC(fdGdS_tr,fFp_n,fFp_inverse);
    fTemp_matrix_nsd_x_nsd2.MultABC(fFe,fCe_n_inverse,fTemp_matrix_nsd_x_nsd);
    fTemp_matrix_nsd_x_nsd.MultABCT(fTemp_matrix_nsd_x_nsd2,SIGMA_S,fFe);

    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    //summation over the same term starts
                    for(int Abar=0;Abar<3;Abar++)
                    {
                          for(int Bbar=0;Bbar<3;Bbar++)
                          {
                        	  II2p_16(row,col)+=fTemp_matrix_nsd_x_nsd(m,l)*fdFYchidSIGMA(Abar,Bbar)*fChie(i,Abar)*fFp_inverse(B,Bbar);
                          }
                    }
                    row++;
                }
            }
            col++;
        }
    }
}



void FSMicromorphic2_3DT:: Form_II2p_17()
{

    int row=0;
    int col=0;
    II2p_17=0.0;

    fTemp_matrix_nsd_x_nsd.MultATBC(fdGdS_tr,fFp_n,fFp_inverse);
    fTemp_matrix_nsd_x_nsd2.MultABC(fFe,fCe_n_inverse,fTemp_matrix_nsd_x_nsd);
    fTemp_matrix_nsd_x_nsd.MultABCT(fTemp_matrix_nsd_x_nsd2,SIGMA_S,fFe);
    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    //summation over the same term starts
                    for(int Abar=0;Abar<3;Abar++)
                    {
                          for(int Bbar=0;Bbar<3;Bbar++)
                          {
                        	  II2p_17(row,col)+=fTemp_matrix_nsd_x_nsd(m,l)*fdFYchidSIGMA(Abar,Bbar)*fFe(i,Bbar)*fChip_inverse(B,Abar);
                          }
                    }
                    row++;
                }
            }
            col++;
        }
    }
}







void FSMicromorphic2_3DT:: Form_II3e_1()
{
    int row=0;
    int col=0;

    II3e_1=0.0;
    fTemp_matrix_nsd_x_nsd.MultABCT(fFe,fIdentity_matrix,fFe);

    for(int M=0;M<3;M++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    //summation over the same term
                    for(int Abar=0;Abar<3;Abar++)
                    {
                        II3e_1(row,col)+=fTemp_matrix_nsd_x_nsd(m,l)*fFe(i,Abar)*fFp_inverse(M,Abar);
                    }
                    row++;
                }
            }
            col++;
        }
    }




}

void FSMicromorphic2_3DT:: Form_II3e_2()
{
    int row=0;
    int col=0;

    II3e_2=0.0;

    for(int M=0;M<3;M++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    //summation over the same term
                    for(int Mbar=0;Mbar<3;Mbar++)
                    {
                        for(int Lbar=0;Lbar<3;Lbar++)
                        {
                            II3e_2(row,col)+=fFe(m,Mbar)*(fFe(i,Lbar)*fFp_inverse(M,Mbar)+fFe(i,Mbar)*fFp_inverse(M,Lbar))*fFe(l,Lbar);
                        }
                    }
                    row++;
                }
            }
            col++;
        }
    }

}

void FSMicromorphic2_3DT:: Form_II3e_3()
{
    int row=0;
    int col=0;

    II3e_3=0.0;
    fTemp_matrix_nsd_x_nsd.MultABCT(fFe,fIdentity_matrix,fFe);

    for(int M=0;M<3;M++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    //summation over the same term

                    for(int Abar=0;Abar<3;Abar++)
                    {
                        II3e_3(row,col)+=fTemp_matrix_nsd_x_nsd(m,l)*fChie(i,Abar)*fFp_inverse(M,Abar);
                    }
                    row++;
                }
            }
            col++;
        }
    }

}

void FSMicromorphic2_3DT:: Form_II3e_4()
{
    int row=0;
    int col=0;

    II3e_4=0.0;

    for(int M=0;M<3;M++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    //summation over the same term

                    for(int Mbar=0;Mbar<3;Mbar++)
                    {
                        for(int Lbar=0;Lbar<3;Lbar++)
                        {
                            II3e_4(row,col)+=fFe(m,Mbar)*fFe(l,Lbar)*fChie(i,Lbar)*fFp_inverse(M,Mbar);
                        }
                    }
                    row++;
                }
            }
            col++;
        }
    }

}

void FSMicromorphic2_3DT:: Form_II3e_5()
{
    int row=0;
    int col=0;

    II3e_5=0.0;

    for(int M=0;M<3;M++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    //summation over the same term

                    for(int Mbar=0;Mbar<3;Mbar++)
                    {
                        for(int Lbar=0;Lbar<3;Lbar++)
                        {
                            II3e_5(row,col)+=fFe(m,Mbar)*fFe(l,Lbar)*fChie(i,Mbar)*fFp_inverse(M,Lbar);
                        }
                    }
                    row++;
                }
            }
            col++;
        }
    }

}


void FSMicromorphic2_3DT:: Form_II3p_6()
{
    int row=0;
    int col=0;

    II3p_6=0.0;
    fTemp_matrix_nsd_x_nsd.MultABCT(fFe,fIdentity_matrix,fFe);

    for(int M=0;M<3;M++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    //summation over the same term

                    for(int Abar=0;Abar<3;Abar++)
                    {
                        II3p_6(row,col)+=fTemp_matrix_nsd_x_nsd(m,l)*fFe(i,Abar)*fFp_inverse(M,Abar);
                    }
                    row++;
                }
            }
            col++;
        }
    }

}


void FSMicromorphic2_3DT:: Form_II3p_7()
{
    int row=0;
    int col=0;

    II3p_7=0.0;
    fTemp_matrix_nsd_x_nsd.MultABCT(fFe,fIdentity_matrix,fFe);

    for(int M=0;M<3;M++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    //summation over the same term

                    for(int Abar=0;Abar<3;Abar++)
                    {
                        for(int Bbar=0;Bbar<3;Bbar++)
                        {
                            II3p_7(row,col)+=fTemp_matrix_nsd_x_nsd(m,l)*fdFYdS(Abar,Bbar)*(fFe(i,Bbar)*fFp_inverse(M,Abar)+fFe(i,Abar)*fFp_inverse(M,Bbar));
                        }
                    }
                    row++;
                }
            }
            col++;
        }
    }

}


void FSMicromorphic2_3DT:: Form_II3p_8()
{
    int row=0;
    int col=0;

    II3p_8=0.0;
    fTemp_matrix_nsd_x_nsd.MultABCT(fFe,fIdentity_matrix,fFe);

    for(int M=0;M<3;M++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    //summation over the same term

                    for(int Abar=0;Abar<3;Abar++)
                    {
                        II3p_8(row,col)+=fTemp_matrix_nsd_x_nsd(m,l)*fChie(i,Abar)*fFp_inverse(M,Abar);
                    }
                    row++;
                }
            }
            col++;
        }
    }

}

void FSMicromorphic2_3DT:: Form_II3p_9()
{
    int row=0;
    int col=0;

    II3p_9=0.0;
    fTemp_matrix_nsd_x_nsd.MultABCT(fFe,fIdentity_matrix,fFe);

    for(int M=0;M<3;M++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    //summation over the same term

                    for(int Abar=0;Abar<3;Abar++)
                    {
                        for(int Bbar=0;Bbar<3;Bbar++)
                        {
                            II3p_9(row,col)+=fTemp_matrix_nsd_x_nsd(m,l)*fdFYdS(Abar,Bbar)*fChie(i,Bbar)*fFp_inverse(M,Abar);
                        }
                    }
                    row++;
                }
            }
            col++;
        }
    }

}

void FSMicromorphic2_3DT:: Form_II3p_10()
{
    int row=0;
    int col=0;

    II3p_10=0.0;
    fTemp_matrix_nsd_x_nsd.MultABCT(fFe,fIdentity_matrix,fFe);

    for(int M=0;M<3;M++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    //summation over the same term

                    for(int Abar=0;Abar<3;Abar++)
                    {
                        for(int Bbar=0;Bbar<3;Bbar++)
                        {
                            II3p_10(row,col)+=fTemp_matrix_nsd_x_nsd(m,l)*fdFYdS(Abar,Bbar)*fChie(i,Abar)*fFp_inverse(M,Bbar);
                        }
                    }
                    row++;
                }
            }
            col++;
        }
    }

}

void FSMicromorphic2_3DT:: Form_II3p_11()
{
    int row=0;
    int col=0;

    II3p_11=0.0;
    fTemp_matrix_nsd_x_nsd2=fA1;
    fTemp_matrix_nsd_x_nsd.Transpose(fA1);
    fTemp_matrix_nsd_x_nsd2+=fTemp_matrix_nsd_x_nsd;

    fTemp_matrix_nsd_x_nsd.MultABCT(fFe,fTemp_matrix_nsd_x_nsd2,fFe);

    for(int M=0;M<3;M++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    //summation over the same term

                    for(int Abar=0;Abar<3;Abar++)
                    {
                        II3p_11(row,col)+=fTemp_matrix_nsd_x_nsd(m,l)*fFe(i,Abar)*fFp_inverse(M,Abar);
                    }
                    row++;
                }
            }
            col++;
        }
    }

}

void FSMicromorphic2_3DT:: Form_II3p_12()
{
    int row=0;
    int col=0;

    II3p_12=0.0;
    fTemp_matrix_nsd_x_nsd2=fA1;
    fTemp_matrix_nsd_x_nsd.Transpose(fA1);
    fTemp_matrix_nsd_x_nsd2+=fTemp_matrix_nsd_x_nsd;

    fTemp_matrix_nsd_x_nsd.MultABCT(fFe,fTemp_matrix_nsd_x_nsd2,fFe);

    for(int M=0;M<3;M++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    //summation over the same term

                    for(int Abar=0;Abar<3;Abar++)
                    {
                        for(int Bbar=0;Bbar<3;Bbar++)
                        {
                            II3p_12(row,col)+=fTemp_matrix_nsd_x_nsd(m,l)*fdFYdS(Abar,Bbar)*(fFe(i,Bbar)*fFp_inverse(M,Abar)+fFe(i,Abar)*fFp_inverse(M,Bbar));
                        }
                    }
                    row++;
                }
            }
            col++;
        }
    }

}


void FSMicromorphic2_3DT:: Form_II3p_13()
{
    int row=0;
    int col=0;

    II3p_13=0.0;
    fTemp_matrix_nsd_x_nsd2=fA1;
    fTemp_matrix_nsd_x_nsd.Transpose(fA1);
    fTemp_matrix_nsd_x_nsd2+=fTemp_matrix_nsd_x_nsd;

    fTemp_matrix_nsd_x_nsd.MultABCT(fFe,fTemp_matrix_nsd_x_nsd2,fFe);

    for(int M=0;M<3;M++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    //summation over the same term

                    for(int Abar=0;Abar<3;Abar++)
                    {
                        II3p_13(row,col)+=fTemp_matrix_nsd_x_nsd(m,l)*fChie(i,Abar)*fFp_inverse(M,Abar);
                    }
                    row++;
                }
            }
            col++;
        }
    }

}

void FSMicromorphic2_3DT:: Form_II3p_14()
{
    int row=0;
    int col=0;

    II3p_14=0.0;
    fTemp_matrix_nsd_x_nsd2=fA1;
    fTemp_matrix_nsd_x_nsd.Transpose(fA1);
    fTemp_matrix_nsd_x_nsd2+=fTemp_matrix_nsd_x_nsd;

    fTemp_matrix_nsd_x_nsd.MultABCT(fFe,fTemp_matrix_nsd_x_nsd2,fFe);

    for(int M=0;M<3;M++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    //summation over the same term

                    for(int Abar=0;Abar<3;Abar++)
                    {
                        for(int Bbar=0;Bbar<3;Bbar++)
                        {
                            II3p_14(row,col)+=fTemp_matrix_nsd_x_nsd(m,l)*fdFYdS(Abar,Bbar)*fChie(i,Bbar)*fFp_inverse(M,Abar);
                        }
                    }
                    row++;
                }
            }
            col++;
        }
    }

}


void FSMicromorphic2_3DT:: Form_II3p_15()
{
    int row=0;
    int col=0;

    II3p_15=0.0;
    fTemp_matrix_nsd_x_nsd2=fA1;
    fTemp_matrix_nsd_x_nsd.Transpose(fA1);
    fTemp_matrix_nsd_x_nsd2+=fTemp_matrix_nsd_x_nsd;

    fTemp_matrix_nsd_x_nsd.MultABCT(fFe,fTemp_matrix_nsd_x_nsd2,fFe);

    for(int M=0;M<3;M++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    //summation over the same term

                    for(int Abar=0;Abar<3;Abar++)
                    {
                        for(int Bbar=0;Bbar<3;Bbar++)
                        {
                            II3p_15(row,col)+=fTemp_matrix_nsd_x_nsd(m,l)*fdFYdS(Abar,Bbar)*fChie(i,Abar)*fFp_inverse(M,Bbar);
                        }
                    }
                    row++;
                }
            }
            col++;
        }
    }

}

void FSMicromorphic2_3DT:: Form_II3p_16()
{
    int row=0;
    int col=0;

    II3p_16=0.0;

    fTemp_matrix_nsd_x_nsd.MultABCT(fFe,fIdentity_matrix,fFe);

    for(int M=0;M<3;M++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    //summation over the same term

                    for(int Abar=0;Abar<3;Abar++)
                    {
                        II3p_16(row,col)+=fTemp_matrix_nsd_x_nsd(m,l)*fFe(i,Abar)*fFp_inverse(M,Abar);
                    }
                    row++;
                }
            }
            col++;
        }
    }

}



void FSMicromorphic2_3DT:: Form_II3p_17()
{
    int row=0;
    int col=0;

    II3p_17=0.0;

    fTemp_matrix_nsd_x_nsd.MultABCT(fFe,fIdentity_matrix,fFe);

    for(int M=0;M<3;M++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    //summation over the same term

                    for(int Abar=0;Abar<3;Abar++)
                    {
                        for(int Bbar=0;Bbar<3;Bbar++)
                        {
                            II3p_17(row,col)+=fTemp_matrix_nsd_x_nsd(m,l)*fdFYdS(Abar,Bbar)*(fFe(i,Bbar)*fFp_inverse(M,Abar)+fFe(i,Abar)*fFp_inverse(M,Bbar));
                        }
                    }
                    row++;
                }
            }
            col++;
        }
    }

}

void FSMicromorphic2_3DT:: Form_II3p_18()
{
    int row=0;
    int col=0;

    II3p_18=0.0;

    fTemp_matrix_nsd_x_nsd.MultABCT(fFe,fIdentity_matrix,fFe);

    for(int M=0;M<3;M++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    //summation over the same term

                    for(int Abar=0;Abar<3;Abar++)
                    {
                        II3p_18(row,col)+=fTemp_matrix_nsd_x_nsd(m,l)*fChie(i,Abar)*fFp_inverse(M,Abar);
                    }
                    row++;
                }
            }
            col++;
        }
    }

}



void FSMicromorphic2_3DT:: Form_II3p_19()
{
    int row=0;
    int col=0;

    II3p_19=0.0;

    fTemp_matrix_nsd_x_nsd.MultABCT(fFe,fIdentity_matrix,fFe);

    for(int M=0;M<3;M++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    //summation over the same term

                    for(int Abar=0;Abar<3;Abar++)
                    {
                        for(int Bbar=0;Bbar<3;Bbar++)
                        {
                            II3p_19(row,col)+=fTemp_matrix_nsd_x_nsd(m,l)*fdFYdS(Abar,Bbar)*fChie(i,Bbar)*fFp_inverse(M,Abar);
                        }
                    }
                    row++;
                }
            }
            col++;
        }
    }

}


void FSMicromorphic2_3DT:: Form_II3p_20()
{
    int row=0;
    int col=0;

    II3p_20=0.0;

    fTemp_matrix_nsd_x_nsd.MultABCT(fFe,fIdentity_matrix,fFe);

    for(int M=0;M<3;M++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    //summation over the same term

                    for(int Abar=0;Abar<3;Abar++)
                    {
                        for(int Bbar=0;Bbar<3;Bbar++)
                        {
                            II3p_20(row,col)+=fTemp_matrix_nsd_x_nsd(m,l)*fdFYdS(Abar,Bbar)*fChie(i,Abar)*fFp_inverse(M,Bbar);
                        }
                    }
                    row++;
                }
            }
            col++;
        }
    }

}


void FSMicromorphic2_3DT:: Form_II3p_21()
{
    int row=0;
    int col=0;

    II3p_21=0.0;

    fTemp_matrix_nsd_x_nsd2.Transpose(fN1);
    fTemp_matrix_nsd_x_nsd.MultABCT(fFe,fTemp_matrix_nsd_x_nsd2,fFe);

    for(int M=0;M<3;M++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    //summation over the same term

                    for(int Abar=0;Abar<3;Abar++)
                    {
                        II3p_21(row,col)+=fTemp_matrix_nsd_x_nsd(m,l)*fFe(i,Abar)*fFp_inverse(M,Abar);
                    }
                    row++;
                }
            }
            col++;
        }
    }

}

void FSMicromorphic2_3DT:: Form_II3p_22()
{
    int row=0;
    int col=0;

    II3p_22=0.0;

    fTemp_matrix_nsd_x_nsd2.Transpose(fN1);
    fTemp_matrix_nsd_x_nsd.MultABCT(fFe,fTemp_matrix_nsd_x_nsd2,fFe);

    for(int M=0;M<3;M++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    //summation over the same term

                    for(int Abar=0;Abar<3;Abar++)
                    {
                        for(int Bbar=0;Bbar<3;Bbar++)
                        {
                            II3p_22(row,col)+=fTemp_matrix_nsd_x_nsd(m,l)*fdFYdS(Abar,Bbar)*(fFe(i,Bbar)*fFp_inverse(M,Abar)+fFe(i,Abar)*fFp_inverse(M,Bbar));
                        }
                    }
                    row++;
                }
            }
            col++;
        }
    }

}

void FSMicromorphic2_3DT:: Form_II3p_23()
{
    int row=0;
    int col=0;

    II3p_23=0.0;

    fTemp_matrix_nsd_x_nsd2.Transpose(fN1);
    fTemp_matrix_nsd_x_nsd.MultABCT(fFe,fTemp_matrix_nsd_x_nsd2,fFe);

    for(int M=0;M<3;M++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    //summation over the same term

                    for(int Abar=0;Abar<3;Abar++)
                    {
                        II3p_23(row,col)+=fTemp_matrix_nsd_x_nsd(m,l)*fChie(i,Abar)*fFp_inverse(M,Abar);
                    }
                    row++;
                }
            }
            col++;
        }
    }
}


void FSMicromorphic2_3DT:: Form_II3p_24()
{
    int row=0;
    int col=0;

    II3p_24=0.0;

    fTemp_matrix_nsd_x_nsd2.Transpose(fN1);
    fTemp_matrix_nsd_x_nsd.MultABCT(fFe,fTemp_matrix_nsd_x_nsd2,fFe);

    for(int M=0;M<3;M++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    //summation over the same term

                    for(int Abar=0;Abar<3;Abar++)
                    {
                        for(int Bbar=0;Bbar<3;Bbar++)
                        {
                            II3p_24(row,col)+=fTemp_matrix_nsd_x_nsd(m,l)*fdFYdS(Abar,Bbar)*fChie(i,Bbar)*fFp_inverse(M,Abar);
                        }
                    }
                    row++;
                }
            }
            col++;
        }
    }
}


void FSMicromorphic2_3DT:: Form_II3p_25()
{
    int row=0;
    int col=0;

    II3p_25=0.0;

    fTemp_matrix_nsd_x_nsd2.Transpose(fN1);
    fTemp_matrix_nsd_x_nsd.MultABCT(fFe,fTemp_matrix_nsd_x_nsd2,fFe);

    for(int M=0;M<3;M++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    //summation over the same term

                    for(int Abar=0;Abar<3;Abar++)
                    {
                        for(int Bbar=0;Bbar<3;Bbar++)
                        {
                            II3p_25(row,col)+=fTemp_matrix_nsd_x_nsd(m,l)*fdFYdS(Abar,Bbar)*fChie(i,Abar)*fFp_inverse(M,Bbar);
                        }
                    }
                    row++;
                }
            }
            col++;
        }
    }
}


void FSMicromorphic2_3DT:: Form_II3p_26()
{
    int row=0;
    int col=0;

    II3p_26=0.0;

    fTemp_matrix_nsd_x_nsd.MultABCT(fFe,fN1,fFe);

    for(int M=0;M<3;M++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    //summation over the same term

                    for(int Abar=0;Abar<3;Abar++)
                    {
                        II3p_26(row,col)+=fTemp_matrix_nsd_x_nsd(m,l)*fFe(i,Abar)*fFp_inverse(M,Abar);
                    }
                    row++;
                }
            }
            col++;
        }
    }
}


void FSMicromorphic2_3DT:: Form_II3p_27()
{
    int row=0;
    int col=0;

    II3p_27=0.0;

    fTemp_matrix_nsd_x_nsd.MultABCT(fFe,fN1,fFe);

    for(int M=0;M<3;M++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    //summation over the same term

                    for(int Abar=0;Abar<3;Abar++)
                    {
                        for(int Bbar=0;Bbar<3;Bbar++)
                        {
                            II3p_27(row,col)+=fTemp_matrix_nsd_x_nsd(m,l)*fdFYdS(Abar,Bbar)*(fFe(i,Bbar)*fFp_inverse(M,Abar)+fFe(i,Abar)*fFp_inverse(M,Bbar));
                        }
                    }
                    row++;
                }
            }
            col++;
        }
    }
}


void FSMicromorphic2_3DT:: Form_II3p_28()
{
    int row=0;
    int col=0;

    II3p_28=0.0;

    fTemp_matrix_nsd_x_nsd.MultABCT(fFe,fN1,fFe);

    for(int M=0;M<3;M++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    //summation over the same term

                    for(int Abar=0;Abar<3;Abar++)
                    {
                        II3p_28(row,col)+=fTemp_matrix_nsd_x_nsd(m,l)*fChie(i,Abar)*fFp_inverse(M,Abar);
                    }
                    row++;
                }
            }
            col++;
        }
    }
}


void FSMicromorphic2_3DT:: Form_II3p_29()
{
    int row=0;
    int col=0;

    II3p_29=0.0;

    fTemp_matrix_nsd_x_nsd.MultABCT(fFe,fN1,fFe);

    for(int M=0;M<3;M++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    //summation over the same term

                    for(int Abar=0;Abar<3;Abar++)
                    {
                        for(int Bbar=0;Bbar<3;Bbar++)
                        {
                            II3p_29(row,col)+=fTemp_matrix_nsd_x_nsd(m,l)*fdFYdS(Abar,Bbar)*fChie(i,Bbar)*fFp_inverse(M,Abar);
                        }
                    }
                    row++;
                }
            }
            col++;
        }
    }
}

void FSMicromorphic2_3DT:: Form_II3p_30()
{
    int row=0;
    int col=0;

    II3p_30=0.0;

    fTemp_matrix_nsd_x_nsd.MultABCT(fFe,fN1,fFe);

    for(int M=0;M<3;M++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    //summation over the same term

                    for(int Abar=0;Abar<3;Abar++)
                    {
                        for(int Bbar=0;Bbar<3;Bbar++)
                        {
                            II3p_30(row,col)+=fTemp_matrix_nsd_x_nsd(m,l)*fdFYdS(Abar,Bbar)*fChie(i,Abar)*fFp_inverse(M,Bbar);
                        }
                    }
                    row++;
                }
            }
            col++;
        }
    }
}


void FSMicromorphic2_3DT:: Form_II3e_31()
{
    int row=0;
    int col=0;

    II3e_31=0.0;

    fTemp_matrix_nsd_x_nsd.MultABCT(fFe,fIdentity_matrix,fFe);

    for(int M=0;M<3;M++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    //summation over the same term

                    for(int Abar=0;Abar<3;Abar++)
                    {
                        II3e_31(row,col)+=fTemp_matrix_nsd_x_nsd(m,l)*fFe(i,Abar)*fChip_inverse(M,Abar);
                    }
                    row++;
                }
            }
            col++;
        }
    }
}

void FSMicromorphic2_3DT:: Form_II3e_32()
{
    int row=0;
    int col=0;

    II3e_32=0.0;


    for(int M=0;M<3;M++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    //summation over the same term

                    for(int Mbar=0;Mbar<3;Mbar++)
                    {
                        for(int Lbar=0;Lbar<3;Lbar++)
                        {
                            II3e_32(row,col)+=fFe(m,Mbar)*fFe(l,Lbar)*fFe(i,Mbar)*fChip_inverse(M,Lbar);
                        }
                    }
                    row++;
                }
            }
            col++;
        }
    }
}

void FSMicromorphic2_3DT:: Form_II3e_33()
{
    int row=0;
    int col=0;

    II3e_33=0.0;


    for(int M=0;M<3;M++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    //summation over the same term

                    for(int Mbar=0;Mbar<3;Mbar++)
                    {
                        for(int Lbar=0;Lbar<3;Lbar++)
                        {
                            II3e_33(row,col)+=fFe(m,Mbar)*fFe(l,Lbar)*fFe(i,Lbar)*fChip_inverse(M,Mbar);
                        }
                    }
                    row++;
                }
            }
            col++;
        }
    }
}

void FSMicromorphic2_3DT:: Form_II3p_34()
{
    int row=0;
    int col=0;

    II3p_34=0.0;
    fTemp_matrix_nsd_x_nsd.MultABCT(fFe,fIdentity_matrix,fFe);


    for(int M=0;M<3;M++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    //summation over the same term
                    for(int Abar=0;Abar<3;Abar++)
                    {
                        II3p_34(row,col)+=fTemp_matrix_nsd_x_nsd(m,l)*fFe(i,Abar)*fChip_inverse(M,Abar);
                    }
                    row++;
                }
            }
            col++;
        }
    }
}


void FSMicromorphic2_3DT:: Form_II3p_35()
{
    int row=0;
    int col=0;

    II3p_35=0.0;
    fTemp_matrix_nsd_x_nsd.MultABCT(fFe,fIdentity_matrix,fFe);


    for(int M=0;M<3;M++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    //summation over the same term
                    for(int Abar=0;Abar<3;Abar++)
                    {
                        for(int Bbar=0;Bbar<3;Bbar++)
                        {
                            II3p_35(row,col)+=fTemp_matrix_nsd_x_nsd(m,l)*fdFYdS(Abar,Bbar)*fFe(i,Abar)*fChip_inverse(M,Bbar);
                        }
                    }
                    row++;
                }
            }
            col++;
        }
    }

}


void FSMicromorphic2_3DT:: Form_II3p_36()
{
    int row=0;
    int col=0;

    II3p_36=0.0;
    fTemp_matrix_nsd_x_nsd.MultABCT(fFe,fIdentity_matrix,fFe);


    for(int M=0;M<3;M++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    //summation over the same term
                    for(int Abar=0;Abar<3;Abar++)
                    {
                        for(int Bbar=0;Bbar<3;Bbar++)
                        {
                            II3p_36(row,col)+=fTemp_matrix_nsd_x_nsd(m,l)*fdFYdS(Abar,Bbar)*fFe(i,Bbar)*fChip_inverse(M,Abar);
                        }
                    }
                    row++;
                }
            }
            col++;
        }
    }

}

void FSMicromorphic2_3DT:: Form_II3p_37()
{
    int row=0;
    int col=0;

    II3p_37=0.0;
    fTemp_matrix_nsd_x_nsd2=fA1;
    fTemp_matrix_nsd_x_nsd.Transpose(fA1);
    fTemp_matrix_nsd_x_nsd2+=fTemp_matrix_nsd_x_nsd;

    fTemp_matrix_nsd_x_nsd.MultABCT(fFe,fTemp_matrix_nsd_x_nsd2,fFe);


    for(int M=0;M<3;M++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    //summation over the same term
                    for(int Abar=0;Abar<3;Abar++)
                    {
                        II3p_37(row,col)+=fTemp_matrix_nsd_x_nsd(m,l)*fFe(i,Abar)*fChip_inverse(M,Abar);
                    }
                    row++;
                }
            }
            col++;
        }
    }

}

void FSMicromorphic2_3DT:: Form_II3p_38()
{
    int row=0;
    int col=0;

    II3p_38=0.0;
    fTemp_matrix_nsd_x_nsd2=fA1;
    fTemp_matrix_nsd_x_nsd.Transpose(fA1);
    fTemp_matrix_nsd_x_nsd2+=fTemp_matrix_nsd_x_nsd;

    fTemp_matrix_nsd_x_nsd.MultABCT(fFe,fTemp_matrix_nsd_x_nsd2,fFe);


    for(int M=0;M<3;M++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    //summation over the same term
                    for(int Abar=0;Abar<3;Abar++)
                    {
                        for(int Bbar=0;Bbar<3;Bbar++)
                        {
                            II3p_38(row,col)+=fTemp_matrix_nsd_x_nsd(m,l)*fdFYdS(Abar,Bbar)*fFe(i,Abar)*fChip_inverse(M,Bbar);
                        }
                    }
                    row++;
                }
            }
            col++;
        }
    }

}

void FSMicromorphic2_3DT:: Form_II3p_39()
{
    int row=0;
    int col=0;

    II3p_39=0.0;
    fTemp_matrix_nsd_x_nsd2=fA1;
    fTemp_matrix_nsd_x_nsd.Transpose(fA1);
    fTemp_matrix_nsd_x_nsd2+=fTemp_matrix_nsd_x_nsd;

    fTemp_matrix_nsd_x_nsd.MultABCT(fFe,fTemp_matrix_nsd_x_nsd2,fFe);


    for(int M=0;M<3;M++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    //summation over the same term
                    for(int Abar=0;Abar<3;Abar++)
                    {
                        for(int Bbar=0;Bbar<3;Bbar++)
                        {
                            II3p_39(row,col)+=fTemp_matrix_nsd_x_nsd(m,l)*fdFYdS(Abar,Bbar)*fFe(i,Bbar)*fChip_inverse(M,Abar);
                        }
                    }
                    row++;
                }
            }
            col++;
        }
    }

}

void FSMicromorphic2_3DT:: Form_II3p_40()
{
    int row=0;
    int col=0;

    II3p_40=0.0;


    fTemp_matrix_nsd_x_nsd.MultABCT(fFe,fIdentity_matrix,fFe);

    for(int M=0;M<3;M++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    //summation over the same term
                    for(int Abar=0;Abar<3;Abar++)
                    {
                        II3p_40(row,col)+=fTemp_matrix_nsd_x_nsd(m,l)*fFe(i,Abar)*fChip_inverse(M,Abar);
                    }
                    row++;
                }
            }
            col++;
        }
    }

}


void FSMicromorphic2_3DT:: Form_II3p_41()
{
    int row=0;
    int col=0;

    II3p_41=0.0;

    fTemp_matrix_nsd_x_nsd.MultABCT(fFe,fIdentity_matrix,fFe);

    for(int M=0;M<3;M++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    //summation over the same term
                    for(int Abar=0;Abar<3;Abar++)
                    {
                        for(int Bbar=0;Bbar<3;Bbar++)
                        {
                            II3p_41(row,col)+=fTemp_matrix_nsd_x_nsd(m,l)*fdFYdS(Abar,Bbar)*fFe(i,Abar)*fChip_inverse(M,Bbar);
                        }
                    }
                    row++;
                }
            }
            col++;
        }
    }

}


void FSMicromorphic2_3DT:: Form_II3p_42()
{
    int row=0;
    int col=0;

    II3p_42=0.0;

    fTemp_matrix_nsd_x_nsd.MultABCT(fFe,fIdentity_matrix,fFe);

    for(int M=0;M<3;M++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    //summation over the same term
                    for(int Abar=0;Abar<3;Abar++)
                    {
                        for(int Bbar=0;Bbar<3;Bbar++)
                        {
                            II3p_42(row,col)+=fTemp_matrix_nsd_x_nsd(m,l)*fdFYdS(Abar,Bbar)*fFe(i,Bbar)*fChip_inverse(M,Abar);
                        }
                    }
                    row++;
                }
            }
            col++;
        }
    }

}

void FSMicromorphic2_3DT:: Form_II3p_43()
{
    int row=0;
    int col=0;

    II3p_43=0.0;

    fTemp_matrix_nsd_x_nsd2.Transpose(fN1);
    fTemp_matrix_nsd_x_nsd.MultABCT(fFe,fTemp_matrix_nsd_x_nsd2,fFe);

    for(int M=0;M<3;M++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    //summation over the same term
                    for(int Abar=0;Abar<3;Abar++)
                    {
                        II3p_43(row,col)+=fTemp_matrix_nsd_x_nsd(m,l)*fFe(i,Abar)*fChip_inverse(M,Abar);
                    }
                    row++;
                }
            }
            col++;
        }
    }

}

void FSMicromorphic2_3DT:: Form_II3p_44()
{
    int row=0;
    int col=0;

    II3p_44=0.0;

    fTemp_matrix_nsd_x_nsd2.Transpose(fN1);
    fTemp_matrix_nsd_x_nsd.MultABCT(fFe,fTemp_matrix_nsd_x_nsd2,fFe);

    for(int M=0;M<3;M++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    //summation over the same term
                    for(int Abar=0;Abar<3;Abar++)
                    {
                        for(int Bbar=0;Bbar<3;Bbar++)
                        {
                            II3p_44(row,col)+=fTemp_matrix_nsd_x_nsd(m,l)*fdFYdS(Abar,Bbar)*fFe(i,Abar)*fChip_inverse(M,Bbar);
                        }
                    }
                    row++;
                }
            }
            col++;
        }
    }

}

void FSMicromorphic2_3DT:: Form_II3p_45()
{
    int row=0;
    int col=0;

    II3p_45=0.0;

    fTemp_matrix_nsd_x_nsd2.Transpose(fN1);
    fTemp_matrix_nsd_x_nsd.MultABCT(fFe,fTemp_matrix_nsd_x_nsd2,fFe);

    for(int M=0;M<3;M++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    //summation over the same term
                    for(int Abar=0;Abar<3;Abar++)
                    {
                        for(int Bbar=0;Bbar<3;Bbar++)
                        {
                            II3p_45(row,col)+=fTemp_matrix_nsd_x_nsd(m,l)*fdFYdS(Abar,Bbar)*fFe(i,Bbar)*fChip_inverse(M,Abar);
                        }
                    }
                    row++;
                }
            }
            col++;
        }
    }

}


void FSMicromorphic2_3DT:: Form_II3p_46()
{
    int row=0;
    int col=0;

    II3p_46=0.0;

    fTemp_matrix_nsd_x_nsd.MultABCT(fFe,fN1,fFe);

    for(int M=0;M<3;M++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    //summation over the same term
                    for(int Abar=0;Abar<3;Abar++)
                    {
                        II3p_46(row,col)+=fTemp_matrix_nsd_x_nsd(m,l)*fFe(i,Abar)*fChip_inverse(M,Abar);
                    }
                    row++;
                }
            }
            col++;
        }
    }

}


void FSMicromorphic2_3DT:: Form_II3p_47()
{
    int row=0;
    int col=0;

    II3p_47=0.0;


    fTemp_matrix_nsd_x_nsd.MultABCT(fFe,fN1,fFe);

    for(int M=0;M<3;M++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    //summation over the same term
                    for(int Abar=0;Abar<3;Abar++)
                    {
                        for(int Bbar=0;Bbar<3;Bbar++)
                        {
                            II3p_47(row,col)+=fTemp_matrix_nsd_x_nsd(m,l)*fdFYdS(Abar,Bbar)*fFe(i,Abar)*fChip_inverse(M,Bbar);
                        }
                    }
                    row++;
                }
            }
            col++;
        }
    }

}


void FSMicromorphic2_3DT:: Form_II3p_48()
{
    int row=0;
    int col=0;

    II3p_48=0.0;


    fTemp_matrix_nsd_x_nsd.MultABCT(fFe,fN1,fFe);

    for(int M=0;M<3;M++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    //summation over the same term
                    for(int Abar=0;Abar<3;Abar++)
                    {
                        for(int Bbar=0;Bbar<3;Bbar++)
                        {
                            II3p_48(row,col)+=fTemp_matrix_nsd_x_nsd(m,l)*fdFYdS(Abar,Bbar)*fFe(i,Bbar)*fChip_inverse(M,Abar);
                        }
                    }
                    row++;
                }
            }
            col++;
        }
    }

}



void FSMicromorphic2_3DT:: Form_II3p_49()
{

    int row=0;
    int col=0;
    II3p_49=0.0;

    fTemp_matrix_nsd_x_nsd.MultABCT(fFe,fIdentity_matrix,fFe);

     for(int B=0;B<3;B++)
        {
            for(int i=0;i<3;i++)
            {
                row=0;
             for(int l=0;l<3;l++)
               {
                   for(int m=0;m<3;m++)
                     {
                        //summation over the same term
                        for(int Abar=0;Abar<3;Abar++)
                        {
                            II3p_49(row,col)+=fTemp_matrix_nsd_x_nsd(m,l)*fFe(i,Abar)*fFp_inverse(B,Abar);

                        }
                        row++;
                    }
                }
                col++;
            }
        }

}

void FSMicromorphic2_3DT:: Form_II3p_50()
{

    int row=0;
    int col=0;
    II3p_50=0.0;

    fTemp_matrix_nsd_x_nsd.MultABCT(fFe,fIdentity_matrix,fFe);

     for(int B=0;B<3;B++)
        {
            for(int i=0;i<3;i++)
            {
                row=0;
             for(int l=0;l<3;l++)
               {
                   for(int m=0;m<3;m++)
                     {
                        //summation over the same term
                        for(int Abar=0;Abar<3;Abar++)
						{
							for(int Bbar=0;Bbar<3;Bbar++)
							{
								II3p_50(row,col)+=fTemp_matrix_nsd_x_nsd(m,l)*fdFYchidSIGMA(Abar,Bbar)*(fFe(i,Bbar)*fFp_inverse(B,Abar)+fFe(i,Abar)*fFp_inverse(B,Bbar));
							}
						}
                        row++;
                    }
                }
                col++;
            }
        }

}

void FSMicromorphic2_3DT:: Form_II3p_51()
{

    int row=0;
    int col=0;
    II3p_51=0.0;

    fTemp_matrix_nsd_x_nsd.MultABCT(fFe,fIdentity_matrix,fFe);


     for(int B=0;B<3;B++)
        {
            for(int i=0;i<3;i++)
            {
                row=0;
             for(int l=0;l<3;l++)
               {
                   for(int m=0;m<3;m++)
                     {

                        //summation over the same term
                        for(int Abar=0;Abar<3;Abar++)
                        {
                                   II3p_51(row,col)+=fTemp_matrix_nsd_x_nsd(m,l)*fChie(i,Abar)*fFp_inverse(B,Abar);

                        }
                        row++;
                    }
                }
                col++;
            }
        }

}



void FSMicromorphic2_3DT:: Form_II3p_52()
{

    int row=0;
    int col=0;
    II3p_52=0.0;

    fTemp_matrix_nsd_x_nsd.MultABCT(fFe,fIdentity_matrix,fFe);


     for(int B=0;B<3;B++)
        {
            for(int i=0;i<3;i++)
            {
                row=0;
             for(int l=0;l<3;l++)
               {
                   for(int m=0;m<3;m++)
                     {
                        //summation over the same term
                        for(int Abar=0;Abar<3;Abar++)
                        {
                                   II3p_52(row,col)+=fTemp_matrix_nsd_x_nsd(m,l)*fFe(i,Abar)*fChip_inverse(B,Abar);

                        }
                        row++;
                    }
                }
                col++;
            }
        }

}


void FSMicromorphic2_3DT:: Form_II3p_53()
{

    int row=0;
    int col=0;
    II3p_53=0.0;

    fTemp_matrix_nsd_x_nsd.MultABCT(fFe,fIdentity_matrix,fFe);

     for(int B=0;B<3;B++)
        {
            for(int i=0;i<3;i++)
            {
                row=0;
             for(int l=0;l<3;l++)
               {
                   for(int m=0;m<3;m++)
                     {
                        //summation over the same term
                        for(int Abar=0;Abar<3;Abar++)
                        {
                            for(int Bbar=0;Bbar<3;Bbar++)
                            {
                               II3p_53(row,col)+=fTemp_matrix_nsd_x_nsd(m,l)*fdFYchidSIGMA(Abar,Bbar)*fChie(i,Bbar)*fFp_inverse(B,Abar);
                            }
                        }
                        row++;
                    }
                }
                col++;
            }
        }

}

void FSMicromorphic2_3DT:: Form_II3p_54()
{

    int row=0;
    int col=0;
    II3p_54=0.0;

    fTemp_matrix_nsd_x_nsd.MultABCT(fFe,fIdentity_matrix,fFe);

     for(int B=0;B<3;B++)
        {
            for(int i=0;i<3;i++)
            {
                row=0;
             for(int l=0;l<3;l++)
               {
                   for(int m=0;m<3;m++)
                     {
                        //summation over the same term
                        for(int Abar=0;Abar<3;Abar++)
                        {
                            for(int Bbar=0;Bbar<3;Bbar++)
                            {
                               II3p_54(row,col)+=fTemp_matrix_nsd_x_nsd(m,l)*fdFYchidSIGMA(Abar,Bbar)*fFe(i,Abar)*fChip_inverse(B,Bbar);
                            }
                        }
                        row++;
                    }
                }
                col++;
            }
        }

}

void FSMicromorphic2_3DT:: Form_II3p_55()
{

    int row=0;
    int col=0;
    II3p_55=0.0;

    fTemp_matrix_nsd_x_nsd.MultABCT(fFe,fIdentity_matrix,fFe);


     for(int B=0;B<3;B++)
        {
            for(int i=0;i<3;i++)
            {
                row=0;
             for(int l=0;l<3;l++)
               {
                   for(int m=0;m<3;m++)
                     {
                        //summation over the same term
                        for(int Abar=0;Abar<3;Abar++)
                        {
                            for(int Bbar=0;Bbar<3;Bbar++)
                            {
                               II3p_55(row,col)+=fTemp_matrix_nsd_x_nsd(m,l)*fdFYchidSIGMA(Abar,Bbar)*fChie(i,Abar)*fFp_inverse(B,Bbar);
                            }
                        }
                        row++;
                    }
                }
                col++;
            }
        }

}



void FSMicromorphic2_3DT:: Form_II3p_56()
{

    int row=0;
    int col=0;
    II3p_56=0.0;

    fTemp_matrix_nsd_x_nsd.MultABCT(fFe,fIdentity_matrix,fFe);


     for(int B=0;B<3;B++)
        {
            for(int i=0;i<3;i++)
            {
                row=0;
             for(int l=0;l<3;l++)
               {
                   for(int m=0;m<3;m++)
                     {
                        //summation over the same term
                        for(int Abar=0;Abar<3;Abar++)
                        {
                            for(int Bbar=0;Bbar<3;Bbar++)
                            {
                               II3p_56(row,col)+=fTemp_matrix_nsd_x_nsd(m,l)*fdFYchidSIGMA(Abar,Bbar)*fFe(i,Bbar)*fChip_inverse(B,Abar);
                            }
                        }
                        row++;
                    }
                }
                col++;
            }
        }

}



void FSMicromorphic2_3DT:: Form_II3p_57()
{

    int row=0;
    int col=0;
    II3p_57=0.0;

    fTemp_matrix_nsd_x_nsd.MultABCT(fFe,fD1,fFe);

     for(int B=0;B<3;B++)
        {
            for(int i=0;i<3;i++)
            {
                row=0;
             for(int l=0;l<3;l++)
               {
                   for(int m=0;m<3;m++)
                     {
                        //summation over the same term
                        for(int Abar=0;Abar<3;Abar++)
                        {
                            II3p_57(row,col)+=fTemp_matrix_nsd_x_nsd(m,l)*fFe(i,Abar)*fFp_inverse(B,Abar);

                        }
                        row++;
                    }
                }
                col++;
            }
        }

}

void FSMicromorphic2_3DT:: Form_II3p_58()
{

    int row=0;
    int col=0;
    II3p_58=0.0;

    fTemp_matrix_nsd_x_nsd.MultABCT(fFe,fD1,fFe);

     for(int B=0;B<3;B++)
        {
            for(int i=0;i<3;i++)
            {
                row=0;
             for(int l=0;l<3;l++)
               {
                   for(int m=0;m<3;m++)
                     {

                        //summation over the same term
                        for(int Abar=0;Abar<3;Abar++)
                        {
                        for(int Bbar=0;Bbar<3;Bbar++)
                            {

                            II3p_58(row,col)+=fTemp_matrix_nsd_x_nsd(m,l)*fdFYchidSIGMA(Abar,Bbar)*(fFe(i,Bbar)*fFp_inverse(B,Abar)+fFe(i,Abar)*fFp_inverse(B,Bbar));
                            }
                        }
                        row++;
                    }
                }
                col++;
            }
        }

}

void FSMicromorphic2_3DT:: Form_II3p_59()
{

    int row=0;
    int col=0;
    II3p_59=0.0;

    fTemp_matrix_nsd_x_nsd.MultABCT(fFe,fD1,fFe);


     for(int B=0;B<3;B++)
        {
            for(int i=0;i<3;i++)
            {
                row=0;
             for(int l=0;l<3;l++)
               {
                   for(int m=0;m<3;m++)
                     {
                        //summation over the same term
                        for(int Abar=0;Abar<3;Abar++)
                        {
                                   II3p_59(row,col)+=fTemp_matrix_nsd_x_nsd(m,l)*fChie(i,Abar)*fFp_inverse(B,Abar);

                        }
                        row++;
                    }
                }
                col++;
            }
        }

}



void FSMicromorphic2_3DT:: Form_II3p_60()
{

    int row=0;
    int col=0;
    II3p_60=0.0;

    fTemp_matrix_nsd_x_nsd.MultABCT(fFe,fD1,fFe);


     for(int B=0;B<3;B++)
        {
            for(int i=0;i<3;i++)
            {
                row=0;
             for(int l=0;l<3;l++)
             {
                   for(int m=0;m<3;m++)
                     {
                        //summation over the same term
                        for(int Abar=0;Abar<3;Abar++)
							{
							   II3p_60(row,col)+=fTemp_matrix_nsd_x_nsd(m,l)*fFe(i,Abar)*fChip_inverse(B,Abar);
							}
							row++;
                     }
                }
                col++;
            }
        }

}


void FSMicromorphic2_3DT:: Form_II3p_61()
{

    int row=0;
    int col=0;
    II3p_61=0.0;

    fTemp_matrix_nsd_x_nsd.MultABCT(fFe,fD1,fFe);

     for(int B=0;B<3;B++)
        {
            for(int i=0;i<3;i++)
            {
                row=0;
             for(int l=0;l<3;l++)
               {
                   for(int m=0;m<3;m++)
                     {

                        //summation over the same term
                        for(int Abar=0;Abar<3;Abar++)
                        {
                            for(int Bbar=0;Bbar<3;Bbar++)
                            {
                               II3p_61(row,col)+=fTemp_matrix_nsd_x_nsd(m,l)*fdFYchidSIGMA(Abar,Bbar)*fChie(i,Bbar)*fFp_inverse(B,Abar);
                            }
                        }
                        row++;
                    }
                }
                col++;
            }
        }

}

void FSMicromorphic2_3DT:: Form_II3p_62()
{

    int row=0;
    int col=0;
    II3p_62=0.0;

    fTemp_matrix_nsd_x_nsd.MultABCT(fFe,fD1,fFe);

     for(int B=0;B<3;B++)
        {
            for(int i=0;i<3;i++)
            {
                row=0;
             for(int l=0;l<3;l++)
               {
                   for(int m=0;m<3;m++)
                     {
                        //summation over the same term
                        for(int Abar=0;Abar<3;Abar++)
                        {
                            for(int Bbar=0;Bbar<3;Bbar++)
                            {
                               II3p_62(row,col)+=fTemp_matrix_nsd_x_nsd(m,l)*fdFYchidSIGMA(Abar,Bbar)*fFe(i,Abar)*fChip_inverse(B,Bbar);
                            }
                        }
                        row++;
                    }
                }
                col++;
            }
        }

}

void FSMicromorphic2_3DT:: Form_II3p_63()
{

    int row=0;
    int col=0;
    II3p_63=0.0;

    fTemp_matrix_nsd_x_nsd.MultABCT(fFe,fD1,fFe);


     for(int B=0;B<3;B++)
        {
            for(int i=0;i<3;i++)
            {
                row=0;
             for(int l=0;l<3;l++)
               {
                   for(int m=0;m<3;m++)
                     {
                        //summation over the same term
                        for(int Abar=0;Abar<3;Abar++)
                        {
                            for(int Bbar=0;Bbar<3;Bbar++)
                            {
                               II3p_63(row,col)+=fTemp_matrix_nsd_x_nsd(m,l)*fdFYchidSIGMA(Abar,Bbar)*fChie(i,Abar)*fFp_inverse(B,Bbar);
                            }
                        }
                        row++;
                    }
                }
                col++;
            }
        }

}



void FSMicromorphic2_3DT:: Form_II3p_64()
{

    int row=0;
    int col=0;
    II3p_64=0.0;

    fTemp_matrix_nsd_x_nsd.MultABCT(fFe,fD1,fFe);


     for(int B=0;B<3;B++)
        {
            for(int i=0;i<3;i++)
            {
                row=0;
             for(int l=0;l<3;l++)
               {
                   for(int m=0;m<3;m++)
                     {
                        //summation over the same term
                        for(int Abar=0;Abar<3;Abar++)
                        {
                            for(int Bbar=0;Bbar<3;Bbar++)
                            {
                               II3p_64(row,col)+=fTemp_matrix_nsd_x_nsd(m,l)*fdFYchidSIGMA(Abar,Bbar)*fFe(i,Bbar)*fChip_inverse(B,Abar);
                            }
                        }
                        row++;
                    }
                }
                col++;
            }
        }

}


void FSMicromorphic2_3DT:: Form_II3p_65()
{

    int row=0;
    int col=0;
    II3p_65=0.0;

    fTemp_matrix_nsd_x_nsd2.Transpose(fD1);
    fTemp_matrix_nsd_x_nsd.MultABCT(fFe,fTemp_matrix_nsd_x_nsd2,fFe);


     for(int B=0;B<3;B++)
        {
            for(int i=0;i<3;i++)
            {
                row=0;
             for(int l=0;l<3;l++)
               {
                   for(int m=0;m<3;m++)
                     {

                        //summation over the same term
                        for(int Abar=0;Abar<3;Abar++)
                        {
                            II3p_65(row,col)+=fTemp_matrix_nsd_x_nsd(m,l)*fFe(i,Abar)*fFp_inverse(B,Abar);

                        }
                        row++;
                    }
                }
                col++;
            }
        }

}

void FSMicromorphic2_3DT:: Form_II3p_66()
{

    int row=0;
    int col=0;
    II3p_66=0.0;

    fTemp_matrix_nsd_x_nsd2.Transpose(fD1);
    fTemp_matrix_nsd_x_nsd.MultABCT(fFe,fTemp_matrix_nsd_x_nsd2,fFe);


     for(int B=0;B<3;B++)
        {
            for(int i=0;i<3;i++)
            {
                row=0;
             for(int l=0;l<3;l++)
               {
                   for(int m=0;m<3;m++)
                     {

                        //summation over the same term
                        for(int Abar=0;Abar<3;Abar++)
                        {
                        for(int Bbar=0;Bbar<3;Bbar++)
                            {

                            II3p_66(row,col)+=fTemp_matrix_nsd_x_nsd(m,l)*fdFYchidSIGMA(Abar,Bbar)*(fFe(i,Bbar)*fFp_inverse(B,Abar)+fFe(i,Abar)*fFp_inverse(B,Bbar));
                            }
                        }
                        row++;
                    }
                }
                col++;
            }
        }

}

void FSMicromorphic2_3DT:: Form_II3p_67()
{

    int row=0;
    int col=0;
    II3p_67=0.0;

    fTemp_matrix_nsd_x_nsd2.Transpose(fD1);
    fTemp_matrix_nsd_x_nsd.MultABCT(fFe,fTemp_matrix_nsd_x_nsd2,fFe);


     for(int B=0;B<3;B++)
        {
            for(int i=0;i<3;i++)
            {
                row=0;
             for(int l=0;l<3;l++)
               {
                   for(int m=0;m<3;m++)
                     {

                        //summation over the same term
                        for(int Abar=0;Abar<3;Abar++)
                        {
                                   II3p_67(row,col)+=fTemp_matrix_nsd_x_nsd(m,l)*fChie(i,Abar)*fFp_inverse(B,Abar);

                        }
                        row++;
                    }
                }
                col++;
            }
        }

}



void FSMicromorphic2_3DT:: Form_II3p_68()
{

    int row=0;
    int col=0;
    II3p_68=0.0;

    fTemp_matrix_nsd_x_nsd2.Transpose(fD1);
    fTemp_matrix_nsd_x_nsd.MultABCT(fFe,fTemp_matrix_nsd_x_nsd2,fFe);


     for(int B=0;B<3;B++)
        {
            for(int i=0;i<3;i++)
            {
                row=0;
             for(int l=0;l<3;l++)
               {
                   for(int m=0;m<3;m++)
                     {
                        //summation over the same term
                        for(int Abar=0;Abar<3;Abar++)
                        {
                                   II3p_68(row,col)+=fTemp_matrix_nsd_x_nsd(m,l)*fFe(i,Abar)*fChip_inverse(B,Abar);

                        }
                        row++;
                    }
                }
                col++;
            }
        }

}


void FSMicromorphic2_3DT:: Form_II3p_69()
{

    int row=0;
    int col=0;
    II3p_69=0.0;

    fTemp_matrix_nsd_x_nsd2.Transpose(fD1);
    fTemp_matrix_nsd_x_nsd.MultABCT(fFe,fTemp_matrix_nsd_x_nsd2,fFe);


     for(int B=0;B<3;B++)
        {
            for(int i=0;i<3;i++)
            {
                row=0;
             for(int l=0;l<3;l++)
               {
                   for(int m=0;m<3;m++)
                     {
                        //summation over the same term
                        for(int Abar=0;Abar<3;Abar++)
                        {
                            for(int Bbar=0;Bbar<3;Bbar++)
                            {
                               II3p_69(row,col)+=fTemp_matrix_nsd_x_nsd(m,l)*fdFYchidSIGMA(Abar,Bbar)*fChie(i,Bbar)*fFp_inverse(B,Abar);
                            }
                        }
                        row++;
                    }
                }
                col++;
            }
        }

}

void FSMicromorphic2_3DT:: Form_II3p_70()
{

    int row=0;
    int col=0;
    II3p_70=0.0;

    fTemp_matrix_nsd_x_nsd2.Transpose(fD1);
    fTemp_matrix_nsd_x_nsd.MultABCT(fFe,fTemp_matrix_nsd_x_nsd2,fFe);


     for(int B=0;B<3;B++)
        {
            for(int i=0;i<3;i++)
            {
                row=0;
             for(int l=0;l<3;l++)
               {
                   for(int m=0;m<3;m++)
                     {

                        //summation over the same term
                        for(int Abar=0;Abar<3;Abar++)
                        {
                            for(int Bbar=0;Bbar<3;Bbar++)
                            {
                               II3p_70(row,col)+=fTemp_matrix_nsd_x_nsd(m,l)*fdFYchidSIGMA(Abar,Bbar)*fFe(i,Abar)*fChip_inverse(B,Bbar);
                            }
                        }
                        row++;
                    }
                }
                col++;
            }
        }

}

void FSMicromorphic2_3DT:: Form_II3p_71()
{

    int row=0;
    int col=0;
    II3p_71=0.0;

    fTemp_matrix_nsd_x_nsd2.Transpose(fD1);
    fTemp_matrix_nsd_x_nsd.MultABCT(fFe,fTemp_matrix_nsd_x_nsd2,fFe);



     for(int B=0;B<3;B++)
        {
            for(int i=0;i<3;i++)
            {
                row=0;
             for(int l=0;l<3;l++)
               {
                   for(int m=0;m<3;m++)
                     {
                        //summation over the same term
                        for(int Abar=0;Abar<3;Abar++)
                        {
                            for(int Bbar=0;Bbar<3;Bbar++)
                            {
                               II3p_71(row,col)+=fTemp_matrix_nsd_x_nsd(m,l)*fdFYchidSIGMA(Abar,Bbar)*fChie(i,Abar)*fFp_inverse(B,Bbar);
                            }
                        }
                        row++;
                    }
                }
                col++;
            }
        }

}



void FSMicromorphic2_3DT:: Form_II3p_72()
{

    int row=0;
    int col=0;
    II3p_72=0.0;

    fTemp_matrix_nsd_x_nsd2.Transpose(fD1);
    fTemp_matrix_nsd_x_nsd.MultABCT(fFe,fTemp_matrix_nsd_x_nsd2,fFe);


     for(int B=0;B<3;B++)
        {
            for(int i=0;i<3;i++)
            {
                row=0;
             for(int l=0;l<3;l++)
               {
                   for(int m=0;m<3;m++)
                     {
                        //summation over the same term
                        for(int Abar=0;Abar<3;Abar++)
                        {
                            for(int Bbar=0;Bbar<3;Bbar++)
                            {
                               II3p_72(row,col)+=fTemp_matrix_nsd_x_nsd(m,l)*fdFYchidSIGMA(Abar,Bbar)*fFe(i,Bbar)*fChip_inverse(B,Abar);
                            }
                        }
                        row++;
                    }
                }
                col++;
            }
        }

}




void FSMicromorphic2_3DT:: Form_II3p_73()
{

    int row=0;
    int col=0;
    II3p_73=0.0;

    fTemp_matrix_nsd_x_nsd.MultABCT(fFe,fIdentity_matrix,fFe);

    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    //summation over the same term starts
                    for(int Abar=0;Abar<3;Abar++)
                    {
                        II3p_73(row,col)+=fTemp_matrix_nsd_x_nsd(m,l)*fFe(i,Abar)*fFp_inverse(B,Abar);
                    }
                    row++;
                }
            }
            col++;
        }
    }


}

void FSMicromorphic2_3DT:: Form_II3p_74()
{

    int row=0;
    int col=0;
    II3p_74=0.0;


    fTemp_matrix_nsd_x_nsd.MultABCT(fFe,fIdentity_matrix,fFe);

    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    //summation over the same term starts
                    for(int Abar=0;Abar<3;Abar++)
                    {
                          for(int Bbar=0;Bbar<3;Bbar++)
                          {
                        	  II3p_74(row,col)+=fTemp_matrix_nsd_x_nsd(m,l)*fdFYchidSIGMA(Abar,Bbar)*(fFe(i,Bbar)*fFp_inverse(B,Abar)+fFe(i,Abar)*fFp_inverse(B,Bbar));
                          }
                    }
                    row++;
                }
            }
            col++;
        }
    }

}
void FSMicromorphic2_3DT:: Form_II3p_75()
{

    int row=0;
    int col=0;
    II3p_75=0.0;

    fTemp_matrix_nsd_x_nsd.MultABCT(fFe,fIdentity_matrix,fFe);


    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    //summation over the same term starts
                    for(int Abar=0;Abar<3;Abar++)
                    {
                        II3p_75(row,col)+=fTemp_matrix_nsd_x_nsd(m,l)*fChie(i,Abar)*fFp_inverse(B,Abar);
                    }
                    row++;
                }
            }
            col++;
        }
    }

}
void FSMicromorphic2_3DT:: Form_II3p_76()
{

    int row=0;
    int col=0;
    II3p_76=0.0;

    fTemp_matrix_nsd_x_nsd.MultABCT(fFe,fIdentity_matrix,fFe);

    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    //summation over the same term starts
                    for(int Abar=0;Abar<3;Abar++)
                    {
                        II3p_76(row,col)+=fTemp_matrix_nsd_x_nsd(m,l)*fFe(i,Abar)*fChip_inverse(B,Abar);
                    }
                    row++;
                }
            }
            col++;
        }
    }

}
void FSMicromorphic2_3DT:: Form_II3p_77()
{

    int row=0;
    int col=0;
    II3p_77=0.0;

    fTemp_matrix_nsd_x_nsd.MultABCT(fFe,fIdentity_matrix,fFe);

    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    //summation over the same term starts
                    for(int Abar=0;Abar<3;Abar++)
                    {
                          for(int Bbar=0;Bbar<3;Bbar++)
                          {
                        	  II3p_77(row,col)+=fTemp_matrix_nsd_x_nsd(m,l)*fdFYchidSIGMA(Abar,Bbar)*fChie(i,Bbar)*fFp_inverse(B,Abar);
                          }
                    }
                    row++;
                }
            }
            col++;
        }
    }
}

void FSMicromorphic2_3DT:: Form_II3p_78()
{

    int row=0;
    int col=0;
    II3p_78=0.0;

    fTemp_matrix_nsd_x_nsd.MultABCT(fFe,fIdentity_matrix,fFe);

    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    //summation over the same term starts
                    for(int Abar=0;Abar<3;Abar++)
                    {
                          for(int Bbar=0;Bbar<3;Bbar++)
                          {
                        	  II3p_78(row,col)+=fTemp_matrix_nsd_x_nsd(m,l)*fdFYchidSIGMA(Abar,Bbar)*fFe(i,Abar)*fChip_inverse(B,Bbar);
                          }
                    }
                    row++;
                }
            }
            col++;
        }
    }


}


void FSMicromorphic2_3DT:: Form_II3p_79()
{

    int row=0;
    int col=0;
    II3p_79=0.0;

    fTemp_matrix_nsd_x_nsd.MultABCT(fFe,fIdentity_matrix,fFe);

    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    //summation over the same term starts
                    for(int Abar=0;Abar<3;Abar++)
                    {
                          for(int Bbar=0;Bbar<3;Bbar++)
                          {
                        	  II3p_79(row,col)+=fTemp_matrix_nsd_x_nsd(m,l)*fdFYchidSIGMA(Abar,Bbar)*fChie(i,Abar)*fFp_inverse(B,Bbar);
                          }
                    }
                    row++;
                }
            }
            col++;
        }
    }
}



void FSMicromorphic2_3DT:: Form_II3p_80()
{

    int row=0;
    int col=0;
    II3p_80=0.0;

    fTemp_matrix_nsd_x_nsd.MultABCT(fFe,fIdentity_matrix,fFe);

    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    //summation over the same term starts
                    for(int Abar=0;Abar<3;Abar++)
                    {
                          for(int Bbar=0;Bbar<3;Bbar++)
                          {
                        	  II3p_80(row,col)+=fTemp_matrix_nsd_x_nsd(m,l)*fdFYchidSIGMA(Abar,Bbar)*fFe(i,Bbar)*fChip_inverse(B,Abar);
                          }
                    }
                    row++;
                }
            }
            col++;
        }
    }
}





void FSMicromorphic2_3DT:: Form_II3p_81()
{

    int row=0;
    int col=0;
    II3p_81=0.0;

    fTemp_matrix_nsd_x_nsd2=fA1;
    fTemp_matrix_nsd_x_nsd.Transpose(fA1);
    fTemp_matrix_nsd_x_nsd2+=fTemp_matrix_nsd_x_nsd;

    fTemp_matrix_nsd_x_nsd.MultABCT(fFe,fTemp_matrix_nsd_x_nsd2,fFe);

    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    //summation over the same term starts
                    for(int Abar=0;Abar<3;Abar++)
                    {
                        II3p_81(row,col)+=fTemp_matrix_nsd_x_nsd(m,l)*fFe(i,Abar)*fFp_inverse(B,Abar);
                    }
                    row++;
                }
            }
            col++;
        }
    }


}

void FSMicromorphic2_3DT:: Form_II3p_82()
{

    int row=0;
    int col=0;
    II3p_82=0.0;

    fTemp_matrix_nsd_x_nsd2=fA1;
    fTemp_matrix_nsd_x_nsd.Transpose(fA1);
    fTemp_matrix_nsd_x_nsd2+=fTemp_matrix_nsd_x_nsd;

    fTemp_matrix_nsd_x_nsd.MultABCT(fFe,fTemp_matrix_nsd_x_nsd2,fFe);

    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    //summation over the same term starts
                    for(int Abar=0;Abar<3;Abar++)
                    {
                          for(int Bbar=0;Bbar<3;Bbar++)
                          {
                        	  II3p_82(row,col)+=fTemp_matrix_nsd_x_nsd(m,l)*fdFYchidSIGMA(Abar,Bbar)*(fFe(i,Bbar)*fFp_inverse(B,Abar)+fFe(i,Abar)*fFp_inverse(B,Bbar));
                          }
                    }
                    row++;
                }
            }
            col++;
        }
    }

}
void FSMicromorphic2_3DT:: Form_II3p_83()
{

    int row=0;
    int col=0;
    II3p_83=0.0;

    fTemp_matrix_nsd_x_nsd2=fA1;
    fTemp_matrix_nsd_x_nsd.Transpose(fA1);
    fTemp_matrix_nsd_x_nsd2+=fTemp_matrix_nsd_x_nsd;

    fTemp_matrix_nsd_x_nsd.MultABCT(fFe,fTemp_matrix_nsd_x_nsd2,fFe);


    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    //summation over the same term starts
                    for(int Abar=0;Abar<3;Abar++)
                    {
                        II3p_83(row,col)+=fTemp_matrix_nsd_x_nsd(m,l)*fChie(i,Abar)*fFp_inverse(B,Abar);
                    }
                    row++;
                }
            }
            col++;
        }
    }

}
void FSMicromorphic2_3DT:: Form_II3p_84()
{

    int row=0;
    int col=0;
    II3p_84=0.0;

    fTemp_matrix_nsd_x_nsd2=fA1;
    fTemp_matrix_nsd_x_nsd.Transpose(fA1);
    fTemp_matrix_nsd_x_nsd2+=fTemp_matrix_nsd_x_nsd;

    fTemp_matrix_nsd_x_nsd.MultABCT(fFe,fTemp_matrix_nsd_x_nsd2,fFe);

    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    //summation over the same term starts
                    for(int Abar=0;Abar<3;Abar++)
                    {
                        II3p_84(row,col)+=fTemp_matrix_nsd_x_nsd(m,l)*fFe(i,Abar)*fChip_inverse(B,Abar);
                    }
                    row++;
                }
            }
            col++;
        }
    }

}
void FSMicromorphic2_3DT:: Form_II3p_85()
{

    int row=0;
    int col=0;
    II3p_85=0.0;

    fTemp_matrix_nsd_x_nsd2=fA1;
    fTemp_matrix_nsd_x_nsd.Transpose(fA1);
    fTemp_matrix_nsd_x_nsd2+=fTemp_matrix_nsd_x_nsd;

    fTemp_matrix_nsd_x_nsd.MultABCT(fFe,fTemp_matrix_nsd_x_nsd2,fFe);

    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    //summation over the same term starts
                    for(int Abar=0;Abar<3;Abar++)
                    {
                          for(int Bbar=0;Bbar<3;Bbar++)
                          {
                        	  II3p_85(row,col)+=fTemp_matrix_nsd_x_nsd(m,l)*fdFYchidSIGMA(Abar,Bbar)*fChie(i,Bbar)*fFp_inverse(B,Abar);
                          }
                    }
                    row++;
                }
            }
            col++;
        }
    }
}

void FSMicromorphic2_3DT:: Form_II3p_86()
{

    int row=0;
    int col=0;
    II3p_86=0.0;

    fTemp_matrix_nsd_x_nsd2=fA1;
    fTemp_matrix_nsd_x_nsd.Transpose(fA1);
    fTemp_matrix_nsd_x_nsd2+=fTemp_matrix_nsd_x_nsd;

    fTemp_matrix_nsd_x_nsd.MultABCT(fFe,fTemp_matrix_nsd_x_nsd2,fFe);

    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    //summation over the same term starts
                    for(int Abar=0;Abar<3;Abar++)
                    {
                          for(int Bbar=0;Bbar<3;Bbar++)
                          {
                        	  II3p_86(row,col)+=fTemp_matrix_nsd_x_nsd(m,l)*fdFYchidSIGMA(Abar,Bbar)*fFe(i,Abar)*fChip_inverse(B,Bbar);
                          }
                    }
                    row++;
                }
            }
            col++;
        }
    }


}


void FSMicromorphic2_3DT:: Form_II3p_87()
{

    int row=0;
    int col=0;
    II3p_87=0.0;

    fTemp_matrix_nsd_x_nsd2=fA1;
    fTemp_matrix_nsd_x_nsd.Transpose(fA1);
    fTemp_matrix_nsd_x_nsd2+=fTemp_matrix_nsd_x_nsd;

    fTemp_matrix_nsd_x_nsd.MultABCT(fFe,fTemp_matrix_nsd_x_nsd2,fFe);

    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    //summation over the same term starts
                    for(int Abar=0;Abar<3;Abar++)
                    {
                          for(int Bbar=0;Bbar<3;Bbar++)
                          {
                        	  II3p_87(row,col)+=fTemp_matrix_nsd_x_nsd(m,l)*fdFYchidSIGMA(Abar,Bbar)*fChie(i,Abar)*fFp_inverse(B,Bbar);
                          }
                    }
                    row++;
                }
            }
            col++;
        }
    }
}



void FSMicromorphic2_3DT:: Form_II3p_88()
{

    int row=0;
    int col=0;
    II3p_88=0.0;

    fTemp_matrix_nsd_x_nsd2=fA1;
    fTemp_matrix_nsd_x_nsd.Transpose(fA1);
    fTemp_matrix_nsd_x_nsd2+=fTemp_matrix_nsd_x_nsd;

    fTemp_matrix_nsd_x_nsd.MultABCT(fFe,fTemp_matrix_nsd_x_nsd2,fFe);

    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    //summation over the same term starts
                    for(int Abar=0;Abar<3;Abar++)
                    {
                          for(int Bbar=0;Bbar<3;Bbar++)
                          {
                        	  II3p_88(row,col)+=fTemp_matrix_nsd_x_nsd(m,l)*fdFYchidSIGMA(Abar,Bbar)*fFe(i,Bbar)*fChip_inverse(B,Abar);
                          }
                    }
                    row++;
                }
            }
            col++;
        }
    }
}




void FSMicromorphic2_3DT:: Form_II3p_89()
{

    int row=0;
    int col=0;
    II3p_89=0.0;

    fTemp_matrix_nsd_x_nsd.MultABCT(fFe,fIdentity_matrix,fFe);

    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    //summation over the same term starts
                    for(int Abar=0;Abar<3;Abar++)
                    {
                        II3p_89(row,col)+=fTemp_matrix_nsd_x_nsd(m,l)*fFe(i,Abar)*fFp_inverse(B,Abar);
                    }
                    row++;
                }
            }
            col++;
        }
    }


}

void FSMicromorphic2_3DT:: Form_II3p_90()
{

    int row=0;
    int col=0;
    II3p_90=0.0;

    fTemp_matrix_nsd_x_nsd.MultABCT(fFe,fIdentity_matrix,fFe);

    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    //summation over the same term starts
                    for(int Abar=0;Abar<3;Abar++)
                    {
                          for(int Bbar=0;Bbar<3;Bbar++)
                          {
                        	  II3p_90(row,col)+=fTemp_matrix_nsd_x_nsd(m,l)*fdFYchidSIGMA(Abar,Bbar)*(fFe(i,Bbar)*fFp_inverse(B,Abar)+fFe(i,Abar)*fFp_inverse(B,Bbar));
                          }
                    }
                    row++;
                }
            }
            col++;
        }
    }

}
void FSMicromorphic2_3DT:: Form_II3p_91()
{

    int row=0;
    int col=0;
    II3p_91=0.0;

    fTemp_matrix_nsd_x_nsd.MultABCT(fFe,fIdentity_matrix,fFe);


    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    //summation over the same term starts
                    for(int Abar=0;Abar<3;Abar++)
                    {
                        II3p_91(row,col)+=fTemp_matrix_nsd_x_nsd(m,l)*fChie(i,Abar)*fFp_inverse(B,Abar);
                    }
                    row++;
                }
            }
            col++;
        }
    }

}
void FSMicromorphic2_3DT:: Form_II3p_92()
{

    int row=0;
    int col=0;
    II3p_92=0.0;

    fTemp_matrix_nsd_x_nsd.MultABCT(fFe,fIdentity_matrix,fFe);

    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    //summation over the same term starts
                    for(int Abar=0;Abar<3;Abar++)
                    {
                        II3p_92(row,col)+=fTemp_matrix_nsd_x_nsd(m,l)*fFe(i,Abar)*fChip_inverse(B,Abar);
                    }
                    row++;
                }
            }
            col++;
        }
    }

}
void FSMicromorphic2_3DT:: Form_II3p_93()
{

    int row=0;
    int col=0;
    II3p_93=0.0;

    fTemp_matrix_nsd_x_nsd.MultABCT(fFe,fIdentity_matrix,fFe);

    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    //summation over the same term starts
                    for(int Abar=0;Abar<3;Abar++)
                    {
                          for(int Bbar=0;Bbar<3;Bbar++)
                          {
                        II3p_93(row,col)+=fTemp_matrix_nsd_x_nsd(m,l)*fdFYchidSIGMA(Abar,Bbar)*fChie(i,Bbar)*fFp_inverse(B,Abar);
                       }
                    }
                    row++;
                }
            }
            col++;
        }
    }
}

void FSMicromorphic2_3DT:: Form_II3p_94()
{

    int row=0;
    int col=0;
    II3p_94=0.0;

    fTemp_matrix_nsd_x_nsd.MultABCT(fFe,fIdentity_matrix,fFe);

    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    //summation over the same term starts
                    for(int Abar=0;Abar<3;Abar++)
                    {
                          for(int Bbar=0;Bbar<3;Bbar++)
                          {
                        	  II3p_94(row,col)+=fTemp_matrix_nsd_x_nsd(m,l)*fdFYchidSIGMA(Abar,Bbar)*fFe(i,Abar)*fChip_inverse(B,Bbar);
                          }
                    }
                    row++;
                }
            }
            col++;
        }
    }


}


void FSMicromorphic2_3DT:: Form_II3p_95()
{

    int row=0;
    int col=0;
    II3p_95=0.0;

    fTemp_matrix_nsd_x_nsd.MultABCT(fFe,fIdentity_matrix,fFe);

    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    //summation over the same term starts
                    for(int Abar=0;Abar<3;Abar++)
                    {
                          for(int Bbar=0;Bbar<3;Bbar++)
                          {
                        	  II3p_95(row,col)+=fTemp_matrix_nsd_x_nsd(m,l)*fdFYchidSIGMA(Abar,Bbar)*fChie(i,Abar)*fFp_inverse(B,Bbar);
                          }
                    }
                    row++;
                }
            }
            col++;
        }
    }
}



void FSMicromorphic2_3DT:: Form_II3p_96()
{

    int row=0;
    int col=0;
    II3p_96=0.0;

    fTemp_matrix_nsd_x_nsd.MultABCT(fFe,fIdentity_matrix,fFe);

    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    //summation over the same term starts
                    for(int Abar=0;Abar<3;Abar++)
                    {
                          for(int Bbar=0;Bbar<3;Bbar++)
                          {
                        	  II3p_96(row,col)+=fTemp_matrix_nsd_x_nsd(m,l)*fdFYchidSIGMA(Abar,Bbar)*fFe(i,Bbar)*fChip_inverse(B,Abar);
                          }
                    }
                    row++;
                }
            }
            col++;
        }
    }
}



void FSMicromorphic2_3DT:: Form_II3p_97()
{

    int row=0;
    int col=0;
    II3p_97=0.0;

    fTemp_matrix_nsd_x_nsd2.Transpose(fN1);
    fTemp_matrix_nsd_x_nsd.MultABCT(fFe,fTemp_matrix_nsd_x_nsd2,fFe);

    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    //summation over the same term starts
                    for(int Abar=0;Abar<3;Abar++)
                    {
                        II3p_97(row,col)+=fTemp_matrix_nsd_x_nsd(m,l)*fFe(i,Abar)*fFp_inverse(B,Abar);
                    }
                    row++;
                }
            }
            col++;
        }
    }


}

void FSMicromorphic2_3DT:: Form_II3p_98()
{

    int row=0;
    int col=0;
    II3p_98=0.0;

    fTemp_matrix_nsd_x_nsd2.Transpose(fN1);
    fTemp_matrix_nsd_x_nsd.MultABCT(fFe,fTemp_matrix_nsd_x_nsd2,fFe);

    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    //summation over the same term starts
                    for(int Abar=0;Abar<3;Abar++)
                    {
                          for(int Bbar=0;Bbar<3;Bbar++)
                          {
                        	  II3p_98(row,col)+=fTemp_matrix_nsd_x_nsd(m,l)*fdFYchidSIGMA(Abar,Bbar)*(fFe(i,Bbar)*fFp_inverse(B,Abar)+fFe(i,Abar)*fFp_inverse(B,Bbar));
                          }
                    }
                    row++;
                }
            }
            col++;
        }
    }

}
void FSMicromorphic2_3DT:: Form_II3p_99()
{

    int row=0;
    int col=0;
    II3p_99=0.0;

    fTemp_matrix_nsd_x_nsd2.Transpose(fN1);
    fTemp_matrix_nsd_x_nsd.MultABCT(fFe,fTemp_matrix_nsd_x_nsd2,fFe);


    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    //summation over the same term starts
                    for(int Abar=0;Abar<3;Abar++)
                    {
                        II3p_99(row,col)+=fTemp_matrix_nsd_x_nsd(m,l)*fChie(i,Abar)*fFp_inverse(B,Abar);
                    }
                    row++;
                }
            }
            col++;
        }
    }

}
void FSMicromorphic2_3DT:: Form_II3p_100()
{

    int row=0;
    int col=0;
    II3p_100=0.0;

    fTemp_matrix_nsd_x_nsd2.Transpose(fN1);
    fTemp_matrix_nsd_x_nsd.MultABCT(fFe,fTemp_matrix_nsd_x_nsd2,fFe);

    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    //summation over the same term starts
                    for(int Abar=0;Abar<3;Abar++)
                    {
                        II3p_100(row,col)+=fTemp_matrix_nsd_x_nsd(m,l)*fFe(i,Abar)*fChip_inverse(B,Abar);
                    }
                    row++;
                }
            }
            col++;
        }
    }

}
void FSMicromorphic2_3DT:: Form_II3p_101()
{

    int row=0;
    int col=0;
    II3p_101=0.0;

    fTemp_matrix_nsd_x_nsd2.Transpose(fN1);
    fTemp_matrix_nsd_x_nsd.MultABCT(fFe,fTemp_matrix_nsd_x_nsd2,fFe);

    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    //summation over the same term starts
                    for(int Abar=0;Abar<3;Abar++)
                    {
                          for(int Bbar=0;Bbar<3;Bbar++)
                          {
                        	  II3p_101(row,col)+=fTemp_matrix_nsd_x_nsd(m,l)*fdFYchidSIGMA(Abar,Bbar)*fChie(i,Bbar)*fFp_inverse(B,Abar);
                          }
                    }
                    row++;
                }
            }
            col++;
        }
    }
}

void FSMicromorphic2_3DT:: Form_II3p_102()
{

    int row=0;
    int col=0;
    II3p_102=0.0;

    fTemp_matrix_nsd_x_nsd2.Transpose(fN1);
    fTemp_matrix_nsd_x_nsd.MultABCT(fFe,fTemp_matrix_nsd_x_nsd2,fFe);

    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    //summation over the same term starts
                    for(int Abar=0;Abar<3;Abar++)
                    {
                          for(int Bbar=0;Bbar<3;Bbar++)
                          {
                        	  II3p_102(row,col)+=fTemp_matrix_nsd_x_nsd(m,l)*fdFYchidSIGMA(Abar,Bbar)*fFe(i,Abar)*fChip_inverse(B,Bbar);
                          }
                    }
                    row++;
                }
            }
            col++;
        }
    }


}


void FSMicromorphic2_3DT:: Form_II3p_103()
{

    int row=0;
    int col=0;
    II3p_103=0.0;

    fTemp_matrix_nsd_x_nsd2.Transpose(fN1);
    fTemp_matrix_nsd_x_nsd.MultABCT(fFe,fTemp_matrix_nsd_x_nsd2,fFe);

    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    //summation over the same term starts
                    for(int Abar=0;Abar<3;Abar++)
                    {
                          for(int Bbar=0;Bbar<3;Bbar++)
                          {
                        	  II3p_103(row,col)+=fTemp_matrix_nsd_x_nsd(m,l)*fdFYchidSIGMA(Abar,Bbar)*fChie(i,Abar)*fFp_inverse(B,Bbar);
                          }
                    }
                    row++;
                }
            }
            col++;
        }
    }
}



void FSMicromorphic2_3DT:: Form_II3p_104()
{

    int row=0;
    int col=0;
    II3p_104=0.0;

    fTemp_matrix_nsd_x_nsd2.Transpose(fN1);
    fTemp_matrix_nsd_x_nsd.MultABCT(fFe,fTemp_matrix_nsd_x_nsd2,fFe);

    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    //summation over the same term starts
                    for(int Abar=0;Abar<3;Abar++)
                    {
                          for(int Bbar=0;Bbar<3;Bbar++)
                          {
                        	  II3p_104(row,col)+=fTemp_matrix_nsd_x_nsd(m,l)*fdFYchidSIGMA(Abar,Bbar)*fFe(i,Bbar)*fChip_inverse(B,Abar);
                          }
                    }
                    row++;
                }
            }
            col++;
        }
    }
}




void FSMicromorphic2_3DT:: Form_II3p_105()
{

    int row=0;
    int col=0;
    II3p_105=0.0;


    fTemp_matrix_nsd_x_nsd.MultABCT(fFe,fN1,fFe);

    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    //summation over the same term starts
                    for(int Abar=0;Abar<3;Abar++)
                    {
                        II3p_105(row,col)+=fTemp_matrix_nsd_x_nsd(m,l)*fFe(i,Abar)*fFp_inverse(B,Abar);
                    }
                    row++;
                }
            }
            col++;
        }
    }


}

void FSMicromorphic2_3DT:: Form_II3p_106()
{

    int row=0;
    int col=0;
    II3p_106=0.0;

    fTemp_matrix_nsd_x_nsd.MultABCT(fFe,fN1,fFe);
    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    //summation over the same term starts
                    for(int Abar=0;Abar<3;Abar++)
                    {
                          for(int Bbar=0;Bbar<3;Bbar++)
                          {
                        II3p_106(row,col)+=fTemp_matrix_nsd_x_nsd(m,l)*fdFYchidSIGMA(Abar,Bbar)*(fFe(i,Bbar)*fFp_inverse(B,Abar)+fFe(i,Abar)*fFp_inverse(B,Bbar));
                       }
                    }
                    row++;
                }
            }
            col++;
        }
    }

}
void FSMicromorphic2_3DT:: Form_II3p_107()
{

    int row=0;
    int col=0;
    II3p_107=0.0;

    fTemp_matrix_nsd_x_nsd.MultABCT(fFe,fN1,fFe);


    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    //summation over the same term starts
                    for(int Abar=0;Abar<3;Abar++)
                    {
                        II3p_107(row,col)+=fTemp_matrix_nsd_x_nsd(m,l)*fChie(i,Abar)*fFp_inverse(B,Abar);
                    }
                    row++;
                }
            }
            col++;
        }
    }

}
void FSMicromorphic2_3DT:: Form_II3p_108()
{

    int row=0;
    int col=0;
    II3p_108=0.0;

    fTemp_matrix_nsd_x_nsd.MultABCT(fFe,fN1,fFe);

    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    //summation over the same term starts
                    for(int Abar=0;Abar<3;Abar++)
                    {
                        II3p_108(row,col)+=fTemp_matrix_nsd_x_nsd(m,l)*fFe(i,Abar)*fChip_inverse(B,Abar);
                    }
                    row++;
                }
            }
            col++;
        }
    }

}
void FSMicromorphic2_3DT:: Form_II3p_109()
{

    int row=0;
    int col=0;
    II3p_109=0.0;

    fTemp_matrix_nsd_x_nsd.MultABCT(fFe,fN1,fFe);

    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    //summation over the same term starts
                    for(int Abar=0;Abar<3;Abar++)
                    {
                          for(int Bbar=0;Bbar<3;Bbar++)
                          {
                        II3p_109(row,col)+=fTemp_matrix_nsd_x_nsd(m,l)*fdFYchidSIGMA(Abar,Bbar)*fChie(i,Bbar)*fFp_inverse(B,Abar);
                       }
                    }
                    row++;
                }
            }
            col++;
        }
    }
}

void FSMicromorphic2_3DT:: Form_II3p_110()
{

    int row=0;
    int col=0;
    II3p_110=0.0;

    fTemp_matrix_nsd_x_nsd.MultABCT(fFe,fN1,fFe);

    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    //summation over the same term starts
                    for(int Abar=0;Abar<3;Abar++)
                    {
                          for(int Bbar=0;Bbar<3;Bbar++)
                          {
                        	  II3p_110(row,col)+=fTemp_matrix_nsd_x_nsd(m,l)*fdFYchidSIGMA(Abar,Bbar)*fFe(i,Abar)*fChip_inverse(B,Bbar);
                          }
                    }
                    row++;
                }
            }
            col++;
        }
    }


}


void FSMicromorphic2_3DT:: Form_II3p_111()
{

    int row=0;
    int col=0;
    II3p_111=0.0;
    fTemp_matrix_nsd_x_nsd.MultABCT(fFe,fN1,fFe);

    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    //summation over the same term starts
                    for(int Abar=0;Abar<3;Abar++)
                    {
                          for(int Bbar=0;Bbar<3;Bbar++)
                          {
                        	  II3p_111(row,col)+=fTemp_matrix_nsd_x_nsd(m,l)*fdFYchidSIGMA(Abar,Bbar)*fChie(i,Abar)*fFp_inverse(B,Bbar);
                          }
                    }
                    row++;
                }
            }
            col++;
        }
    }
}



void FSMicromorphic2_3DT:: Form_II3p_112()
{

    int row=0;
    int col=0;
    II3p_112=0.0;

    fTemp_matrix_nsd_x_nsd.MultABCT(fFe,fN1,fFe);

    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    //summation over the same term starts
                    for(int Abar=0;Abar<3;Abar++)
                    {
                          for(int Bbar=0;Bbar<3;Bbar++)
                          {
                        	  II3p_112(row,col)+=fTemp_matrix_nsd_x_nsd(m,l)*fdFYchidSIGMA(Abar,Bbar)*fFe(i,Bbar)*fChip_inverse(B,Abar);
                          }
                    }
                    row++;
                }
            }
            col++;
        }
    }
}



void FSMicromorphic2_3DT:: Form_II3p_113()
{

    int row=0;
    int col=0;
    II3p_113=0.0;

    fTemp_matrix_nsd_x_nsd.MultABCT(fFe,fIdentity_matrix,fFe);


    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    //summation over the same term starts
                    for(int Abar=0;Abar<3;Abar++)
                    {
                      II3p_113(row,col)+=fTemp_matrix_nsd_x_nsd(m,l)*fFe(i,Abar)*fFp_inverse(B,Abar);
                    }
                    row++;
                }
            }
            col++;
        }
    }
}


void FSMicromorphic2_3DT:: Form_II3p_114()
{

    int row=0;
    int col=0;
    II3p_114=0.0;

    fTemp_matrix_nsd_x_nsd.MultABCT(fFe,fIdentity_matrix,fFe);

    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    //summation over the same term starts
                    for(int Abar=0;Abar<3;Abar++)
                    {
                      for(int Bbar=0;Bbar<3;Bbar++)
                      {
                          II3p_114(row,col)+=fTemp_matrix_nsd_x_nsd(m,l)*fdFYdS(Abar,Bbar)
                           *(fFe(i,Bbar)*fFp_inverse(B,Abar)+fFe(i,Abar)*fFp_inverse(B,Bbar));
                      }
                    }
                    row++;
                }
            }
            col++;
        }
    }
}



void FSMicromorphic2_3DT:: Form_II3p_115()
{

    int row=0;
    int col=0;
    II3p_115=0.0;

    fTemp_matrix_nsd_x_nsd.MultABCT(fFe,fIdentity_matrix,fFe);

    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    //summation over the same term starts
                    for(int Abar=0;Abar<3;Abar++)
                    {
                         II3p_115(row,col)+=fTemp_matrix_nsd_x_nsd(m,l)*fChie(i,Abar)*fFp_inverse(B,Abar);
                    }
                    row++;
                }
            }
            col++;
        }
    }
}


void FSMicromorphic2_3DT:: Form_II3p_116()
{

    int row=0;
    int col=0;
    II3p_116=0.0;

    fTemp_matrix_nsd_x_nsd.MultABCT(fFe,fIdentity_matrix,fFe);

    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    //summation over the same term starts
                    for(int Abar=0;Abar<3;Abar++)
                    {
                         II3p_116(row,col)+=fTemp_matrix_nsd_x_nsd(m,l)*fFe(i,Abar)*fChip_inverse(B,Abar);
                    }
                    row++;
                }
            }
            col++;
        }
    }
}


void FSMicromorphic2_3DT:: Form_II3p_117()
{

    int row=0;
    int col=0;
    II3p_117=0.0;

    fTemp_matrix_nsd_x_nsd.MultABCT(fFe,fIdentity_matrix,fFe);

    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    //summation over the same term starts
                    for(int Abar=0;Abar<3;Abar++)
                    {
                        for(int Bbar=0;Bbar<3;Bbar++)
                        {
                        	II3p_117(row,col)+=fTemp_matrix_nsd_x_nsd(m,l)*fdFYdS(Abar,Bbar)*fChie(i,Bbar)*fFp_inverse(B,Abar);
                        }
                    }
                    row++;
                }
            }
            col++;
        }
    }
}


void FSMicromorphic2_3DT:: Form_II3p_118()
{

    int row=0;
    int col=0;
    II3p_118=0.0;

    fTemp_matrix_nsd_x_nsd.MultABCT(fFe,fIdentity_matrix,fFe);

    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    //summation over the same term starts
                    for(int Abar=0;Abar<3;Abar++)
                    {
                        for(int Bbar=0;Bbar<3;Bbar++)
                        {
                        	II3p_118(row,col)+=fTemp_matrix_nsd_x_nsd(m,l)*fdFYdS(Abar,Bbar)*fFe(i,Abar)*fChip_inverse(B,Bbar);
                        }
                    }
                    row++;
                }
            }
            col++;
        }
    }
}



void FSMicromorphic2_3DT:: Form_II3p_119()
{

    int row=0;
    int col=0;
    II3p_119=0.0;

    fTemp_matrix_nsd_x_nsd.MultABCT(fFe,fIdentity_matrix,fFe);

    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    //summation over the same term starts
                    for(int Abar=0;Abar<3;Abar++)
                    {
                        for(int Bbar=0;Bbar<3;Bbar++)
                        {
                        	II3p_119(row,col)+=fTemp_matrix_nsd_x_nsd(m,l)*fdFYdS(Abar,Bbar)*fChie(i,Abar)*fFp_inverse(B,Bbar);
                        }
                    }
                    row++;
                }
            }
            col++;
        }
    }
}


void FSMicromorphic2_3DT:: Form_II3p_120()
{

    int row=0;
    int col=0;
    II3p_120=0.0;

    fTemp_matrix_nsd_x_nsd.MultABCT(fFe,fIdentity_matrix,fFe);

    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    //summation over the same term starts
                    for(int Abar=0;Abar<3;Abar++)
                    {
                        for(int Bbar=0;Bbar<3;Bbar++)
                        {
                        	II3p_120(row,col)+=fTemp_matrix_nsd_x_nsd(m,l)*fdFYdS(Abar,Bbar)*fFe(i,Bbar)*fChip_inverse(B,Abar);
                        }
                    }
                    row++;
                }
            }
            col++;
        }
    }
}

void FSMicromorphic2_3DT:: Form_II3p_121()
{

    int row=0;
    int col=0;
    II3p_121=0.0;

    fTemp_matrix_nsd_x_nsd.MultABCT(fFe,fD1,fFe);


    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    //summation over the same term starts
                    for(int Abar=0;Abar<3;Abar++)
                    {
                    	II3p_121(row,col)+=fTemp_matrix_nsd_x_nsd(m,l)*fFe(i,Abar)*fFp_inverse(B,Abar);
                    }
                    row++;
                }
            }
            col++;
        }
    }
}


void FSMicromorphic2_3DT:: Form_II3p_122()
{

    int row=0;
    int col=0;
    II3p_122=0.0;

    fTemp_matrix_nsd_x_nsd.MultABCT(fFe,fD1,fFe);

    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    //summation over the same term starts
                    for(int Abar=0;Abar<3;Abar++)
                    {
                      for(int Bbar=0;Bbar<3;Bbar++)
					  {
                          II3p_122(row,col)+=fTemp_matrix_nsd_x_nsd(m,l)*fdFYdS(Abar,Bbar)
                           *(fFe(i,Bbar)*fFp_inverse(B,Abar)+fFe(i,Abar)*fFp_inverse(B,Bbar));
                      }
                    }
                    row++;
                }
            }
            col++;
        }
    }
}



void FSMicromorphic2_3DT:: Form_II3p_123()
{

    int row=0;
    int col=0;
    II3p_123=0.0;

    fTemp_matrix_nsd_x_nsd.MultABCT(fFe,fD1,fFe);

    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    //summation over the same term starts
                    for(int Abar=0;Abar<3;Abar++)
                    {
                         II3p_123(row,col)+=fTemp_matrix_nsd_x_nsd(m,l)*fChie(i,Abar)*fFp_inverse(B,Abar);
                    }
                    row++;
                }
            }
            col++;
        }
    }
}


void FSMicromorphic2_3DT:: Form_II3p_124()
{

    int row=0;
    int col=0;
    II3p_124=0.0;

    fTemp_matrix_nsd_x_nsd.MultABCT(fFe,fD1,fFe);

    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    //summation over the same term starts
                    for(int Abar=0;Abar<3;Abar++)
                    {
                         II3p_124(row,col)+=fTemp_matrix_nsd_x_nsd(m,l)*fFe(i,Abar)*fChip_inverse(B,Abar);

                    }
                    row++;
                }
            }
            col++;
        }
    }
}


void FSMicromorphic2_3DT:: Form_II3p_125()
{

    int row=0;
    int col=0;
    II3p_125=0.0;

    fTemp_matrix_nsd_x_nsd.MultABCT(fFe,fD1,fFe);

    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    //summation over the same term starts
                    for(int Abar=0;Abar<3;Abar++)
                    {
                        for(int Bbar=0;Bbar<3;Bbar++)
                        {
                         II3p_125(row,col)+=fTemp_matrix_nsd_x_nsd(m,l)*fdFYdS(Abar,Bbar)*fChie(i,Bbar)*fFp_inverse(B,Abar);
                    }
                    }
                    row++;
                }
            }
            col++;
        }
    }
}


void FSMicromorphic2_3DT:: Form_II3p_126()
{

    int row=0;
    int col=0;
    II3p_126=0.0;

    fTemp_matrix_nsd_x_nsd.MultABCT(fFe,fD1,fFe);

    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    //summation over the same term starts
                    for(int Abar=0;Abar<3;Abar++)
                    {
                        for(int Bbar=0;Bbar<3;Bbar++)
                        {
                         II3p_126(row,col)+=fTemp_matrix_nsd_x_nsd(m,l)*fdFYdS(Abar,Bbar)*fFe(i,Abar)*fChip_inverse(B,Bbar);
                    }
                    }
                    row++;
                }
            }
            col++;
        }
    }
}



void FSMicromorphic2_3DT:: Form_II3p_127()
{

    int row=0;
    int col=0;
    II3p_127=0.0;

    fTemp_matrix_nsd_x_nsd.MultABCT(fFe,fD1,fFe);

    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    //summation over the same term starts
                    for(int Abar=0;Abar<3;Abar++)
                    {
                        for(int Bbar=0;Bbar<3;Bbar++)
                        {
                         II3p_127(row,col)+=fTemp_matrix_nsd_x_nsd(m,l)*fdFYdS(Abar,Bbar)*fChie(i,Abar)*fFp_inverse(B,Bbar);
                    }
                    }
                    row++;
                }
            }
            col++;
        }
    }
}


void FSMicromorphic2_3DT:: Form_II3p_128()
{

    int row=0;
    int col=0;
    II3p_128=0.0;

    fTemp_matrix_nsd_x_nsd.MultABCT(fFe,fD1,fFe);

    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    //summation over the same term starts
                    for(int Abar=0;Abar<3;Abar++)
                    {
                        for(int Bbar=0;Bbar<3;Bbar++)
                        {
                         II3p_128(row,col)+=fTemp_matrix_nsd_x_nsd(m,l)*fdFYdS(Abar,Bbar)*fFe(i,Bbar)*fChip_inverse(B,Abar);
                    }
                    }
                    row++;
                }
            }
            col++;
        }
    }
}

void FSMicromorphic2_3DT:: Form_II3p_129()
{

    int row=0;
    int col=0;
    II3p_129=0.0;

    fTemp_matrix_nsd_x_nsd2.Transpose(fD1);
    fTemp_matrix_nsd_x_nsd.MultABCT(fFe,fTemp_matrix_nsd_x_nsd2,fFe);


    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    //summation over the same term starts
                    for(int Abar=0;Abar<3;Abar++)
                    {
                      II3p_129(row,col)+=fTemp_matrix_nsd_x_nsd(m,l)*fFe(i,Abar)*fFp_inverse(B,Abar);

                    }
                    row++;
                }
            }
            col++;
        }
    }
}


void FSMicromorphic2_3DT:: Form_II3p_130()
{

    int row=0;
    int col=0;
    II3p_130=0.0;

    fTemp_matrix_nsd_x_nsd2.Transpose(fD1);
    fTemp_matrix_nsd_x_nsd.MultABCT(fFe,fTemp_matrix_nsd_x_nsd2,fFe);

    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    //summation over the same term starts
                    for(int Abar=0;Abar<3;Abar++)
                    {
                      for(int Bbar=0;Bbar<3;Bbar++)
                      {
                          II3p_130(row,col)+=fTemp_matrix_nsd_x_nsd(m,l)*fdFYdS(Abar,Bbar)
                           *(fFe(i,Bbar)*fFp_inverse(B,Abar)+fFe(i,Abar)*fFp_inverse(B,Bbar));
                      }
                    }
                    row++;
                }
            }
            col++;
        }
    }
}



void FSMicromorphic2_3DT:: Form_II3p_131()
{

    int row=0;
    int col=0;
    II3p_131=0.0;

    fTemp_matrix_nsd_x_nsd2.Transpose(fD1);
    fTemp_matrix_nsd_x_nsd.MultABCT(fFe,fTemp_matrix_nsd_x_nsd2,fFe);

    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    //summation over the same term starts
                    for(int Abar=0;Abar<3;Abar++)
                    {
                         II3p_131(row,col)+=fTemp_matrix_nsd_x_nsd(m,l)*fChie(i,Abar)*fFp_inverse(B,Abar);

                    }
                    row++;
                }
            }
            col++;
        }
    }
}


void FSMicromorphic2_3DT:: Form_II3p_132()
{

    int row=0;
    int col=0;
    II3p_132=0.0;

    fTemp_matrix_nsd_x_nsd2.Transpose(fD1);
    fTemp_matrix_nsd_x_nsd.MultABCT(fFe,fTemp_matrix_nsd_x_nsd2,fFe);

    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    //summation over the same term starts
                    for(int Abar=0;Abar<3;Abar++)
                    {
                         II3p_132(row,col)+=fTemp_matrix_nsd_x_nsd(m,l)*fFe(i,Abar)*fChip_inverse(B,Abar);

                    }
                    row++;
                }
            }
            col++;
        }
    }
}


void FSMicromorphic2_3DT:: Form_II3p_133()
{

    int row=0;
    int col=0;
    II3p_133=0.0;

    fTemp_matrix_nsd_x_nsd2.Transpose(fD1);
    fTemp_matrix_nsd_x_nsd.MultABCT(fFe,fTemp_matrix_nsd_x_nsd2,fFe);

    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    //summation over the same term starts
                    for(int Abar=0;Abar<3;Abar++)
                    {
                        for(int Bbar=0;Bbar<3;Bbar++)
                        {
                         II3p_133(row,col)+=fTemp_matrix_nsd_x_nsd(m,l)*fdFYdS(Abar,Bbar)*fChie(i,Bbar)*fFp_inverse(B,Abar);
                    }
                    }
                    row++;
                }
            }
            col++;
        }
    }
}


void FSMicromorphic2_3DT:: Form_II3p_134()
{

    int row=0;
    int col=0;
    II3p_134=0.0;

    fTemp_matrix_nsd_x_nsd2.Transpose(fD1);
    fTemp_matrix_nsd_x_nsd.MultABCT(fFe,fTemp_matrix_nsd_x_nsd2,fFe);

    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    //summation over the same term starts
                    for(int Abar=0;Abar<3;Abar++)
                    {
                        for(int Bbar=0;Bbar<3;Bbar++)
                        {
                         II3p_134(row,col)+=fTemp_matrix_nsd_x_nsd(m,l)*fdFYdS(Abar,Bbar)*fFe(i,Abar)*fChip_inverse(B,Bbar);
                    }
                    }
                    row++;
                }
            }
            col++;
        }
    }
}



void FSMicromorphic2_3DT:: Form_II3p_135()
{

    int row=0;
    int col=0;
    II3p_135=0.0;

    fTemp_matrix_nsd_x_nsd2.Transpose(fD1);
    fTemp_matrix_nsd_x_nsd.MultABCT(fFe,fTemp_matrix_nsd_x_nsd2,fFe);

    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    //summation over the same term starts
                    for(int Abar=0;Abar<3;Abar++)
                    {
                        for(int Bbar=0;Bbar<3;Bbar++)
                        {
                         II3p_135(row,col)+=fTemp_matrix_nsd_x_nsd(m,l)*fdFYdS(Abar,Bbar)*fChie(i,Abar)*fFp_inverse(B,Bbar);
                    }
                    }
                    row++;
                }
            }
            col++;
        }
    }
}


void FSMicromorphic2_3DT:: Form_II3p_136()
{

    int row=0;
    int col=0;
    II3p_136=0.0;

    fTemp_matrix_nsd_x_nsd2.Transpose(fD1);
    fTemp_matrix_nsd_x_nsd.MultABCT(fFe,fTemp_matrix_nsd_x_nsd2,fFe);

    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    //summation over the same term starts
                    for(int Abar=0;Abar<3;Abar++)
                    {
                        for(int Bbar=0;Bbar<3;Bbar++)
                        {
                         II3p_136(row,col)+=fTemp_matrix_nsd_x_nsd(m,l)*fdFYdS(Abar,Bbar)*fFe(i,Bbar)*fChip_inverse(B,Abar);
                    }
                    }
                    row++;
                }
            }
            col++;
        }
    }
}




void FSMicromorphic2_3DT:: Form_II4e_1()
{
    int row=0;
    int col=0;

    II4e_1=0.0;

    fTemp_matrix_nsd_x_nsd.MultABCT(fFe,SIGMA_S,fFp_inverse);

    for(int A=0;A<3;A++)
    {
        for(int l=0;l<3;l++)
        {
            row=l*3;
            for(int m=0;m<3;m++)
            {
                II4e_1(row,col)+=fTemp_matrix_nsd_x_nsd(m,A);
                row++;
            }
            col++;
        }
    }
}


void FSMicromorphic2_3DT:: Form_II4p_2()
{
    int row=0;
    int col=0;

    II4p_2=0.0;

    fTemp_matrix_nsd_x_nsd.MultATBC(fdGdS_tr,fFp_n,fFp_inverse);
    fTemp_matrix_nsd_x_nsd2.MultABC(fFe,fCe_n_inverse,fTemp_matrix_nsd_x_nsd);
    fTemp_matrix_nsd_x_nsd.MultABCT(fFe,SIGMA_S,fTemp_matrix_nsd_x_nsd2);


    for(int M=0;M<3;M++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    //summation over the same term
                    for(int Abar=0;Abar<3;Abar++)
                    {
                        II4p_2(row,col)+=fTemp_matrix_nsd_x_nsd(m,l)*fFe(i,Abar)*fFp_inverse(M,Abar);
                    }
                    row++;
                }
            }
            col++;
        }
    }
}

void FSMicromorphic2_3DT:: Form_II4p_3()
{
    int row=0;
    int col=0;

    II4p_3=0.0;

    fTemp_matrix_nsd_x_nsd.MultATBC(fdGdS_tr,fFp_n,fFp_inverse);
    fTemp_matrix_nsd_x_nsd2.MultABC(fFe,fCe_n_inverse,fTemp_matrix_nsd_x_nsd);
    fTemp_matrix_nsd_x_nsd.MultABCT(fFe,SIGMA_S,fTemp_matrix_nsd_x_nsd2);


    for(int M=0;M<3;M++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    //summation over the same term
                    for(int Abar=0;Abar<3;Abar++)
                    {
                        for(int Bbar=0;Bbar<3;Bbar++)
                        {
                            II4p_3(row,col)+=fTemp_matrix_nsd_x_nsd(m,l)*fdFYdS(Abar,Bbar)*(fFe(i,Bbar)*fFp_inverse(M,Abar)+fFe(i,Abar)*fFp_inverse(M,Bbar));
                        }
                    }
                    row++;
                }
            }
            col++;
        }
    }
}

void FSMicromorphic2_3DT:: Form_II4p_4()
{
    int row=0;
    int col=0;

    II4p_4=0.0;

    fTemp_matrix_nsd_x_nsd.MultATBC(fdGdS_tr,fFp_n,fFp_inverse);
    fTemp_matrix_nsd_x_nsd2.MultABC(fFe,fCe_n_inverse,fTemp_matrix_nsd_x_nsd);
    fTemp_matrix_nsd_x_nsd.MultABCT(fFe,SIGMA_S,fTemp_matrix_nsd_x_nsd2);


    for(int M=0;M<3;M++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    //summation over the same term
                    for(int Abar=0;Abar<3;Abar++)
                    {
                        II4p_4(row,col)+=fTemp_matrix_nsd_x_nsd(m,l)*fChie(i,Abar)*fFp_inverse(M,Abar);
                    }
                    row++;
                }
            }
            col++;
        }
    }
}



void FSMicromorphic2_3DT:: Form_II4p_5()
{
    int row=0;
    int col=0;

    II4p_5=0.0;

    fTemp_matrix_nsd_x_nsd.MultATBC(fdGdS_tr,fFp_n,fFp_inverse);
    fTemp_matrix_nsd_x_nsd2.MultABC(fFe,fCe_n_inverse,fTemp_matrix_nsd_x_nsd);
    fTemp_matrix_nsd_x_nsd.MultABCT(fFe,SIGMA_S,fTemp_matrix_nsd_x_nsd2);


    for(int M=0;M<3;M++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    //summation over the same term
                    for(int Abar=0;Abar<3;Abar++)
                    {
                        for(int Bbar=0;Bbar<3;Bbar++)
                        {
                            II4p_5(row,col)+=fTemp_matrix_nsd_x_nsd(m,l)*fdFYdS(Abar,Bbar)*fChie(i,Bbar)*fFp_inverse(M,Abar);
                        }
                    }
                    row++;
                }
            }
            col++;
        }
    }
}



void FSMicromorphic2_3DT:: Form_II4p_6()
{
    int row=0;
    int col=0;

    II4p_6=0.0;

    fTemp_matrix_nsd_x_nsd.MultATBC(fdGdS_tr,fFp_n,fFp_inverse);
    fTemp_matrix_nsd_x_nsd2.MultABC(fFe,fCe_n_inverse,fTemp_matrix_nsd_x_nsd);
    fTemp_matrix_nsd_x_nsd.MultABCT(fFe,SIGMA_S,fTemp_matrix_nsd_x_nsd2);


    for(int M=0;M<3;M++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    //summation over the same term
                    for(int Abar=0;Abar<3;Abar++)
                    {
                        for(int Bbar=0;Bbar<3;Bbar++)
                        {
                            II4p_6(row,col)+=fTemp_matrix_nsd_x_nsd(m,l)*fdFYdS(Abar,Bbar)*fChie(i,Abar)*fFp_inverse(M,Bbar);
                        }
                    }
                    row++;
                }
            }
            col++;
        }
    }
}

void FSMicromorphic2_3DT:: Form_II4p_7()
{
    int row=0;
    int col=0;

    II4p_7=0.0;

    fTemp_matrix_nsd_x_nsd.MultATBC(fdGdS_tr,fFp_n,fFp_inverse);
    fTemp_matrix_nsd_x_nsd2.MultABC(fFe,fCe_n_inverse,fTemp_matrix_nsd_x_nsd);
    fTemp_matrix_nsd_x_nsd.MultABCT(fFe,SIGMA_S,fTemp_matrix_nsd_x_nsd2);


    for(int M=0;M<3;M++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    //summation over the same term
                    for(int Abar=0;Abar<3;Abar++)
                    {
                        II4p_7(row,col)+=fTemp_matrix_nsd_x_nsd(m,l)*fFe(i,Abar)*fChip_inverse(M,Abar);
                    }
                    row++;
                }
            }
            col++;
        }
    }
}


void FSMicromorphic2_3DT:: Form_II4p_8()
{
    int row=0;
    int col=0;

    II4p_8=0.0;

    fTemp_matrix_nsd_x_nsd.MultATBC(fdGdS_tr,fFp_n,fFp_inverse);
    fTemp_matrix_nsd_x_nsd2.MultABC(fFe,fCe_n_inverse,fTemp_matrix_nsd_x_nsd);
    fTemp_matrix_nsd_x_nsd.MultABCT(fFe,SIGMA_S,fTemp_matrix_nsd_x_nsd2);


    for(int M=0;M<3;M++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    //summation over the same term
                    for(int Abar=0;Abar<3;Abar++)
                    {
                        for(int Bbar=0;Bbar<3;Bbar++)
                        {
                            II4p_8(row,col)+=fTemp_matrix_nsd_x_nsd(m,l)*fdFYdS(Abar,Bbar)*fFe(i,Abar)*fChip_inverse(M,Bbar);
                        }
                    }
                    row++;
                }
            }
            col++;
        }
    }
}


void FSMicromorphic2_3DT:: Form_II4p_9()
{
    int row=0;
    int col=0;

    II4p_9=0.0;

    fTemp_matrix_nsd_x_nsd.MultATBC(fdGdS_tr,fFp_n,fFp_inverse);
    fTemp_matrix_nsd_x_nsd2.MultABC(fFe,fCe_n_inverse,fTemp_matrix_nsd_x_nsd);
    fTemp_matrix_nsd_x_nsd.MultABCT(fFe,SIGMA_S,fTemp_matrix_nsd_x_nsd2);


    for(int M=0;M<3;M++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    //summation over the same term
                    for(int Abar=0;Abar<3;Abar++)
                    {
                        for(int Bbar=0;Bbar<3;Bbar++)
                        {
                            II4p_9(row,col)+=fTemp_matrix_nsd_x_nsd(m,l)*fdFYdS(Abar,Bbar)*fFe(i,Bbar)*fChip_inverse(M,Abar);
                        }
                    }
                    row++;
                }
            }
            col++;
        }
    }
}



void FSMicromorphic2_3DT:: Form_II4p_10()
{

    int row=0;
    int col=0;
    II4p_10=0.0;

    fTemp_matrix_nsd_x_nsd.MultATBC(fdGdS_tr,fFp_n,fFp_inverse);
    fTemp_matrix_nsd_x_nsd2.MultABC(fFe,fCe_n_inverse,fTemp_matrix_nsd_x_nsd);
    fTemp_matrix_nsd_x_nsd.MultABCT(fFe,SIGMA_S,fTemp_matrix_nsd_x_nsd2);

    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    //summation over the same term starts
                    for(int Abar=0;Abar<3;Abar++)
                    {
                        II4p_10(row,col)+=fTemp_matrix_nsd_x_nsd(m,l)*fFe(i,Abar)*fFp_inverse(B,Abar);
                    }
                    row++;
                }
            }
            col++;
        }
    }


}

void FSMicromorphic2_3DT:: Form_II4p_11()
{

    int row=0;
    int col=0;
    II4p_11=0.0;


    fTemp_matrix_nsd_x_nsd.MultATBC(fdGdS_tr,fFp_n,fFp_inverse);
    fTemp_matrix_nsd_x_nsd2.MultABC(fFe,fCe_n_inverse,fTemp_matrix_nsd_x_nsd);
    fTemp_matrix_nsd_x_nsd.MultABCT(fFe,SIGMA_S,fTemp_matrix_nsd_x_nsd2);

    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    //summation over the same term starts
                    for(int Abar=0;Abar<3;Abar++)
                    {
                          for(int Bbar=0;Bbar<3;Bbar++)
                          {
                        II4p_11(row,col)+=fTemp_matrix_nsd_x_nsd(m,l)*fdFYchidSIGMA(Abar,Bbar)*(fFe(i,Bbar)*fFp_inverse(B,Abar)+fFe(i,Abar)*fFp_inverse(B,Bbar));
                       }
                    }
                    row++;
                }
            }
            col++;
        }
    }

}
void FSMicromorphic2_3DT:: Form_II4p_12()
{

    int row=0;
    int col=0;
    II4p_12=0.0;

    fTemp_matrix_nsd_x_nsd.MultATBC(fdGdS_tr,fFp_n,fFp_inverse);
    fTemp_matrix_nsd_x_nsd2.MultABC(fFe,fCe_n_inverse,fTemp_matrix_nsd_x_nsd);
    fTemp_matrix_nsd_x_nsd.MultABCT(fFe,SIGMA_S,fTemp_matrix_nsd_x_nsd2);

    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    //summation over the same term starts
                    for(int Abar=0;Abar<3;Abar++)
                    {
                        II4p_12(row,col)+=fTemp_matrix_nsd_x_nsd(m,l)*fChie(i,Abar)*fFp_inverse(B,Abar);
                    }
                    row++;
                }
            }
            col++;
        }
    }

}
void FSMicromorphic2_3DT:: Form_II4p_13()
{

    int row=0;
    int col=0;
    II4p_13=0.0;

    fTemp_matrix_nsd_x_nsd.MultATBC(fdGdS_tr,fFp_n,fFp_inverse);
    fTemp_matrix_nsd_x_nsd2.MultABC(fFe,fCe_n_inverse,fTemp_matrix_nsd_x_nsd);
    fTemp_matrix_nsd_x_nsd.MultABCT(fFe,SIGMA_S,fTemp_matrix_nsd_x_nsd2);

    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    //summation over the same term starts
                    for(int Abar=0;Abar<3;Abar++)
                    {
                        II4p_13(row,col)+=fTemp_matrix_nsd_x_nsd(m,l)*fFe(i,Abar)*fChip_inverse(B,Abar);
                    }
                    row++;
                }
            }
            col++;
        }
    }

}
void FSMicromorphic2_3DT:: Form_II4p_14()
{

    int row=0;
    int col=0;
    II4p_14=0.0;

    fTemp_matrix_nsd_x_nsd.MultATBC(fdGdS_tr,fFp_n,fFp_inverse);
    fTemp_matrix_nsd_x_nsd2.MultABC(fFe,fCe_n_inverse,fTemp_matrix_nsd_x_nsd);
    fTemp_matrix_nsd_x_nsd.MultABCT(fFe,SIGMA_S,fTemp_matrix_nsd_x_nsd2);

    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    //summation over the same term starts
                    for(int Abar=0;Abar<3;Abar++)
                    {
                          for(int Bbar=0;Bbar<3;Bbar++)
                          {
                        II4p_14(row,col)+=fTemp_matrix_nsd_x_nsd(m,l)*fdFYchidSIGMA(Abar,Bbar)*fChie(i,Bbar)*fFp_inverse(B,Abar);
                       }
                    }
                    row++;
                }
            }
            col++;
        }
    }
}

void FSMicromorphic2_3DT:: Form_II4p_15()
{

    int row=0;
    int col=0;
    II4p_15=0.0;

    fTemp_matrix_nsd_x_nsd.MultATBC(fdGdS_tr,fFp_n,fFp_inverse);
    fTemp_matrix_nsd_x_nsd2.MultABC(fFe,fCe_n_inverse,fTemp_matrix_nsd_x_nsd);
    fTemp_matrix_nsd_x_nsd.MultABCT(fFe,SIGMA_S,fTemp_matrix_nsd_x_nsd2);

    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    //summation over the same term starts
                    for(int Abar=0;Abar<3;Abar++)
                    {
                          for(int Bbar=0;Bbar<3;Bbar++)
                          {
                       II4p_15(row,col)+=fTemp_matrix_nsd_x_nsd(m,l)*fdFYchidSIGMA(Abar,Bbar)*fFe(i,Abar)*fChip_inverse(B,Bbar);
                       }
                    }
                    row++;
                }
            }
            col++;
        }
    }


}


void FSMicromorphic2_3DT:: Form_II4p_16()
{

    int row=0;
    int col=0;
    II4p_16=0.0;

    fTemp_matrix_nsd_x_nsd.MultATBC(fdGdS_tr,fFp_n,fFp_inverse);
    fTemp_matrix_nsd_x_nsd2.MultABC(fFe,fCe_n_inverse,fTemp_matrix_nsd_x_nsd);
    fTemp_matrix_nsd_x_nsd.MultABCT(fFe,SIGMA_S,fTemp_matrix_nsd_x_nsd2);

    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    //summation over the same term starts
                    for(int Abar=0;Abar<3;Abar++)
                    {
                          for(int Bbar=0;Bbar<3;Bbar++)
                          {
                        	  II4p_16(row,col)+=fTemp_matrix_nsd_x_nsd(m,l)*fdFYchidSIGMA(Abar,Bbar)*fChie(i,Abar)*fFp_inverse(B,Bbar);
                          }
                    }
                    row++;
                }
            }
            col++;
        }
    }
}



void FSMicromorphic2_3DT:: Form_II4p_17()
{

    int row=0;
    int col=0;
    II4p_17=0.0;

    fTemp_matrix_nsd_x_nsd.MultATBC(fdGdS_tr,fFp_n,fFp_inverse);
    fTemp_matrix_nsd_x_nsd2.MultABC(fFe,fCe_n_inverse,fTemp_matrix_nsd_x_nsd);
    fTemp_matrix_nsd_x_nsd.MultABCT(fFe,SIGMA_S,fTemp_matrix_nsd_x_nsd2);
    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    //summation over the same term starts
                    for(int Abar=0;Abar<3;Abar++)
                    {
                          for(int Bbar=0;Bbar<3;Bbar++)
                          {
                        	  II4p_17(row,col)+=fTemp_matrix_nsd_x_nsd(m,l)*fdFYchidSIGMA(Abar,Bbar)*fFe(i,Bbar)*fChip_inverse(B,Abar);
                          }
                    }
                    row++;
                }
            }
            col++;
        }
    }
}

/* Functions related the higher order couple stress tensor */




void FSMicromorphic2_3DT:: Form_Temp_tensor_for_II5Jp()
{
	fTemp_tensor_n_sd_x_n_sd_x_n_sd=0.0;

    for(int K=0;K<3;K++)
    {
        for(int m=0;m<3;m++)
        {
            for(int l =0;l<3;l++)
            {
                //summation
                for(int k=0;k<3;k++)
                {
                    for(int Kbar=0;Kbar<3;Kbar++)
                    {
                        for(int Lbar=0;Lbar<3;Lbar++)
                        {
                            for(int Mbar=0;Mbar<3;Mbar++)
                            {
                                fTemp_tensor_n_sd_x_n_sd_x_n_sd(K,l,m)+=fDeformation_Gradient_Inverse(K,k)*fFe(k,Kbar)*fFe(l,Lbar)*fMeKLM(Kbar,Lbar,Mbar)*fChie(m,Mbar);
                            }
                        }
                    }
                }
            }
        }
    }




}





void FSMicromorphic2_3DT:: Form_II5Jp_1()
{
    int row=0;
    int col=0;

    II5Jp_1=0.0;


    for(int M=0;M<3;M++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    for(int K=0;K<3;K++)
                    {
                        //summation over the same term
                        for(int Abar=0;Abar<3;Abar++)
                        {
                            II5Jp_1(row,col)+=fTemp_tensor_n_sd_x_n_sd_x_n_sd(K,l,m)*fFe(i,Abar)*fFp_inverse(M,Abar);
                        }
                        row++;
                    }
                }
            }
            col++;
        }
    }
}

void FSMicromorphic2_3DT:: Form_II5Jp_2()
{
    int row=0;
    int col=0;

    II5Jp_2=0.0;


    for(int M=0;M<3;M++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    for(int K=0;K<3;K++)
                    {
                        //summation over the same term
                        for(int Abar=0;Abar<3;Abar++)
                        {
                            for(int Bbar=0;Bbar<3;Bbar++)
                            {
                                II5Jp_2(row,col)+=fTemp_tensor_n_sd_x_n_sd_x_n_sd(K,l,m)*fdFYdS(Abar,Bbar)*(fFe(i,Bbar)*fFp_inverse(M,Abar)+fFe(i,Abar)*fFp_inverse(M,Bbar));
                            }
                        }
                        row++;
                    }
                }
            }
            col++;
        }
    }
}

void FSMicromorphic2_3DT:: Form_II5Jp_3()
{
    int row=0;
    int col=0;

    II5Jp_3=0.0;



    for(int M=0;M<3;M++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    for(int K=0;K<3;K++)
                    {
                        //summation over the same term
                        for(int Abar=0;Abar<3;Abar++)
                        {
                            II5Jp_3(row,col)+=fTemp_tensor_n_sd_x_n_sd_x_n_sd(K,l,m)*fChie(i,Abar)*fFp_inverse(M,Abar);
                        }
                        row++;
                    }
                }
            }
            col++;
        }
    }
}



void FSMicromorphic2_3DT:: Form_II5Jp_4()
{
    int row=0;
    int col=0;

    II5Jp_4=0.0;



    for(int M=0;M<3;M++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    for(int K=0;K<3;K++)
                    {
                        //summation over the same term
                        for(int Abar=0;Abar<3;Abar++)
                        {
                            for(int Bbar=0;Bbar<3;Bbar++)
                            {
                                II5Jp_4(row,col)+=fTemp_tensor_n_sd_x_n_sd_x_n_sd(K,l,m)*fdFYdS(Abar,Bbar)*fChie(i,Bbar)*fFp_inverse(M,Abar);
                            }
                        }
                    row++;
                    }
                }
            }
            col++;
        }
    }
}



void FSMicromorphic2_3DT:: Form_II5Jp_5()
{
    int row=0;
    int col=0;

    II5Jp_5=0.0;


    for(int M=0;M<3;M++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    for(int K=0;K<3;K++)
                    {
                        //summation over the same term
                        for(int Abar=0;Abar<3;Abar++)
                        {
                            for(int Bbar=0;Bbar<3;Bbar++)
                            {
                                II5Jp_5(row,col)+=fTemp_tensor_n_sd_x_n_sd_x_n_sd(K,l,m)*fdFYdS(Abar,Bbar)*fChie(i,Abar)*fFp_inverse(M,Bbar);
                            }
                        }
                        row++;
                    }
                }
            }
            col++;
        }
    }
}

void FSMicromorphic2_3DT::Form_II5Jp_6()
{
    int row=0;
    int col=0;

    II5Jp_6=0.0;




    for(int M=0;M<3;M++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    for(int K=0;K<3;K++)
                    {
                        //summation over the same term
                        for(int Abar=0;Abar<3;Abar++)
                        {
                            II5Jp_6(row,col)+=fTemp_tensor_n_sd_x_n_sd_x_n_sd(K,l,m)*fFe(i,Abar)*fChip_inverse(M,Abar);
                        }
                        row++;
                    }
                }
            }
            col++;
        }
    }
}


void FSMicromorphic2_3DT:: Form_II5Jp_7()
{
    int row=0;
    int col=0;

    II5Jp_7=0.0;



    for(int M=0;M<3;M++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    for(int K=0;K<3;K++)
                    {
                        //summation over the same term
                        for(int Abar=0;Abar<3;Abar++)
                        {
                            for(int Bbar=0;Bbar<3;Bbar++)
                            {
                                II5Jp_7(row,col)+=fTemp_tensor_n_sd_x_n_sd_x_n_sd(K,l,m)*fdFYdS(Abar,Bbar)*fFe(i,Abar)*fChip_inverse(M,Bbar);
                            }
                        }
                        row++;
                    }
                }
            }
            col++;
        }
    }
}


void FSMicromorphic2_3DT:: Form_II5Jp_8()
{
    int row=0;
    int col=0;

    II5Jp_8=0.0;



    for(int M=0;M<3;M++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    for(int K=0;K<3;K++)
                    {
                        //summation over the same term
                        for(int Abar=0;Abar<3;Abar++)
                        {
                            for(int Bbar=0;Bbar<3;Bbar++)
                            {
                                II5Jp_8(row,col)+=fTemp_tensor_n_sd_x_n_sd_x_n_sd(K,l,m)*fdFYdS(Abar,Bbar)*fFe(i,Bbar)*fChip_inverse(M,Abar);
                            }
                        }
                        row++;
                    }
                }
            }
            col++;
        }
    }
}



void FSMicromorphic2_3DT:: Form_II5Jp_9()
{

    int row=0;
    int col=0;
    II5Jp_9=0.0;



    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    for(int K=0;K<3;K++)
                    {
                        //summation over the same term starts
                        for(int Abar=0;Abar<3;Abar++)
                        {
                            II5Jp_9(row,col)+=fTemp_tensor_n_sd_x_n_sd_x_n_sd(K,l,m)*fFe(i,Abar)*fFp_inverse(B,Abar);
                        }
                        row++;
                    }
                }
            }
            col++;
        }
    }


}

void FSMicromorphic2_3DT:: Form_II5Jp_10()
{

    int row=0;
    int col=0;
    II5Jp_10=0.0;



    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    for(int K=0;K<3;K++)
                    {
                        //summation over the same term starts
                        for(int Abar=0;Abar<3;Abar++)
                        {
                            for(int Bbar=0;Bbar<3;Bbar++)
                            {
                                II5Jp_10(row,col)+=fTemp_tensor_n_sd_x_n_sd_x_n_sd(K,l,m)*fdFYchidSIGMA(Abar,Bbar)*(fFe(i,Bbar)*fFp_inverse(B,Abar)+fFe(i,Abar)*fFp_inverse(B,Bbar));
                            }
                        }
                        row++;
                    }
                }
            }
            col++;
        }
    }

}
void FSMicromorphic2_3DT::Form_II5Jp_11()
{

    int row=0;
    int col=0;
    II5Jp_11=0.0;



    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    for(int K=0;K<3;K++)
                    {
                        //summation over the same term starts
                        for(int Abar=0;Abar<3;Abar++)
                        {
                            II5Jp_11(row,col)+=fTemp_tensor_n_sd_x_n_sd_x_n_sd(K,l,m)*fChie(i,Abar)*fFp_inverse(B,Abar);
                        }
                        row++;
                    }
                }
            }
            col++;
        }
    }

}
void FSMicromorphic2_3DT::Form_II5Jp_12()
{

    int row=0;
    int col=0;
    II5Jp_12=0.0;



    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    for(int K=0;K<3;K++)
                    {
                        //summation over the same term starts
                        for(int Abar=0;Abar<3;Abar++)
                        {
                            II5Jp_12(row,col)+=fTemp_tensor_n_sd_x_n_sd_x_n_sd(K,l,m)*fFe(i,Abar)*fChip_inverse(B,Abar);
                        }
                        row++;
                    }
                }
            }
            col++;
        }
    }

}
void FSMicromorphic2_3DT:: Form_II5Jp_13()
{

    int row=0;
    int col=0;
    II5Jp_13=0.0;



    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    for(int K=0;K<3;K++)
                    {
                        //summation over the same term starts
                        for(int Abar=0;Abar<3;Abar++)
                        {
                            for(int Bbar=0;Bbar<3;Bbar++)
                            {
                                II5Jp_13(row,col)+=fTemp_tensor_n_sd_x_n_sd_x_n_sd(K,l,m)*fdFYchidSIGMA(Abar,Bbar)*fChie(i,Bbar)*fFp_inverse(B,Abar);
                            }
                        }
                        row++;
                    }
                }
            }
            col++;
        }
    }
}

void FSMicromorphic2_3DT:: Form_II5Jp_14()
{

    int row=0;
    int col=0;
    II5Jp_14=0.0;



    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    for(int K=0;K<3;K++)
                    {
                        //summation over the same term starts
                        for(int Abar=0;Abar<3;Abar++)
                        {
                            for(int Bbar=0;Bbar<3;Bbar++)
                            {
                                II5Jp_14(row,col)+=fTemp_tensor_n_sd_x_n_sd_x_n_sd(K,l,m)*fdFYchidSIGMA(Abar,Bbar)*fFe(i,Abar)*fChip_inverse(B,Bbar);
                            }
                        }
                        row++;
                    }
                }
            }
            col++;
        }
    }


}


void FSMicromorphic2_3DT:: Form_II5Jp_15()
{

    int row=0;
    int col=0;
    II5Jp_15=0.0;



    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    for(int K=0;K<3;K++)
                    {
                        //summation over the same term starts
                        for(int Abar=0;Abar<3;Abar++)
                        {
                            for(int Bbar=0;Bbar<3;Bbar++)
                            {
                                II5Jp_15(row,col)+=fTemp_tensor_n_sd_x_n_sd_x_n_sd(K,l,m)*fdFYchidSIGMA(Abar,Bbar)*fChie(i,Abar)*fFp_inverse(B,Bbar);
                            }
                        }
                        row++;
                    }
                }
            }
            col++;
        }
    }
}



void FSMicromorphic2_3DT:: Form_II5Jp_16()
{

    int row=0;
    int col=0;
    II5Jp_16=0.0;


    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    for(int K=0;K<3;K++)
                    {
                        //summation over the same term starts
                        for(int Abar=0;Abar<3;Abar++)
                        {
                            for(int Bbar=0;Bbar<3;Bbar++)
                            {
                                II5Jp_16(row,col)+=fTemp_tensor_n_sd_x_n_sd_x_n_sd(K,l,m)*fdFYchidSIGMA(Abar,Bbar)*fFe(i,Bbar)*fChip_inverse(B,Abar);
                            }
                        }
                        row++;
                    }
                }
            }
            col++;
        }
    }
}


void FSMicromorphic2_3DT:: Form_II6e_1()
{
    int row=0;
    int col=0;
    II6e_1=0.0;
    //fTemp_tensor_n_sd_x_n_sd_x_n_sd=0.0;

    for(int T=0;T<3;T++)
    {
    	for(int r=0;r<3;r++)
    	{
    		row=0;
    			for(int l=0;l<3;l++)
    			{
    				for(int m=0;m<3;m++)
    				{
    		    		for(int K=0;K<3;K++)
    		    		{
    		    			//summation
                            for(int Kbar=0;Kbar<3;Kbar++)
                            {
                                for(int Lbar=0;Lbar<3;Lbar++)
                                {
                                	for(int Mbar=0;Mbar<3;Mbar++)
                                	{
                                    	for(int k=0;k<3;k++)
                                    	{
                                		II6e_1(row,col)+=fDeformation_Gradient_Inverse(K,r)*fDeformation_Gradient_Inverse(T,k)*fFe(k,Kbar)*fFe(l,Lbar)*fMeKLM(Kbar,Lbar,Mbar)*fChie(m,Mbar);
                                    	}
                                	}
                                }
                            }
    		    			row++;
    		    		}
    				}
    			}
    			col++;
    		}
    	}



//    for(int k=0;k<3;k++)
//    {
//        for(int m=0;m<3;m++)
//        {
//            for(int l =0;l<3;l++)
//            {
//
//            	//summation
//            	for(int Kbar=0;Kbar<3;Kbar++)
//            	{
//            		for(int Lbar=0;Lbar<3;Lbar++)
//            		{
//            			for(int Mbar=0;Mbar<3;Mbar++)
//            			{
//            				fTemp_tensor_n_sd_x_n_sd_x_n_sd(k,l,m)+=fFe(k,Kbar)*fFe(l,Lbar)*fMeKLM(Kbar,Lbar,Mbar)*fChie(m,Mbar);
//            			}
//            		}
//            	}
//
//            }
//
//        }
//
//    }
//
//
//    for(int K=0;K<3;K++)
//    {
//        for(int k=0;k<3;k++)
//        {
//            row=K;
//            for(int l=0;l<3;l++)
//            {
//                for(int m=0;m<3;m++)
//                {
//                	II6e_1(row,col)+=fTemp_tensor_n_sd_x_n_sd_x_n_sd(k,l,m);
//                	row=row+3;
//                }
//            }
//            col++;
//        }
//    }


}



void FSMicromorphic2_3DT:: Form_Temp_tensor_for_II7()
{
	fTemp_tensor_n_sd_x_n_sd_x_n_sd=0.0;


    fTemp_matrix_nsd_x_nsd.MultATBC(fdGdS_tr,fFp_n,fFp_inverse);
    fTemp_matrix_nsd_x_nsd2.MultABC(fFe,fCe_n_inverse,fTemp_matrix_nsd_x_nsd);
    fTemp_matrix_nsd_x_nsd.MultAB(fDeformation_Gradient_Inverse,fTemp_matrix_nsd_x_nsd2);


    for(int K=0;K<3;K++)
    {
    	for(int m=0;m<3;m++)
    	{
    		for(int l =0;l<3;l++)
    		{
    			//summation
    			for(int Kbar=0;Kbar<3;Kbar++)
    			{
    				for(int Lbar=0;Lbar<3;Lbar++)
    				{
    					for(int Mbar=0;Mbar<3;Mbar++)
    					{
    						fTemp_tensor_n_sd_x_n_sd_x_n_sd(K,l,m)+=fTemp_matrix_nsd_x_nsd(K,Kbar)*fFe(l,Lbar)*fMeKLM(Kbar,Lbar,Mbar)*fChie(m,Mbar);
    					}
    				}
    			}
    		}
    	}
    }



}




void FSMicromorphic2_3DT:: Form_II7e_1()
{
    int row=0;
    int col=0;
    II7e_1=0.0;

    for(int A=0;A<3;A++)
    {
        for(int k=0;k<3;k++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    for(int K=0;K<3;K++)
                    {
                        //summation over the same term starts
                        for(int Kbar=0;Kbar<3;Kbar++)
                        {
                            for(int Lbar=0;Lbar<3;Lbar++)
                            {
                            	for(int Mbar=0;Mbar<3;Mbar++)
                            	{
                            		II7e_1(row,col)+=fDeformation_Gradient_Inverse(K,k)*fFp_inverse(A,Kbar)*fFe(l,Lbar)*fMeKLM(Kbar,Lbar,Mbar)*fChie(m,Mbar);
                            	}
                            }
                        }
                        row++;
                    }
                }
            }
            col++;
        }
    }



}


void FSMicromorphic2_3DT:: Form_II7p_1()
{
    int row=0;
    int col=0;

    II7p_1=0.0;


    for(int M=0;M<3;M++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    for(int K=0;K<3;K++)
                    {
                        //summation over the same term
                        for(int Abar=0;Abar<3;Abar++)
                        {
                            II7p_1(row,col)+=fTemp_tensor_n_sd_x_n_sd_x_n_sd(K,l,m)*fFe(i,Abar)*fFp_inverse(M,Abar);
                        }
                        row++;
                    }
                }
            }
            col++;
        }
    }
}

void FSMicromorphic2_3DT:: Form_II7p_2()
{
    int row=0;
    int col=0;

    II7p_2=0.0;


    for(int M=0;M<3;M++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    for(int K=0;K<3;K++)
                    {
                        //summation over the same term
                        for(int Abar=0;Abar<3;Abar++)
                        {
                            for(int Bbar=0;Bbar<3;Bbar++)
                            {
                                II7p_2(row,col)+=fTemp_tensor_n_sd_x_n_sd_x_n_sd(K,l,m)*fdFYdS(Abar,Bbar)*(fFe(i,Bbar)*fFp_inverse(M,Abar)+fFe(i,Abar)*fFp_inverse(M,Bbar));
                            }
                        }
                        row++;
                    }
                }
            }
            col++;
        }
    }
}



void FSMicromorphic2_3DT:: Form_II7p_3()
{
    int row=0;
    int col=0;

    II7p_3=0.0;

     for(int M=0;M<3;M++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    for(int K=0;K<3;K++)
                    {
                        //summation over the same term
                        for(int Abar=0;Abar<3;Abar++)
                        {
                            II7p_3(row,col)+=fTemp_tensor_n_sd_x_n_sd_x_n_sd(K,l,m)*fChie(i,Abar)*fFp_inverse(M,Abar);
                        }
                        row++;
                    }
                }
            }
            col++;
        }
    }
}



void FSMicromorphic2_3DT:: Form_II7p_4()
{
    int row=0;
    int col=0;

    II7p_4=0.0;




    for(int M=0;M<3;M++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    for(int K=0;K<3;K++)
                    {
                        //summation over the same term
                        for(int Abar=0;Abar<3;Abar++)
                        {
                            for(int Bbar=0;Bbar<3;Bbar++)
                            {
                                II7p_4(row,col)+=fTemp_tensor_n_sd_x_n_sd_x_n_sd(K,l,m)*fdFYdS(Abar,Bbar)*fChie(i,Bbar)*fFp_inverse(M,Abar);
                            }
                        }
                    row++;
                    }
                }
            }
            col++;
        }
    }
}



void FSMicromorphic2_3DT:: Form_II7p_5()
{
    int row=0;
    int col=0;

    II7p_5=0.0;

    for(int M=0;M<3;M++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    for(int K=0;K<3;K++)
                    {
                        //summation over the same term
                        for(int Abar=0;Abar<3;Abar++)
                        {
                            for(int Bbar=0;Bbar<3;Bbar++)
                            {
                                II7p_5(row,col)+=fTemp_tensor_n_sd_x_n_sd_x_n_sd(K,l,m)*fdFYdS(Abar,Bbar)*fChie(i,Abar)*fFp_inverse(M,Bbar);
                            }
                        }
                        row++;
                    }
                }
            }
            col++;
        }
    }
}

void FSMicromorphic2_3DT::Form_II7p_6()
{
    int row=0;
    int col=0;

    II7p_6=0.0;

     for(int M=0;M<3;M++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    for(int K=0;K<3;K++)
                    {
                        //summation over the same term
                        for(int Abar=0;Abar<3;Abar++)
                        {
                            II7p_6(row,col)+=fTemp_tensor_n_sd_x_n_sd_x_n_sd(K,l,m)*fFe(i,Abar)*fChip_inverse(M,Abar);
                        }
                        row++;
                    }
                }
            }
            col++;
        }
    }
}


void FSMicromorphic2_3DT:: Form_II7p_7()
{
    int row=0;
    int col=0;

    II7p_7=0.0;


    for(int M=0;M<3;M++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    for(int K=0;K<3;K++)
                    {
                        //summation over the same term
                        for(int Abar=0;Abar<3;Abar++)
                        {
                            for(int Bbar=0;Bbar<3;Bbar++)
                            {
                                II7p_7(row,col)+=fTemp_tensor_n_sd_x_n_sd_x_n_sd(K,l,m)*fdFYdS(Abar,Bbar)*fFe(i,Abar)*fChip_inverse(M,Bbar);
                            }
                        }
                        row++;
                    }
                }
            }
            col++;
        }
    }
}


void FSMicromorphic2_3DT:: Form_II7p_8()
{
    int row=0;
    int col=0;

    II7p_8=0.0;


    for(int M=0;M<3;M++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    for(int K=0;K<3;K++)
                    {
                        //summation over the same term
                        for(int Abar=0;Abar<3;Abar++)
                        {
                            for(int Bbar=0;Bbar<3;Bbar++)
                            {
                                II7p_8(row,col)+=fTemp_tensor_n_sd_x_n_sd_x_n_sd(K,l,m)*fdFYdS(Abar,Bbar)*fFe(i,Bbar)*fChip_inverse(M,Abar);
                            }
                        }
                        row++;
                    }
                }
            }
            col++;
        }
    }
}



void FSMicromorphic2_3DT:: Form_II7p_9()
{

    int row=0;
    int col=0;
    II7p_9=0.0;



    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    for(int K=0;K<3;K++)
                    {
                        //summation over the same term starts
                        for(int Abar=0;Abar<3;Abar++)
                        {
                            II7p_9(row,col)+=fTemp_tensor_n_sd_x_n_sd_x_n_sd(K,l,m)*fFe(i,Abar)*fFp_inverse(B,Abar);
                        }
                        row++;
                    }
                }
            }
            col++;
        }
    }


}

void FSMicromorphic2_3DT:: Form_II7p_10()
{

    int row=0;
    int col=0;
    II7p_10=0.0;

    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    for(int K=0;K<3;K++)
                    {
                        //summation over the same term starts
                        for(int Abar=0;Abar<3;Abar++)
                        {
                            for(int Bbar=0;Bbar<3;Bbar++)
                            {
                                II7p_10(row,col)+=fTemp_tensor_n_sd_x_n_sd_x_n_sd(K,l,m)*fdFYchidSIGMA(Abar,Bbar)*(fFe(i,Bbar)*fFp_inverse(B,Abar)+fFe(i,Abar)*fFp_inverse(B,Bbar));
                            }
                        }
                        row++;
                    }
                }
            }
            col++;
        }
    }

}
void FSMicromorphic2_3DT::Form_II7p_11()
{

    int row=0;
    int col=0;
    II7p_11=0.0;

    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    for(int K=0;K<3;K++)
                    {
                        //summation over the same term starts
                        for(int Abar=0;Abar<3;Abar++)
                        {
                            II7p_11(row,col)+=fTemp_tensor_n_sd_x_n_sd_x_n_sd(K,l,m)*fChie(i,Abar)*fFp_inverse(B,Abar);
                        }
                        row++;
                    }
                }
            }
            col++;
        }
    }

}
void FSMicromorphic2_3DT::Form_II7p_12()
{

    int row=0;
    int col=0;
    II7p_12=0.0;


    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    for(int K=0;K<3;K++)
                    {
                        //summation over the same term starts
                        for(int Abar=0;Abar<3;Abar++)
                        {
                            II7p_12(row,col)+=fTemp_tensor_n_sd_x_n_sd_x_n_sd(K,l,m)*fFe(i,Abar)*fChip_inverse(B,Abar);
                        }
                        row++;
                    }
                }
            }
            col++;
        }
    }

}
void FSMicromorphic2_3DT:: Form_II7p_13()
{

    int row=0;
    int col=0;
    II7p_13=0.0;



    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    for(int K=0;K<3;K++)
                    {
                        //summation over the same term starts
                        for(int Abar=0;Abar<3;Abar++)
                        {
                            for(int Bbar=0;Bbar<3;Bbar++)
                            {
                                II7p_13(row,col)+=fTemp_tensor_n_sd_x_n_sd_x_n_sd(K,l,m)*fdFYchidSIGMA(Abar,Bbar)*fChie(i,Bbar)*fFp_inverse(B,Abar);
                            }
                        }
                        row++;
                    }
                }
            }
            col++;
        }
    }
}

void FSMicromorphic2_3DT:: Form_II7p_14()
{

    int row=0;
    int col=0;
    II7p_14=0.0;


    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    for(int K=0;K<3;K++)
                    {
                        //summation over the same term starts
                        for(int Abar=0;Abar<3;Abar++)
                        {
                            for(int Bbar=0;Bbar<3;Bbar++)
                            {
                                II7p_14(row,col)+=fTemp_tensor_n_sd_x_n_sd_x_n_sd(K,l,m)*fdFYchidSIGMA(Abar,Bbar)*fFe(i,Abar)*fChip_inverse(B,Bbar);
                            }
                        }
                        row++;
                    }
                }
            }
            col++;
        }
    }


}


void FSMicromorphic2_3DT:: Form_II7p_15()
{

    int row=0;
    int col=0;
    II7p_15=0.0;


    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    for(int K=0;K<3;K++)
                    {
                        //summation over the same term starts
                        for(int Abar=0;Abar<3;Abar++)
                        {
                            for(int Bbar=0;Bbar<3;Bbar++)
                            {
                                II7p_15(row,col)+=fTemp_tensor_n_sd_x_n_sd_x_n_sd(K,l,m)*fdFYchidSIGMA(Abar,Bbar)*fChie(i,Abar)*fFp_inverse(B,Bbar);
                            }
                        }
                        row++;
                    }
                }
            }
            col++;
        }
    }
}



void FSMicromorphic2_3DT:: Form_II7p_16()
{

    int row=0;
    int col=0;
    II7p_16=0.0;


    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    for(int K=0;K<3;K++)
                    {
                        //summation over the same term starts
                        for(int Abar=0;Abar<3;Abar++)
                        {
                            for(int Bbar=0;Bbar<3;Bbar++)
                            {
                                II7p_16(row,col)+=fTemp_tensor_n_sd_x_n_sd_x_n_sd(K,l,m)*fdFYchidSIGMA(Abar,Bbar)*fFe(i,Bbar)*fChip_inverse(B,Abar);
                            }
                        }
                        row++;
                    }
                }
            }
            col++;
        }
    }




}








void FSMicromorphic2_3DT:: Form_II8e_1()
{
    int row=0;
    int col=0;

    II8e_1=0.0;

    for(int A=0;A<3;A++)
    {
        for(int l=0;l<3;l++)
        {
            row=l*9;

                for(int m=0;m<3;m++)
                {
                    for(int K=0;K<3;K++)
                    {
                        //summation over the same term starts
                        for(int Kbar=0;Kbar<3;Kbar++)
                        {
                            for(int Lbar=0;Lbar<3;Lbar++)
                            {
                            	for(int Mbar=0;Mbar<3;Mbar++)
                            	{
                            		for(int k=0;k<3;k++)
                            		{
                            			II8e_1(row,col)+=fDeformation_Gradient_Inverse(K,k)*fFe(k,Kbar)*fFp_inverse(A,Lbar)*fMeKLM(Kbar,Lbar,Mbar)*fChie(m,Mbar);
                            		}
                            	}
                            }
                        }
                        row++;
                    }
                }

            col++;
        }
    }



}








void FSMicromorphic2_3DT:: Form_Temp_tensor_for_II8()
{
	fTemp_tensor_n_sd_x_n_sd_x_n_sd=0.0;


    fTemp_matrix_nsd_x_nsd.MultATBC(fdGdS_tr,fFp_n,fFp_inverse);
    fTemp_matrix_nsd_x_nsd2.MultABC(fFe,fCe_n_inverse,fTemp_matrix_nsd_x_nsd);


    for(int K=0;K<3;K++)
    {
    	for(int m=0;m<3;m++)
    	{
    		for(int l =0;l<3;l++)
    		{
    			//summation
    			for(int Kbar=0;Kbar<3;Kbar++)
    			{
    				for(int Lbar=0;Lbar<3;Lbar++)
    				{
    					for(int Mbar=0;Mbar<3;Mbar++)
    					{
    						for(int k=0;k<3;k++)
    						{
    							fTemp_tensor_n_sd_x_n_sd_x_n_sd(K,l,m)+=fDeformation_Gradient_Inverse(K,k)*fFe(k,Kbar)*fTemp_matrix_nsd_x_nsd2(l,Lbar)*fMeKLM(Kbar,Lbar,Mbar)*fChie(m,Mbar);
    						}
    					}
    				}
    			}
    		}
    	}
    }



}





void FSMicromorphic2_3DT:: Form_II8p_1()
{
    int row=0;
    int col=0;

    II8p_1=0.0;


    for(int M=0;M<3;M++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    for(int K=0;K<3;K++)
                    {
                        //summation over the same term
                        for(int Abar=0;Abar<3;Abar++)
                        {
                            II8p_1(row,col)+=fTemp_tensor_n_sd_x_n_sd_x_n_sd(K,l,m)*fFe(i,Abar)*fFp_inverse(M,Abar);
                        }
                        row++;
                    }
                }
            }
            col++;
        }
    }
}

void FSMicromorphic2_3DT:: Form_II8p_2()
{
    int row=0;
    int col=0;

    II8p_2=0.0;


    for(int M=0;M<3;M++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    for(int K=0;K<3;K++)
                    {
                        //summation over the same term
                        for(int Abar=0;Abar<3;Abar++)
                        {
                            for(int Bbar=0;Bbar<3;Bbar++)
                            {
                                II8p_2(row,col)+=fTemp_tensor_n_sd_x_n_sd_x_n_sd(K,l,m)*fdFYdS(Abar,Bbar)*(fFe(i,Bbar)*fFp_inverse(M,Abar)+fFe(i,Abar)*fFp_inverse(M,Bbar));
                            }
                        }
                        row++;
                    }
                }
            }
            col++;
        }
    }
}

void FSMicromorphic2_3DT:: Form_II8p_3()
{
    int row=0;
    int col=0;

    II8p_3=0.0;

     for(int M=0;M<3;M++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    for(int K=0;K<3;K++)
                    {
                        //summation over the same term
                        for(int Abar=0;Abar<3;Abar++)
                        {
                            II8p_3(row,col)+=fTemp_tensor_n_sd_x_n_sd_x_n_sd(K,l,m)*fChie(i,Abar)*fFp_inverse(M,Abar);
                        }
                        row++;
                    }
                }
            }
            col++;
        }
    }
}



void FSMicromorphic2_3DT:: Form_II8p_4()
{
    int row=0;
    int col=0;

    II8p_4=0.0;




    for(int M=0;M<3;M++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    for(int K=0;K<3;K++)
                    {
                        //summation over the same term
                        for(int Abar=0;Abar<3;Abar++)
                        {
                            for(int Bbar=0;Bbar<3;Bbar++)
                            {
                                II8p_4(row,col)+=fTemp_tensor_n_sd_x_n_sd_x_n_sd(K,l,m)*fdFYdS(Abar,Bbar)*fChie(i,Bbar)*fFp_inverse(M,Abar);
                            }
                        }
                    row++;
                    }
                }
            }
            col++;
        }
    }
}



void FSMicromorphic2_3DT:: Form_II8p_5()
{
    int row=0;
    int col=0;

    II8p_5=0.0;



    for(int M=0;M<3;M++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    for(int K=0;K<3;K++)
                    {
                        //summation over the same term
                        for(int Abar=0;Abar<3;Abar++)
                        {
                            for(int Bbar=0;Bbar<3;Bbar++)
                            {
                                II8p_5(row,col)+=fTemp_tensor_n_sd_x_n_sd_x_n_sd(K,l,m)*fdFYdS(Abar,Bbar)*fChie(i,Abar)*fFp_inverse(M,Bbar);
                            }
                        }
                        row++;
                    }
                }
            }
            col++;
        }
    }
}

void FSMicromorphic2_3DT::Form_II8p_6()
{
    int row=0;
    int col=0;

    II8p_6=0.0;

     for(int M=0;M<3;M++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    for(int K=0;K<3;K++)
                    {
                        //summation over the same term
                        for(int Abar=0;Abar<3;Abar++)
                        {
                            II8p_6(row,col)+=fTemp_tensor_n_sd_x_n_sd_x_n_sd(K,l,m)*fFe(i,Abar)*fChip_inverse(M,Abar);
                        }
                        row++;
                    }
                }
            }
            col++;
        }
    }
}


void FSMicromorphic2_3DT:: Form_II8p_7()
{
    int row=0;
    int col=0;

    II8p_7=0.0;


    for(int M=0;M<3;M++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    for(int K=0;K<3;K++)
                    {
                        //summation over the same term
                        for(int Abar=0;Abar<3;Abar++)
                        {
                            for(int Bbar=0;Bbar<3;Bbar++)
                            {
                                II8p_7(row,col)+=fTemp_tensor_n_sd_x_n_sd_x_n_sd(K,l,m)*fdFYdS(Abar,Bbar)*fFe(i,Abar)*fChip_inverse(M,Bbar);
                            }
                        }
                        row++;
                    }
                }
            }
            col++;
        }
    }
}


void FSMicromorphic2_3DT:: Form_II8p_8()
{
    int row=0;
    int col=0;

    II8p_8=0.0;


    for(int M=0;M<3;M++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    for(int K=0;K<3;K++)
                    {
                        //summation over the same term
                        for(int Abar=0;Abar<3;Abar++)
                        {
                            for(int Bbar=0;Bbar<3;Bbar++)
                            {
                                II8p_8(row,col)+=fTemp_tensor_n_sd_x_n_sd_x_n_sd(K,l,m)*fdFYdS(Abar,Bbar)*fFe(i,Bbar)*fChip_inverse(M,Abar);
                            }
                        }
                        row++;
                    }
                }
            }
            col++;
        }
    }
}



void FSMicromorphic2_3DT:: Form_II8p_9()
{

    int row=0;
    int col=0;
    II8p_9=0.0;



    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    for(int K=0;K<3;K++)
                    {
                        //summation over the same term starts
                        for(int Abar=0;Abar<3;Abar++)
                        {
                            II8p_9(row,col)+=fTemp_tensor_n_sd_x_n_sd_x_n_sd(K,l,m)*fFe(i,Abar)*fFp_inverse(B,Abar);
                        }
                        row++;
                    }
                }
            }
            col++;
        }
    }


}

void FSMicromorphic2_3DT:: Form_II8p_10()
{

    int row=0;
    int col=0;
    II8p_10=0.0;



    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    for(int K=0;K<3;K++)
                    {
                        //summation over the same term starts
                        for(int Abar=0;Abar<3;Abar++)
                        {
                            for(int Bbar=0;Bbar<3;Bbar++)
                            {
                                II8p_10(row,col)+=fTemp_tensor_n_sd_x_n_sd_x_n_sd(K,l,m)*fdFYchidSIGMA(Abar,Bbar)*(fFe(i,Bbar)*fFp_inverse(B,Abar)+fFe(i,Abar)*fFp_inverse(B,Bbar));
                            }
                        }
                        row++;
                    }
                }
            }
            col++;
        }
    }

}
void FSMicromorphic2_3DT::Form_II8p_11()
{

    int row=0;
    int col=0;
    II8p_11=0.0;

    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    for(int K=0;K<3;K++)
                    {
                        //summation over the same term starts
                        for(int Abar=0;Abar<3;Abar++)
                        {
                            II8p_11(row,col)+=fTemp_tensor_n_sd_x_n_sd_x_n_sd(K,l,m)*fChie(i,Abar)*fFp_inverse(B,Abar);
                        }
                        row++;
                    }
                }
            }
            col++;
        }
    }

}
void FSMicromorphic2_3DT::Form_II8p_12()
{

    int row=0;
    int col=0;
    II8p_12=0.0;


    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    for(int K=0;K<3;K++)
                    {
                        //summation over the same term starts
                        for(int Abar=0;Abar<3;Abar++)
                        {
                            II8p_12(row,col)+=fTemp_tensor_n_sd_x_n_sd_x_n_sd(K,l,m)*fFe(i,Abar)*fChip_inverse(B,Abar);
                        }
                        row++;
                    }
                }
            }
            col++;
        }
    }

}
void FSMicromorphic2_3DT:: Form_II8p_13()
{

    int row=0;
    int col=0;
    II8p_13=0.0;



    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    for(int K=0;K<3;K++)
                    {
                        //summation over the same term starts
                        for(int Abar=0;Abar<3;Abar++)
                        {
                            for(int Bbar=0;Bbar<3;Bbar++)
                            {
                                II8p_13(row,col)+=fTemp_tensor_n_sd_x_n_sd_x_n_sd(K,l,m)*fdFYchidSIGMA(Abar,Bbar)*fChie(i,Bbar)*fFp_inverse(B,Abar);
                            }
                        }
                        row++;
                    }
                }
            }
            col++;
        }
    }
}

void FSMicromorphic2_3DT:: Form_II8p_14()
{

    int row=0;
    int col=0;
    II8p_14=0.0;


    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    for(int K=0;K<3;K++)
                    {
                        //summation over the same term starts
                        for(int Abar=0;Abar<3;Abar++)
                        {
                            for(int Bbar=0;Bbar<3;Bbar++)
                            {
                                II8p_14(row,col)+=fTemp_tensor_n_sd_x_n_sd_x_n_sd(K,l,m)*fdFYchidSIGMA(Abar,Bbar)*fFe(i,Abar)*fChip_inverse(B,Bbar);
                            }
                        }
                        row++;
                    }
                }
            }
            col++;
        }
    }


}


void FSMicromorphic2_3DT:: Form_II8p_15()
{

    int row=0;
    int col=0;
    II8p_15=0.0;


    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    for(int K=0;K<3;K++)
                    {
                        //summation over the same term starts
                        for(int Abar=0;Abar<3;Abar++)
                        {
                            for(int Bbar=0;Bbar<3;Bbar++)
                            {
                                II8p_15(row,col)+=fTemp_tensor_n_sd_x_n_sd_x_n_sd(K,l,m)*fdFYchidSIGMA(Abar,Bbar)*fChie(i,Abar)*fFp_inverse(B,Bbar);
                            }
                        }
                        row++;
                    }
                }
            }
            col++;
        }
    }
}



void FSMicromorphic2_3DT:: Form_II8p_16()
{

    int row=0;
    int col=0;
    II8p_16=0.0;


    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    for(int K=0;K<3;K++)
                    {
                        //summation over the same term starts
                        for(int Abar=0;Abar<3;Abar++)
                        {
                            for(int Bbar=0;Bbar<3;Bbar++)
                            {
                                II8p_16(row,col)+=fTemp_tensor_n_sd_x_n_sd_x_n_sd(K,l,m)*fdFYchidSIGMA(Abar,Bbar)*fFe(i,Bbar)*fChip_inverse(B,Abar);
                            }
                        }
                        row++;
                    }
                }
            }
            col++;
        }
    }




}


void FSMicromorphic2_3DT:: Form_II9e_1()
{
    int row=0;
    int col=0;
    II9e_1=0.0;

    for(int A=0;A<3;A++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;

            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    for(int K=0;K<3;K++)
                    {
                        //summation over the same term starts
                        for(int Kbar=0;Kbar<3;Kbar++)
                        {
                            for(int Lbar=0;Lbar<3;Lbar++)
                            {
                            	for(int Mbar=0;Mbar<3;Mbar++)
                            	{
                            		for(int k=0;k<3;k++)
                            		{
                            			//II9e_1(row,col)+=fDeformation_Gradient(k,K)*fFe(k,Kbar)*fFe(l,Lbar)*fFp_inverse(A,Kbar)*GXe(i,Lbar,Mbar)*fChie(m,Mbar);
                            			II9e_1(row,col)+=fDeformation_Gradient_Inverse(K,k)*fFe(k,Kbar)*fFe(l,Lbar)*(fMaterial_Params[kTau7]*fFp_inverse(A,Lbar)*GXe(i,Mbar,Kbar)
                            					+fMaterial_Params[kTau8]*fFp_inverse(A,Kbar)*GXe(i,Lbar,Mbar)+fMaterial_Params[kTau8]*fFp_inverse(A,Mbar)*GXe(i,Kbar,Lbar)+
                            					fMaterial_Params[kTau9]*fFp_inverse(A,Lbar)*GXe(i,Kbar,Mbar)+fMaterial_Params[kTau10]*fFp_inverse(A,Mbar)*GXe(i,Lbar,Kbar)+
                            					fMaterial_Params[kTau11]*fFp_inverse(A,Kbar)*GXe(i,Mbar,Lbar))*fChie(m,Mbar);

                            		}
                            	}
                            }
                        }
                      row++;
                    }
                }
            }
         col++;
        }
    }

}







void FSMicromorphic2_3DT:: Form_Temp_tensor_for_II9()
{
	fTemp_tensor_n_sd_x_n_sd_x_n_sd=0.0;


    fTemp_matrix_nsd_x_nsd.MultATBC(fdGdS_tr,fFp_n,fFp_inverse);
    fTemp_matrix_nsd_x_nsd2.MultABC(fFe,fCe_n_inverse,fTemp_matrix_nsd_x_nsd);


    for(int K=0;K<3;K++)
    {
    	for(int m=0;m<3;m++)
    	{
    		for(int l =0;l<3;l++)
    		{
    			//summation
    			for(int Kbar=0;Kbar<3;Kbar++)
    			{
    				for(int Lbar=0;Lbar<3;Lbar++)
    				{
    					for(int Mbar=0;Mbar<3;Mbar++)
    					{
    						for(int k=0;k<3;k++)
    						{
    							for(int i=0;i<0;i++)
    							{
    								fTemp_tensor_n_sd_x_n_sd_x_n_sd(K,l,m)+=fDeformation_Gradient_Inverse(K,k)*fFe(k,Kbar)*fFe(l,Lbar)*(fMaterial_Params[kTau7]*fTemp_matrix_nsd_x_nsd2(i,Lbar)*GXe(i,Mbar,Kbar)
    										+fMaterial_Params[kTau8]*fTemp_matrix_nsd_x_nsd2(i,Kbar)*GXe(i,Lbar,Mbar)+fMaterial_Params[kTau8]*fTemp_matrix_nsd_x_nsd2(i,Mbar)*GXe(i,Kbar,Lbar)
    										+fMaterial_Params[kTau9]*fTemp_matrix_nsd_x_nsd2(i,Lbar)*GXe(i,Kbar,Mbar)+fMaterial_Params[kTau10]*fTemp_matrix_nsd_x_nsd2(i,Mbar)*GXe(i,Lbar,Kbar)
    										+fMaterial_Params[kTau11]*fTemp_matrix_nsd_x_nsd2(i,Kbar)*GXe(i,Mbar,Lbar))*fChie(m,Mbar);
    							}
    						}
    					}
    				}
    			}
    		}
    	}
    }
}





void FSMicromorphic2_3DT:: Form_II9p_1()
{
    int row=0;
    int col=0;

    II9p_1=0.0;


    for(int M=0;M<3;M++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    for(int K=0;K<3;K++)
                    {
                        //summation over the same term
                        for(int Abar=0;Abar<3;Abar++)
                        {
                            II9p_1(row,col)+=fTemp_tensor_n_sd_x_n_sd_x_n_sd(K,l,m)*fFe(i,Abar)*fFp_inverse(M,Abar);
                        }
                        row++;
                    }
                }
            }
            col++;
        }
    }
}

void FSMicromorphic2_3DT:: Form_II9p_2()
{
    int row=0;
    int col=0;

    II9p_2=0.0;


    for(int M=0;M<3;M++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    for(int K=0;K<3;K++)
                    {
                        //summation over the same term
                        for(int Abar=0;Abar<3;Abar++)
                        {
                            for(int Bbar=0;Bbar<3;Bbar++)
                            {
                                II9p_2(row,col)+=fTemp_tensor_n_sd_x_n_sd_x_n_sd(K,l,m)*fdFYdS(Abar,Bbar)*(fFe(i,Bbar)*fFp_inverse(M,Abar)+fFe(i,Abar)*fFp_inverse(M,Bbar));
                            }
                        }
                        row++;
                    }
                }
            }
            col++;
        }
    }
}

void FSMicromorphic2_3DT:: Form_II9p_3()
{
    int row=0;
    int col=0;

    II9p_3=0.0;

     for(int M=0;M<3;M++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    for(int K=0;K<3;K++)
                    {
                        //summation over the same term
                        for(int Abar=0;Abar<3;Abar++)
                        {
                            II9p_3(row,col)+=fTemp_tensor_n_sd_x_n_sd_x_n_sd(K,l,m)*fChie(i,Abar)*fFp_inverse(M,Abar);
                        }
                        row++;
                    }
                }
            }
            col++;
        }
    }
}



void FSMicromorphic2_3DT:: Form_II9p_4()
{
    int row=0;
    int col=0;

    II9p_4=0.0;




    for(int M=0;M<3;M++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    for(int K=0;K<3;K++)
                    {
                        //summation over the same term
                        for(int Abar=0;Abar<3;Abar++)
                        {
                            for(int Bbar=0;Bbar<3;Bbar++)
                            {
                                II9p_4(row,col)+=fTemp_tensor_n_sd_x_n_sd_x_n_sd(K,l,m)*fdFYdS(Abar,Bbar)*fChie(i,Bbar)*fFp_inverse(M,Abar);
                            }
                        }
                    row++;
                    }
                }
            }
            col++;
        }
    }
}



void FSMicromorphic2_3DT:: Form_II9p_5()
{
    int row=0;
    int col=0;

    II9p_5=0.0;



    for(int M=0;M<3;M++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    for(int K=0;K<3;K++)
                    {
                        //summation over the same term
                        for(int Abar=0;Abar<3;Abar++)
                        {
                            for(int Bbar=0;Bbar<3;Bbar++)
                            {
                                II9p_5(row,col)+=fTemp_tensor_n_sd_x_n_sd_x_n_sd(K,l,m)*fdFYdS(Abar,Bbar)*fChie(i,Abar)*fFp_inverse(M,Bbar);
                            }
                        }
                        row++;
                    }
                }
            }
            col++;
        }
    }
}

void FSMicromorphic2_3DT::Form_II9p_6()
{
    int row=0;
    int col=0;

    II9p_6=0.0;

     for(int M=0;M<3;M++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    for(int K=0;K<3;K++)
                    {
                        //summation over the same term
                        for(int Abar=0;Abar<3;Abar++)
                        {
                            II9p_6(row,col)+=fTemp_tensor_n_sd_x_n_sd_x_n_sd(K,l,m)*fFe(i,Abar)*fChip_inverse(M,Abar);
                        }
                        row++;
                    }
                }
            }
            col++;
        }
    }
}


void FSMicromorphic2_3DT:: Form_II9p_7()
{
    int row=0;
    int col=0;

    II9p_7=0.0;


    for(int M=0;M<3;M++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    for(int K=0;K<3;K++)
                    {
                        //summation over the same term
                        for(int Abar=0;Abar<3;Abar++)
                        {
                            for(int Bbar=0;Bbar<3;Bbar++)
                            {
                                II9p_7(row,col)+=fTemp_tensor_n_sd_x_n_sd_x_n_sd(K,l,m)*fdFYdS(Abar,Bbar)*fFe(i,Abar)*fChip_inverse(M,Bbar);
                            }
                        }
                        row++;
                    }
                }
            }
            col++;
        }
    }
}


void FSMicromorphic2_3DT:: Form_II9p_8()
{
    int row=0;
    int col=0;

    II9p_8=0.0;


    for(int M=0;M<3;M++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    for(int K=0;K<3;K++)
                    {
                        //summation over the same term
                        for(int Abar=0;Abar<3;Abar++)
                        {
                            for(int Bbar=0;Bbar<3;Bbar++)
                            {
                                II9p_8(row,col)+=fTemp_tensor_n_sd_x_n_sd_x_n_sd(K,l,m)*fdFYdS(Abar,Bbar)*fFe(i,Bbar)*fChip_inverse(M,Abar);
                            }
                        }
                        row++;
                    }
                }
            }
            col++;
        }
    }
}



void FSMicromorphic2_3DT:: Form_II9p_9()
{

    int row=0;
    int col=0;
    II9p_9=0.0;



    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    for(int K=0;K<3;K++)
                    {
                        //summation over the same term starts
                        for(int Abar=0;Abar<3;Abar++)
                        {
                            II9p_9(row,col)+=fTemp_tensor_n_sd_x_n_sd_x_n_sd(K,l,m)*fFe(i,Abar)*fFp_inverse(B,Abar);
                        }
                        row++;
                    }
                }
            }
            col++;
        }
    }


}

void FSMicromorphic2_3DT:: Form_II9p_10()
{

    int row=0;
    int col=0;
    II9p_10=0.0;



    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    for(int K=0;K<3;K++)
                    {
                        //summation over the same term starts
                        for(int Abar=0;Abar<3;Abar++)
                        {
                            for(int Bbar=0;Bbar<3;Bbar++)
                            {
                                II9p_10(row,col)+=fTemp_tensor_n_sd_x_n_sd_x_n_sd(K,l,m)*fdFYchidSIGMA(Abar,Bbar)*(fFe(i,Bbar)*fFp_inverse(B,Abar)+fFe(i,Abar)*fFp_inverse(B,Bbar));
                            }
                        }
                        row++;
                    }
                }
            }
            col++;
        }
    }

}
void FSMicromorphic2_3DT::Form_II9p_11()
{

    int row=0;
    int col=0;
    II9p_11=0.0;

    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    for(int K=0;K<3;K++)
                    {
                        //summation over the same term starts
                        for(int Abar=0;Abar<3;Abar++)
                        {
                            II9p_11(row,col)+=fTemp_tensor_n_sd_x_n_sd_x_n_sd(K,l,m)*fChie(i,Abar)*fFp_inverse(B,Abar);
                        }
                        row++;
                    }
                }
            }
            col++;
        }
    }

}
void FSMicromorphic2_3DT::Form_II9p_12()
{

    int row=0;
    int col=0;
    II9p_12=0.0;


    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    for(int K=0;K<3;K++)
                    {
                        //summation over the same term starts
                        for(int Abar=0;Abar<3;Abar++)
                        {
                            II9p_12(row,col)+=fTemp_tensor_n_sd_x_n_sd_x_n_sd(K,l,m)*fFe(i,Abar)*fChip_inverse(B,Abar);
                        }
                        row++;
                    }
                }
            }
            col++;
        }
    }

}
void FSMicromorphic2_3DT:: Form_II9p_13()
{

    int row=0;
    int col=0;
    II9p_13=0.0;



    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    for(int K=0;K<3;K++)
                    {
                        //summation over the same term starts
                        for(int Abar=0;Abar<3;Abar++)
                        {
                            for(int Bbar=0;Bbar<3;Bbar++)
                            {
                                II9p_13(row,col)+=fTemp_tensor_n_sd_x_n_sd_x_n_sd(K,l,m)*fdFYchidSIGMA(Abar,Bbar)*fChie(i,Bbar)*fFp_inverse(B,Abar);
                            }
                        }
                        row++;
                    }
                }
            }
            col++;
        }
    }
}

void FSMicromorphic2_3DT:: Form_II9p_14()
{

    int row=0;
    int col=0;
    II9p_14=0.0;


    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    for(int K=0;K<3;K++)
                    {
                        //summation over the same term starts
                        for(int Abar=0;Abar<3;Abar++)
                        {
                            for(int Bbar=0;Bbar<3;Bbar++)
                            {
                                II9p_14(row,col)+=fTemp_tensor_n_sd_x_n_sd_x_n_sd(K,l,m)*fdFYchidSIGMA(Abar,Bbar)*fFe(i,Abar)*fChip_inverse(B,Bbar);
                            }
                        }
                        row++;
                    }
                }
            }
            col++;
        }
    }


}


void FSMicromorphic2_3DT:: Form_II9p_15()
{

    int row=0;
    int col=0;
    II9p_15=0.0;


    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    for(int K=0;K<3;K++)
                    {
                        //summation over the same term starts
                        for(int Abar=0;Abar<3;Abar++)
                        {
                            for(int Bbar=0;Bbar<3;Bbar++)
                            {
                                II9p_15(row,col)+=fTemp_tensor_n_sd_x_n_sd_x_n_sd(K,l,m)*fdFYchidSIGMA(Abar,Bbar)*fChie(i,Abar)*fFp_inverse(B,Bbar);
                            }
                        }
                        row++;
                    }
                }
            }
            col++;
        }
    }
}



void FSMicromorphic2_3DT:: Form_II9p_16()
{

    int row=0;
    int col=0;
    II9p_16=0.0;


    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    for(int K=0;K<3;K++)
                    {
                        //summation over the same term starts
                        for(int Abar=0;Abar<3;Abar++)
                        {
                            for(int Bbar=0;Bbar<3;Bbar++)
                            {
                                II9p_16(row,col)+=fTemp_tensor_n_sd_x_n_sd_x_n_sd(K,l,m)*fdFYchidSIGMA(Abar,Bbar)*fFe(i,Bbar)*fChip_inverse(B,Abar);
                            }
                        }
                        row++;
                    }
                }
            }
            col++;
        }
    }


}


void FSMicromorphic2_3DT:: Form_II10e_1()
{
    int row=0;
    int col=0;
    II10e_1=0.0;

    for(int A=0;A<3;A++)
    {
        for(int i=0;i<3;i++)
        {
        	for(int R=0;R<3;R++)
        	{
        		row=0;
        		for(int l=0;l<3;l++)
        		{
        			for(int m=0;m<3;m++)
        			{
        				for(int K=0;K<3;K++)
        				{
        					//summation over the same term starts
        					for(int Kbar=0;Kbar<3;Kbar++)
        					{
        						for(int Lbar=0;Lbar<3;Lbar++)
        						{
        							for(int Mbar=0;Mbar<3;Mbar++)
        							{
        								for(int k=0;k<3;k++)
        								{
        									II10e_1(row,col)+=fDeformation_Gradient_Inverse(K,k)*fFe(k,Kbar)*fFe(l,Lbar)*(fMaterial_Params[kTau7]*fFe(i,Lbar)*fFp_inverse(R,Kbar)*fChip_inverse(A,Mbar)
        											+fMaterial_Params[kTau8]*fFe(i,Kbar)*fFp_inverse(R,Mbar)*fChip_inverse(A,Lbar)+fMaterial_Params[kTau8]*fFe(i,Mbar)*fFp_inverse(R,Lbar)*fChip_inverse(A,Kbar)
        											+fMaterial_Params[kTau9]*fFe(i,Lbar)*fFp_inverse(R,Mbar)*fChip_inverse(A,Kbar)+fMaterial_Params[kTau10]*fFe(i,Mbar)*fFp_inverse(R,Kbar)*fChip_inverse(A,Lbar)
        											+fMaterial_Params[kTau11]*fFe(i,Kbar)*fFp_inverse(R,Lbar)*fChip_inverse(A,Mbar))*fChie(m,Mbar);
        								}
        							}
        						}
        					}
        					row++;
        				}
        			}
        		}
        		col++;
        	}
        }
    }

}








void FSMicromorphic2_3DT:: Form_Temp_tensor_for_II10()
{
	fTemp_tensor_n_sd_x_n_sd_x_n_sd=0.0;


    //fTemp_matrix_nsd_x_nsd.MultATBC(fdGdS_tr,fFp_n,fFp_inverse);
    //fTemp_matrix_nsd_x_nsd2.MultABC(fFe,fCe_n_inverse,fFp_n);
	fTemp_matrix_nsd_x_nsd.MultATB(fdGdS_tr,fFp_n);
	fTemp_matrix_nsd_x_nsd2.MultAB(fCe_n_inverse,fTemp_matrix_nsd_x_nsd);
	fTemp_matrix_nsd_x_nsd.MultABC(fFp_inverse,fTemp_matrix_nsd_x_nsd2,fFp_inverse);


    for(int K=0;K<3;K++)
    {
    	for(int m=0;m<3;m++)
    	{
    		for(int l =0;l<3;l++)
    		{
    			//summation
    			for(int Kbar=0;Kbar<3;Kbar++)
    			{
    				for(int Lbar=0;Lbar<3;Lbar++)
    				{
    					for(int Mbar=0;Mbar<3;Mbar++)
    					{
    						for(int k=0;k<3;k++)
    						{
    							for(int i=0;i<0;i++)
    							{
    								for(int A=0;A<3;A++)
    								{
    									for(int R=0;R<3;R++)
    									{
    										fTemp_tensor_n_sd_x_n_sd_x_n_sd(K,l,m)+=fDeformation_Gradient_Inverse(K,k)*fFe(k,Kbar)*fFe(l,Lbar)*(fMaterial_Params[kTau7]*fFe(i,Lbar)*GRAD_CHIM(i,A,R)
    										*fTemp_matrix_nsd_x_nsd(R,Kbar)*fChip_inverse(A,Mbar)+fMaterial_Params[kTau8]*fFe(i,Kbar)*GRAD_CHIM(i,A,R)*fTemp_matrix_nsd_x_nsd(R,Mbar)*fChip_inverse(A,Lbar)
    										+fMaterial_Params[kTau8]*fFe(i,Mbar)*GRAD_CHIM(i,A,R)*fTemp_matrix_nsd_x_nsd(R,Lbar)*fChip_inverse(A,Kbar)
    										+fMaterial_Params[kTau9]*fFe(i,Lbar)*GRAD_CHIM(i,A,R)*fTemp_matrix_nsd_x_nsd(R,Mbar)*fChip_inverse(A,Kbar)
    										+fMaterial_Params[kTau10]*fFe(i,Mbar)*GRAD_CHIM(i,A,R)*fTemp_matrix_nsd_x_nsd(R,Kbar)*fChip_inverse(A,Lbar)
    										+fMaterial_Params[kTau11]*fFe(i,Kbar)*GRAD_CHIM(i,A,R)*fTemp_matrix_nsd_x_nsd(R,Lbar)*fChip_inverse(A,Mbar))*fChie(m,Mbar);
    									}
    								}
    							}
    						}
    					}
    				}
    			}
    		}
    	}
    }
}





void FSMicromorphic2_3DT:: Form_II10p_1()
{
    int row=0;
    int col=0;

    II10p_1=0.0;


    for(int M=0;M<3;M++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    for(int K=0;K<3;K++)
                    {
                        //summation over the same term
                        for(int Abar=0;Abar<3;Abar++)
                        {
                            II10p_1(row,col)+=fTemp_tensor_n_sd_x_n_sd_x_n_sd(K,l,m)*fFe(i,Abar)*fFp_inverse(M,Abar);
                        }
                        row++;
                    }
                }
            }
            col++;
        }
    }
}

void FSMicromorphic2_3DT:: Form_II10p_2()
{
    int row=0;
    int col=0;

    II10p_2=0.0;


    for(int M=0;M<3;M++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    for(int K=0;K<3;K++)
                    {
                        //summation over the same term
                        for(int Abar=0;Abar<3;Abar++)
                        {
                            for(int Bbar=0;Bbar<3;Bbar++)
                            {
                                II10p_2(row,col)+=fTemp_tensor_n_sd_x_n_sd_x_n_sd(K,l,m)*fdFYdS(Abar,Bbar)*(fFe(i,Bbar)*fFp_inverse(M,Abar)+fFe(i,Abar)*fFp_inverse(M,Bbar));
                            }
                        }
                        row++;
                    }
                }
            }
            col++;
        }
    }
}

void FSMicromorphic2_3DT:: Form_II10p_3()
{
    int row=0;
    int col=0;

    II10p_3=0.0;

     for(int M=0;M<3;M++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    for(int K=0;K<3;K++)
                    {
                        //summation over the same term
                        for(int Abar=0;Abar<3;Abar++)
                        {
                            II10p_3(row,col)+=fTemp_tensor_n_sd_x_n_sd_x_n_sd(K,l,m)*fChie(i,Abar)*fFp_inverse(M,Abar);
                        }
                        row++;
                    }
                }
            }
            col++;
        }
    }
}



void FSMicromorphic2_3DT:: Form_II10p_4()
{
    int row=0;
    int col=0;

    II10p_4=0.0;


    for(int M=0;M<3;M++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    for(int K=0;K<3;K++)
                    {
                        //summation over the same term
                        for(int Abar=0;Abar<3;Abar++)
                        {
                            for(int Bbar=0;Bbar<3;Bbar++)
                            {
                                II10p_4(row,col)+=fTemp_tensor_n_sd_x_n_sd_x_n_sd(K,l,m)*fdFYdS(Abar,Bbar)*fChie(i,Bbar)*fFp_inverse(M,Abar);
                            }
                        }
                    row++;
                    }
                }
            }
            col++;
        }
    }
}



void FSMicromorphic2_3DT:: Form_II10p_5()
{
    int row=0;
    int col=0;

    II10p_5=0.0;



    for(int M=0;M<3;M++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    for(int K=0;K<3;K++)
                    {
                        //summation over the same term
                        for(int Abar=0;Abar<3;Abar++)
                        {
                            for(int Bbar=0;Bbar<3;Bbar++)
                            {
                                II10p_5(row,col)+=fTemp_tensor_n_sd_x_n_sd_x_n_sd(K,l,m)*fdFYdS(Abar,Bbar)*fChie(i,Abar)*fFp_inverse(M,Bbar);
                            }
                        }
                        row++;
                    }
                }
            }
            col++;
        }
    }
}

void FSMicromorphic2_3DT::Form_II10p_6()
{
    int row=0;
    int col=0;

    II10p_6=0.0;

     for(int M=0;M<3;M++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    for(int K=0;K<3;K++)
                    {
                        //summation over the same term
                        for(int Abar=0;Abar<3;Abar++)
                        {
                            II10p_6(row,col)+=fTemp_tensor_n_sd_x_n_sd_x_n_sd(K,l,m)*fFe(i,Abar)*fChip_inverse(M,Abar);
                        }
                        row++;
                    }
                }
            }
            col++;
        }
    }
}


void FSMicromorphic2_3DT:: Form_II10p_7()
{
    int row=0;
    int col=0;

    II10p_7=0.0;


    for(int M=0;M<3;M++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    for(int K=0;K<3;K++)
                    {
                        //summation over the same term
                        for(int Abar=0;Abar<3;Abar++)
                        {
                            for(int Bbar=0;Bbar<3;Bbar++)
                            {
                                II10p_7(row,col)+=fTemp_tensor_n_sd_x_n_sd_x_n_sd(K,l,m)*fdFYdS(Abar,Bbar)*fFe(i,Abar)*fChip_inverse(M,Bbar);
                            }
                        }
                        row++;
                    }
                }
            }
            col++;
        }
    }
}


void FSMicromorphic2_3DT:: Form_II10p_8()
{
    int row=0;
    int col=0;

    II10p_8=0.0;


    for(int M=0;M<3;M++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    for(int K=0;K<3;K++)
                    {
                        //summation over the same term
                        for(int Abar=0;Abar<3;Abar++)
                        {
                            for(int Bbar=0;Bbar<3;Bbar++)
                            {
                                II10p_8(row,col)+=fTemp_tensor_n_sd_x_n_sd_x_n_sd(K,l,m)*fdFYdS(Abar,Bbar)*fFe(i,Bbar)*fChip_inverse(M,Abar);
                            }
                        }
                        row++;
                    }
                }
            }
            col++;
        }
    }
}



void FSMicromorphic2_3DT:: Form_II10p_9()
{

    int row=0;
    int col=0;
    II10p_9=0.0;



    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    for(int K=0;K<3;K++)
                    {
                        //summation over the same term starts
                        for(int Abar=0;Abar<3;Abar++)
                        {
                            II10p_9(row,col)+=fTemp_tensor_n_sd_x_n_sd_x_n_sd(K,l,m)*fFe(i,Abar)*fFp_inverse(B,Abar);
                        }
                        row++;
                    }
                }
            }
            col++;
        }
    }


}

void FSMicromorphic2_3DT:: Form_II10p_10()
{

    int row=0;
    int col=0;
    II10p_10=0.0;



    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    for(int K=0;K<3;K++)
                    {
                        //summation over the same term starts
                        for(int Abar=0;Abar<3;Abar++)
                        {
                            for(int Bbar=0;Bbar<3;Bbar++)
                            {
                                II10p_10(row,col)+=fTemp_tensor_n_sd_x_n_sd_x_n_sd(K,l,m)*fdFYchidSIGMA(Abar,Bbar)*(fFe(i,Bbar)*fFp_inverse(B,Abar)+fFe(i,Abar)*fFp_inverse(B,Bbar));
                            }
                        }
                        row++;
                    }
                }
            }
            col++;
        }
    }

}
void FSMicromorphic2_3DT::Form_II10p_11()
{

    int row=0;
    int col=0;
    II10p_11=0.0;

    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    for(int K=0;K<3;K++)
                    {
                        //summation over the same term starts
                        for(int Abar=0;Abar<3;Abar++)
                        {
                            II10p_11(row,col)+=fTemp_tensor_n_sd_x_n_sd_x_n_sd(K,l,m)*fChie(i,Abar)*fFp_inverse(B,Abar);
                        }
                        row++;
                    }
                }
            }
            col++;
        }
    }

}
void FSMicromorphic2_3DT::Form_II10p_12()
{

    int row=0;
    int col=0;
    II10p_12=0.0;


    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    for(int K=0;K<3;K++)
                    {
                        //summation over the same term starts
                        for(int Abar=0;Abar<3;Abar++)
                        {
                            II10p_12(row,col)+=fTemp_tensor_n_sd_x_n_sd_x_n_sd(K,l,m)*fFe(i,Abar)*fChip_inverse(B,Abar);
                        }
                        row++;
                    }
                }
            }
            col++;
        }
    }

}
void FSMicromorphic2_3DT:: Form_II10p_13()
{

    int row=0;
    int col=0;
    II10p_13=0.0;



    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    for(int K=0;K<3;K++)
                    {
                        //summation over the same term starts
                        for(int Abar=0;Abar<3;Abar++)
                        {
                            for(int Bbar=0;Bbar<3;Bbar++)
                            {
                                II10p_13(row,col)+=fTemp_tensor_n_sd_x_n_sd_x_n_sd(K,l,m)*fdFYchidSIGMA(Abar,Bbar)*fChie(i,Bbar)*fFp_inverse(B,Abar);
                            }
                        }
                        row++;
                    }
                }
            }
            col++;
        }
    }
}

void FSMicromorphic2_3DT:: Form_II10p_14()
{

    int row=0;
    int col=0;
    II10p_14=0.0;


    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    for(int K=0;K<3;K++)
                    {
                        //summation over the same term starts
                        for(int Abar=0;Abar<3;Abar++)
                        {
                            for(int Bbar=0;Bbar<3;Bbar++)
                            {
                                II10p_14(row,col)+=fTemp_tensor_n_sd_x_n_sd_x_n_sd(K,l,m)*fdFYchidSIGMA(Abar,Bbar)*fFe(i,Abar)*fChip_inverse(B,Bbar);
                            }
                        }
                        row++;
                    }
                }
            }
            col++;
        }
    }


}


void FSMicromorphic2_3DT:: Form_II10p_15()
{

    int row=0;
    int col=0;
    II10p_15=0.0;


    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    for(int K=0;K<3;K++)
                    {
                        //summation over the same term starts
                        for(int Abar=0;Abar<3;Abar++)
                        {
                            for(int Bbar=0;Bbar<3;Bbar++)
                            {
                                II10p_15(row,col)+=fTemp_tensor_n_sd_x_n_sd_x_n_sd(K,l,m)*fdFYchidSIGMA(Abar,Bbar)*fChie(i,Abar)*fFp_inverse(B,Bbar);
                            }
                        }
                        row++;
                    }
                }
            }
            col++;
        }
    }
}



void FSMicromorphic2_3DT:: Form_II10p_16()
{

    int row=0;
    int col=0;
    II10p_16=0.0;


    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    for(int K=0;K<3;K++)
                    {
                        //summation over the same term starts
                        for(int Abar=0;Abar<3;Abar++)
                        {
                            for(int Bbar=0;Bbar<3;Bbar++)
                            {
                                II10p_16(row,col)+=fTemp_tensor_n_sd_x_n_sd_x_n_sd(K,l,m)*fdFYchidSIGMA(Abar,Bbar)*fFe(i,Bbar)*fChip_inverse(B,Abar);
                            }
                        }
                        row++;
                    }
                }
            }
            col++;
        }
    }


}




void FSMicromorphic2_3DT:: Form_Temp_tensor_for_II11()
{
	fTemp_tensor_n_sd_x_n_sd_x_n_sd=0.0;


    fTemp_matrix_nsd_x_nsd.MultABT(PSIe_n_inverse,fdGchidSIGMA_tr);
    fTemp_matrix_nsd_x_nsd2.MultABT(fTemp_matrix_nsd_x_nsd,PSIe_n_inverse);
    fTemp_matrix_nsd_x_nsd.MultABC(fTemp_matrix_nsd_x_nsd2,fCchie_n,fChip_n);
    fTemp_matrix_nsd_x_nsd2.MultABC(fChip_inverse,fTemp_matrix_nsd_x_nsd,fChip_inverse);

    for(int K=0;K<3;K++)
    {
    	for(int m=0;m<3;m++)
    	{
    		for(int l =0;l<3;l++)
    		{
    			//summation
    			for(int Kbar=0;Kbar<3;Kbar++)
    			{
    				for(int Lbar=0;Lbar<3;Lbar++)
    				{
    					for(int Mbar=0;Mbar<3;Mbar++)
    					{
    						for(int k=0;k<3;k++)
    						{
    							for(int i=0;i<0;i++)
    							{
    								for(int A=0;A<3;A++)
    								{
    									for(int R=0;R<3;R++)
    									{
    										fTemp_tensor_n_sd_x_n_sd_x_n_sd(K,l,m)+=fDeformation_Gradient_Inverse(K,k)*fFe(k,Kbar)*fFe(l,Lbar)*(fMaterial_Params[kTau7]*fFe(i,Lbar)*GRAD_CHIM(i,A,R)
    										*fFp_inverse(R,Kbar)*fTemp_matrix_nsd_x_nsd2(A,Mbar)+fMaterial_Params[kTau8]*fFe(i,Kbar)*GRAD_CHIM(i,A,R)*fFp_inverse(R,Mbar)*fTemp_matrix_nsd_x_nsd2(A,Lbar)
    										+fMaterial_Params[kTau8]*fFe(i,Mbar)*GRAD_CHIM(i,A,R)*fFp_inverse(R,Lbar)*fTemp_matrix_nsd_x_nsd2(A,Kbar)
    										+fMaterial_Params[kTau9]*fFe(i,Lbar)*GRAD_CHIM(i,A,R)*fFp_inverse(R,Mbar)*fTemp_matrix_nsd_x_nsd2(A,Kbar)
    										+fMaterial_Params[kTau10]*fFe(i,Mbar)*GRAD_CHIM(i,A,R)*fFp_inverse(R,Kbar)*fTemp_matrix_nsd_x_nsd2(A,Lbar)
    										+fMaterial_Params[kTau11]*fFe(i,Kbar)*GRAD_CHIM(i,A,R)*fFp_inverse(R,Lbar)*fTemp_matrix_nsd_x_nsd2(A,Mbar))*fChie(m,Mbar);
    									}
    								}
    							}
    						}
    					}
    				}
    			}
    		}
    	}
    }



}




void FSMicromorphic2_3DT:: Form_II11p_1()
{
    int row=0;
    int col=0;

    II11p_1=0.0;


    for(int M=0;M<3;M++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    for(int K=0;K<3;K++)
                    {
                        //summation over the same term
                        for(int Abar=0;Abar<3;Abar++)
                        {
                            II11p_1(row,col)+=fTemp_tensor_n_sd_x_n_sd_x_n_sd(K,l,m)*fFe(i,Abar)*fFp_inverse(M,Abar);
                        }
                        row++;
                    }
                }
            }
            col++;
        }
    }
}

void FSMicromorphic2_3DT:: Form_II11p_2()
{
    int row=0;
    int col=0;

    II11p_2=0.0;


    for(int M=0;M<3;M++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    for(int K=0;K<3;K++)
                    {
                        //summation over the same term
                        for(int Abar=0;Abar<3;Abar++)
                        {
                            for(int Bbar=0;Bbar<3;Bbar++)
                            {
                                II11p_2(row,col)+=fTemp_tensor_n_sd_x_n_sd_x_n_sd(K,l,m)*fdFYdS(Abar,Bbar)*(fFe(i,Bbar)*fFp_inverse(M,Abar)+fFe(i,Abar)*fFp_inverse(M,Bbar));
                            }
                        }
                        row++;
                    }
                }
            }
            col++;
        }
    }
}

void FSMicromorphic2_3DT:: Form_II11p_3()
{
    int row=0;
    int col=0;

    II11p_3=0.0;

     for(int M=0;M<3;M++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    for(int K=0;K<3;K++)
                    {
                        //summation over the same term
                        for(int Abar=0;Abar<3;Abar++)
                        {
                            II11p_3(row,col)+=fTemp_tensor_n_sd_x_n_sd_x_n_sd(K,l,m)*fChie(i,Abar)*fFp_inverse(M,Abar);
                        }
                        row++;
                    }
                }
            }
            col++;
        }
    }
}



void FSMicromorphic2_3DT:: Form_II11p_4()
{
    int row=0;
    int col=0;

    II11p_4=0.0;




    for(int M=0;M<3;M++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    for(int K=0;K<3;K++)
                    {
                        //summation over the same term
                        for(int Abar=0;Abar<3;Abar++)
                        {
                            for(int Bbar=0;Bbar<3;Bbar++)
                            {
                                II11p_4(row,col)+=fTemp_tensor_n_sd_x_n_sd_x_n_sd(K,l,m)*fdFYdS(Abar,Bbar)*fChie(i,Bbar)*fFp_inverse(M,Abar);
                            }
                        }
                    row++;
                    }
                }
            }
            col++;
        }
    }
}



void FSMicromorphic2_3DT:: Form_II11p_5()
{
    int row=0;
    int col=0;

    II11p_5=0.0;



    for(int M=0;M<3;M++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    for(int K=0;K<3;K++)
                    {
                        //summation over the same term
                        for(int Abar=0;Abar<3;Abar++)
                        {
                            for(int Bbar=0;Bbar<3;Bbar++)
                            {
                                II11p_5(row,col)+=fTemp_tensor_n_sd_x_n_sd_x_n_sd(K,l,m)*fdFYdS(Abar,Bbar)*fChie(i,Abar)*fFp_inverse(M,Bbar);
                            }
                        }
                        row++;
                    }
                }
            }
            col++;
        }
    }
}

void FSMicromorphic2_3DT::Form_II11p_6()
{
    int row=0;
    int col=0;

    II11p_6=0.0;

     for(int M=0;M<3;M++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    for(int K=0;K<3;K++)
                    {
                        //summation over the same term
                        for(int Abar=0;Abar<3;Abar++)
                        {
                            II11p_6(row,col)+=fTemp_tensor_n_sd_x_n_sd_x_n_sd(K,l,m)*fFe(i,Abar)*fChip_inverse(M,Abar);
                        }
                        row++;
                    }
                }
            }
            col++;
        }
    }
}


void FSMicromorphic2_3DT:: Form_II11p_7()
{
    int row=0;
    int col=0;

    II11p_7=0.0;


    for(int M=0;M<3;M++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    for(int K=0;K<3;K++)
                    {
                        //summation over the same term
                        for(int Abar=0;Abar<3;Abar++)
                        {
                            for(int Bbar=0;Bbar<3;Bbar++)
                            {
                                II11p_7(row,col)+=fTemp_tensor_n_sd_x_n_sd_x_n_sd(K,l,m)*fdFYdS(Abar,Bbar)*fFe(i,Abar)*fChip_inverse(M,Bbar);
                            }
                        }
                        row++;
                    }
                }
            }
            col++;
        }
    }
}


void FSMicromorphic2_3DT:: Form_II11p_8()
{
    int row=0;
    int col=0;

    II11p_8=0.0;


    for(int M=0;M<3;M++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    for(int K=0;K<3;K++)
                    {
                        //summation over the same term
                        for(int Abar=0;Abar<3;Abar++)
                        {
                            for(int Bbar=0;Bbar<3;Bbar++)
                            {
                                II11p_8(row,col)+=fTemp_tensor_n_sd_x_n_sd_x_n_sd(K,l,m)*fdFYdS(Abar,Bbar)*fFe(i,Bbar)*fChip_inverse(M,Abar);
                            }
                        }
                        row++;
                    }
                }
            }
            col++;
        }
    }
}



void FSMicromorphic2_3DT:: Form_II11p_9()
{

    int row=0;
    int col=0;
    II11p_9=0.0;



    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    for(int K=0;K<3;K++)
                    {
                        //summation over the same term starts
                        for(int Abar=0;Abar<3;Abar++)
                        {
                            II11p_9(row,col)+=fTemp_tensor_n_sd_x_n_sd_x_n_sd(K,l,m)*fFe(i,Abar)*fFp_inverse(B,Abar);
                        }
                        row++;
                    }
                }
            }
            col++;
        }
    }


}

void FSMicromorphic2_3DT:: Form_II11p_10()
{

    int row=0;
    int col=0;
    II11p_10=0.0;



    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    for(int K=0;K<3;K++)
                    {
                        //summation over the same term starts
                        for(int Abar=0;Abar<3;Abar++)
                        {
                            for(int Bbar=0;Bbar<3;Bbar++)
                            {
                                II11p_10(row,col)+=fTemp_tensor_n_sd_x_n_sd_x_n_sd(K,l,m)*fdFYchidSIGMA(Abar,Bbar)*(fFe(i,Bbar)*fFp_inverse(B,Abar)+fFe(i,Abar)*fFp_inverse(B,Bbar));
                            }
                        }
                        row++;
                    }
                }
            }
            col++;
        }
    }

}
void FSMicromorphic2_3DT::Form_II11p_11()
{

    int row=0;
    int col=0;
    II11p_11=0.0;

    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    for(int K=0;K<3;K++)
                    {
                        //summation over the same term starts
                        for(int Abar=0;Abar<3;Abar++)
                        {
                            II11p_11(row,col)+=fTemp_tensor_n_sd_x_n_sd_x_n_sd(K,l,m)*fChie(i,Abar)*fFp_inverse(B,Abar);
                        }
                        row++;
                    }
                }
            }
            col++;
        }
    }

}
void FSMicromorphic2_3DT::Form_II11p_12()
{

    int row=0;
    int col=0;
    II11p_12=0.0;


    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    for(int K=0;K<3;K++)
                    {
                        //summation over the same term starts
                        for(int Abar=0;Abar<3;Abar++)
                        {
                            II11p_12(row,col)+=fTemp_tensor_n_sd_x_n_sd_x_n_sd(K,l,m)*fFe(i,Abar)*fChip_inverse(B,Abar);
                        }
                        row++;
                    }
                }
            }
            col++;
        }
    }

}
void FSMicromorphic2_3DT:: Form_II11p_13()
{

    int row=0;
    int col=0;
    II11p_13=0.0;



    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    for(int K=0;K<3;K++)
                    {
                        //summation over the same term starts
                        for(int Abar=0;Abar<3;Abar++)
                        {
                            for(int Bbar=0;Bbar<3;Bbar++)
                            {
                                II11p_13(row,col)+=fTemp_tensor_n_sd_x_n_sd_x_n_sd(K,l,m)*fdFYchidSIGMA(Abar,Bbar)*fChie(i,Bbar)*fFp_inverse(B,Abar);
                            }
                        }
                        row++;
                    }
                }
            }
            col++;
        }
    }
}

void FSMicromorphic2_3DT:: Form_II11p_14()
{

    int row=0;
    int col=0;
    II11p_14=0.0;


    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    for(int K=0;K<3;K++)
                    {
                        //summation over the same term starts
                        for(int Abar=0;Abar<3;Abar++)
                        {
                            for(int Bbar=0;Bbar<3;Bbar++)
                            {
                                II11p_14(row,col)+=fTemp_tensor_n_sd_x_n_sd_x_n_sd(K,l,m)*fdFYchidSIGMA(Abar,Bbar)*fFe(i,Abar)*fChip_inverse(B,Bbar);
                            }
                        }
                        row++;
                    }
                }
            }
            col++;
        }
    }


}


void FSMicromorphic2_3DT:: Form_II11p_15()
{

    int row=0;
    int col=0;
    II11p_15=0.0;


    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    for(int K=0;K<3;K++)
                    {
                        //summation over the same term starts
                        for(int Abar=0;Abar<3;Abar++)
                        {
                            for(int Bbar=0;Bbar<3;Bbar++)
                            {
                                II11p_15(row,col)+=fTemp_tensor_n_sd_x_n_sd_x_n_sd(K,l,m)*fdFYchidSIGMA(Abar,Bbar)*fChie(i,Abar)*fFp_inverse(B,Bbar);
                            }
                        }
                        row++;
                    }
                }
            }
            col++;
        }
    }
}



void FSMicromorphic2_3DT:: Form_II11p_16()
{

    int row=0;
    int col=0;
    II11p_16=0.0;


    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    for(int K=0;K<3;K++)
                    {
                        //summation over the same term starts
                        for(int Abar=0;Abar<3;Abar++)
                        {
                            for(int Bbar=0;Bbar<3;Bbar++)
                            {
                                II11p_16(row,col)+=fTemp_tensor_n_sd_x_n_sd_x_n_sd(K,l,m)*fdFYchidSIGMA(Abar,Bbar)*fFe(i,Bbar)*fChip_inverse(B,Abar);
                            }
                        }
                        row++;
                    }
                }
            }
            col++;
        }
    }


}




void FSMicromorphic2_3DT:: Form_II12e_1()
{
    int row=0;
    int col=0;
    II12e_1=0.0;

    for(int A=0;A<3;A++)
    {
        for(int m=0;m<3;m++)
        {
        	row=m*3;

        	for(int l=0;l<3;l++)
        	{
        		for(int K=0;K<3;K++)
        		{
        			//summation over the same term starts
        			for(int Kbar=0;Kbar<3;Kbar++)
        			{
        				for(int Lbar=0;Lbar<3;Lbar++)
        				{
        					for(int Mbar=0;Mbar<3;Mbar++)
        					{
        						for(int k=0;k<3;k++)
        						{
        							II12e_1(row,col)+=fDeformation_Gradient_Inverse(K,k)*fFe(k,Kbar)*fFe(l,Lbar)*fMeKLM(Kbar,Lbar,Mbar)*fChip_inverse(A,Mbar);
        						}
        					}
        				}
        			}
        			row++;
        		}
        		row=row+6;
        	}
        	col++;
        }
    }

}


void FSMicromorphic2_3DT:: Form_Temp_tensor_for_II12()
{
	fTemp_tensor_n_sd_x_n_sd_x_n_sd=0.0;


    fTemp_matrix_nsd_x_nsd.MultABCT(fChie,PSIe_n_inverse,fdGchidSIGMA_tr);
    fTemp_matrix_nsd_x_nsd2.MultATBC(PSIe_n_inverse,fCchie_n,fChip_n);
    fTemp_matrix_nsd_x_nsd3.MultAB(fTemp_matrix_nsd_x_nsd,fTemp_matrix_nsd_x_nsd2);
    fTemp_matrix_nsd_x_nsd.MultAB(fTemp_matrix_nsd_x_nsd3,fChip_inverse);


    for(int K=0;K<3;K++)
    {
    	for(int m=0;m<3;m++)
    	{
    		for(int l =0;l<3;l++)
    		{
    			//summation
    			for(int Kbar=0;Kbar<3;Kbar++)
    			{
    				for(int Lbar=0;Lbar<3;Lbar++)
    				{
    					for(int Mbar=0;Mbar<3;Mbar++)
    					{
    						for(int k=0;k<3;k++)
    						{
    							fTemp_tensor_n_sd_x_n_sd_x_n_sd(K,l,m)+=fDeformation_Gradient_Inverse(K,k)*fFe(k,Kbar)*fFe(l,Lbar)*fMeKLM(Kbar,Lbar,Mbar)*fTemp_matrix_nsd_x_nsd(m,Mbar);
    						}
    					}
    				}
    			}
    		}
    	}
    }



}




void FSMicromorphic2_3DT:: Form_II12p_1()
{
    int row=0;
    int col=0;

    II12p_1=0.0;


    for(int M=0;M<3;M++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    for(int K=0;K<3;K++)
                    {
                        //summation over the same term
                        for(int Abar=0;Abar<3;Abar++)
                        {
                            II12p_1(row,col)+=fTemp_tensor_n_sd_x_n_sd_x_n_sd(K,l,m)*fFe(i,Abar)*fFp_inverse(M,Abar);
                        }
                        row++;
                    }
                }
            }
            col++;
        }
    }
}

void FSMicromorphic2_3DT:: Form_II12p_2()
{
    int row=0;
    int col=0;

    II12p_2=0.0;


    for(int M=0;M<3;M++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    for(int K=0;K<3;K++)
                    {
                        //summation over the same term
                        for(int Abar=0;Abar<3;Abar++)
                        {
                            for(int Bbar=0;Bbar<3;Bbar++)
                            {
                                II12p_2(row,col)+=fTemp_tensor_n_sd_x_n_sd_x_n_sd(K,l,m)*fdFYdS(Abar,Bbar)*(fFe(i,Bbar)*fFp_inverse(M,Abar)+fFe(i,Abar)*fFp_inverse(M,Bbar));
                            }
                        }
                        row++;
                    }
                }
            }
            col++;
        }
    }
}

void FSMicromorphic2_3DT:: Form_II12p_3()
{
    int row=0;
    int col=0;

    II12p_3=0.0;

     for(int M=0;M<3;M++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    for(int K=0;K<3;K++)
                    {
                        //summation over the same term
                        for(int Abar=0;Abar<3;Abar++)
                        {
                            II12p_3(row,col)+=fTemp_tensor_n_sd_x_n_sd_x_n_sd(K,l,m)*fChie(i,Abar)*fFp_inverse(M,Abar);
                        }
                        row++;
                    }
                }
            }
            col++;
        }
    }
}



void FSMicromorphic2_3DT:: Form_II12p_4()
{
    int row=0;
    int col=0;

    II12p_4=0.0;




    for(int M=0;M<3;M++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    for(int K=0;K<3;K++)
                    {
                        //summation over the same term
                        for(int Abar=0;Abar<3;Abar++)
                        {
                            for(int Bbar=0;Bbar<3;Bbar++)
                            {
                                II12p_4(row,col)+=fTemp_tensor_n_sd_x_n_sd_x_n_sd(K,l,m)*fdFYdS(Abar,Bbar)*fChie(i,Bbar)*fFp_inverse(M,Abar);
                            }
                        }
                    row++;
                    }
                }
            }
            col++;
        }
    }
}



void FSMicromorphic2_3DT:: Form_II12p_5()
{
    int row=0;
    int col=0;

    II12p_5=0.0;



    for(int M=0;M<3;M++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    for(int K=0;K<3;K++)
                    {
                        //summation over the same term
                        for(int Abar=0;Abar<3;Abar++)
                        {
                            for(int Bbar=0;Bbar<3;Bbar++)
                            {
                                II12p_5(row,col)+=fTemp_tensor_n_sd_x_n_sd_x_n_sd(K,l,m)*fdFYdS(Abar,Bbar)*fChie(i,Abar)*fFp_inverse(M,Bbar);
                            }
                        }
                        row++;
                    }
                }
            }
            col++;
        }
    }
}

void FSMicromorphic2_3DT::Form_II12p_6()
{
    int row=0;
    int col=0;

    II12p_6=0.0;

     for(int M=0;M<3;M++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    for(int K=0;K<3;K++)
                    {
                        //summation over the same term
                        for(int Abar=0;Abar<3;Abar++)
                        {
                            II12p_6(row,col)+=fTemp_tensor_n_sd_x_n_sd_x_n_sd(K,l,m)*fFe(i,Abar)*fChip_inverse(M,Abar);
                        }
                        row++;
                    }
                }
            }
            col++;
        }
    }
}


void FSMicromorphic2_3DT:: Form_II12p_7()
{
    int row=0;
    int col=0;

    II12p_7=0.0;


    for(int M=0;M<3;M++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    for(int K=0;K<3;K++)
                    {
                        //summation over the same term
                        for(int Abar=0;Abar<3;Abar++)
                        {
                            for(int Bbar=0;Bbar<3;Bbar++)
                            {
                                II12p_7(row,col)+=fTemp_tensor_n_sd_x_n_sd_x_n_sd(K,l,m)*fdFYdS(Abar,Bbar)*fFe(i,Abar)*fChip_inverse(M,Bbar);
                            }
                        }
                        row++;
                    }
                }
            }
            col++;
        }
    }
}


void FSMicromorphic2_3DT:: Form_II12p_8()
{
    int row=0;
    int col=0;

    II12p_8=0.0;


    for(int M=0;M<3;M++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    for(int K=0;K<3;K++)
                    {
                        //summation over the same term
                        for(int Abar=0;Abar<3;Abar++)
                        {
                            for(int Bbar=0;Bbar<3;Bbar++)
                            {
                                II12p_8(row,col)+=fTemp_tensor_n_sd_x_n_sd_x_n_sd(K,l,m)*fdFYdS(Abar,Bbar)*fFe(i,Bbar)*fChip_inverse(M,Abar);
                            }
                        }
                        row++;
                    }
                }
            }
            col++;
        }
    }
}



void FSMicromorphic2_3DT:: Form_II12p_9()
{

    int row=0;
    int col=0;
    II12p_9=0.0;



    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    for(int K=0;K<3;K++)
                    {
                        //summation over the same term starts
                        for(int Abar=0;Abar<3;Abar++)
                        {
                            II12p_9(row,col)+=fTemp_tensor_n_sd_x_n_sd_x_n_sd(K,l,m)*fFe(i,Abar)*fFp_inverse(B,Abar);
                        }
                        row++;
                    }
                }
            }
            col++;
        }
    }


}

void FSMicromorphic2_3DT:: Form_II12p_10()
{

    int row=0;
    int col=0;
    II12p_10=0.0;



    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    for(int K=0;K<3;K++)
                    {
                        //summation over the same term starts
                        for(int Abar=0;Abar<3;Abar++)
                        {
                            for(int Bbar=0;Bbar<3;Bbar++)
                            {
                                II12p_10(row,col)+=fTemp_tensor_n_sd_x_n_sd_x_n_sd(K,l,m)*fdFYchidSIGMA(Abar,Bbar)*(fFe(i,Bbar)*fFp_inverse(B,Abar)+fFe(i,Abar)*fFp_inverse(B,Bbar));
                            }
                        }
                        row++;
                    }
                }
            }
            col++;
        }
    }

}
void FSMicromorphic2_3DT::Form_II12p_11()
{

    int row=0;
    int col=0;
    II12p_11=0.0;

    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    for(int K=0;K<3;K++)
                    {
                        //summation over the same term starts
                        for(int Abar=0;Abar<3;Abar++)
                        {
                            II12p_11(row,col)+=fTemp_tensor_n_sd_x_n_sd_x_n_sd(K,l,m)*fChie(i,Abar)*fFp_inverse(B,Abar);
                        }
                        row++;
                    }
                }
            }
            col++;
        }
    }

}
void FSMicromorphic2_3DT::Form_II12p_12()
{

    int row=0;
    int col=0;
    II12p_12=0.0;


    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    for(int K=0;K<3;K++)
                    {
                        //summation over the same term starts
                        for(int Abar=0;Abar<3;Abar++)
                        {
                            II12p_12(row,col)+=fTemp_tensor_n_sd_x_n_sd_x_n_sd(K,l,m)*fFe(i,Abar)*fChip_inverse(B,Abar);
                        }
                        row++;
                    }
                }
            }
            col++;
        }
    }

}
void FSMicromorphic2_3DT:: Form_II12p_13()
{

    int row=0;
    int col=0;
    II12p_13=0.0;



    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    for(int K=0;K<3;K++)
                    {
                        //summation over the same term starts
                        for(int Abar=0;Abar<3;Abar++)
                        {
                            for(int Bbar=0;Bbar<3;Bbar++)
                            {
                                II12p_13(row,col)+=fTemp_tensor_n_sd_x_n_sd_x_n_sd(K,l,m)*fdFYchidSIGMA(Abar,Bbar)*fChie(i,Bbar)*fFp_inverse(B,Abar);
                            }
                        }
                        row++;
                    }
                }
            }
            col++;
        }
    }
}

void FSMicromorphic2_3DT:: Form_II12p_14()
{

    int row=0;
    int col=0;
    II12p_14=0.0;


    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    for(int K=0;K<3;K++)
                    {
                        //summation over the same term starts
                        for(int Abar=0;Abar<3;Abar++)
                        {
                            for(int Bbar=0;Bbar<3;Bbar++)
                            {
                                II12p_14(row,col)+=fTemp_tensor_n_sd_x_n_sd_x_n_sd(K,l,m)*fdFYchidSIGMA(Abar,Bbar)*fFe(i,Abar)*fChip_inverse(B,Bbar);
                            }
                        }
                        row++;
                    }
                }
            }
            col++;
        }
    }


}


void FSMicromorphic2_3DT:: Form_II12p_15()
{

    int row=0;
    int col=0;
    II12p_15=0.0;


    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    for(int K=0;K<3;K++)
                    {
                        //summation over the same term starts
                        for(int Abar=0;Abar<3;Abar++)
                        {
                            for(int Bbar=0;Bbar<3;Bbar++)
                            {
                                II12p_15(row,col)+=fTemp_tensor_n_sd_x_n_sd_x_n_sd(K,l,m)*fdFYchidSIGMA(Abar,Bbar)*fChie(i,Abar)*fFp_inverse(B,Bbar);
                            }
                        }
                        row++;
                    }
                }
            }
            col++;
        }
    }
}



void FSMicromorphic2_3DT:: Form_II12p_16()
{

    int row=0;
    int col=0;
    II12p_16=0.0;


    for(int B=0;B<3;B++)
    {
        for(int i=0;i<3;i++)
        {
            row=0;
            for(int l=0;l<3;l++)
            {
                for(int m=0;m<3;m++)
                {
                    for(int K=0;K<3;K++)
                    {
                        //summation over the same term starts
                        for(int Abar=0;Abar<3;Abar++)
                        {
                            for(int Bbar=0;Bbar<3;Bbar++)
                            {
                                II12p_16(row,col)+=fTemp_tensor_n_sd_x_n_sd_x_n_sd(K,l,m)*fdFYchidSIGMA(Abar,Bbar)*fFe(i,Bbar)*fChip_inverse(B,Abar);
                            }
                        }
                        row++;
                    }
                }
            }
            col++;
        }
    }


}




void FSMicromorphic2_3DT:: Form_devMeKLM_tr()
{

    devMeKLM_tr=0.0;
    for(int Kbar=0;Kbar<3;Kbar++)
    {
        for(int Lbar=0;Lbar<3;Lbar++)
        {
            for(int Mbar=0;Mbar<3;Mbar++)
            {
                devMeKLM_tr(Kbar,Lbar,Mbar)=fMeKLM_tr(Kbar,Lbar,Mbar)-PGchivar_tr[Mbar]*fIdentity_matrix(Kbar,Lbar);

            }
        }
    }

    /* Calculating ||devMe^tr|| */

    invdevMeKLM_tr=0.0;
    Temp_inv=0.0;
    for(int Kbar=0;Kbar<3;Kbar++)
    {
        for(int Lbar=0;Lbar<3;Lbar++)
        {
            for(int Mbar=0;Mbar<3;Mbar++)
            {
                Temp_inv+=devMeKLM_tr(Kbar,Lbar,Mbar)*devMeKLM_tr(Kbar,Lbar,Mbar);

            }
        }
    }
    invdevMeKLM_tr=sqrt(Temp_inv);


}




void FSMicromorphic2_3DT:: Form_dGGchidMKLM()
{

    dGGchidMKLM=0.0;
    for(int Kbar=0;Kbar<3;Kbar++)
    {
        for(int Lbar=0;Lbar<3;Lbar++)
        {
            for(int Mbar=0;Mbar<3;Mbar++)
            {
                dGGchidMKLM(Kbar,Lbar,Mbar)=(1/invdevMeKLM)*devMeKLM(Kbar,Lbar,Mbar)+(1.0/3.0)*(1/ invPGchivar)* PGchivar[Mbar]*fIdentity_matrix(Kbar,Lbar);
            }
        }
    }
}


void FSMicromorphic2_3DT:: Form_dGXpdDelgammaGchi()
{
    dGXpdDelgammaGchi=0.0;
    for(int Dbar=0;Dbar<3;Dbar++)
    {
        for(int P=0;P<3;P++)
        {
            for(int Kbar=0;Kbar<3;Kbar++)
            {
                //summation
                for(int Lbar=0;Lbar<3;Lbar++)
                {
                    for(int Mbar=0;Mbar<3;Mbar++)
                    {
                        dGXpdDelgammaGchi(Dbar,P,Kbar)+=PSIe_inverse(Dbar,Lbar)*dGGchidMKLM(Lbar,Mbar,Kbar)*fChip(Mbar,P);
                    }
                }
            }
        }
    }

}



void FSMicromorphic2_3DT:: Form_dGXedDelgammaGchi()
{
    dGXedDelgammaGchi=0.0;
    for(int i=0;i<3;i++)
    {
        for(int Abar=0;Abar<3;Abar++)
        {
            for(int Lbar=0;Lbar<3;Lbar++)
            {
                //summation
                for(int L=0;L<3;L++)
                {
                    for(int K=0;K<3;K++)
                    {
                        dGXedDelgammaGchi(i,Abar,Lbar)+=GRAD_CHIM(i,K,L)*fFp_inverse(L,Lbar)*fChip_inverse(K,Abar);
                    }
                }
            }
        }
    }

    for(int i=0;i<3;i++)
    {
        for(int Abar=0;Abar<3;Abar++)
        {
            for(int Lbar=0;Lbar<3;Lbar++)
            {
                //summation
                for(int Bbar=0;Bbar<3;Bbar++)
                {
                    for(int L=0;L<3;L++)
                    {
                        dGXedDelgammaGchi(i,Abar,Lbar)+=-1*fChie(i,Bbar)*dGXpdDelgammaGchi(Bbar,L,Lbar)*fChip_inverse(L,Abar);
                    }
                }
            }
        }
    }
}


void FSMicromorphic2_3DT:: Form_dGammaedDelgammaGchi()
{

    dGammaedDelgammaGchi=0.0;
    for(int Kbar=0;Kbar<3;Kbar++)
    {
        for(int Lbar=0;Lbar<3;Lbar++)
        {
            for(int Mbar=0;Mbar<3;Mbar++)
            {
                //summation
                for(int i=0;i<3;i++)
                {
                    dGammaedDelgammaGchi(Kbar,Lbar,Mbar)+=fFe(i,Kbar)*dGXedDelgammaGchi(i,Lbar,Mbar);
                }
            }
        }
    }


}

void FSMicromorphic2_3DT:: Form_dMKLMdDelgammaGchi()
{

    dMKLMdDelgammaGchi=0.0;

    for(int Kbar=0;Kbar<3;Kbar++)
    {
        for(int Lbar=0;Lbar<3;Lbar++)
        {
            for(int Mbar=0;Mbar<3;Mbar++)
            {
                dMKLMdDelgammaGchi(Kbar,Lbar,Mbar)=fMaterial_Params[kTau7]*dGammaedDelgammaGchi(Kbar,Lbar,Mbar);
            }
        }
    }

}

void FSMicromorphic2_3DT:: Form_dPGchivardDelgammaGchi()
{
    dPGchivardDelgammaGchi=0.0;

    for(int Kbar=0;Kbar<3;Kbar++)
    {
        //summation
        for(int Abar=0;Abar<3;Abar++)
        {
            dPGchivardDelgammaGchi[Kbar]+=(1.0/3.0)*dMKLMdDelgammaGchi(Abar,Abar,Kbar);
        }
    }


}

void FSMicromorphic2_3DT:: Form_ddevMKLMdDelgammaGchi()
{
    ddevMKLMdDelgammaGchi=0.0;

    for(int Kbar=0;Kbar<3;Kbar++)
    {
        for(int Lbar=0;Lbar<3;Lbar++)
        {
            for(int Mbar=0;Mbar<3;Mbar++)
            {
                ddevMKLMdDelgammaGchi(Kbar,Lbar,Mbar)=dMKLMdDelgammaGchi(Kbar,Lbar,Mbar)-(1.0/3.0)*dPGchivardDelgammaGchi[Mbar]*fIdentity_matrix(Kbar,Lbar);
            }
        }
    }
}

void FSMicromorphic2_3DT:: Calculate_dInvddevMKLMdDelgammaGchi()
{

    dInvddevMKLMdDelgammaGchi=0.0;
    for(int Kbar=0;Kbar<3;Kbar++)
    {
        for(int Lbar=0;Lbar<3;Lbar++)
        {
            for(int Mbar=0;Mbar<3;Mbar++)
            {
                dInvddevMKLMdDelgammaGchi+=(1/invdevMeKLM)*ddevMKLMdDelgammaGchi(Kbar,Lbar,Mbar)*devMeKLM(Kbar,Lbar,Mbar);
            }
        }
    }

}

void FSMicromorphic2_3DT:: FindYieldFunctionValue()
{
    //double kgamma;

    //update fFp
    fdGdS_tr_transpose.Transpose(fdGdS_tr);
    fCe_n_inverse.Inverse(fCe_n);
    //fTemp_matrix_nsd_x_nsd.MultAB(fCe_n_inverse,fdGdS_tr_transpose);
    fTemp_matrix_nsd_x_nsd.MultABT(fCe_n_inverse,fdGdS_tr);
    fTemp_matrix_nsd_x_nsd*=kgamma;

    fTemp_matrix_nsd_x_nsd += fIdentity_matrix;
    fFp.MultAB(fTemp_matrix_nsd_x_nsd,fFp_n);

    //calculate fFp_Inverse
    fFp_inverse.Inverse(fFp);
//	fs_micromorph3D_out<< "fCe_n "<< fCe_n.Det()<<endl;
//	fs_micromorph3D_out<< "fdGdS_tr_transpose "<< fdGdS_tr_transpose.Det()<<endl;
//	fs_micromorph3D_out<< "detFp "<< fFp.Det()<<endl;


//    fState_variables_IPs(IP,kc)= fState_variables_n_IPs(IP,kc)
//		 + kgamma*fState_variables_n_IPs(IP,khc)*fMaterial_Params[kHc];

    //calculate Fe
    fFe.MultAB(fDeformation_Gradient,fFp_inverse);

    //[fElastic_Right_Cauchy_Green_tensor] will be formed
    fRight_Elastic_Cauchy_Green_tensor.MultATB(fFe,fFe);
    if (fRight_Elastic_Cauchy_Green_tensor.Det()==0)
        fRight_Elastic_Cauchy_Green_tensor = fIdentity_matrix;

    //[fMicroElastic_Right_Cauchy_Green_tensor] will be formed
    fMicroRight_Elastic_Cauchy_Green_tensor.MultATB(fChie,fChie);
    if (fMicroRight_Elastic_Cauchy_Green_tensor.Det()==0)
        fMicroRight_Elastic_Cauchy_Green_tensor = fIdentity_matrix;


    //Update Elastic Lagrangian strain tensor E
    Elastic_LagrangianStn=fIdentity_matrix;
    Elastic_LagrangianStn*=-1;
    Elastic_LagrangianStn+=fRight_Elastic_Cauchy_Green_tensor;
    Elastic_LagrangianStn*=0.5;

    //Update Elastic micro strain tensor will be formed in Bbar
    Elastic_MicroStnTensor = fIdentity_matrix;
    Elastic_MicroStnTensor *= -1;
    //Micro Elastic deformation measure (PSIe)
    PSIe.MultATB(fFe,fChie);
    Elastic_MicroStnTensor += PSIe;

    //update S stress
    Temp_inv=0.0;
    Temp_inv=Elastic_LagrangianStn.Trace();//Calculating the tr(E) and keep in temp. var.
    fTemp_matrix_nsd_x_nsd.SetToScaled(Temp_inv*(fMaterial_Params[kLambda]+fMaterial_Params[kTau]),fIdentity_matrix);

    SPK.SetToScaled(2*(fMaterial_Params[kMu]+fMaterial_Params[kSigma_const]),Elastic_LagrangianStn);
    SPK+=fTemp_matrix_nsd_x_nsd;

    Temp_inv=0.0;
    Temp_inv=Elastic_MicroStnTensor.Trace();
    fTemp_matrix_nsd_x_nsd.SetToScaled(Temp_inv*fMaterial_Params[kEta],fIdentity_matrix);
    SPK+=fTemp_matrix_nsd_x_nsd;

    fTemp_matrix_nsd_x_nsd.SetToScaled(fMaterial_Params[kKappa],Elastic_MicroStnTensor);
    SPK+=fTemp_matrix_nsd_x_nsd;

    fTemp_matrix_nsd_x_nsd2.Transpose(Elastic_MicroStnTensor);
    fTemp_matrix_nsd_x_nsd.SetToScaled(fMaterial_Params[kNu],fTemp_matrix_nsd_x_nsd2);
    SPK+=fTemp_matrix_nsd_x_nsd;

    //Update Relative stress SIGMA_S
    Temp_inv=Elastic_LagrangianStn.Trace();
    SIGMA_S.SetToScaled(Temp_inv*fMaterial_Params[kTau],fIdentity_matrix);
    // 2sigmaE
    fTemp_matrix_nsd_x_nsd.SetToScaled(2*fMaterial_Params[kSigma_const],Elastic_LagrangianStn);
    SIGMA_S+=fTemp_matrix_nsd_x_nsd;
    //(eta-Tau)trEpsilon.1
    Temp_inv=Elastic_MicroStnTensor.Trace();
    fTemp_matrix_nsd_x_nsd.SetToScaled(Temp_inv*(fMaterial_Params[kEta]-fMaterial_Params[kTau]),fIdentity_matrix);
    SIGMA_S+=fTemp_matrix_nsd_x_nsd;
    //(nu-sigma)*Epsilon
    fTemp_matrix_nsd_x_nsd.SetToScaled((fMaterial_Params[kNu]-fMaterial_Params[kSigma_const]),Elastic_MicroStnTensor);
    SIGMA_S+=fTemp_matrix_nsd_x_nsd;
    //(kappa-sigma)*Epsilon^T
    fTemp_matrix_nsd_x_nsd2.Transpose(Elastic_MicroStnTensor);
    fTemp_matrix_nsd_x_nsd.SetToScaled((fMaterial_Params[kKappa]-fMaterial_Params[kSigma_const]),fTemp_matrix_nsd_x_nsd2);
    SIGMA_S+=fTemp_matrix_nsd_x_nsd;


    //calculate  devS stress
    mean_stress=SPK.Trace()/3;//Calculating the pressure term
    devSPK.SetToScaled(mean_stress,fIdentity_matrix);
    devSPK*=-1;
    devSPK+=SPK;

    // Calculate devS: devS
    Temp_inv= devSPK.ScalarProduct();
    //Temp_inv=dMatrixT::Dot(devSPK,devSPK);
    //Calculate ||devS||
    devfSPKinv=sqrt(Temp_inv);
    //fs_micromorph3D_out<<"devfSPKinv="<<devfSPKinv<<endl;

    // Calculate yield function with updated parameters
    fYield_function=devfSPKinv-(Aphi*kcc-Bphi*mean_stress);
    //fs_micromorph3D_out  << "kgamma = " << kgamma << endl;

    //fs_micromorph3D_out  << "fYield_function value function = " << fYield_function << endl;



}





////////////////////////////////////////////////////////////////
//////////////FINITE STRAIN MATRICES ENDS//////////////////
////////////////////////////////////////////////////////////////

/*void FSMicromorphic2_3DT:: Extract_six_values_from_symmetric_tensor(const dMatrixT &fTensor,dArrayT& fTemp_six_values)*/
void FSMicromorphic2_3DT:: Extract_six_values_from_symmetric_tensor(const dMatrixT &fTensor,dArrayT& fTemp_nine_values)
{

/*    fTemp_six_values[0]=fTensor(0,0);
    fTemp_six_values[1]=fTensor(1,1);
    fTemp_six_values[2]=fTensor(2,2);
    fTemp_six_values[3]=fTensor(1,2);
    fTemp_six_values[4]=fTensor(2,0);
    fTemp_six_values[5]=fTensor(0,1);*/

    fTemp_nine_values[0]=fTensor(0,0);//sigma11
    fTemp_nine_values[1]=fTensor(1,1);//sigma22
    fTemp_nine_values[2]=fTensor(2,2);//sigma33
    fTemp_nine_values[3]=fTensor(0,1);//sigma12
    fTemp_nine_values[4]=fTensor(0,2);//sigma13
    fTemp_nine_values[5]=fTensor(1,0);//sigma21
    fTemp_nine_values[6]=fTensor(1,2);//sigma23
    fTemp_nine_values[7]=fTensor(2,0);//sigma31
    fTemp_nine_values[8]=fTensor(2,1);//sigma32

}

void FSMicromorphic2_3DT::Put_values_In_dArrayT_vector(const dArray2DT &f2DArrayT,const int& e,const int& IP,dArrayT& fArrayT)
{
/*    fArrayT[0]=f2DArrayT(e,IP*6+0);
    fArrayT[1]=f2DArrayT(e,IP*6+1);
    fArrayT[2]=f2DArrayT(e,IP*6+2);
    fArrayT[3]=f2DArrayT(e,IP*6+3);
    fArrayT[4]=f2DArrayT(e,IP*6+4);
    fArrayT[5]=f2DArrayT(e,IP*6+5);*/

    fArrayT[0]=f2DArrayT(e,IP*9+0);
    fArrayT[1]=f2DArrayT(e,IP*9+1);
    fArrayT[2]=f2DArrayT(e,IP*9+2);
    fArrayT[3]=f2DArrayT(e,IP*9+3);
    fArrayT[4]=f2DArrayT(e,IP*9+4);
    fArrayT[5]=f2DArrayT(e,IP*9+5);
    fArrayT[6]=f2DArrayT(e,IP*9+6);
    fArrayT[7]=f2DArrayT(e,IP*9+7);
    fArrayT[8]=f2DArrayT(e,IP*9+8);

/*    fArrayT[0]=f2DArrayT(e,IP*12+0);
    fArrayT[1]=f2DArrayT(e,IP*12+1);
    fArrayT[2]=f2DArrayT(e,IP*12+2);
    fArrayT[3]=f2DArrayT(e,IP*12+3);
    fArrayT[4]=f2DArrayT(e,IP*12+4);
    fArrayT[5]=f2DArrayT(e,IP*12+5);
    fArrayT[6]=f2DArrayT(e,IP*12+6);
    fArrayT[7]=f2DArrayT(e,IP*12+7);
    fArrayT[8]=f2DArrayT(e,IP*12+8);
    fArrayT[9]=f2DArrayT(e,IP*12+9);
    fArrayT[10]=f2DArrayT(e,IP*12+10);
    fArrayT[11]=f2DArrayT(e,IP*12+11);*/


}


void FSMicromorphic2_3DT::Put_values_In_Array(const dArray2DT &f2DArrayT,const int& e,const int& IP,dArrayT& fArrayT)
{


    fArrayT[0]=f2DArrayT(e,IP*3+0);
    fArrayT[1]=f2DArrayT(e,IP*3+1);
    fArrayT[2]=f2DArrayT(e,IP*3+2);


}

//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
////////////////////// FINISH HERE FOR MICROMORPHIC 3-D CASE/////////////
//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////



