
//------------------------------ Motivation of FEA family of classes --------------------

The FEA environment was motivated by the large number of variables associated
with multiscale formulation.  All subdirectories here contain classes that support
development of elements in ./coarsescale and ./finescale directories.

FEA classes allow a finite element code developer to ignore the fact that
each matrix operation must be done at each integration point.  For example, 
multiplication of two 8x8 dMatrixT's (say A and B) evaluated at four integration 
points would require a loop of the following form: 

nArrayT <dMatrixT> A;  // <--- This is how F is done in FiniteStrainT
nArrayT <dMatrixT> B;
nArrayT <dMatrixT> C;

	... assume these matricies are allocated and filled ...  

	for (int i=0; i<n_ip; i++)
		C[i].MultAB( A[i], B[i] );

The FEA classes simply mask the looping process.  The developer carries out matrix operations
without regard to the multiplicity to which the operation is being performed (i.e. the class
itself takes care of the loops).  For exmple:

	FEA_dMatrixT A(4,8,8);  // Allocates 
	FEA_dMatrixT B(4,8,8);
	FEA_dMatrixT C(4,8,8);

	... assume these matricies are filled ...  

	C.MultAB (A,B);

This tidyness can be substantial when the number of matrix operations is large.

The FEA subdirectory "matrix" could justifyably be part of toolbox, however, this needs 
to decided upon.	The FEA subdirectory is completely stand alone, it can be copied to
a directory linked only to toolbox for testing purposes -- this is how it was conceived.
To this end, it can be considerd a black box, coupled to tahoe's non-linear solver
via StaggeredMultiScaleT. 

//------------------------------ Motivation of VMS_VariableT ---------------------------

Motivation of the Variational MultiScale (VMS) class VMS_VariableT also came from a 
preliminary inspection of FiniteStrainT.
FiniteStrainT has several flags like need_F and needs_F_last.  For multiscale development,
there are F,Fa, and Fb.  This book-keeping would become tedious so VMS_VariableT allocates
and calculates parameters only as they are called for (or needed) using Get().  
This method is recursive.





