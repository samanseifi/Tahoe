                      //Check for yielding
		        fYield_function_tr=devfSPKinv_tr-(Aphi*(fState_variables_n_IPs(IP,kc))-Bphi*press); 	

		  	    if(fYield_function_tr>dYieldTrialTol)//plastic
		  	     {	        	

		        	//cout<<"YIELDED"<<endl;

		    		/* initialize before iteration */	        	    	       
				fYield_function=fYield_function_tr;
				fFe=fFe_tr;		
				fFp=fFp_n;// initial values for Fp is assumed the same with previous step		
				fSPK=fSPK_tr;
				
                                fdelDelgamma = 0.0;
			    	fDelgamma = 0.0;		
		    	       
		    		/* iterate using Newton-Raphson to solve for fDelgamma */
			  	   iter_count = 0;
	    	   			   
			    	while (fabs(fYield_function) > dAbsTol && fabs(fYield_function/fYield_function_tr) > dRelTol && iter_count < iIterationMax)				    	 
			    	 {
				      iter_count += 1;			                                    
				     /* Form  dFe/dDgamma */	
 				     
				     fFp_inverse.Inverse(fFp);
				     fdGdS_n_transpose.Transpose(fdGdS_n);
                                     fTemp_matrix_nsd_x_nsd.MultABC(fdGdS_n_transpose,fFp_n,fFp_inverse); 
                                     fCe_n_inverse.Inverse(fCe_n);
                                    // fTemp_matrix_nsd_x_nsd2.MultAB(fFe,fCe_n_inverse);	   
                                    // dfFedDelgamma.MultAB(fTemp_matrix_nsd_x_nsd2,fTemp_matrix_nsd_x_nsd);
                                    // dfFedDelgamma=fTemp_matrix_nsd_x_nsd2;  
                                     dfFedDelgamma.MultABC(fFe,fCe_n_inverse,fTemp_matrix_nsd_x_nsd);	         
                                     dfFedDelgamma*=-1;

           	                    /* Forming  dEe/dDgamma  Ee: Elas. Lag. stn tensor*/	
                                    dEedDelgamma.MultATB(dFedDelgamma,fFe);
                                    fTemp_matrix_nsd_x_nsd.MultATB(fFe,dFedDelgamma);
                                    dEedDelgamma+=fTemp_matrix_nsd_x_nsd;
                                    dEedDelgamma*=0.5;

           	                    /* Forming  dS/dDgamma  S: SPK tensor*/	
                                    Temp_inv=dEedDelgamma.Trace();
                                    dSdDelgamma.SetToScaled(fMaterial_Params[kLambda]*Temp_inv,fIdentity_matrix);                                    
                                    //fTemp_matrix_nsd_x_nsd=dEedDelgamma;
			    	    fTemp_matrix_nsd_x_nsd.SetToScaled(2*fMaterial_Params[kMu],dEedDelgamma); 
                                    dSdDelgamma+=fTemp_matrix_nsd_x_nsd;

           	                    /*Forming  dP/dDgamma (scalar) P: pressure  dP/dDgamma= (1/3)1:dS/dDgamma*/	                                    
                                    dPdDelgamma=dMatrixT::Dot(fIdentity_matrix,dSdDelgamma);
                                    dPdDelgamma*=1/3;

           	                    /* Forming  d(devS)/dDgamma  devS: dev. part of SPK tensor*/	                                    
                                    ddevSdDelgamma.SetToScaled(-dPdDelgamma,fIdentity_matrix);
                                    ddevSdDelgamma+=dSdDelgamma;
           	                    /* Forming  d(||devS||)/dDgamma  devS: dev. part of SPK tensor*/                                    
                                    fTemp_matrix_nsd_x_nsd.SetToScaled(1/devfSPKinv,fSPK);
                                    dinvSdDelgamma=dMatrixT::Dot(ddevSdDelgamma,fTemp_matrix_nsd_x_nsd);
                                    
           	                    /* Forming  dc/dDgamma  c: cohesion*/   	                    	                                                                           			    	                                fState_variables_n_IPs(IP,khc) =Aphi;                       
        			    dcdDelgamma=fState_variables_n_IPs(IP,khc)*fMaterial_Params[kHc];
        			    
        			    /* assemble the consistent tangent */
        			    dFYdDelgamma=dinvSdDelgamma-(Aphi*dcdDelgamma-Bphi*dPdDelgamma);
        			    
			    	    /* solve for fdelDelgamma */
			    	    if (dFYdDelgamma != 0.0) fdelDelgamma = -fYield_function/dFYdDelgamma;     
			    	    else fdelDelgamma = 0.0;			    

			    	    /* update fDelgamma */
			    	    fDelgamma += fdelDelgamma;              
			    	    

			    	   if (fDelgamma < 0.0) fDelgamma = 0.0;
			    	   fState_variables_IPs(IP,kDelgamma) = fDelgamma; 
			    	   
			    	                                                                    
		    		   /* update c ISVs */
				   fState_variables_IPs(IP,kZc)= fState_variables_n_IPs(IP,kZc) 
				         		       + fDelgamma;//*fState_variables_n_IPs(IP,khc);
                	    	   fState_variables_IPs(IP,kc) = fState_variables_n_IPs(IP,kc) 
				    	+ fDelgamma*fState_variables_n_IPs(IP,khc)*fMaterial_Params[kHc];
				   if (fState_variables_IPs(IP,kc) < 0.0) fState_variables_IPs(IP,kc) = 0.0;
	                                

			           /* update fFp */
			           fdGdS_n_transpose.Transpose(fdGdS_n);			           
			           fCe_n_inverse.Inverse(fCe_n);       
                                   //fTemp_matrix_nsd_x_nsd.MultAB(fCe_n_inverse,fdGdS_n_transpose);
                                   fTemp_matrix_nsd_x_nsd.MultABT(fCe_n_inverse,fdGdS_n);			                                                             
			    	   fTemp_matrix_nsd_x_nsd*=fDelgamma; 
				   fTemp_matrix_nsd_x_nsd += fIdentity_matrix;
				   fFp.MultAB(fTemp_matrix_nsd_x_nsd,fFp_n);                                    
                                                                       
                                 
			           /* calculate fFp_Inverse  */
				   fFp_inverse.Inverse(fFp);
			    	   /* calculate Fe */
				   fFe.MultAB(fDeformation_Gradient,fFp_inverse);

			           /* [fElastic_Right_Cauchy_Green_tensor] will be formed */
				   fRight_Cauchy_Green_tensor.MultATB(fFe,fFe);

			   	   if (fRight_Cauchy_Green_tensor.Det()==0)
				    fRight_Cauchy_Green_tensor = fIdentity_matrix;
	                           
                  			    
				    /* update Lagrangian strain tensor E*/

                                   LagrangianStn=fIdentity_matrix;
                                   LagrangianStn*=-1;
                                   LagrangianStn+=fRight_Cauchy_Green_tensor;
                                   LagrangianStn*=0.5;   

                                   /* update S stress */
		      	           ////fSPK calculation
       		    	           Temp_inv=0.0;
		                   Temp_inv=LagrangianStn.Trace();//Calculating the tr(E) and keep in temp. var. 
		    	           fTemp_matrix_nsd_x_nsd.SetToScaled(Temp_inv*fMaterial_Params[kLambda],fIdentity_matrix);
                                   fSPK.SetToScaled(2*fMaterial_Params[kMu],LagrangianStn);    	
		    	           fSPK+=fTemp_matrix_nsd_x_nsd;

                                   /* calculate  devS stress */                              	                  
		                   press=fSPK.Trace()/3;//Calculating the pressure term		        
		        	   fdevSPK.SetToScaled(press,fIdentity_matrix);
		        	   fdevSPK*=-1;
		                   fdevSPK+=fSPK;
				   // Calculate devS: devS 	
				   //Temp_inv= fdevSPK.ScalarProduct();		      
		                   Temp_inv=dMatrixT::Dot(fdevSPK,fdevSPK);      				   
				   devfSPKinv=sqrt(Temp_inv);		                  
		                  		                                   
		                   
                                   // Calculate yielding function with updated parameters
		                   fYield_function=devfSPKinv-(Aphi*(fState_variables_IPs(IP,kc))-Bphi*press); 
    			   /* fs_micromorph3D_out  << "Current relative residual = " << fabs(fYield_function/fYield_function_tr) << endl; 	
                            fs_micromorph3D_out  <<"**********************************"<<endl;
                            fs_micromorph3D_out <<"**********************************"<<endl; */
                                                                      
                                                                                     
                                                      
    			   // fs_micromorph3D_out  << "Current relative residual = " << fabs(fYield_function/fYield_function_tr) << endl; 	
       			  
			    	 } //end of the local fDelgamma while loop 			    	  
			    	 			    	 					    	 
			/*   if (fabs(fYield_function/fYield_function_tr) <= dRelTol)
			    {

			    cout << "Relative residual reached the tol. value dRelTol "<< endl; 
    			    cout << "Current relative residual = " << fabs(fYield_function/fYield_function_tr) << endl; 	
		            }				    	 
			    	 
			   if (fabs(fYield_function) <= dAbsTol)
			    {
			    cout << "Yield function reached specified tol. value "<< endl; 
    			    cout << "Yield function  = " << fabs(fYield_function)<< endl; 	
		            }				    	 
			   // throw Exception if reach iIterationMax 
			   */
			   if (iter_count == iIterationMax)
			    {

			    cout << "Local iteration counter reached maximum number allowed: iter_count = " << iIterationMax << endl; 
    			    cout << "Current relative residual = " << fabs(fYield_function/fYield_function_tr) << endl; 	
			   // ExceptionT::GeneralFail(caller, "Local iteration counter %d reached maximum number allowed %d.",iter_count, iIterationMax);    			        			    
		            }           
	    			    	
            
	            
		           double Je=0.0;
		           Je=fFe.Det(); 


                      	  /* update Kirchhoff stress */
                           KirchhoffST.MultABCT(fFe,fSPK,fFe);
                          /* Calcuate Cauchy stress tensor */                                       
                           Sigma=KirchhoffST;
                           Sigma.SetToScaled(1/Je,KirchhoffST);	

		   	  /* saving  Cauchy stress tensor at IPs */
		   	  fCauchy_stress_tensor_current_IP=Sigma;//.SetToScaled(1/Je,fEffective_Kirchhoff_tensor);

                         // Actually function was modified and not it extracts nine values */
                         Extract_six_values_from_symmetric_tensor(fCauchy_stress_tensor_current_IP,fTemp_nine_values);

                         // Save Cauchy effective stress tensor of the current IP
                         fCauchy_stress_IPs.SetRow(IP,fTemp_nine_values);       


	

  			  /* calculate stress derivative of yield function */
			  fdFYdS = 0.0;       		  
			 // fdPdS=0.0;
			//  fdPdS.SetToScaled(1/3,fIdentity_matrix);
			  fdFYdS.SetToScaled(Bphi*1/3,fIdentity_matrix);
			  press=fdevSPK.Trace()/3;
			  fTemp_matrix_nsd_x_nsd.SetToScaled(press/devfSPKinv ,fIdentity_matrix);
			  fTemp_matrix_nsd_x_nsd*=-1;
			  fdFYdS+=fTemp_matrix_nsd_x_nsd;			  
			  fTemp_matrix_nsd_x_nsd.SetToScaled(1/devfSPKinv,fdevSPK);		  
			  fdFYdS+=fTemp_matrix_nsd_x_nsd;			  

	              	            
  			  /* calculate stress derivative of plastic potential function */
			  fdGdS = 0.0;       		  
			 // fdPdS=0.0;
			//  fdPdS.SetToScaled(1/3,fIdentity_matrix);
			  fdGdS.SetToScaled(Bpsi*1/3,fIdentity_matrix);
			  press=fdevSPK.Trace()/3;
			  fTemp_matrix_nsd_x_nsd.SetToScaled(press/devfSPKinv ,fIdentity_matrix);
			  fTemp_matrix_nsd_x_nsd*=-1;			
			  fdGdS+=fTemp_matrix_nsd_x_nsd;			    
			  fTemp_matrix_nsd_x_nsd.SetToScaled(1/devfSPKinv ,fdevSPK);		  
			  fdGdS+=fTemp_matrix_nsd_x_nsd;

			  fdFYdc=-Aphi;		            		            
		          
		          fFp_inverse.Inverse(fFp);
		          fFeT.Transpose(fFe);
		          fCe_n_inverse.Inverse(fCe_n);
                          //fdGdS_n_transpose.Transpose(fdGdS_n);		          
 		          //fTemp_matrix_nsd_x_nsd2.MultATBC(fdGdS_n_transpose,fFp_n,fFp_inverse);
                          fTemp_matrix_nsd_x_nsd2.MultATBC(fdGdS_n,fFp_n,fFp_inverse);		          
		          fTemp_matrix_nsd_x_nsd.MultABC(fFeT,fFe,fCe_n_inverse);

		          //fA1=fAFeTFeCen1dGdSFpnFp1
		          fA1.MultAB(fTemp_matrix_nsd_x_nsd,fTemp_matrix_nsd_x_nsd);
		          
		          trfA1=fA1.Trace();
		          fdFYdS_fA1=dMatrixT::Dot(fdFYdS,fA1);

		          fTemp_matrix_nsd_x_nsd.Transpose(fA1);
		          fdFYdS_fA1T=dMatrixT::Dot(fdFYdS,fTemp_matrix_nsd_x_nsd);
		          
		          /* define dFy/dS:1 */
		          
		          dFYdScol1=dMatrixT::Dot(fdFYdS,fIdentity_matrix);
		          fConst=dFYdScol1;
		          fConst*=trfA1;
		          fConst*=fMaterial_Params[kLambda];

		          Temp_inv=fMaterial_Params[kMu]*fdFYdS_fA1;
		          fConst+=Temp_inv;
		          
		          Temp_inv=fMaterial_Params[kMu]*fdFYdS_fA1T;
		          fConst+=Temp_inv;
		          
		          fConst*=-1;
		                	        
		          dFYdc_delc=fdFYdc*fMaterial_Params[kHc]*fState_variables_n_IPs(IP,khc);       	        
		          
		          fConst+=dFYdc_delc;


                          /* [fLeft_Cauchy_Green_tensor] will be formed */
                          fLeft_Cauchy_Green_tensor.MultABT(fFe, fFe);
                          /* [fLeft_Cauchy_Green_tensor_Inverse] will be formed */
                          if (fLeft_Cauchy_Green_tensor.Det()==0)
                          fLeft_Cauchy_Green_tensor = fIdentity_matrix;
                          fLeft_Cauchy_Green_tensor_Inverse.Inverse(fLeft_Cauchy_Green_tensor);

                          /* [fEulerian_strain_tensor_current_IP] will be formed */
                          fEulerian_strain_tensor_current_IP = fLeft_Cauchy_Green_tensor_Inverse;
                          fEulerian_strain_tensor_current_IP *= -1;
                          fEulerian_strain_tensor_current_IP += fIdentity_matrix;
                          fEulerian_strain_tensor_current_IP *= 0.5;
                          Extract_six_values_from_symmetric_tensor(fEulerian_strain_tensor_current_IP,fTemp_nine_values);

                          /* Save Eulerian strain tensor of the current IP */
                          fEulerian_strain_IPs.SetRow(IP,fTemp_nine_values);


                         //Form_Second_Piola_Kirchhoff_SPK(LagrangianStn,MicroStnTensor);//already formed above by fSPK
                         //KirchhoffST.MultABCT(fFe,fSPK,fFe);
                         Form_fV1p();//calculates the Kirchhoff ST above and w(l,M) Finv(M,k).Kirchhoff
                         fShapeDisplGrad.MultTx(fV1p,Vintp_1_temp);
                         scale=scale_const;
                         Vintp_1_temp*=scale;
                         Vintp_1 +=Vintp_1_temp;	
                         
    		         // saving Fp, Ce, dG/dS and dF/dS at each IP of the current element 
                         fFp_IPs.SetRow(IP,fFp);
                         fCe_IPs.SetRow(IP,fRight_Cauchy_Green_tensor);
                         fdGdS_IPs.SetRow(IP,fdGdS);
                         fdFYdS_IPs.SetRow(IP,fdFYdS);	    
          

                         Form_I3e_1(); // the third term first matrix  
                         Form_I3e_2(); //  
                         Form_I3e_3(); // 
                         Form_I3p_4(); // 
                         Form_I3p_5(); //                      
                         Form_I3p_6(); // 
                         Form_I3p_7(); // 
                         Form_I3p_8(); //
                         Form_I3p_9(); // 
                         Form_I3p_10();//             
                         Form_I3p_11();// 
                         Form_I3p_12();// 

                         Form_I4e_1(); // the fourth term first matrix    
                         Form_I4p_2(); //  
                         Form_I4p_3(); //                          	          
                         Form_I4p_4(); //                         


                       fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I3e_1,fShapeDisplGrad);
                       scale = scale_const*fMaterial_Params[kLambda];
                       fTemp_matrix_nudof_x_nudof *= scale;
                       fKu_I3e_1 += fTemp_matrix_nudof_x_nudof;


                       fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I3e_2,fShapeDisplGrad);
                       scale = scale_const*fMaterial_Params[kMu];
                       fTemp_matrix_nudof_x_nudof *= scale;
                       fKu_I3e_2 += fTemp_matrix_nudof_x_nudof;

                       fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I3e_3,fShapeDisplGrad);
                       scale = scale_const*fMaterial_Params[kMu];
                       fTemp_matrix_nudof_x_nudof *= scale;
                       fKu_I3e_3 += fTemp_matrix_nudof_x_nudof;

                       fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I3p_4,fShapeDisplGrad);
                       scale = fMaterial_Params[kMu]*(1/fConst)*trfA1*fMaterial_Params[kLambda]*dFYdScol1*scale_const;
                       fTemp_matrix_nudof_x_nudof *= scale;
                       fKu_I3p_4 += fTemp_matrix_nudof_x_nudof;
		    	        	  
                       fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I3p_5,fShapeDisplGrad);
                       scale = fMaterial_Params[kMu]*(1/fConst)*trfA1*fMaterial_Params[kMu]*scale_const;
                       fTemp_matrix_nudof_x_nudof *= scale;
                       fKu_I3p_5 += fTemp_matrix_nudof_x_nudof;

		    	        	           		
                       fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I3p_6,fShapeDisplGrad);
                       scale = fMaterial_Params[kMu]*(1/fConst)*trfA1*fMaterial_Params[kMu]*scale_const;
                       fTemp_matrix_nudof_x_nudof *= scale;
                       fKu_I3p_6 += fTemp_matrix_nudof_x_nudof;         		
         		
                       fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I3p_7,fShapeDisplGrad);
                       scale = fMaterial_Params[kMu]*(1/fConst)*fMaterial_Params[kLambda]*dFYdScol1*scale_const;
                       fTemp_matrix_nudof_x_nudof *= scale;
                       fKu_I3p_7 += fTemp_matrix_nudof_x_nudof;         		
         		         		
                       fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I3p_8,fShapeDisplGrad);
                       scale = fMaterial_Params[kMu]*(1/fConst)*fMaterial_Params[kMu]*scale_const;
                       fTemp_matrix_nudof_x_nudof *= scale;
                       fKu_I3p_8 += fTemp_matrix_nudof_x_nudof;         		


                       fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I3p_9,fShapeDisplGrad);
                       scale = fMaterial_Params[kMu]*(1/fConst)*fMaterial_Params[kMu]*scale_const;
                       fTemp_matrix_nudof_x_nudof *= scale;
                       fKu_I3p_9 += fTemp_matrix_nudof_x_nudof;      
                       
                       
                       fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I3p_10,fShapeDisplGrad);
                       scale = fMaterial_Params[kMu]*(1/fConst)*fMaterial_Params[kLambda]*dFYdScol1*scale_const;
                       fTemp_matrix_nudof_x_nudof *= scale;
                       fKu_I3p_10 += fTemp_matrix_nudof_x_nudof;                             

                       
                       fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I3p_11,fShapeDisplGrad);
                       scale = fMaterial_Params[kMu]*(1/fConst)*fMaterial_Params[kMu]*scale_const;
                       fTemp_matrix_nudof_x_nudof *= scale;
                       fKu_I3p_11 += fTemp_matrix_nudof_x_nudof;     
         		         		
                       
                       fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I3p_12,fShapeDisplGrad);
                       scale = fMaterial_Params[kMu]*(1/fConst)*fMaterial_Params[kMu]*scale_const;
                       fTemp_matrix_nudof_x_nudof *= scale;
                       fKu_I3p_12 += fTemp_matrix_nudof_x_nudof;     
         		
                 
                       fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I4e_1,fShapeDisplGrad);
                       scale =scale_const;
                       fTemp_matrix_nudof_x_nudof *= scale;
                       fKu_I4e_1 += fTemp_matrix_nudof_x_nudof;             		

                       fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I4p_2,fShapeDisplGrad);
                       scale =fMaterial_Params[kLambda]*(1/fConst)*dFYdScol1*scale_const;
                       fTemp_matrix_nudof_x_nudof *= scale;
                       fKu_I4p_2 += fTemp_matrix_nudof_x_nudof;     
                       

                       fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I4p_3,fShapeDisplGrad);
                       scale =fMaterial_Params[kMu]*(1/fConst)*scale_const;
                       fTemp_matrix_nudof_x_nudof *= scale;
                       fKu_I4p_3 += fTemp_matrix_nudof_x_nudof;                            

                       fTemp_matrix_nudof_x_nudof.MultATBC(fShapeDisplGrad,I4p_4,fShapeDisplGrad);
                       scale =fMaterial_Params[kMu]*(1/fConst)*scale_const;
                       fTemp_matrix_nudof_x_nudof *= scale;
                       fKu_I4p_4 += fTemp_matrix_nudof_x_nudof;           	



        
     		                              		
         		     }
