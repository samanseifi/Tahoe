/* $Id: XML_Atomic_FormatterT.cpp,v 1.8 2004/03/27 04:11:50 paklein Exp $ */
#include "XML_Atomic_FormatterT.h"
#include "ParameterListT.h"
#include "ParameterT.h"

using namespace Tahoe;

static const char* type_names[5] = {"Integer", "Double", "String", "Enumeration", "Word"};
static const char* TypeName(ValueT::TypeT t)
{
	switch (t)
	{
		case ValueT::Integer:
			return type_names[0];
			break;
		case ValueT::Double:
			return type_names[1];
			break;
		case ValueT::String:
			return type_names[2];
			break;
		case ValueT::Enumeration:
			return type_names[3];
			break;
		case ValueT::Word:
			return type_names[4];
			break;
	
		default:
			return NULL;
	}
};

static const char* order_char_list[4] = {",", "|"};
static const char* order_char(ParameterListT::ListOrderT o)
{
	if (o == ParameterListT::Choice)
		return order_char_list[1];
	else
		return order_char_list[0]; /* sequence by default */
};

XML_Atomic_FormatterT::XML_Atomic_FormatterT(void):
	fDocumentRoot("parameter_list")
{

}

void XML_Atomic_FormatterT::SetDTD(const StringT& doc_root, const StringT& dtd_path)
{
	fDTD = dtd_path;
	fDocumentRoot = doc_root;
}

bool XML_Atomic_FormatterT::InitParameterFile(ostream& out) const
{
	/* write XML header */
	out << "<?xml version='1.0' encoding='US-ASCII' standalone='no' ?>" << '\n';

	/* DTD is set */
	if (fDTD.StringLength() > 0)
		out << "<!DOCTYPE " << fDocumentRoot << " SYSTEM '" << fDTD << "'>" << '\n';
	
	out.flush();
	return true;
}

bool XML_Atomic_FormatterT::WriteParameterList(ostream& out, const ParameterListT& list) const
{
	out << Tab() << "<parameter_list>" << '\n';
	TabOut();
	out << Tab() << "<name>";
	out << list.Name();
	out << "</name>" << '\n';
	
	/* plain parameters */
	const ArrayT<ParameterT>& params = list.Parameters();
	for (int i = 0; i < params.Length(); i++)
		WriteParameter(out, params[i]);

	/* nested paramater lists */
	const ArrayT<ParameterListT>& nested_lists = list.Lists();
	for (int i = 0; i < nested_lists.Length(); i++)
		WriteParameterList(out, nested_lists[i]);

	TabIn();
	out << Tab() << "</parameter_list>" << '\n';
	out.flush();
	return true;
}

bool XML_Atomic_FormatterT::CloseParameterFile(ostream& out) const
{
	/* add extra newline and flush */
	out << endl;
	return true;
}

bool XML_Atomic_FormatterT::InitDescriptionFile(ostream& out) const
{
	out << "<?xml version='1.0' encoding='US-ASCII' ?>" << '\n';
	out << '\n'; 
	out << "<!--Generated by Tahoe::XML_Atomic_FormatterT $Revision: 1.8 $-->" << '\n';
	out << '\n';
	out << "<!--defintion of Tahoe::ParameterT-->" << '\n';
	out << "<!ELEMENT parameter_list (name, parameter*)>" << '\n';
	out << '\n';
	out << "<!ELEMENT parameter (name, value)>" << '\n';
	out << "<!ATTLIST parameter type (Integer | Double | String | Enumeration | Word) #REQUIRED>" << '\n';
	out << '\n';
	out << "<!ELEMENT name (#PCDATA)>" << '\n';
//	out << "<!ATTLIST name  e-dtype NMTOKEN  #FIXED 'string'>" << '\n'; //allows empty strings
	out << '\n';
	out << "<!ELEMENT value (#PCDATA)>" << '\n';
	out << endl;
	return true;
}

bool XML_Atomic_FormatterT::CloseDescriptionFile(ostream& out) const
{
	/* add extra newline and flush */
	out << endl;
	return true;
}

/* write the data description */
bool XML_Atomic_FormatterT::WriteDescription(ostream& out, const ParameterListT& list) const
{
#pragma unused(out)
#pragma unused(list)

	return true; // no format to write
}

/*************************************************************************
 * Private
 *************************************************************************/

void XML_Atomic_FormatterT::WriteParameter(ostream& out, const ParameterT& parameter) const
{
	out << Tab() << "<parameter type='" << ValueT::TypeName(parameter.Type()) << "'>" << '\n';
	TabOut();
	out << Tab() << "<name>"  << parameter.Name() << "</name>" << '\n';
	out << Tab() << "<value>" << parameter << "</value>" << '\n';
	TabIn();
	out << Tab() << "</parameter>" << '\n';
}
