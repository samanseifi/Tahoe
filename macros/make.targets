# $Id: make.targets,v 1.52 2006/11/25 22:01:40 paklein Exp $
#
# platform specific instructions
include $(MACRO_DIR)/$(ARCH).macros

# include list of object files
OBJECT_LIST = $(MACRO_DIR)/obj.junk
include $(OBJECT_LIST)

#########################################################################
# grouped
OPT_CFLAGS = \
$(DEV_CFLAGS) \
$(FOSSUM_CFLAGS) \
$(SIERRA_CFLAGS) \
$(TB_CFLAGS) \
$(EXPAT_CFLAGS) \
$(NOX_CFLAGS) \
$(SIMOD_CFLAGS) \
$(T_CFLAGS) \
$(ACME_CFLAGS) \
$(QHULL_CFLAGS) \
$(SPOOLESMPI_CFLAGS) \
$(SPOOLESMT_CFLAGS) \
$(SPOOLES_CFLAGS) \
$(PSPASES_CFLAGS) \
$(SUPERLU_CFLAGS) \
$(SUPERLUMT_CFLAGS) \
$(SUPERLUDIST_CFLAGS) \
$(TRILINOS_CFLAGS) \
$(AZ_CFLAGS) \
$(BLAS_CFLAGS) \
$(AX_CFLAGS) \
$(METIS_CFLAGS) \
$(VTK_CFLAGS) \
$(F2C_CFLAGS)

OPT_LFLAGS = \
$(DEV_LFLAGS) \
$(FOSSUM_LFLAGS) \
$(SIERRA_LFLAGS) \
$(TB_LFLAGS) \
$(EXPAT_LFLAGS) \
$(NOX_LFLAGS) \
$(SIMOD_LFLAGS) \
$(T_LFLAGS) \
$(ACME_LFLAGS) \
$(QHULL_LFLAGS) \
$(SPOOLESMPI_LFLAGS) \
$(SPOOLESMT_LFLAGS) \
$(SPOOLES_LFLAGS) \
$(PSPASES_LFLAGS) \
$(SUPERLU_LFLAGS) \
$(SUPERLUMT_LFLAGS) \
$(SUPERLUDIST_LFLAGS) \
$(TRILINOS_LFLAGS) \
$(AZ_LFLAGS) \
$(BLAS_LFLAGS) \
$(AX_LFLAGS) \
$(METIS_LFLAGS) \
$(VTK_LFLAGS) \
$(F2C_LFLAGS)

OPT_LIB = \
$(DEV_LIB) \
$(FOSSUM_LIB) \
$(SIERRA_LIB) \
$(TB_LIB) \
$(EXPAT_LIB) \
$(NOX_LIB) \
$(SIMOD_LIB) \
$(T_LIB) \
$(F2C_LIB) \
$(BLAS_LIB) \
$(AZ_LIB) \
$(METIS_LIB) \
$(SPOOLES_LIB) \
$(SPOOLESMPI_LIB) \
$(SPOOLESMT_LIB) \
$(PSPASES_LIB) \
$(SUPERLU_LIB) \
$(SUPERLUMT_LIB) \
$(SUPERLUDIST_LIB) \
$(QHULL_LIB) \
$(ACME_LIB) \
$(VTK_LIB)

OPT_INC = \
$(DEV_INC) \
$(FOSSUM_INC) \
$(SIERRA_INC) \
$(NOX_INC) \
$(SIMOD_INC) \
$(TB_INC) \
$(EXPAT_INC) \
$(T_INC) \
$(F2C_INC) \
$(BLAS_INC) \
$(AZ_INC) \
$(METIS_INC) \
$(SPOOLES_INC) \
$(SPOOLESMPI_INC) \
$(SPOOLESMT_INC) \
$(PSPASES_INC) \
$(SUPERLU_INC) \
$(SUPERLUMT_INC) \
$(SUPERLUDIST_INC) \
$(TRILINOS_INC) \
$(QHULL_INC) \
$(ACME_INC) \
$(AX_INC) \
$(VTK_INC)

OPT_DEFINES = \
$(DEV_DEFINES) \
$(FOSSUM_DEFINES) \
$(SIERRA_DEFINES) \
$(TB_DEFINES) \
$(EXPAT_DEFINES) \
$(NOX_DEFINES) \
$(SIMOD_DEFINES) \
$(T_DEFINES) \
$(ACME_DEFINES) \
$(QHULL_DEFINES) \
$(SPOOLESMPI_DEFINES) \
$(SPOOLESMT_DEFINES) \
$(SPOOLES_DEFINES) \
$(PSPASES_DEFINES) \
$(SUPERLU_DEFINES) \
$(SUPERLUMT_DEFINES) \
$(SUPERLUDIST_DEFINES) \
$(TRILINOS_DEFINES) \
$(AZ_DEFINES) \
$(BLAS_DEFINES) \
$(AX_DEFINES) \
$(METIS_DEFINES) \
$(VTK_DEFINES) \
$(F2C_DEFINES)

#########################################################################
# paths for file dependencies
OPT_MAKEDEPENDFLAGS = $(OPT_INC) $(OPT_DEFINES)

# Sun spends too much time searching standard directories
#OPT_MAKEDEPENDFLAGS = -Y $(OPT_INC) $(DEFINES) $(OPT_DEFINES)

# name of the dependency file in each subdirectory
DEPEND_FILE = all.depend
#########################################################################

# default target
help:
	@ $(PRINTF) " make targets:\n"
	@ $(PRINTF) "   init - (re-)initialize headers and file dependencies\n"
	@ $(PRINTF) "  build - (re-)build binaries\n"
	@ $(PRINTF) "objects - (re-)compile object file, but don't link\n"
	@ $(PRINTF) "  clean - remove object files and build temporaries\n"
	@ $(PRINTF) "   help - display this list\n"

# instructions
build: objects $(BUILD)

$(TARGET): $(OPT_LIB) $(LIBRARY)
	@ $(PRINTF) " linking...\n"	
	$(LINK) $(MAIN) -o $(TARGET) -L$(LIB_DIR) -l$(TARGET) $(MOD_LFLAGS) $(OPT_LFLAGS) $(MY_LFLAGS) $(LFLAGS)
	@ $(PRINTF) "    ...wrote $(TARGET)\n"

# include object list and create archive
$(LIBRARY): $(LIB_DIR)/lib.junk
	$(MAKE) archive "OBJECT_LIST = $(BLD_DIR)/object_list" "ARCH = $(ARCH)" "MACRO_DIR = $(MACRO_DIR)" "HOME_DIR = $(HOME_DIR)"

# create archive
archive:
	cd $(OBJ_DIR); \
	$(PRINTF) " building archive $(LIBRARY)\n"; \
	$(AR) $(ARFLAGS) $(LIBRARY) $(OBJ); \
	$(PRINTF) " running ranlib $(LIBRARY)\n"; \
	$(RANLIB) $(RANLIBFLAGS) $(LIBRARY)

# initialization
init: $(MAKE_INIT_XTRAS) $(MOD_MAKE_INIT_XTRAS)
	@ if test -f $(LIBRARY); then $(RM) $(LIBRARY); fi
	@ if test -f object_list; then $(RM) object_list; fi	
	@ $(MAKE) setup "ARCH = $(ARCH)" "HOME_DIR = $(HOME_DIR)" "MACRO_DIR = $(MACRO_DIR)"
	@ $(MAKE) headers "ARCH = $(ARCH)" "HOME_DIR = $(HOME_DIR)" "MACRO_DIR = $(MACRO_DIR)"
	@ $(MAKE) depend_init "ARCH = $(ARCH)" "HOME_DIR = $(HOME_DIR)" "MACRO_DIR = $(MACRO_DIR)"
	@ $(MAKE) object_list "ARCH = $(ARCH)" "HOME_DIR = $(HOME_DIR)" "MACRO_DIR = $(MACRO_DIR)"

# clean up - restore to unpacked state
clean: $(MAKE_CLEAN_XTRAS) $(MOD_MAKE_CLEAN_XTRAS)
	@ if test -f $(BLD_DIR)/$(TARGET); then $(RM) $(BLD_DIR)/$(TARGET); fi
	@ if test -f $(BLD_DIR)/object_list; then $(RM) $(BLD_DIR)/object_list; fi
	@ if test -f $(BLD_DIR)/mirror.log; then $(RM) $(BLD_DIR)/mirror.log; fi
	@ if test -f $(LIBRARY); then $(RM) $(LIBRARY); fi
	@ if test -d $(BLD_SRC_DIR); then $(RM) -rf $(BLD_SRC_DIR); fi
	@ if test -d $(INC_DIR); \
		then \
			if test -d $(INC_DIR)/CVS; then \
				cd $(INC_DIR); $(PERL) $(MACRO_DIR)/rm.pl "*.h"; \
			else \
				$(RM) -rf $(INC_DIR); \
			fi; \
		fi
	@ if test -d $(OBJ_DIR); \
		then \
			if test -d $(OBJ_DIR)/CVS; then \
				cd $(OBJ_DIR); $(PERL) $(MACRO_DIR)/rm.pl "*.o"; \
			else \
				$(RM) -rf $(OBJ_DIR); \
			fi; \
		fi
	@ if test -d $(LIB_DIR); \
		then \
			if test -d $(LIB_DIR)/CVS; then \
				cd $(LIB_DIR); $(PERL) $(MACRO_DIR)/rm.pl "*.a"; \
			else \
				$(RM) -rf $(LIB_DIR); \
			fi; \
		fi
	@ cd $(MACRO_DIR)/cxx_repository; $(PERL) $(MACRO_DIR)/rm.pl "*.o" "*.DB"

# set-up directories
setup:
	@ if [ ! -d $(INC_DIR) ]; then mkdir $(INC_DIR); fi
	@ if [ ! -d $(BLD_DIR) ]; then mkdir $(BLD_DIR); fi
	@ if [ ! -d $(OBJ_DIR) ]; then mkdir $(OBJ_DIR); fi
	@ if [ ! -d $(LIB_DIR) ]; then mkdir $(LIB_DIR); fi
	@ if [ ! -f $(LIB_DIR)/lib.junk ]; then echo "# touch" > $(LIB_DIR)/lib.junk; fi
	@ $(ECHO) " mirroring $(SRC_DIR) to $(BLD_SRC_DIR)"
	$(PERL) $(MACRO_DIR)/MirrorTree.pl $(SRC_DIR) $(BLD_SRC_DIR) "$(LN)" > $(BLD_DIR)/mirror.log

# build object file list
object_list: FORCE
	@ $(PRINTF) "collecting list of object files\n"
	@ $(PRINTF) "OBJ = " > $(BLD_DIR)/object_list
	cd $(BLD_SRC_DIR); \
	$(MAKE) library \
	"ARCH = $(ARCH)" \
	"HOME_DIR = $(HOME_DIR)" \
	"MACRO_DIR = $(MACRO_DIR)" \
	"LIBRARY = $(BLD_DIR)/object_list" \
	"SRC_DIR = $(BLD_SRC_DIR)" \
	"LIB_DIR = $(LIB_DIR)" \
	"CURR_DIR = $(BLD_SRC_DIR)"
	@ $(PRINTF) "\n" >> $(BLD_DIR)/object_list

# set symbolic links to all header files
headers: $(MAKE_HEADERS_XTRAS) $(MOD_MAKE_HEADERS_XTRAS)
	-@ cd $(INC_DIR); $(PERL) $(MACRO_DIR)/rm.pl "*.h"
	@ $(PRINTF) "cd $(BLD_SRC_DIR)\n"
	cd $(BLD_SRC_DIR); \
	$(MAKE) $(MAKE_OPTS) headers \
	"ARCH = $(ARCH)" \
	"MACRO_DIR = $(MACRO_DIR)" \
	"INC_DIR = $(INC_DIR)" \
	"SRC_DIR = $(BLD_SRC_DIR)" \
	"CURR_DIR = $(BLD_SRC_DIR)"

# initialize dependency files
depend_init: $(MAKE_DEPEND_INIT_XTRAS) $(MOD_MAKE_DEPEND_INIT_XTRAS)
	@ $(PRINTF) "cd $(BLD_SRC_DIR)\n";
	cd $(BLD_SRC_DIR); \
	$(MAKE) $(MAKE_OPTS) depend_init \
	"ARCH = $(ARCH)" \
	"SRC_DIR = $(BLD_SRC_DIR)" \
	"INC_DIR = $(INC_DIR)" \
	"MACRO_DIR = $(MACRO_DIR)" \
	"OPT_MAKEDEPENDFLAGS = $(OPT_MAKEDEPENDFLAGS)" \
	"MOD_MAKEDEPENDFLAGS = $(MOD_MAKEDEPENDFLAGS)" \
	"CURR_DIR = $(BLD_SRC_DIR)"

# build objects
objects: $(MAKE_BUILD_XTRAS) $(MOD_MAKE_BUILD_XTRAS)
	@ $(PRINTF) "cd $(BLD_SRC_DIR)\n";
	cd $(BLD_SRC_DIR); \
	$(MAKE) $(MAKE_OPTS) objects \
	"ARCH = $(ARCH)" \
	"MACRO_DIR = $(MACRO_DIR)" \
	"INC_DIR = $(INC_DIR)" \
	"SRC_DIR = $(BLD_SRC_DIR)" \
	"BLD_DIR = $(BLD_DIR)" \
	"OBJ_DIR = $(OBJ_DIR)" \
	"LIB_DIR = $(LIB_DIR)" \
	"PCH = $(PCH)" \
	"OPT_CFLAGS = $(OPT_CFLAGS)" \
	"MOD_CFLAGS_C = $(MOD_CFLAGS_C)" \
	"MOD_CFLAGS_CC = $(MOD_CFLAGS_CC)" \
	"MOD_CFLAGS_F = $(MOD_CFLAGS_F)" \
	"MOD_LFLAGS = $(MOD_LFLAGS)" \
	"OPT_MAKEDEPENDFLAGS = $(OPT_MAKEDEPENDFLAGS)" \
	"MOD_MAKEDEPENDFLAGS = $(MOD_MAKEDEPENDFLAGS)" \
	"DEPEND = $(DEPEND_FILE)" \
	"CURR_DIR = $(BLD_SRC_DIR)"

# dummy target
nothing:
	-@date

# dummy target that is always out of date
FORCE:
