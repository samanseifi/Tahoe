/* $Id: SpherePointsT.h,v 1.5 2009/05/21 22:30:27 tdnguye Exp $ */
/* created: paklein (10/31/1997)                                          */
/* Base class for spherical point generators.                             */

#ifndef _SPHERE_PTS_T_H_
#define _SPHERE_PTS_T_H_

/* direct members */
#include "dArray2DT.h"
#include "dMatrixT.h"
#include "dArrayT.h"


namespace Tahoe {
//class C1FunctionT;

class SpherePointsT
{
public:

	/* point generator codes (ie. the derived types) */
	enum GeneratorT {kLatLong = 0,
                 kIcosahedral = 1,
                         kFCC = 2}; // FCC lattice in shells

	/** constructor */
	SpherePointsT(void);

	/** destructor */
	virtual ~SpherePointsT(void);

	/* generate sphere points:
	 *
	 *   phi   = angle about z from x
	 *   theta = angle about x from z
	 *
	 * The final orientation is generated by applied the
	 * phi and theta rotations in succession about the local
	 * axes */
	virtual const dArray2DT& SpherePoints(double phi, double theta) = 0;

	/* list of jacobian determinants */
	const dArrayT& Jacobians(void) const;

//	virtual const dArrayT& Jacobians(const double theta, const double phi, const C1FunctionT* func_theta, const C1FunctionT* func_phi);
	
protected:

	/* orient points with given rotations (in degrees) */
	void TransformPoints(double phi, double theta);
	
protected:

	/* point table */
	dArray2DT	fPoints;
	
	/* jacobians */
	dArrayT		fJacobians;

private:

	/* tranformation tensor */
	dMatrixT	fQ;
			
};

} // namespace Tahoe 
#endif /* _SPHERE_PTS_T_H_ */
