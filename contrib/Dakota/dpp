#!/usr/bin/perl -w

# command line arguments 
if      (scalar(@ARGV) == 3) {
	($dakota, $source, $outfile) = @ARGV;
}
elsif (scalar(@ARGV) == 4) {
	($dakota, $source, $outfile, $default) = @ARGV;
	open (IN, "$default") || die "could not open $dakota";
	read_parameters();
	close(IN);
}
else {
	print STDOUT "\tusage: dpp [DAKOTA parameter file] [template file] [output file name] <default file>\n";
	print STDOUT "\tif  1.0 VAR appears in DAKOTA parameter file] then:\n";
	print STDOUT "\t\"VAR\" is replaced by \"1.0\"\n";
	print STDOUT "\t\[VAR\] is replaced by 1.0\n";
	print STDOUT "\t\{2.0*[VAR\]\} is replaced by 2.0\n";
	exit;
}

# read number of parameters
open (IN, "$dakota") || die "could not open $dakota";
read_parameters();
close(IN);

# print them out
foreach $key (keys %varlist) {
	print STDOUT "$key = $varlist{$key}\n";
}
print "\n";

# echo file making variable subsitutions
open(IN, "$source") || die "could not open input file $source";
open(OUT, ">$outfile") || die "could not open output file $outfile";
while (defined($line = <IN>)) {
	chomp($line);
	# variable substitution
	foreach $key (keys %varlist) {
		$line =~ s/["']$key["']/"$varlist{$key}"/g;
	}
	foreach $key (keys %varlist) {
		$line =~ s/\[$key\]/$varlist{$key}/g;
	}
	# substitution & arithmatic 
 	if ($line =~ /{/) {
 		@parts = split /{/, $line;
		$parsedline = $parts[0];
		for (my $i = 1; $i < scalar(@parts) ; $i++) {
 			($exp,$end)   = split /}/, $parts[$i];
 			print "exp: $exp -> ";
			foreach $key (keys %varlist) {
				$exp =~ s/$key/$varlist{$key}/g;
      }
 			$nexp = eval($exp);
 			print " $nexp ";
			$parsedline = $parsedline.$nexp.$end;
		}
		print "\n";
		$line = $parsedline;
 	}
	
	# echo
	print OUT "$line\n";
}
close(OUT);
close(IN);

#-------------------------------------------------------------------------

sub read_parameters {
	# read number of parameters
	defined($line = <IN>)|| die "file error";
	chomp($line);
	$num_vars = $line;
	$num_vars =~ s/[\s]*([0-9]+)[\s]+.*/$1/;
	print STDOUT "found $num_vars variables\n";

	# insert parameters into a hash
	for ($i = 0; $i < $num_vars; $i++) {
		defined($line = <IN>) || die "file error";
		chomp($line);
		$line =~ s/^\s+//; # drop leading white space
		($val, $var) = split(/[\s]+/, $line);
		$varlist{$var} = $val;
	}
}
