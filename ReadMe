# $Id: ReadMe,v 1.5 2006/11/20 16:18:55 r-jones Exp $

0. QUICKSTART
Run:
> tahoe-manager build

...answer the configuration questions, and then sit back and wait for the build
to finish. If successful, you'll end up with an executables in tahoe-install/bin.

1. GENERAL
The "tahoe-manager" is a PERL script (i.e. you'll need an installation of perl,
type "which perl" to see if it is in your PATH) that manages nearly all the 
procedures necessary to build the analysis code tahoe and its supporting
libraries. This includes downloading/updating the working copy of the code and 
optional modules from the CVS repository, changing project build options,
building the code, and testing the code against benchmark results.

If you type
> tahoe-manager
...you'll get a usage splash :

usage: tahoe-manager [list options]
       build   : builds modules (calls init if needed)
       config  : change build options
       update  : updates or checks out modules
   selfupdate  : updates this script
       init    : creates makefiles and initializes modules
       clean   : cleans modules
       test    : runs regression tests

The first time you run the script in a freshly checked out tahoe-install module, 
the script will walk you through the configuration (to create the .tahoe_config file). 
Once configuration is complete, the script will execute whatever options have been 
passed in. You'll also need to know a bit about the compilers on your system since
you'll have to chose a set of build rules called a "macro" to compile the code with.
Lastly, you'll be able to choose all the additional libraries (packaged in cvs "modules") 
that you might need to enhance the basic version of "tahoe" e.g. you can add "spooles"
to increase the number of solvers that are available. 

The script should not require any tweaks to operate properly. If you encounter any
problems, please post a report on the tahoe bulletin board:
https://tahoe.ca.sandia.gov/public/forums/

2. ADVANCED
There are a number of modifications you can make to the basic behavior of the 
script. First, take a look at ".tahoe_config" e.g.

# TAHOE_LOGIN
rjones

# TAHOE_SF_LOGIN
rjones

# CONNECTION
cvs

# PROXY
NONE

# ARCHITECTURE
GNU.linux

# USE_DEFAULT
true

# MODULES
macros expat toolbox tahoe spooles CBLAS f2c development

# VERBOSE
false

# TAHOE_HOME
/Users/rjones/Code/tahoe-install

# EOF

... you can edit any of these field to adjust the local defaults. For instance
you can change the lines above to read 

# VERBOSE
true

to get detailed information about the build process. Also you could change

# USE_DEFAULT
true

to allow for different macros to be used by different modules.

Also the script will pick up various environmental variables:

ACCESS  = [location of the ExodusII system libraries]
TAHOE_HOME = [location of your installation of tahoe]
TAHOE_ARCH = [which macro to use]
TAHOE_CONNECT = [which type of connection to use: "http" || "cvs"]
CVS_RSH = [cvs connection type, should be "ssh" if not using an anonymous connection]
TAHOE_BUILD = [if this is "default" only the core modules will be built]

... none of these variables are required, but the can speed up initial
configuration if they are placing in a shell start-up script like ".cshrc".
The "PATH" and "USER" environmental variables are also used.


3. DOCUMENTATION
Also, the file "tahoe.doxygen" can create source code documentation via the 
program "doxygen":
$> doxygen tahoe.doxygen
will create an "html" subdirectory. Point your browser at 
"<TAHOE_HOME>/html/index.html"
and enjoy!
